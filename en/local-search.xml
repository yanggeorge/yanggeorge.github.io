<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>How to Better Print Syntax Tree Structures</title>
    <link href="/en/2024/07/18/2024-7-18-slang-ast-hier-tree/"/>
    <url>/en/2024/07/18/2024-7-18-slang-ast-hier-tree/</url>
    
    <content type="html"><![CDATA[<h2 id="What-is-a-Syntax-Tree"><a href="#What-is-a-Syntax-Tree" class="headerlink" title="What is a Syntax Tree?"></a>What is a Syntax Tree?</h2><p>A Syntax Tree is a tree-like data structure used to represent the syntactic structure of source code. Each node represents a syntactic construct occurring in the source code. Syntax trees are widely used in compilers and interpreters to help analyze and process the source code of programming languages.</p><span id="more"></span><p>Syntax trees can be further divided into Concrete Syntax Trees (<strong>C</strong>oncrete <strong>S</strong>yntax <strong>T</strong>ree) and Abstract Syntax Trees (<strong>A</strong>bstract <strong>S</strong>yntax <strong>T</strong>ree). The front end of a compiler typically generates a CST based on BNF grammar and then constructs an AST based on semantics.</p><p>To facilitate the use of syntax trees, the Visitor design pattern is usually supported. This allows a custom Visitor to traverse node types of interest.</p><p><strong>This raises a question: with so many node types, how can we intuitively visualize this tree structure, especially in C++, which does not support reflection and thus cannot debug to inspect types?</strong></p><p>Below are some attempts the author made while developing Lint rules based on the <a href="https://sv-lang.com/">slang</a> project.</p><p>Slang is a Modern C++ project that employs many new features from C++17 and C++20.</p><blockquote><p>Slang is a software library that provides various components for lexing, parsing, type checking, and elaborating SystemVerilog code. It comes with an executable tool that can compile and lint any SystemVerilog project, but it is also intended to be usable as a front end for synthesis tools, simulators, linters, code editors, and refactoring tools.</p><p>Slang is the fastest and most compliant SystemVerilog frontend.</p></blockquote><p>Before addressing this issue, it’s necessary to provide a brief introduction to <code>SystemVerilog</code>. Then, the syntax tree serialized in JSON format will be presented, followed by the author’s solution for comparison.</p><h2 id="Introduction-to-SystemVerilog"><a href="#Introduction-to-SystemVerilog" class="headerlink" title="Introduction to SystemVerilog"></a>Introduction to SystemVerilog</h2><p><code>SystemVerilog</code> is a hardware description and verification language (HDVL) that extends the <code>Verilog</code> hardware description language. It combines the features of both hardware description languages (HDL) and hardware verification languages (HVL), aiming to provide a more powerful and flexible tool for designing and verifying digital systems. SystemVerilog was developed by the Accellera standards organization and has been standardized by the IEEE Standards Association as IEEE 1800.</p><h3 id="Main-Features-of-SystemVerilog"><a href="#Main-Features-of-SystemVerilog" class="headerlink" title="Main Features of SystemVerilog"></a>Main Features of SystemVerilog</h3><ol><li><strong>Synthesis and Simulation</strong>: Supports design synthesis and simulation, allowing the description of hardware circuits and verification of their behavior.</li><li><strong>Object-Oriented Programming</strong>: Introduces object-oriented programming concepts such as classes, inheritance, and polymorphism for developing more complex testbenches.</li><li><strong>Advanced Verification Features</strong>: Includes many advanced verification features like assertions, constraint randomization, and coverage.</li><li><strong>Interfaces and Modularity</strong>: Supports interface and modular programming, promoting the reusability and modularity of designs.</li><li><strong>Parallel Processing</strong>: Capable of parallel processing to describe parallel hardware behavior.</li><li><strong>Combinational and Sequential Logic</strong>: Supports the modeling of both combinational and sequential logic.</li></ol><h3 id="Basic-Constructs-of-SystemVerilog"><a href="#Basic-Constructs-of-SystemVerilog" class="headerlink" title="Basic Constructs of SystemVerilog"></a>Basic Constructs of SystemVerilog</h3><h4 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h4><p>A module is the basic construct in <code>SystemVerilog</code>, used to define the structure and behavior of a circuit. For example:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> adder (<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] b,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] sum<br>);<br>    <span class="hljs-keyword">assign</span> sum = a + b;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h4><p>An interface is used to define the communication signals between modules. For example:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">interface</span> simple_bus (<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> clk,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> reset<br>);<br>    <span class="hljs-keyword">logic</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data;<br>    <span class="hljs-keyword">logic</span> valid;<br><span class="hljs-keyword">endinterface</span><br></code></pre></td></tr></table></figure><h4 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h4><p>A class is used for object-oriented programming in the verification environment. For example:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> Packet;<br>    <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] addr;<br>    <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> display();<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;Address: %0h, Data: %0h&quot;</span>, addr, data);<br>    <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><h3 id="Applications-of-SystemVerilog"><a href="#Applications-of-SystemVerilog" class="headerlink" title="Applications of SystemVerilog"></a>Applications of SystemVerilog</h3><ol><li><strong>Hardware Design</strong>: Used to describe the structure and behavior of digital circuits, which can be synthesized into actual hardware circuits.</li><li><strong>Hardware Verification</strong>: Provides rich verification features for validating the correctness and performance of digital designs, including functional and formal verification.</li><li><strong>Testbench Development</strong>: Can be used to develop complex testbenches for comprehensive hardware design verification.</li></ol><h3 id="Advantages-of-SystemVerilog"><a href="#Advantages-of-SystemVerilog" class="headerlink" title="Advantages of SystemVerilog"></a>Advantages of SystemVerilog</h3><ol><li><strong>Enhanced Expressiveness</strong>: Compared to Verilog, SystemVerilog offers more powerful syntax and semantics for more efficient description of complex hardware and verification environments.</li><li><strong>Efficient Verification Methods</strong>: Introduces advanced verification technologies such as constraint randomization, coverage-driven verification, and assertions, significantly improving verification efficiency.</li><li><strong>Object-Oriented Programming</strong>: Supports object-oriented programming, making verification code more structured and maintainable.</li></ol><p>Overall, <code>SystemVerilog</code> is a powerful and flexible hardware description and verification language widely used in modern digital circuit design and verification.</p><h2 id="JSON-Format-AST-Provided-by-slang"><a href="#JSON-Format-AST-Provided-by-slang" class="headerlink" title="JSON Format AST Provided by slang"></a>JSON Format AST Provided by slang</h2><p>The slang project offers a command-line tool and provides the <code>--ast-json</code> option to serialize the AST into JSON format. Let’s take this adder module as an example:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> adder (<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] b,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] sum<br>);<br>    <span class="hljs-keyword">assign</span> sum = a + b;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>The serialized JSON structure is as follows:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;design&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$root&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Root&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025570624</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;members&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CompilationUnit&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025963792</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;adder&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Instance&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025964560</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;adder&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;InstanceBody&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025964184</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;members&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Port&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025964704</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;direction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;In&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;internalSymbol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2199025964880 a&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Variable&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025964880</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;lifetime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Static&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;b&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Port&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025965256</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;direction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;In&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;internalSymbol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2199025965432 b&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;b&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Variable&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025965432</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;lifetime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Static&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sum&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Port&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025965808</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;direction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Out&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;internalSymbol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2199025965984 sum&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sum&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Variable&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025965984</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;lifetime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Static&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ContinuousAssign&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025966384</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;assignment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Assignment&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;left&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                  <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;NamedValue&quot;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;symbol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2199025965984 sum&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;right&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                  <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BinaryOp&quot;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;op&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Add&quot;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;left&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;NamedValue&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;symbol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2199025964880 a&quot;</span><br>                  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;right&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;NamedValue&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;symbol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2199025965432 b&quot;</span><br>                  <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isNonBlocking&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>              <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;definition&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2199025746816 adder&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;connections&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">]</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;definitions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;adder&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Definition&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025746816</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defaultNetType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2199025567936 wire&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;definitionKind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Module&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defaultLifetime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Static&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;unconnectedDrive&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;None&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span>        <br></code></pre></td></tr></table></figure><p>At first glance, this JSON format might seem too long because a node can have many attributes. Additionally, the indentation does not make the parent-child relationships clear.</p><h2 id="Inspiration-from-the-tree-Command"><a href="#Inspiration-from-the-tree-Command" class="headerlink" title="Inspiration from the tree Command"></a>Inspiration from the tree Command</h2><p>Tree structures are two-dimensional and difficult to display. However, the tree command tool prints tree structures very clearly.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tree .</span><br>.<br>├── dir1<br>│    └── a.txt<br>└── dir2<br>     ├── b.txt<br>     └── c.txt<br></code></pre></td></tr></table></figure><p>This display method clearly shows the parent-child relationships, making it easy to see which files are contained within each directory.</p><p>This specific hierarchical tree is known as a directory tree.</p><h2 id="Solution-Display"><a href="#Solution-Display" class="headerlink" title="Solution Display"></a>Solution Display</h2><p>Using the same SystemVerilog code:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> adder (<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] b,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] sum<br>);<br>    <span class="hljs-keyword">assign</span> sum = a + b;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="Optimized-AST-Display"><a href="#Optimized-AST-Display" class="headerlink" title="Optimized AST Display"></a>Optimized AST Display</h3><p>Let’s display the AST using the directory tree method:</p><p><img src="/en/./images/2024-adder-ast.jpg" alt="adder-ast"></p><p>As you can see, each line is a key-value pair separated by a colon. Additionally, term colors are used for differentiation.</p><p>The green key represents the class type of the node, and the value part represents the attribute information of the node, separated by spaces.</p><p>This allows the AST to be displayed in a compact manner.</p><h3 id="Optimized-CST-Display"><a href="#Optimized-CST-Display" class="headerlink" title="Optimized CST Display"></a>Optimized CST Display</h3><p>Slang does not provide a command-line method to display the CST, but users may need to access the CST directly for tasks such as formatting SystemVerilog code.</p><p>Below is the CST structure of <code>adder</code> displayed in a similar way. You can see that the value of the leaf node is the original text of the node.</p><p><img src="/en/./images/2024-adder-cst.png" alt="adder-cst"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>By referring to the directory tree display method and combining key-value pairs with term colors, a more compact and clear syntax tree display method is provided. This method makes it easier for users to develop based on AST and CST.</p><p>However, the disadvantages of this method are also clear. It is not suitable for text-based storage and is not ideal for displaying large codes. Of course, JSON format is also not suitable (but both can be constrained by hierarchical paths, displaying only parts of the syntax tree structure).</p>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>AST</tag>
      
      <tag>tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
