<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[leetcode 224 &amp; 227]Basic Calculator I &amp; II 原创解法</title>
    <url>/2016/10/24/leetcode-224/</url>
    <content><![CDATA[<h2 id="题目概述"><a href="#题目概述" class="headerlink" title=" 题目概述"></a><a name="hh0"></a> 题目概述</h2><p><a href="https://leetcode.com/problems/basic-calculator/">224原题链接</a></p>
<p><a href="https://leetcode.com/problems/basic-calculator-ii/">227原题链接</a></p>
<pre><code class="hljs">Implement a basic calculator to evaluate a simple expression string.
</code></pre>
<p>这两道题可以使用一种通用的解法来解。所以就放在一起了。</p>
<pre><code class="hljs">&quot;1 + 1&quot; = 2
&quot; 2-1 + 2 &quot; = 3
&quot;(1+(4+5+2)-3)+(6+8)&quot; = 23

&quot;3+2*2&quot; = 7
&quot; 3/2 &quot; = 1
&quot; 3+5 / 2 &quot; = 5
</code></pre>
<span id="more"></span>

<h2 id="波兰计数法"><a href="#波兰计数法" class="headerlink" title=" 波兰计数法"></a><a name="hh1"></a> 波兰计数法</h2><p><code>波兰计数法</code>是一种非常巧妙的方法，只使用一个栈结构就能计算表达式。
但是呢，我们常用的表达式是一种<code>infix</code>表达式，而<code>波兰计数法</code>是一种
<code>postfix</code>表达式。所以需要一种把<code>infix expression</code>转换成<code>postfix expression</code>
。<a href="https://en.wikipedia.org/wiki/Shunting-yard_algorithm">转换方法</a></p>
<h2 id="抽象语法树"><a href="#抽象语法树" class="headerlink" title=" 抽象语法树"></a><a name="hh2"></a> 抽象语法树</h2><p>我还是想用抽象语法树的形式来解。也就是说先把表达式转换成一棵二叉树。
然后再计算这棵树。思路很简单，所以呢，为了直观的看到树状结构。
我发现<code>Python</code>下有一个不错的包<code>binarytree</code>，这个包可以打印树状图。
我们先来看看打印的结果吧。是不是很不错。</p>
<pre><code class="hljs">0-(1+2)*3*(4-3/5/5)+1+1

                                __+  
                               /   \ 
    __________________________+     1
   /                           \     
  -__________                   1    
 /           \                       
0           __*__                    
           /     \                   
        __*       -______            
       /   \     /       \           
      +     3   4       __/          
     / \               /   \         
    1   2             /     5        
                     / \             
                    3   5  
</code></pre>
<h2 id="初步解法"><a href="#初步解法" class="headerlink" title=" 初步解法"></a><a name="hh3"></a> 初步解法</h2><p>根据以上的思路，我们首先定义一个<code>Tree</code>，继承自<code>binarytree</code>的<code>Node</code>。
然后就先对字符串处理成<code>token</code>流，其实这题没这个要求。简单的去掉
空格就行了。也没有复杂的数字。下面给出了生成<code>AST</code>的初步代码。
算是递归下降法吧。
然后再计算树的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python2</span><br><span class="hljs-keyword">from</span> binarytree <span class="hljs-keyword">import</span> Node<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-title class_ inherited__">Node</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(TreeNode, <span class="hljs-variable language_">self</span>).__init__(value)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">compute</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root:<br>            <span class="hljs-keyword">if</span> root.left == <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> root.right == <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(root.value)<br>            <span class="hljs-keyword">else</span>:<br><br>                left = <span class="hljs-variable language_">self</span>.compute(root.left)<br>                right = <span class="hljs-variable language_">self</span>.compute(root.right)<br>                result = <span class="hljs-literal">None</span><br>                char = root.value<br>                <span class="hljs-keyword">if</span> char == <span class="hljs-string">&quot;+&quot;</span>:<br>                    result = left + right<br>                <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&quot;-&quot;</span>:<br>                    result = left - right<br>                <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&quot;*&quot;</span>:<br>                    result = left * right<br>                <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&quot;/&quot;</span>:<br>                    result = left / right<br><br>                <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, s</span>):<br>        <span class="hljs-variable language_">self</span>.s = <span class="hljs-variable language_">self</span>.tokenize(s + <span class="hljs-string">&quot;$&quot;</span>)<br>        <span class="hljs-comment"># print(self.s)</span><br>        <span class="hljs-variable language_">self</span>.i = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.n = <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.s)<br>        <span class="hljs-variable language_">self</span>.t = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.precedences = &#123;<span class="hljs-string">&#x27;+&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;-&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;*&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;/&#x27;</span>: <span class="hljs-number">1</span>&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tokenize</span>(<span class="hljs-params">self, s</span>):<br>        n = <span class="hljs-built_in">len</span>(s)<br>        result = []<br>        tmp = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n):<br>            char = s[i]<br>            <span class="hljs-keyword">if</span> char == <span class="hljs-string">&#x27; &#x27;</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;+-*/()$&#x27;</span>:<br>                <span class="hljs-keyword">if</span> tmp:<br>                    result.append(tmp)<br>                    tmp = <span class="hljs-string">&quot;&quot;</span><br>                result.append(char)<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> [<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)]:<br>                tmp += char<br><br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i] != <span class="hljs-string">&#x27;$&#x27;</span>:<br>            <span class="hljs-variable language_">self</span>.parse_expr()<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.t<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_expr</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            char = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>            t = <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;$)&#x27;</span>:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">elif</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br>                <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>                <span class="hljs-variable language_">self</span>.t = <span class="hljs-variable language_">self</span>.parse_expr()<br>                c = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>                <span class="hljs-keyword">if</span> c != <span class="hljs-string">&quot;)&quot;</span>:<br>                    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;&#123;0&#125; shoud be )&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-variable language_">self</span>.i))<br>                <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;+-&quot;</span>:<br>                lhs = <span class="hljs-variable language_">self</span>.t<br>                <span class="hljs-variable language_">self</span>.t = <span class="hljs-variable language_">self</span>.parse_binary_operator(lhs, <span class="hljs-variable language_">self</span>.precedences[char])<br>            <span class="hljs-keyword">elif</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;*/&quot;</span>:<br>                lhs = <span class="hljs-variable language_">self</span>.t<br>                <span class="hljs-variable language_">self</span>.t = <span class="hljs-variable language_">self</span>.parse_binary_operator(lhs, <span class="hljs-variable language_">self</span>.precedences[char])<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-variable language_">self</span>.t = <span class="hljs-variable language_">self</span>.parse_term()<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.t<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_term</span>(<span class="hljs-params">self</span>):<br>        c = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>        <span class="hljs-keyword">if</span> c == <span class="hljs-string">&quot;(&quot;</span>:<br>            <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>            t = <span class="hljs-variable language_">self</span>.parse_expr()<br>            <span class="hljs-comment"># print(t)</span><br>            c = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>            <span class="hljs-keyword">if</span> c != <span class="hljs-string">&quot;)&quot;</span>:<br>                <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;&#123;0&#125; shoud be )&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-variable language_">self</span>.i))<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">return</span> t<br>        <span class="hljs-keyword">else</span>:<br>            t = TreeNode(c)<br>            <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> t<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_binary_operator</span>(<span class="hljs-params">self, lhs, precedence</span>):<br>        c = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>        oper = TreeNode(c)<br>        <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>        oper.left = lhs<br>        rhs = <span class="hljs-variable language_">self</span>.parse_term()<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            lookahead = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>            <span class="hljs-keyword">if</span> lookahead <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;$)&quot;</span>:<br>                lookahead_precedence = <span class="hljs-variable language_">self</span>.precedences[lookahead]<br>                <span class="hljs-keyword">if</span> lookahead_precedence &gt; precedence:<br>                    rhs = <span class="hljs-variable language_">self</span>.parse_binary_operator(rhs, lookahead_precedence)<br>                <span class="hljs-keyword">else</span>:<br>                    oper.right = rhs<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                oper.right = rhs<br>                <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">return</span> oper<br><span class="hljs-comment">#测试</span><br>s = <span class="hljs-string">&quot;0-(1+2)*3*(4-3/5/5)+1+1&quot;</span><br><span class="hljs-built_in">print</span>(s)<br>t = Test(s).parse()<br><span class="hljs-built_in">print</span>(t)<br><span class="hljs-built_in">print</span>(t.compute(t))<br></code></pre></td></tr></table></figure>

<h2 id="栈调用过深了"><a href="#栈调用过深了" class="headerlink" title=" 栈调用过深了"></a><a name="hh4"></a> 栈调用过深了</h2><p>以上的解法中生成语法树的过程因为使用了多个递归，结果调用的栈过深，结果
出错了。因为
python默认的递归栈深度是10000。</p>
<pre><code class="hljs">RecursionError: maximum recursion depth exceeded while calling a Python object
</code></pre>
<p>怎么办呢，想办法把递归改成非递归吧。但是看了又看还是没有发现如何改，
因为存在两个函数相互调用的嵌套递归。不管怎样，先减少一个递归函数吧。
去掉了<code>parse_term</code>函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    并没有完全把递归改成stack方式。但是因为比Test少了一个parse_term所以减少了递归栈的深度，</span><br><span class="hljs-string">    从而侥幸没有栈溢出。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, s</span>):<br>        <span class="hljs-variable language_">self</span>.s = <span class="hljs-variable language_">self</span>.tokenize(s + <span class="hljs-string">&quot;$&quot;</span>)<br>        <span class="hljs-comment"># print(self.s)</span><br>        <span class="hljs-variable language_">self</span>.i = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.n = <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.s)<br>        <span class="hljs-variable language_">self</span>.t = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.precedences = &#123;<span class="hljs-string">&#x27;+&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;-&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;*&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;/&#x27;</span>: <span class="hljs-number">1</span>&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tokenize</span>(<span class="hljs-params">self, s</span>):<br>        n = <span class="hljs-built_in">len</span>(s)<br>        result = []<br>        tmp = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n):<br>            char = s[i]<br>            <span class="hljs-keyword">if</span> char == <span class="hljs-string">&#x27; &#x27;</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;+-*/()$&#x27;</span>:<br>                <span class="hljs-keyword">if</span> tmp:<br>                    result.append(tmp)<br>                    tmp = <span class="hljs-string">&quot;&quot;</span><br>                result.append(char)<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> [<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)]:<br>                tmp += char<br><br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.parse_expr()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_expr</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            char = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>            t = <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;$)&#x27;</span>:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">elif</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br>                <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>                <span class="hljs-variable language_">self</span>.t = <span class="hljs-variable language_">self</span>.parse_expr()<br>                c = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>                <span class="hljs-keyword">if</span> c != <span class="hljs-string">&quot;)&quot;</span>:<br>                    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;&#123;0&#125; shoud be )&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-variable language_">self</span>.i))<br>                <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;+-&quot;</span>:<br>                lhs = <span class="hljs-variable language_">self</span>.t<br>                <span class="hljs-variable language_">self</span>.t = <span class="hljs-variable language_">self</span>.parse_binary_operator(lhs, <span class="hljs-variable language_">self</span>.precedences[char])<br>            <span class="hljs-keyword">elif</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;*/&quot;</span>:<br>                lhs = <span class="hljs-variable language_">self</span>.t<br>                <span class="hljs-variable language_">self</span>.t = <span class="hljs-variable language_">self</span>.parse_binary_operator(lhs, <span class="hljs-variable language_">self</span>.precedences[char])<br>            <span class="hljs-keyword">else</span>:<br>                t = TreeNode(char)<br>                <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>                <span class="hljs-variable language_">self</span>.t = t<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.t<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_binary_operator</span>(<span class="hljs-params">self, lhs, precedence</span>):<br>        c = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>        oper = TreeNode(c)<br>        <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>        oper.left = lhs<br><br>        c = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>        rhs = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> c == <span class="hljs-string">&quot;(&quot;</span>:<br>            <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>            t = <span class="hljs-variable language_">self</span>.parse_expr()<br>            <span class="hljs-comment"># print(t)</span><br>            c = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>            <span class="hljs-keyword">if</span> c != <span class="hljs-string">&quot;)&quot;</span>:<br>                <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;&#123;0&#125; shoud be )&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-variable language_">self</span>.i))<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>                rhs = t<br>        <span class="hljs-keyword">else</span>:<br>            t = TreeNode(c)<br>            <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>            rhs = t<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            lookahead = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>            <span class="hljs-keyword">if</span> lookahead <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;$)&quot;</span>:<br>                lookahead_precedence = <span class="hljs-variable language_">self</span>.precedences[lookahead]<br>                <span class="hljs-keyword">if</span> lookahead_precedence &gt; precedence:<br>                    rhs = <span class="hljs-variable language_">self</span>.parse_binary_operator(rhs, lookahead_precedence)<br>                <span class="hljs-keyword">else</span>:<br>                    oper.right = rhs<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                oper.right = rhs<br>                <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">return</span> oper<br></code></pre></td></tr></table></figure>





<p>居然不出现栈溢出了。呵呵。<code>(其实还是存在这个问题，只是能够通过leetcode测试了)</code>
但是计算的过程<code>TreeNode::compute</code>还是出现了调用过深的错误<code>RecursionError</code>。
这个没关系啊，我们可以改成<code>非递归的栈模拟方式</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-title class_ inherited__">Node</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(TreeNode, <span class="hljs-variable language_">self</span>).__init__(value)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">compute</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root:<br>            <span class="hljs-keyword">if</span> root.left == <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> root.right == <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(root.value)<br>            <span class="hljs-keyword">else</span>:<br><br>                left = <span class="hljs-variable language_">self</span>.compute(root.left)<br>                right = <span class="hljs-variable language_">self</span>.compute(root.right)<br>                result = <span class="hljs-literal">None</span><br>                char = root.value<br>                <span class="hljs-keyword">if</span> char == <span class="hljs-string">&quot;+&quot;</span>:<br>                    result = left + right<br>                <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&quot;-&quot;</span>:<br>                    result = left - right<br>                <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&quot;*&quot;</span>:<br>                    result = left * right<br>                <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&quot;/&quot;</span>:<br>                    result = left / right<br><br>                <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">compute2</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-comment"># compute的非递归形式。</span><br>        q = []<br>        result = <span class="hljs-literal">None</span><br>        prog = <span class="hljs-number">1</span><br>        left = <span class="hljs-literal">None</span><br>        right = <span class="hljs-literal">None</span><br>        tup = (prog, root, left, right)<br>        q.append(tup)<br>        <span class="hljs-keyword">while</span> q:<br>            prog, root, left, right = q.pop()<br>            <span class="hljs-keyword">if</span> prog == <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span> root.left == <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> root.right == <span class="hljs-literal">None</span>:<br>                    result = <span class="hljs-built_in">int</span>(root.value)<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">else</span>:<br>                    prog = <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> prog == <span class="hljs-number">2</span>:<br>                tup = (prog + <span class="hljs-number">1</span>, root, left, right)<br>                q.append(tup)<br>                tup_new = (<span class="hljs-number">1</span>, root.left, left, right)<br>                q.append(tup_new)<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> prog == <span class="hljs-number">3</span>:<br>                left = result<br>                prog = <span class="hljs-number">4</span><br>            <span class="hljs-keyword">if</span> prog == <span class="hljs-number">4</span>:<br>                tup = (prog + <span class="hljs-number">1</span>, root, left, right)<br>                q.append(tup)<br>                tup_new = (<span class="hljs-number">1</span>, root.right, left, right)<br>                q.append(tup_new)<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> prog == <span class="hljs-number">5</span>:<br>                right = result<br>                char = root.value<br>                <span class="hljs-keyword">if</span> char == <span class="hljs-string">&quot;+&quot;</span>:<br>                    result = left + right<br>                <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&quot;-&quot;</span>:<br>                    result = left - right<br>                <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&quot;*&quot;</span>:<br>                    result = left * right<br>                <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&quot;/&quot;</span>:<br>                    result = left / right<br><br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure>

<h2 id="通过的代码"><a href="#通过的代码" class="headerlink" title=" 通过的代码"></a><a name="hh5"></a> 通过的代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> binarytree <span class="hljs-keyword">import</span> Node<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-title class_ inherited__">Node</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(TreeNode, <span class="hljs-variable language_">self</span>).__init__(value)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">compute</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root:<br>            <span class="hljs-keyword">if</span> root.left == <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> root.right == <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(root.value)<br>            <span class="hljs-keyword">else</span>:<br><br>                left = <span class="hljs-variable language_">self</span>.compute(root.left)<br>                right = <span class="hljs-variable language_">self</span>.compute(root.right)<br>                result = <span class="hljs-literal">None</span><br>                char = root.value<br>                <span class="hljs-keyword">if</span> char == <span class="hljs-string">&quot;+&quot;</span>:<br>                    result = left + right<br>                <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&quot;-&quot;</span>:<br>                    result = left - right<br>                <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&quot;*&quot;</span>:<br>                    result = left * right<br>                <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&quot;/&quot;</span>:<br>                    result = left / right<br><br>                <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">compute2</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-comment"># compute的非递归形式。</span><br>        q = []<br>        result = <span class="hljs-literal">None</span><br>        prog = <span class="hljs-number">1</span><br>        left = <span class="hljs-literal">None</span><br>        right = <span class="hljs-literal">None</span><br>        tup = (prog, root, left, right)<br>        q.append(tup)<br>        <span class="hljs-keyword">while</span> q:<br>            prog, root, left, right = q.pop()<br>            <span class="hljs-keyword">if</span> prog == <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span> root.left == <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> root.right == <span class="hljs-literal">None</span>:<br>                    result = <span class="hljs-built_in">int</span>(root.value)<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">else</span>:<br>                    prog = <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> prog == <span class="hljs-number">2</span>:<br>                tup = (prog + <span class="hljs-number">1</span>, root, left, right)<br>                q.append(tup)<br>                tup_new = (<span class="hljs-number">1</span>, root.left, left, right)<br>                q.append(tup_new)<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> prog == <span class="hljs-number">3</span>:<br>                left = result<br>                prog = <span class="hljs-number">4</span><br>            <span class="hljs-keyword">if</span> prog == <span class="hljs-number">4</span>:<br>                tup = (prog + <span class="hljs-number">1</span>, root, left, right)<br>                q.append(tup)<br>                tup_new = (<span class="hljs-number">1</span>, root.right, left, right)<br>                q.append(tup_new)<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> prog == <span class="hljs-number">5</span>:<br>                right = result<br>                char = root.value<br>                <span class="hljs-keyword">if</span> char == <span class="hljs-string">&quot;+&quot;</span>:<br>                    result = left + right<br>                <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&quot;-&quot;</span>:<br>                    result = left - right<br>                <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&quot;*&quot;</span>:<br>                    result = left * right<br>                <span class="hljs-keyword">elif</span> char == <span class="hljs-string">&quot;/&quot;</span>:<br>                    result = left / right<br><br>        <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    并没有完全把递归改成stack方式。但是因为比Test少了一个parse_term所以减少了递归栈的深度，</span><br><span class="hljs-string">    从而侥幸没有栈溢出。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, s</span>):<br>        <span class="hljs-variable language_">self</span>.s = <span class="hljs-variable language_">self</span>.tokenize(s + <span class="hljs-string">&quot;$&quot;</span>)<br>        <span class="hljs-comment"># print(self.s)</span><br>        <span class="hljs-variable language_">self</span>.i = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.n = <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.s)<br>        <span class="hljs-variable language_">self</span>.t = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.precedences = &#123;<span class="hljs-string">&#x27;+&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;-&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;*&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;/&#x27;</span>: <span class="hljs-number">1</span>&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tokenize</span>(<span class="hljs-params">self, s</span>):<br>        n = <span class="hljs-built_in">len</span>(s)<br>        result = []<br>        tmp = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n):<br>            char = s[i]<br>            <span class="hljs-keyword">if</span> char == <span class="hljs-string">&#x27; &#x27;</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;+-*/()$&#x27;</span>:<br>                <span class="hljs-keyword">if</span> tmp:<br>                    result.append(tmp)<br>                    tmp = <span class="hljs-string">&quot;&quot;</span><br>                result.append(char)<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> [<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)]:<br>                tmp += char<br><br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.parse_expr()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_expr</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            char = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>            t = <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;$)&#x27;</span>:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">elif</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br>                <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>                <span class="hljs-variable language_">self</span>.t = <span class="hljs-variable language_">self</span>.parse_expr()<br>                c = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>                <span class="hljs-keyword">if</span> c != <span class="hljs-string">&quot;)&quot;</span>:<br>                    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;&#123;0&#125; shoud be )&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-variable language_">self</span>.i))<br>                <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;+-&quot;</span>:<br>                lhs = <span class="hljs-variable language_">self</span>.t<br>                <span class="hljs-variable language_">self</span>.t = <span class="hljs-variable language_">self</span>.parse_binary_operator(lhs, <span class="hljs-variable language_">self</span>.precedences[char])<br>            <span class="hljs-keyword">elif</span> char <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;*/&quot;</span>:<br>                lhs = <span class="hljs-variable language_">self</span>.t<br>                <span class="hljs-variable language_">self</span>.t = <span class="hljs-variable language_">self</span>.parse_binary_operator(lhs, <span class="hljs-variable language_">self</span>.precedences[char])<br>            <span class="hljs-keyword">else</span>:<br>                t = TreeNode(char)<br>                <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>                <span class="hljs-variable language_">self</span>.t = t<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.t<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_binary_operator</span>(<span class="hljs-params">self, lhs, precedence</span>):<br>        c = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>        oper = TreeNode(c)<br>        <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>        oper.left = lhs<br><br>        c = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>        rhs = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> c == <span class="hljs-string">&quot;(&quot;</span>:<br>            <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>            t = <span class="hljs-variable language_">self</span>.parse_expr()<br>            <span class="hljs-comment"># print(t)</span><br>            c = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>            <span class="hljs-keyword">if</span> c != <span class="hljs-string">&quot;)&quot;</span>:<br>                <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;&#123;0&#125; shoud be )&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-variable language_">self</span>.i))<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>                rhs = t<br>        <span class="hljs-keyword">else</span>:<br>            t = TreeNode(c)<br>            <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>            rhs = t<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            lookahead = <span class="hljs-variable language_">self</span>.s[<span class="hljs-variable language_">self</span>.i]<br>            <span class="hljs-keyword">if</span> lookahead <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;$)&quot;</span>:<br>                lookahead_precedence = <span class="hljs-variable language_">self</span>.precedences[lookahead]<br>                <span class="hljs-keyword">if</span> lookahead_precedence &gt; precedence:<br>                    rhs = <span class="hljs-variable language_">self</span>.parse_binary_operator(rhs, lookahead_precedence)<br>                <span class="hljs-keyword">else</span>:<br>                    oper.right = rhs<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                oper.right = rhs<br>                <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">return</span> oper<br><br><span class="hljs-comment"># 测试</span><br>s = <span class="hljs-string">&quot;0-(1+2)*3*(4-3/5/5)+1+1&quot;</span><br><span class="hljs-built_in">print</span>(s)<br>t = Test2(s).parse()<br><span class="hljs-built_in">print</span>(t)<br><span class="hljs-built_in">print</span>(t.compute2(t))<br></code></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title=" 总结"></a><a name="hh6"></a> 总结</h2><p>虽然代码长了点，但是练习了一下如何生成一个<code>抽象语法树</code>。并且练习了
如何把一个调用自身的递归改成非递归。</p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>[leetcode 282]Expression Add Operators 原创解法</title>
    <url>/2016/12/19/leetcode-282/</url>
    <content><![CDATA[<h2 id="题目概述"><a href="#题目概述" class="headerlink" title=" 题目概述"></a><a name="hh0"></a> 题目概述</h2><p><a href="https://leetcode.com/problems/expression-add-operators/">原题链接</a></p>
<pre><code class="hljs">Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (
not unary) +, -, or * between the digits so they evaluate to the target value.

 &quot;123&quot;, 6 -&gt; [&quot;1+2+3&quot;, &quot;1*2*3&quot;] 
 &quot;232&quot;, 8 -&gt; [&quot;2*3+2&quot;, &quot;2+3*2&quot;]
 &quot;105&quot;, 5 -&gt; [&quot;1*0+5&quot;,&quot;10-5&quot;]
 &quot;00&quot;, 0 -&gt; [&quot;0+0&quot;, &quot;0-0&quot;, &quot;0*0&quot;]
 &quot;3456237490&quot;, 9191 -&gt; []
</code></pre>
<span id="more"></span>

<p>首先想到的解法就是遍历所有的组合，一一计算比较排除。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution1</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addOperators</span>(<span class="hljs-params">self, num, target</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type num: str</span><br><span class="hljs-string">        :type target: int</span><br><span class="hljs-string">        :rtype: List[str]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> num:<br>            result = []<br>            path = []<br>            n = <span class="hljs-built_in">len</span>(num)<br>            <span class="hljs-variable language_">self</span>.find(num, <span class="hljs-number">0</span>, n, target, path, result)<br>            <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">self, num, begin, end, target, path, result</span>):<br>        <span class="hljs-keyword">if</span> begin == end:<br>            s = <span class="hljs-string">&quot;&quot;</span>.join(path)<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.is_valid(path) <span class="hljs-keyword">and</span> <span class="hljs-built_in">eval</span>(s) == target:<br>                result.append(s)<br>        <span class="hljs-keyword">else</span>:<br>            path.append(num[begin])<br>            <span class="hljs-variable language_">self</span>.find(num, begin + <span class="hljs-number">1</span>, end, target, path, result)<br>            <span class="hljs-keyword">if</span> begin &lt; end - <span class="hljs-number">1</span>:<br>                path.append(<span class="hljs-string">&quot;+&quot;</span>)<br>                <span class="hljs-variable language_">self</span>.find(num, begin + <span class="hljs-number">1</span>, end, target, path, result)<br>                path.pop()<br>                path.append(<span class="hljs-string">&quot;-&quot;</span>)<br>                <span class="hljs-variable language_">self</span>.find(num, begin + <span class="hljs-number">1</span>, end, target, path, result)<br>                path.pop()<br>                path.append(<span class="hljs-string">&quot;*&quot;</span>)<br>                <span class="hljs-variable language_">self</span>.find(num, begin + <span class="hljs-number">1</span>, end, target, path, result)<br>                path.pop()<br>            path.pop()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid</span>(<span class="hljs-params">self, path</span>):<br>        flag = <span class="hljs-literal">True</span><br>        tmp = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> path:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;0123456789&quot;</span>:<br>                tmp += i<br>            <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;+-*&quot;</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(tmp) &gt;= <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> tmp[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>                    flag = <span class="hljs-literal">False</span><br>                    <span class="hljs-keyword">break</span><br>                tmp = <span class="hljs-string">&quot;&quot;</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(tmp) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> tmp[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;0&quot;</span>:<br>            flag = <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">return</span> flag<br></code></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title=" 分析"></a><a name="hh1"></a> 分析</h2><p>没有意外，这种解法超时了。</p>
<p>先不考虑eval()函数是否应该使用。
显然的情况是每一种字符组合至少遍历４遍。</p>
<ul>
<li>第一遍，得到组合</li>
<li>第二遍，join</li>
<li>第三遍，eval</li>
<li>第四遍，is_valid排除</li>
</ul>
<p>有办法使用动态规划么？把一个大问题替换成子问题进行求解。
比如先计算一个字符的所有的解。然后考虑增加到两个字符。在第一个字符的解
的基础上，考虑在两个字符中间插入加减乘。然后再在两个字符的解的基础上
再加入第三个字符。以此类推。这种方法，并没有减少计算量，其实还是遍历
所有的组合。然后得到最终的解。</p>
<p>那么最终我们可以选择的优化方向就是，使用深度优先遍历的时候，必须要在
遍历的同时，进行计算。这样当到达结束判断的时候，能够直接判断。</p>
<h2 id="简化问题"><a href="#简化问题" class="headerlink" title=" 简化问题"></a><a name="hh2"></a> 简化问题</h2><p>为了便于分析，首先简化问题。考虑如何计算字符串”123”，并且
只允许插入加号或者不插入加号。</p>
<p>为了把问题组合描述为一个树的形式。我们把两个数字直接连接起来组成
一个新的数字，看做一个操作，定义为<code>.</code>，那么<code>a.b = ab</code>，而数值计算
的公式为<code>a.b = a*10+b</code>，
而且这个符号的优先级高于加号和乘号。
这样可得如下树图。</p>
<p><img src="/images/tree.png" alt="tree pic"></p>
<p>根据这种假定，对于任意数字字符串<code>n1n2n3</code>，可以得到
的查找树如下图。</p>
<p><img src="/images/282_2.png" alt="tree2 pic"></p>
<h2 id="通过的解法"><a href="#通过的解法" class="headerlink" title=" 通过的解法"></a><a name="hh3"></a> 通过的解法</h2><p>这样我们有了解法２。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution2</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addOperators</span>(<span class="hljs-params">self, num, target</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        这个居然通过了。呵呵。不过是勉强通过的。</span><br><span class="hljs-string">        :type num: str</span><br><span class="hljs-string">        :type target: int</span><br><span class="hljs-string">        :rtype: List[str]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> num:<br>            end = <span class="hljs-built_in">len</span>(num)<br>            result = []<br>            path = [num[<span class="hljs-number">0</span>]]<br>            s1 = [<span class="hljs-built_in">int</span>(num[<span class="hljs-number">0</span>])]<br>            s2 = []<br>            begin = <span class="hljs-number">1</span><br>            <span class="hljs-variable language_">self</span>.find(begin, end, num, s1, s2, path, target, result)<br>            <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">self, begin, end, num, s1, s2, path, target, result</span>):<br>        <span class="hljs-keyword">if</span> begin == end:<br>            <span class="hljs-keyword">if</span> s1[<span class="hljs-number">0</span>] == target:<br>                result.append(<span class="hljs-string">&quot;&quot;</span>.join(path))<br>        <span class="hljs-keyword">else</span>:<br>            ops = [(<span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-number">10</span>), (<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-number">10</span>), (<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-number">20</span>), (<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-number">30</span>)]<br>            ps = [<span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;&quot;</span>]<br>            <span class="hljs-keyword">if</span> begin + <span class="hljs-number">1</span> &lt; end:<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                    s11 = s1[:]<br>                    s22 = s2[:]<br>                    path.append(ps[i] + num[begin])<br>                    <span class="hljs-variable language_">self</span>.helper(begin, end, num, ops[i], path, result, s11, s22, target)<br>                    path.pop()<br>            <span class="hljs-keyword">elif</span> begin + <span class="hljs-number">1</span> == end:<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                    s11 = s1[:]<br>                    s22 = s2[:]<br>                    path.append(ps[i] + num[begin])<br>                    <span class="hljs-variable language_">self</span>.helper2(begin, end, num, ops[i], path, result, s11, s22, target)<br>                    path.pop()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">helper</span>(<span class="hljs-params">self, begin, end, num, op, path, result, s1, s2, target</span>):<br>        <span class="hljs-comment"># 没有到达结尾</span><br>        <span class="hljs-keyword">if</span> s2:<br>            op_pre = s2[-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> op_pre[<span class="hljs-number">1</span>] &lt; op[<span class="hljs-number">1</span>]:<br>                <span class="hljs-comment"># 需要压栈延迟计算</span><br>                s1.append(<span class="hljs-built_in">int</span>(num[begin]))<br>                s2.append(op)<br>                <span class="hljs-variable language_">self</span>.find(begin + <span class="hljs-number">1</span>, end, num, s1, s2, path, target, result)<br><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 需要先把s2出栈计算完成，直到栈中的符号级别小于当前。</span><br>                is_valid = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">while</span> s2:<br>                    op_pre = s2[-<span class="hljs-number">1</span>]<br>                    <span class="hljs-keyword">if</span> op_pre[<span class="hljs-number">1</span>] &lt; op[<span class="hljs-number">1</span>]:<br>                        <span class="hljs-keyword">break</span><br>                    op_pre = s2.pop()<br>                    n2 = s1.pop()<br>                    n1 = s1[-<span class="hljs-number">1</span>]<br>                    <span class="hljs-keyword">if</span> op_pre[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;+&quot;</span>:<br>                        s1[-<span class="hljs-number">1</span>] = n1 + n2<br>                    <span class="hljs-keyword">elif</span> op_pre[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;-&quot;</span>:<br>                        s1[-<span class="hljs-number">1</span>] = n1 - n2<br>                    <span class="hljs-keyword">elif</span> op_pre[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;*&quot;</span>:<br>                        s1[-<span class="hljs-number">1</span>] = n1 * n2<br>                    <span class="hljs-keyword">elif</span> op_pre[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-keyword">and</span> n1 != <span class="hljs-number">0</span>:<br>                        s1[-<span class="hljs-number">1</span>] = n1 * <span class="hljs-number">10</span> + n2<br>                    <span class="hljs-keyword">else</span>:<br>                        is_valid = <span class="hljs-literal">False</span><br>                        <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">if</span> is_valid:<br>                    s1.append(<span class="hljs-built_in">int</span>(num[begin]))<br>                    s2.append(op)<br>                    <span class="hljs-variable language_">self</span>.find(begin + <span class="hljs-number">1</span>, end, num, s1, s2, path, target, result)<br>        <span class="hljs-keyword">else</span>:<br>            s1.append(<span class="hljs-built_in">int</span>(num[begin]))<br>            s2.append(op)<br>            <span class="hljs-variable language_">self</span>.find(begin + <span class="hljs-number">1</span>, end, num, s1, s2, path, target, result)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">helper2</span>(<span class="hljs-params">self, begin, end, num, op, path, result, s1, s2, target</span>):<br>        <span class="hljs-comment"># 到达结尾</span><br>        <span class="hljs-keyword">if</span> s2:<br>            op_pre = s2[-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> op_pre[<span class="hljs-number">1</span>] &lt; op[<span class="hljs-number">1</span>]:<br>                s1.append(<span class="hljs-built_in">int</span>(num[begin]))<br>                s2.append(op)<br><br>                is_valid = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">while</span> s2:<br>                    op_pre = s2.pop()<br>                    n2 = s1.pop()<br>                    n1 = s1[-<span class="hljs-number">1</span>]<br>                    <span class="hljs-keyword">if</span> op_pre[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;+&quot;</span>:<br>                        s1[-<span class="hljs-number">1</span>] = n1 + n2<br>                    <span class="hljs-keyword">elif</span> op_pre[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;-&quot;</span>:<br>                        s1[-<span class="hljs-number">1</span>] = n1 - n2<br>                    <span class="hljs-keyword">elif</span> op_pre[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;*&quot;</span>:<br>                        s1[-<span class="hljs-number">1</span>] = n1 * n2<br>                    <span class="hljs-keyword">elif</span> op_pre[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-keyword">and</span> n1 != <span class="hljs-number">0</span>:<br>                        s1[-<span class="hljs-number">1</span>] = n1 * <span class="hljs-number">10</span> + n2<br>                    <span class="hljs-keyword">else</span>:<br>                        is_valid = <span class="hljs-literal">False</span><br>                        <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">if</span> is_valid:<br>                    <span class="hljs-variable language_">self</span>.find(begin + <span class="hljs-number">1</span>, end, num, s1, s2, path, target, result)<br>            <span class="hljs-keyword">else</span>:<br>                is_valid = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">while</span> s2:<br>                    op_pre = s2[-<span class="hljs-number">1</span>]<br>                    <span class="hljs-keyword">if</span> op_pre[<span class="hljs-number">1</span>] &lt; op[<span class="hljs-number">1</span>]:<br>                        <span class="hljs-keyword">break</span><br>                    op_pre = s2.pop()<br>                    n2 = s1.pop()<br>                    n1 = s1[-<span class="hljs-number">1</span>]<br>                    <span class="hljs-keyword">if</span> op_pre[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;+&quot;</span>:<br>                        s1[-<span class="hljs-number">1</span>] = n1 + n2<br>                    <span class="hljs-keyword">elif</span> op_pre[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;-&quot;</span>:<br>                        s1[-<span class="hljs-number">1</span>] = n1 - n2<br>                    <span class="hljs-keyword">elif</span> op_pre[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;*&quot;</span>:<br>                        s1[-<span class="hljs-number">1</span>] = n1 * n2<br>                    <span class="hljs-keyword">elif</span> op_pre[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-keyword">and</span> n1 != <span class="hljs-number">0</span>:<br>                        s1[-<span class="hljs-number">1</span>] = n1 * <span class="hljs-number">10</span> + n2<br>                    <span class="hljs-keyword">else</span>:<br>                        is_valid = <span class="hljs-literal">False</span><br>                        <span class="hljs-keyword">break</span><br><br>                <span class="hljs-keyword">if</span> is_valid:<br>                    s2.append(op)<br>                    s1.append(<span class="hljs-built_in">int</span>(num[begin]))<br>                    <span class="hljs-keyword">while</span> s2:<br>                        op_pre = s2.pop()<br>                        n2 = s1.pop()<br>                        n1 = s1[-<span class="hljs-number">1</span>]<br>                        <span class="hljs-keyword">if</span> op_pre[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;+&quot;</span>:<br>                            s1[-<span class="hljs-number">1</span>] = n1 + n2<br>                        <span class="hljs-keyword">elif</span> op_pre[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;-&quot;</span>:<br>                            s1[-<span class="hljs-number">1</span>] = n1 - n2<br>                        <span class="hljs-keyword">elif</span> op_pre[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;*&quot;</span>:<br>                            s1[-<span class="hljs-number">1</span>] = n1 * n2<br>                        <span class="hljs-keyword">elif</span> op_pre[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-keyword">and</span> n1 != <span class="hljs-number">0</span>:<br>                            s1[-<span class="hljs-number">1</span>] = n1 * <span class="hljs-number">10</span> + n2<br>                        <span class="hljs-keyword">else</span>:<br>                            is_valid = <span class="hljs-literal">False</span><br>                            <span class="hljs-keyword">break</span><br><br>                    <span class="hljs-keyword">if</span> is_valid:<br>                        <span class="hljs-variable language_">self</span>.find(begin + <span class="hljs-number">1</span>, end, num, s1, s2, path, target, result)<br>        <span class="hljs-keyword">else</span>:<br>            n2 = <span class="hljs-built_in">int</span>(num[begin])<br>            n1 = s1[-<span class="hljs-number">1</span>]<br>            is_valid = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">if</span> op[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;+&quot;</span>:<br>                s1[-<span class="hljs-number">1</span>] = n1 + n2<br>            <span class="hljs-keyword">elif</span> op[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;-&quot;</span>:<br>                s1[-<span class="hljs-number">1</span>] = n1 - n2<br>            <span class="hljs-keyword">elif</span> op[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;*&quot;</span>:<br>                s1[-<span class="hljs-number">1</span>] = n1 * n2<br>            <span class="hljs-keyword">elif</span> op[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-keyword">and</span> n1 != <span class="hljs-number">0</span>:<br>                s1[-<span class="hljs-number">1</span>] = n1 * <span class="hljs-number">10</span> + n2<br>            <span class="hljs-keyword">else</span>:<br>                is_valid = <span class="hljs-literal">False</span><br><br>            <span class="hljs-keyword">if</span> is_valid:<br>                <span class="hljs-variable language_">self</span>.find(begin + <span class="hljs-number">1</span>, end, num, s1, s2, path, target, result)<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>R和Python里得到传入参数的变量名</title>
    <url>/2016/12/21/get-val-name-and-value/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title=" 问题"></a><a name="hh0"></a> 问题</h2><p>同事写R程序的时候，问我能不能获取一个变量的<code>name</code>，
我说这个好办啊，在R里可以这样写，用<code>quote()</code></p>
<pre><code class="hljs">&gt; a &lt;- 1
&gt; quote(a)
a
</code></pre>
<p>不过我把问题想简单了，他实际需要的是要获得传入
参数的<code>name</code>。例如定义一个函数<code>foo(c)</code>, 给它传入参数<code>a</code>，我能够在函数
内部知道传入参数的名字<code>a</code>。</p>
<span id="more"></span>

<p>我说可以增加一个参数嘛。把参数的名字直接传入。</p>
<pre><code class="hljs">&gt; foo(a,&quot;a&quot;)
</code></pre>
<p>但是我立刻意识到，这里存在重复，而写代码是提倡
<code>do not repeat yourself</code>的。而且对R这种可以随意获取环境变量的高级语言。
肯定有办法做到。</p>
<h2 id="python可以做到"><a href="#python可以做到" class="headerlink" title=" python可以做到"></a><a name="hh1"></a> python可以做到</h2><p>但是我还是先看看Python吧，毕竟最近用Python
多一些。Google关键字<code>python print variable name and value</code>,立刻可以获得
答案。这段代码的思想也很直白，就是对输入的obj在环境变量（名称,对象）键值对
中查找，返回名称。</p>
<pre><code class="hljs">def namestr(obj, namespace=globals()):
    return [name for name in namespace if namespace[name] is obj]
</code></pre>
<p>这样可以这样使用</p>
<pre><code class="hljs">&gt;&gt;&gt; a = 1
&gt;&gt;&gt; namestr(a)
[&#39;a&#39;]
</code></pre>
<h2 id="R也可以"><a href="#R也可以" class="headerlink" title=" R也可以"></a><a name="hh2"></a> R也可以</h2><p>那么R肯定也有办法做到。Google关键字
<code>r print variable name and value</code></p>
<pre><code class="hljs">myfunc &lt;- function(v1) &#123;
  deparse(substitute(v1))
&#125;

myfunc(foo)
[1] &quot;foo&quot;
</code></pre>
<p>真是很不错啊。把结果告诉了同事，他也很高兴。
但是<code>substitute()</code>和<code>deparse()</code>究竟是啥意思呢？在R里输入<code>?substitute</code>，可以
看到解释。</p>
<blockquote>
<p>substitute returns the parse tree for
the (unevaluated) expression expr, substituting any variables bound in env.</p>
</blockquote>
<p>够晦涩难懂的吧。不过仔细思考一下，也大概明白了。
在R里，从语法角度来说，所有都是<code>expr</code>，（这跟其他语言都是<code>statement</code>不同）
在R的函数里，可以对传入的未进行求值的<code>expr</code>进行操作。这点非常有趣。
而<code>deparse()</code>，比较好理解了至少在我看来，与<code>as.character()</code>的作用是一样的。</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>使用pandas.read_csv()读取csv文件</title>
    <url>/2016/12/22/pandas-read-csv/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title=" 问题"></a><a name="hh0"></a> 问题</h2><p>以下Python代码实现对<code>Excel</code>转存的csv文件进行读取。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>df = pd.read_csv(file_path + file_name + <span class="hljs-string">&quot;.csv&quot;</span>, encoding=<span class="hljs-string">&quot;gbk&quot;</span>)<br></code></pre></td></tr></table></figure>

<span id="more"></span>

<p>把<code>csv</code>文件入库是一件脏活。表面上看<code>csv</code>文件是一个非常简单的
逗号分隔符文件。但是其实不然。<code>Excel</code>转存的<code>csv</code>文件并不是标准的以逗号作为分隔符，
并且对所有的项用双引号包裹。现在我就遇到了从<code>Oracle</code>导出的<code>csv</code>文件，以上的代码
不起作用了。</p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title=" 解决问题"></a><a name="hh1"></a> 解决问题</h2><p>究竟怎么回事呢，找了一圈也没有发现使用<code>pandas.read_csv()</code>读取
这种标准csv文件的方法。还是先把问题简化一下，看看<code>Python</code>的<code>csv模块</code>是如何读取的吧。
简单的查找就可以找到答案。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br>csv.register_dialect(<br>    <span class="hljs-string">&#x27;mydialect&#x27;</span>,<br>    delimiter = <span class="hljs-string">&#x27;,&#x27;</span>,<br>    quotechar = <span class="hljs-string">&#x27;&quot;&#x27;</span>,<br>    doublequote = <span class="hljs-literal">True</span>,<br>    skipinitialspace = <span class="hljs-literal">True</span>,<br>    lineterminator = <span class="hljs-string">&#x27;\r\n&#x27;</span>,<br>    quoting = csv.QUOTE_MINIMAL)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n Output from an iterable object created from the csv file&#x27;</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;smallsample.csv&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> mycsvfile:<br>    thedata = csv.reader(mycsvfile, dialect=<span class="hljs-string">&#x27;mydialect&#x27;</span>)<br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> thedata:<br>        <span class="hljs-built_in">print</span>(row[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;\t \t&quot;</span>+row[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;\t \t&quot;</span>+row[<span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure>

<p>好的，<code>pandas.read_csv()</code>肯定是要调用csv模块的，那么看看
它的方法参数表吧。</p>
<blockquote>
<p>pandas.read_csv(filepath_or_buffer, sep&#x3D;’, ‘, delimiter&#x3D;None, header&#x3D;’infer’, names&#x3D;None, index_col&#x3D;None, usecols&#x3D;None, squeeze&#x3D;False, prefix&#x3D;None, mangle_dupe_cols&#x3D;True, dtype&#x3D;None, engine&#x3D;None, converters&#x3D;None, true_values&#x3D;None, false_values&#x3D;None, skipinitialspace&#x3D;False, skiprows&#x3D;None, nrows&#x3D;None, na_values&#x3D;None, keep_default_na&#x3D;True, na_filter&#x3D;True, verbose&#x3D;False, skip_blank_lines&#x3D;True, parse_dates&#x3D;False, infer_datetime_format&#x3D;False, keep_date_col&#x3D;False, date_parser&#x3D;None, dayfirst&#x3D;False, iterator&#x3D;False, chunksize&#x3D;None, compression&#x3D;’infer’, thousands&#x3D;None, decimal&#x3D;’.’, lineterminator&#x3D;None, quotechar&#x3D;’”‘, quoting&#x3D;0, escapechar&#x3D;None, comment&#x3D;None, encoding&#x3D;None, <strong>dialect&#x3D;None</strong>, tupleize_cols&#x3D;False, error_bad_lines&#x3D;True, warn_bad_lines&#x3D;True, skipfooter&#x3D;0, skip_footer&#x3D;0, doublequote&#x3D;True, delim_whitespace&#x3D;False, as_recarray&#x3D;False, compact_ints&#x3D;False, use_unsigned&#x3D;False, low_memory&#x3D;True, buffer_lines&#x3D;None, memory_map&#x3D;False, float_precision&#x3D;None)[source]¶</p>
</blockquote>
<p>真是够长的，还是搜一下有没有<code>dialect=</code>，呵呵，果然有。</p>
<blockquote>
<p>dialect : str or csv.Dialect instance, default None  <br/>
         If None defaults to Excel dialect. Ignored if sep longer than 1 char See csv.Dialect documentation for more details</p>
</blockquote>
<p>那么问题解决了。把第一段代码改改吧。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>df = pd.read_csv(file_path + file_name + <span class="hljs-string">&quot;.csv&quot;</span>, encoding=<span class="hljs-string">&quot;gbk&quot;</span>, dialect=<span class="hljs-string">&#x27;mydialect&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p>一运行还是报错，这是怎么回事呢，编码换成<code>utf8</code>，也不行。最后才发现
需要使用<code>gb18030</code>才行。即使使用<code>chardet</code>的编码探测模块，也不一定能探测出来，因为整个文档
只有少数字符是超出了<code>gbk</code>，所以不可能既高效又准确的解决这个问题。</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>[leetcode 200]Number of Islands 原创解法</title>
    <url>/2016/09/27/2016-9-27-leetcode-200/</url>
    <content><![CDATA[<h2 id="题目概述"><a href="#题目概述" class="headerlink" title=" 题目概述"></a><a name="hh0"></a> 题目概述</h2><p><a href="https://leetcode.com/problems/number-of-islands/">原题链接</a></p>
<pre><code class="hljs">Given a 2d grid map of &#39;1&#39;s (land) and &#39;0&#39;s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example 1:

11110
11010
11000
00000
Answer: 1

Example 2:

11000
11000
00100
00011
Answer: 3
</code></pre>
<span id="more"></span>

<h2 id="最终解法"><a href="#最终解法" class="headerlink" title=" 最终解法"></a><a name="hh1"></a> 最终解法</h2><p>解法的代码先贴出来了，解题思路后补啊。总体来说，就是一行一行的扫描。
是个不错的<code>在线算法</code>，也就是说如果数据量非常大也没关系，呵呵。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">numIslands</span>(<span class="hljs-params">self, grid</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        基本思路，一行一行的扫描。</span><br><span class="hljs-string">        :type grid: List[List[str]]</span><br><span class="hljs-string">        :rtype: int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;====&quot;</span>)<br>        n = <span class="hljs-built_in">len</span>(grid)<br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>        length = <span class="hljs-built_in">len</span>(grid[<span class="hljs-number">0</span>])<br>        h_pre = &#123;&#125;   <span class="hljs-comment"># key : 是 “i,j” 字符串。value =》 [accumulator] ，一个list包含了岛的索引。</span><br>        h_curr = &#123;&#125;  <span class="hljs-comment"># 当前行</span><br>        a = []  <span class="hljs-comment"># 保存的是一个个的list，list的长度是1，值对应岛的索引。</span><br>        debug = []<br>        accumulator = <span class="hljs-number">1</span> <span class="hljs-comment"># 表示岛的自增索引，每当发现一个新的岛，自增。</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, length):<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> grid[<span class="hljs-number">0</span>][i] == <span class="hljs-string">&#x27;1&#x27;</span>:<br>                h_curr[<span class="hljs-string">&#x27;0,&#x27;</span> + <span class="hljs-built_in">str</span>(i)] = [accumulator]<br>                a.append(h_curr[<span class="hljs-string">&#x27;0,&#x27;</span> + <span class="hljs-built_in">str</span>(i)])<br>                debug.append(<span class="hljs-string">&#x27;0,&#x27;</span> + <span class="hljs-built_in">str</span>(i))<br>            <span class="hljs-keyword">elif</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> grid[<span class="hljs-number">0</span>][i] == <span class="hljs-string">&#x27;1&#x27;</span>:<br>                <span class="hljs-keyword">if</span> grid[<span class="hljs-number">0</span>][i - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>:<br>                    h_curr[<span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(i)] = h_curr[<span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(i - <span class="hljs-number">1</span>)]<br>                <span class="hljs-keyword">else</span>:<br>                    accumulator += <span class="hljs-number">1</span><br>                    h_curr[<span class="hljs-string">&#x27;0,&#x27;</span> + <span class="hljs-built_in">str</span>(i)] = [accumulator]<br>                    a.append(h_curr[<span class="hljs-string">&#x27;0,&#x27;</span> + <span class="hljs-built_in">str</span>(i)])<br>                    debug.append(<span class="hljs-string">&#x27;0,&#x27;</span> + <span class="hljs-built_in">str</span>(i))<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>            h_pre = h_curr<br>            h_curr = &#123;&#125;<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, length):<br>                <span class="hljs-keyword">if</span> j == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> grid[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>:<br><br>                    <span class="hljs-keyword">if</span> grid[i - <span class="hljs-number">1</span>][j] == <span class="hljs-string">&#x27;1&#x27;</span>:<br>                        h_curr[<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(j)] = h_pre[<span class="hljs-built_in">str</span>(i - <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(j)]<br>                    <span class="hljs-keyword">else</span>:<br>                        accumulator += <span class="hljs-number">1</span><br>                        h_curr[<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(j)] = [accumulator]<br>                        a.append(h_curr[<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(j)])<br>                        debug.append(<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(j))<br><br>                <span class="hljs-keyword">elif</span> j &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> grid[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>:<br><br>                    <span class="hljs-keyword">if</span> grid[i - <span class="hljs-number">1</span>][j] == <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">and</span> grid[i][j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>:<br>                        pre = h_curr[<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(j - <span class="hljs-number">1</span>)]<br>                        above = h_pre[<span class="hljs-built_in">str</span>(i - <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(j)]<br><br>                        <span class="hljs-keyword">if</span> pre[<span class="hljs-number">0</span>] == above[<span class="hljs-number">0</span>]:<br>                            <span class="hljs-comment"># 对pre的值进行更新</span><br>                            h_curr[<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(j)] = pre<br>                        <span class="hljs-keyword">else</span> :<br>                            h_curr[<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(j)] = above<br>                            v1 = pre[<span class="hljs-number">0</span>]<br>                            v2 = above[<span class="hljs-number">0</span>]  <span class="hljs-comment"># z这里一定要换成静态的值，否则的话当a[k]的值进行更新时，会影响到pre的值。</span><br>                            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(a)):<br>                                <span class="hljs-keyword">if</span> a[k][<span class="hljs-number">0</span>] == v1:<br>                                    a[k][<span class="hljs-number">0</span>] = v2<br><br><br>                    <span class="hljs-keyword">elif</span> grid[i][j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">and</span> grid[i - <span class="hljs-number">1</span>][j] != <span class="hljs-string">&#x27;1&#x27;</span>:<br>                        pre = h_curr[<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(j - <span class="hljs-number">1</span>)]<br>                        h_curr[<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(j)] = pre<br>                    <span class="hljs-keyword">elif</span> grid[i][j - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">and</span> grid[i - <span class="hljs-number">1</span>][j] == <span class="hljs-string">&#x27;1&#x27;</span>:<br>                        above = h_pre[<span class="hljs-built_in">str</span>(i - <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(j)]<br>                        h_curr[<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(j)] = above<br>                    <span class="hljs-keyword">else</span>:<br>                        accumulator += <span class="hljs-number">1</span><br>                        h_curr[<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(j)] = [accumulator]<br>                        a.append(h_curr[<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(j)])<br>                        debug.append(<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(j))<br>        s = <span class="hljs-built_in">set</span>()<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> a:<br>            s.add(item[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(s)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    grid = [<span class="hljs-string">&quot;11000&quot;</span>,<br>            <span class="hljs-string">&quot;11000&quot;</span>,<br>            <span class="hljs-string">&quot;00100&quot;</span>,<br>            <span class="hljs-string">&quot;00011&quot;</span>]  <span class="hljs-comment"># 3</span><br>    <span class="hljs-built_in">print</span>(Solution().numIslands(grid))<br>    grid = [<span class="hljs-string">&quot;10111&quot;</span>,<br>            <span class="hljs-string">&quot;10101&quot;</span>,<br>            <span class="hljs-string">&quot;11101&quot;</span>]  <span class="hljs-comment"># 1</span><br>    <span class="hljs-built_in">print</span>(Solution().numIslands(grid))<br>    grid = [<span class="hljs-string">&quot;1111111&quot;</span>,<br>            <span class="hljs-string">&quot;0000001&quot;</span>,<br>            <span class="hljs-string">&quot;1111101&quot;</span>,<br>            <span class="hljs-string">&quot;1000101&quot;</span>,<br>            <span class="hljs-string">&quot;1010101&quot;</span>,<br>            <span class="hljs-string">&quot;1011101&quot;</span>,<br>            <span class="hljs-string">&quot;1111111&quot;</span>]  <span class="hljs-comment"># 1</span><br>    <span class="hljs-built_in">print</span>(Solution().numIslands(grid))<br><br><br>    grid = [<span class="hljs-string">&quot;10011101100000000000&quot;</span>,<br>            <span class="hljs-string">&quot;10011001000101010010&quot;</span>,<br>            <span class="hljs-string">&quot;00011110101100001010&quot;</span>,<br>            <span class="hljs-string">&quot;00011001000111001001&quot;</span>,<br>            <span class="hljs-string">&quot;00000001110000000000&quot;</span>,<br>            <span class="hljs-string">&quot;10000101011000000101&quot;</span>,<br>            <span class="hljs-string">&quot;00010001010101010101&quot;</span>,<br>            <span class="hljs-string">&quot;00010100110101101110&quot;</span>,<br>            <span class="hljs-string">&quot;00001001100001000101&quot;</span>,<br>            <span class="hljs-string">&quot;00100100000100100010&quot;</span>,<br>            <span class="hljs-string">&quot;10010000000100101010&quot;</span>,<br>            <span class="hljs-string">&quot;01000101011011101100&quot;</span>,<br>            <span class="hljs-string">&quot;11010000100000010001&quot;</span>,<br>            <span class="hljs-string">&quot;01001110001111101000&quot;</span>,<br>            <span class="hljs-string">&quot;00111000110001010000&quot;</span>,<br>            <span class="hljs-string">&quot;10010100001000101011&quot;</span>,<br>            <span class="hljs-string">&quot;10100000010001010000&quot;</span>,<br>            <span class="hljs-string">&quot;01100011101010111100&quot;</span>,<br>            <span class="hljs-string">&quot;01000011001010010011&quot;</span>,<br>            <span class="hljs-string">&quot;00000011110100011000&quot;</span>]  <span class="hljs-comment"># 58</span><br>    <span class="hljs-built_in">print</span>(Solution().numIslands(grid))<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>[leetcode 315]Count of Smaller Numbers After Self 原创解法</title>
    <url>/2016/12/26/leetcode-315/</url>
    <content><![CDATA[<h2 id="题目概述"><a href="#题目概述" class="headerlink" title=" 题目概述"></a><a name="hh0"></a> 题目概述</h2><p><a href="https://leetcode.com/problems/count-of-smaller-numbers-after-self/">原题链接</a></p>
<pre><code class="hljs">You are given an integer array nums and you
have to return a new counts array. 
The counts array has the property where counts[i] is 
the number of smaller elements to the right of nums[i].

Example:

Given nums = [5, 2, 6, 1]

To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.
Return the array [2, 1, 1, 0].
</code></pre>
<span id="more"></span>

<p>拿到这个题，最先想到的是时间复杂度O(N*N)
的解法。那就实现一下吧。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution2</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">countSmaller</span>(<span class="hljs-params">self, nums</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        O(N*N)</span><br><span class="hljs-string">        :type nums: List[int]</span><br><span class="hljs-string">        :rtype: List[int]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> nums:<br>            n = <span class="hljs-built_in">len</span>(nums)<br>            result = []<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                cur_val = nums[i]<br>                smaller_n = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, n):<br>                    <span class="hljs-keyword">if</span> nums[j] &lt; cur_val:<br>                        smaller_n += <span class="hljs-number">1</span><br><br>                result.append(smaller_n)<br>            <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> []<br></code></pre></td></tr></table></figure>

<p>把上面的代码提交上去，还是正确的，但是超时了。
该怎么优化呢？</p>
<p>遇到这样的问题，如果能够想出<code>S(N)=f(S(N-1),S(N-2),...)</code>这样的动态规划
解法
就可以把时间复杂度降到O(N)了。能不能使用动态规划呢？
还是要仔仔细细列出来，可是怎么也找不到递推规律。只好放弃。不过在思考
的过程中忽然想到一种思路。对于数组<code>[5, 2, 6, 1]]</code>，如果我先遍历
求出<code>5</code>的smaller数组<code>[2,1]</code>和larger数组<code>[6]</code>。那么<code>6</code>的smaller个数怎么
求呢，<code>s(6) = len([5,2,6,1]) - pos(6) = 4-3 = 1</code>。看起来很不错，但是当
数的个数多起来，就变得复杂了，无法这样简单的求解了。真是非常的泄气啊。
想了好久也没有想出新点子。脑子里把曾经用到的方法想了一个遍，
也还是不行。</p>
<h2 id="用二维图描述问题"><a href="#用二维图描述问题" class="headerlink" title=" 用二维图描述问题"></a><a name="hh1"></a> 用二维图描述问题</h2><p>物理学科中经常使用的一个策略就是转换坐标系，这样可以神奇的
化繁为简。那么我是否可以这样做呢。看看能不能用二维的图来重新展示这个问题。
于是我就画了这样一个图表。这是对数组<code>[5,1,6,7,2,3]</code>画的表格。横轴表示数组的index，
纵轴表示大小。</p>
<p><img src="/images/2016-12-26-1.png" alt="2016-12-26-1"></p>
<p>我把它画在纸上，盯着看了半小时。呵呵，真的有这么长时间。
因为我一直还是老思路，总想着根据第一个数字把剩下的数组分成大小两批。
后来我想，既然是二维图，<strong>我既可以从左向右，一列一列的看，也可以从上往下一行一行的
看。</strong> 不错，终于有了新的思路。</p>
<ol start="0">
<li>初始化一个长度为N的smaller数组，用于存放最后的解。</li>
<li>对原始数组从大到小排序。</li>
<li>取出最大的数，这个数的 <code>value = smaller_num(Nmax) = 数组的长度 - pos(Nmax)</code></li>
<li>保存结果<code>smaller[index(Nmax)] = value</code></li>
<li>对于index大于该数的所有数字的index减一。</li>
<li>重复2</li>
</ol>
<p>如下图。首先找到最大的数字<code>7</code>，它的索引是<code>4</code>(第四个数字)，
而数组的长度为<code>6</code>，那么<code>smaller_num(&quot;7&quot;) = 6 - 4 = 2</code>。然后不考虑该数字<code>7</code>。
对<code>7</code>右侧的<code>2</code>和<code>3</code>同时向左移动，同时令数组的长度减一。然后依次这样操作。</p>
<p><img src="/images/2016-12-26-2.png" alt="2016-12-26-2"></p>
<p>这样我们就可以写出一个新的算法。而对于步骤5则
使用了简单实现，遍历整个数组，对所有<code>index &gt; index(Nmax)</code>数的索引进行
减一。上述算法描述没有考虑有多个最大值的情况。但是下面的代码里考虑了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution1</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">countSmaller</span>(<span class="hljs-params">self, nums</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        O(N*N)</span><br><span class="hljs-string">        :type nums: List[int]</span><br><span class="hljs-string">        :rtype: List[int]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        origin = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">enumerate</span>(nums))<br>        l = <span class="hljs-variable language_">self</span>.create(nums)<br>        l.sort(cmp=compare, reverse=<span class="hljs-literal">True</span>)<br>        smaller = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(nums)<br>        i = <span class="hljs-number">0</span><br>        N = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(l):<br>            v, origin_pos, cur_pos = l[i]<br>            smaller[origin_pos] = N - <span class="hljs-number">1</span> - cur_pos<br>            equal_n = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)):<br>                v1, origin_pos2, cur_pos2 = l[j]<br>                <span class="hljs-keyword">if</span> cur_pos2 &gt; cur_pos:<br>                    l[j][<span class="hljs-number">2</span>] = cur_pos2 - <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">if</span> v1 == v:<br>                        <span class="hljs-comment"># 考虑值相等的情况。</span><br>                        equal_n += <span class="hljs-number">1</span><br><br>            smaller[origin_pos] -= equal_n<br><br>            N -= <span class="hljs-number">1</span><br>            i += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">return</span> smaller<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">self, nums</span>):<br>        result = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            result.append([nums[i], i, i])<br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure>

<h2 id="终于通过了"><a href="#终于通过了" class="headerlink" title=" 终于通过了"></a><a name="hh2"></a> 终于通过了</h2><p>事情终于有了进展，看起来很不错。但是仍然
遇到了时间复杂度过高的问题。因为实现步骤5的方法导致整个程序的
时间复杂度是O(N*N)。那么有什么办法能够优化呢。嗯，肯定有办法的。
我们这样来做。</p>
<ol>
<li>保存一个原始索引的<code>(origin_index,value)</code>的<code>origin</code>List。</li>
<li>再保存一个从大到小排序后的<code>(origin_index,value)</code>的<code>l</code>List。</li>
<li>对<code>l</code>根据<code>value</code>从大到小进行遍历：根据orgin_index使用二分查找
查找<code>origin</code>中对应的实际索引，计算得到该值对应的smaller_num之后，
从<code>origin</code>中删除该项。</li>
</ol>
<p>因为二分查找和删除项的时间复杂度是O(logN)。
上述步骤的总的时间复杂度是O(N*logN)。</p>
<p>而相等的数怎么办呢？嗯我们可以在排序
的时候保证序列不但满足值的升序，还能保证索引值的升序。
这样，原始数组中处于最右侧的最大数永远在序列的末尾。这个数的右侧不会有相等的值。
因而计算的时候就不需要考虑相等值的情况。
而该数字计算之后会进行删除。那么即使有相等的数，也不会受到影响。
真是很不错啊。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution11</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">countSmaller</span>(<span class="hljs-params">self, nums</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        O(NlogN)</span><br><span class="hljs-string">        :type nums: List[int]</span><br><span class="hljs-string">        :rtype: List[int]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        origin = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">enumerate</span>(nums))<br>        l = <span class="hljs-variable language_">self</span>.create(nums)<br>        l.sort(cmp=<span class="hljs-variable language_">self</span>.compare)<br>        smaller = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">while</span> l:<br>            v, pos = l.pop()<br>            cur_pos = <span class="hljs-variable language_">self</span>.bin_find(origin, pos)<br>            smaller[pos] = <span class="hljs-built_in">len</span>(origin) - <span class="hljs-number">1</span> - cur_pos<br>            origin.pop(cur_pos)<br><br>        <span class="hljs-keyword">return</span> smaller<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">compare</span>(<span class="hljs-params">self, x, y</span>):<br>        <span class="hljs-comment"># 这样排序那么相等的元素的仍然顺序不变</span><br>        <span class="hljs-keyword">if</span> x[<span class="hljs-number">0</span>] &gt; y[<span class="hljs-number">0</span>]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> x[<span class="hljs-number">0</span>] == y[<span class="hljs-number">0</span>]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">self, nums</span>):<br>        result = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            result.append([nums[i], i])<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bin_find</span>(<span class="hljs-params">self, origin, pos</span>):<br>        <span class="hljs-comment"># 二分查找法</span><br>        start = <span class="hljs-number">0</span><br>        end = <span class="hljs-built_in">len</span>(origin)<br>        mid = (start + end) // <span class="hljs-number">2</span><br>        new_mid = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> mid &lt; <span class="hljs-built_in">len</span>(origin) <span class="hljs-keyword">and</span> mid &gt;= <span class="hljs-number">0</span>:<br><br>            <span class="hljs-keyword">if</span> origin[mid][<span class="hljs-number">0</span>] == pos:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">elif</span> origin[mid][<span class="hljs-number">0</span>] &gt; pos:<br>                end = mid<br>                new_mid = (start + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">elif</span> origin[mid][<span class="hljs-number">0</span>] &lt; pos:<br>                start = mid<br>                new_mid = (start + end) // <span class="hljs-number">2</span><br><br>            <span class="hljs-keyword">if</span> new_mid == mid:<br>                mid += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                mid = new_mid<br><br>        <span class="hljs-keyword">return</span> mid<br><br></code></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title=" 总结"></a><a name="hh3"></a> 总结</h2><p>以上的解法是首先排序，再进行巧妙处理的一种方法。排序的
时间复杂度是<code>O(N*logN)</code>，接下来的处理也是<code>O(N*logN)</code>。</p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>[leetcode 327]Count of Range Sum 原创解法</title>
    <url>/2016/12/31/leetcode-327/</url>
    <content><![CDATA[<h2 id="题目概述"><a href="#题目概述" class="headerlink" title=" 题目概述"></a><a name="hh0"></a> 题目概述</h2><p><a href="https://leetcode.com/problems/count-of-range-sum/">原题链接</a></p>
<pre><code class="hljs">Given an integer array nums, return the number of range sums that lie in [lower, upper] inclusive.
Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j (i ≤ j), inclusive.

Example:
Given nums = [-2, 5, -1], lower = -2, upper = 2,
Return 3.
The three ranges are : [0, 0], [2, 2], [0, 2] and their respective sums are: -2, -1, 2.
</code></pre>
<span id="more"></span>

<h2 id="O-N-2-解法"><a href="#O-N-2-解法" class="headerlink" title="O(N^2)解法"></a><a name="hh1"></a>O(N^2)解法</h2><p>最直接的想法当然就是遍历求和了。但是这样是无法通过测试的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution3</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">countRangeSum</span>(<span class="hljs-params">self, nums, lower, upper</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type nums: List[int]</span><br><span class="hljs-string">        :type lower: int</span><br><span class="hljs-string">        :type upper: int</span><br><span class="hljs-string">        :rtype: int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><br>        sums = []<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            s = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, <span class="hljs-built_in">len</span>(nums)):<br>                s += nums[j]<br>                <span class="hljs-keyword">if</span> lower &lt;= s &lt;= upper:<br>                    sums.append(s)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(sums)<br><br></code></pre></td></tr></table></figure>

<h2 id="死亡凝视"><a href="#死亡凝视" class="headerlink" title="死亡凝视"></a><a name="hh2"></a>死亡凝视</h2><p>必须要想出复杂度是<code>Nlog(N)</code>的算法才行。但是问题也很明显，
要想找出所有的<code>s(i,j) for 0 &lt;= i &lt;= j &lt; n　and lower &lt;= s(i,j) &lt;= upper</code>
那必须要进行遍历啊，因此时间复杂度必须是<code>N^2</code>。
啊啊，实在想不出来了。</p>
<p>第二天，既然要求时间复杂度为<code>NlogN</code>那么就必然不能遍历求出<code>s(i,j)</code>，但是
题目要求的是求出<code>Num(s(i,j)) for 0 &lt;= i &lt;= j &lt; n　and lower &lt;= s(i,j) &lt;= upper</code>
，也就是说给出个数就行，因此确实不一定要给出所有的<code>s(i,j)</code>。嗯，有点进展了。</p>
<p>第三天，排序算法的复杂度是<code>NlogN</code>，怎么才能依靠排序算法求出呢。难道对所有的
<code>s(i,j)</code>进行排序么？这样肯定不行。
能否使用老办法画图呢？这样好观察一下。但是仔细想了想，这是一个三维图。
纸上画不出来。
只好画一个二维图吧。下图是对数组<code>[5,7,8,-2,1]</code>画的二维表格。格子
中的数字就是<code>s(i,j)</code>。</p>
<p><img src="/images/327-1.png" alt="327-1"></p>
<p>我仔细的盯着看。我给这种解决问题的方式，起了
个名字——<code>死亡凝视</code>。看过<code>The Big Bang</code>的朋友可能记得<code>Sheldon</code>和<code>Raj</code>一起
工作的样子，就是一动不动的看着黑板上的公式，看上一整天。</p>
<p><img src="/images/327-2.jpg" alt="327-2"></p>
<p>嘿嘿，你们不要笑啊，我的方式差不多。只不过是盯着表格。这样的表格
其实我画了很多。但是只有这个我看出了规律。</p>
<p><img src="/images/327-3.png" alt="327-3"></p>
<p>看出来了么，三列带颜色的数字。是不是发现它们有相同的趋势呢？
是的它们有相同的趋势。</p>
<p>如果没有看出来。我再画一个图。看看这三列数字和蓝色数字的关系。</p>
<p><img src="/images/327-4.png" alt="327-4"></p>
<p>是的。<code>20 - 5 = 15</code>，<code>18 - 5 = 13</code>，<code>19 - 5 = 14</code>。
假如上下区间为<code>[12,18]</code>，那么对于排序后的第一列<code>[5,12,18,19,20]</code>，
可以使用二分查找法找出上限的位置是2，下限的位置为1，个数为2。
那么第二列<code>[7,15,13,14]</code>在<code>[12,18]</code>的数字的个数为3。
怎么根据第一列排序后的数字求出呢。嗯，很简单。
我们把上下限加上5，变成<code>17, 23</code>，这样就可以发现<code>[5,12,18,19,20]</code>找出
个数为3。嗯，哈哈。真是不错。这样子，就不需要求出所有的<code>s(i,j)</code>了。</p>
<p>但是，别着急，还是有问题，我们需要在计算第二列的个数的之前，把第一列的数字中的<code>5</code>排除掉。
否则的话，如果区间是<code>[-100,100]</code>，那么我们就多计算了。</p>
<h2 id="通过的代码"><a href="#通过的代码" class="headerlink" title="通过的代码"></a><a name="hh3"></a>通过的代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python3.5</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution4</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">countRangeSum</span>(<span class="hljs-params">self, nums, lower, upper</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        思路：对 list0 = [s(0,j) for j in (0,n)]先进行排序。</span><br><span class="hljs-string">         list1 = [s(1,j) for j in (1,n)]，可以由 list0生成。</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :type nums: List[int]</span><br><span class="hljs-string">        :type lower: int</span><br><span class="hljs-string">        :type upper: int</span><br><span class="hljs-string">        :rtype: int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            result = <span class="hljs-number">0</span><br>            n = <span class="hljs-built_in">len</span>(nums)<br>            l = []<br>            l2 = []<br>            <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n):<br>                <span class="hljs-built_in">sum</span> += nums[i]<br>                l.append((<span class="hljs-built_in">sum</span>, i))<br>                l2.append((<span class="hljs-built_in">sum</span>, i))<br>            l.sort()<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n):<br>                <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span>:<br>                    lower += nums[i - <span class="hljs-number">1</span>]<br>                    upper += nums[i - <span class="hljs-number">1</span>]<br>                lower_pos = <span class="hljs-variable language_">self</span>.find_lower(l, lower)<br>                upper_pos = <span class="hljs-variable language_">self</span>.find_uppper(l, upper)<br>                <span class="hljs-keyword">if</span> lower_pos <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> upper_pos <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                    result += upper_pos - lower_pos + <span class="hljs-number">1</span><br>                pos = <span class="hljs-variable language_">self</span>.find_lower(l, l2[i][<span class="hljs-number">0</span>])<br>                l.pop(pos) <span class="hljs-comment"># &lt;-- 这里是个接近O(N)的操作</span><br><br>            <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">self, nums, target</span>):<br>        n = <span class="hljs-built_in">len</span>(nums)<br><br>        start = <span class="hljs-number">0</span><br>        end = n<br>        mid = n // <span class="hljs-number">2</span><br>        new_mid = <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">while</span> <span class="hljs-number">0</span> &lt;= mid &lt; n:<br>            <span class="hljs-keyword">if</span> nums[mid][<span class="hljs-number">0</span>] == target:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">elif</span> nums[mid][<span class="hljs-number">0</span>] &lt; target <span class="hljs-keyword">and</span> mid + <span class="hljs-number">1</span> &lt; n <span class="hljs-keyword">and</span> nums[mid + <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] &gt; target:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">elif</span> nums[mid][<span class="hljs-number">0</span>] &lt; target:<br>                start = mid<br>                new_mid = (start + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">elif</span> nums[mid][<span class="hljs-number">0</span>] &gt; target:<br>                end = mid<br>                new_mid = (start + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> new_mid == mid:<br>                mid += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                mid = new_mid<br><br>        <span class="hljs-keyword">return</span> mid <span class="hljs-keyword">if</span> nums[mid][<span class="hljs-number">0</span>] == target <span class="hljs-keyword">else</span> mid + <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_lower</span>(<span class="hljs-params">self, nums, lower</span>):<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">if</span> lower &gt; nums[n - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">elif</span> lower &lt; nums[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            mid = <span class="hljs-variable language_">self</span>.find(nums, lower)<br>            <span class="hljs-keyword">while</span> mid - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[mid - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] == lower:<br>                mid -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> mid<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_uppper</span>(<span class="hljs-params">self, nums, upper</span>):<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">if</span> upper &gt; nums[n - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]:<br>            <span class="hljs-keyword">return</span> n - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> upper &lt; nums[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">else</span>:<br>            mid = <span class="hljs-variable language_">self</span>.find(nums, upper)<br>            <span class="hljs-keyword">while</span> mid &lt; n - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> nums[mid + <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] == upper:<br>                mid += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> mid <span class="hljs-keyword">if</span> nums[mid][<span class="hljs-number">0</span>] == upper <span class="hljs-keyword">else</span> mid - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title=" 总结"></a><a name="hh4"></a> 总结</h2><p>排序操作的时间复杂度是<code>O(NlogN)</code>，而找出每列一列的个数的时间复杂度是<code>O(logN)</code>
因为一共有N列，所以时间复杂度为<code>O(NlogN)</code>，另外
我们在代码中使用了对<code>List</code>数据的非尾部的<code>pop</code>操作，这个操作的时间
复杂度接近<code>O(N)</code>，严格来说，我们的代码的时间复杂度还是<code>O(N^2)</code>。如果能够不使用这个操作。
我们的代码速度会更快。</p>
<pre><code class="hljs">l.pop(pos) # &lt;-- 这里是个接近O(N)的操作
</code></pre>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>在WIN10下使用Cython</title>
    <url>/2017/01/12/2017-1-12-cython-on-win10/</url>
    <content><![CDATA[<h2 id="Cython"><a href="#Cython" class="headerlink" title=" Cython"></a><a name="hh0"></a> Cython</h2><p><code>Cython</code>不是<code>CPython</code>的简称，而是一种提升<code>Python</code>代码执行效率的解决方案。
据说一般达到30x。一会我们来看看是不是真的。这个技术对老鸟来说已经是好多
年前的了。但是很多情况下python用户真的用不上，所以不知道也无妨。</p>
<span id="more"></span>

<h2 id="软件安装"><a href="#软件安装" class="headerlink" title=" 软件安装"></a><a name="hh1"></a> 软件安装</h2><p>我已经迁移到<code>python3</code>了，使用的是<code>Anaconda</code>。感谢<code>Anaconda</code>让我们的生活变
的更加美好。以下软件安装的顺序不要错。</p>
<ol>
<li>安装Visual C++ Build Tools 2015</li>
<li>安装Anaconda3</li>
</ol>
<h2 id="跟着Cython的tutorial走"><a href="#跟着Cython的tutorial走" class="headerlink" title=" 跟着Cython的tutorial走"></a><a name="hh2"></a> 跟着Cython的tutorial走</h2><p>先创建一个helloworld.pyx文件。内容如下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># helloworld.pyx</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello cython!&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> fib(n - <span class="hljs-number">2</span>) + fib(n - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure>



<p>再创建一个setup.py文件。内容如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#setup.py</span><br><span class="hljs-keyword">from</span> distutils.core <span class="hljs-keyword">import</span> setup<br><span class="hljs-keyword">from</span> Cython.Build <span class="hljs-keyword">import</span> cythonize<br><br>setup(<br>    ext_modules = cythonize(<span class="hljs-string">&quot;helloworld.pyx&quot;</span>)<br>)<br></code></pre></td></tr></table></figure>



<p>然后在命令行输入</p>
<pre><code class="hljs">D:\tmp\oo&gt;python setup.py build_ext --inplace
running build_ext
building &#39;helloworld&#39; extension
C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\BIN\x86_amd64\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -IC:\Anaconda3\include -IC:\Anaconda3\include &quot;-IC:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\INCLUDE&quot; &quot;-IC:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt&quot; &quot;-IC:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\shared&quot; &quot;-IC:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\um&quot; &quot;-IC:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\winrt&quot; /Tchelloworld.c /Fobuild\temp.win-amd64-3.5\Release\helloworld.obj
helloworld.c
C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\BIN\x86_amd64\link.exe /nologo /INCREMENTAL:NO /LTCG /DLL /MANIFEST:EMBED,ID=2 /MANIFESTUAC:NO /LIBPATH:C:\Anaconda3\libs /LIBPATH:C:\Anaconda3\PCbuild\amd64 &quot;/LIBPATH:C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\LIB\amd64&quot; &quot;/LIBPATH:C:\Program Files (x86)\Windows Kits\10\lib\10.0.10240.0\ucrt\x64&quot; &quot;/LIBPATH:C:\Program Files (x86)\Windows Kits\10\lib\10.0.10240.0\um\x64&quot; /EXPORT:PyInit_helloworld build\temp.win-amd64-3.5\Release\helloworld.obj /OUT:D:\tmp\oo\helloworld.cp35-win_amd64.pyd /IMPLIB:build\temp.win-amd64-3.5\Release\helloworld.cp35-win_amd64.lib
helloworld.obj : warning LNK4197: export &#39;PyInit_helloworld&#39; specified multiple times; using first specification
   Creating library build\temp.win-amd64-3.5\Release\helloworld.cp35-win_amd64.lib and object build\temp.win-amd64-3.5\Release\helloworld.cp35-win_amd64.exp
Generating code
Finished generating code
</code></pre>
<p>(WIN10下的命令窗口终于可以使用ctrl-c和ctrl-v了。泪奔。)
可以发现多了一个<code>.pyd</code>文件。然后测试一下。</p>
<pre><code class="hljs">D:\tmp\oo&gt;python
Python 3.5.2 |Anaconda custom (64-bit)| (default, Jul  5 2016, 11:41:13) [MSC v.1900 64 bit (AMD64)] on win32
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; import helloworld as h
hello cython!
&gt;&gt;&gt;h.fib(3)
3
</code></pre>
<p>真是不错啊。可是如果你换一个目录比如不在当前包含<code>.pyd</code>的目录下，
再想导入helloworld则是不行的。怎么回事，我们不是已经setup了么。
原因在于<code>--inplace</code>这个参数，它表示只生成动态链接库。</p>
<h2 id="与python代码进行测试比较"><a href="#与python代码进行测试比较" class="headerlink" title=" 与python代码进行测试比较"></a><a name="hh3"></a> 与python代码进行测试比较</h2><p>我们还在那个目录下创建一个<code>test.py</code>文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#test.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> fib(n - <span class="hljs-number">2</span>) + fib(n - <span class="hljs-number">1</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_fib</span>():<br>    <span class="hljs-keyword">import</span> timeit<br>    n = <span class="hljs-number">1000</span><br>    t = timeit.timeit(<span class="hljs-string">&quot;fib(25)&quot;</span>, number=n, setup=<span class="hljs-string">&quot;from __main__ import fib&quot;</span>)<br>    time = t / n<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;python fib : &#123;:.8f&#125;s&quot;</span>.<span class="hljs-built_in">format</span>(time))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_fib_cython</span>():<br>    <span class="hljs-keyword">import</span> timeit<br>    n = <span class="hljs-number">1000</span><br>    t = timeit.timeit(<span class="hljs-string">&quot;h.fib(25)&quot;</span>, number=n, setup=<span class="hljs-string">&quot;import helloworld as h&quot;</span>)<br>    time = t / n<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cython fib : &#123;:.8f&#125;s&quot;</span>.<span class="hljs-built_in">format</span>(time))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    test_fib()<br>    test_fib_cython()<br></code></pre></td></tr></table></figure>


<p>然后运行</p>
<pre><code class="hljs">D:\tmp\oo&gt;python test.py
python fib : 0.05887972s
hello cython!
cython fib : 0.01739922s
</code></pre>
<p>怎么回事，说好的30x呢，还轻轻松松？别着急，我们把之前的<code>helloworld.pyx</code>
修改一下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#helloworld.pyx</span><br>cpdef <span class="hljs-built_in">int</span> fib(<span class="hljs-built_in">int</span> n) :<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> n == <span class="hljs-number">1</span> :<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span> :<br>        <span class="hljs-keyword">return</span> fib(n - <span class="hljs-number">2</span>) + fib(n - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure>


<p>再运行一下瞅瞅。</p>
<pre><code class="hljs">D:\tmp\oo&gt;python test.py
python fib : 0.05774631s
hello cython!
cython fib : 0.00059495s
</code></pre>
<p>真是不错哦，诚不我欺，100x。</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>Cython</tag>
      </tags>
  </entry>
  <entry>
    <title>解决python3使用system-site-packages创建虚拟环境时没有pip的问题</title>
    <url>/2017/01/18/2017-1-18-venv-no-pip/</url>
    <content><![CDATA[<h2 id="python虚拟环境"><a href="#python虚拟环境" class="headerlink" title=" python虚拟环境"></a><a name="hh0"></a> python虚拟环境</h2><p>从<code>python3.5</code>开始,使用<code>venv</code>创建虚拟环境已经成为官方推荐的方案。
查看官方文档，可以看到如果想要创建一个干净的虚拟环境。方式如下</p>
<pre><code class="hljs">python -m venv myenv
</code></pre>
<span id="more"></span>



<p>如果要创建一个当前环境的副本，也就是说，可以引用当前环境的所有已经
安装的包。那么需要增加<code>--system-site-packages</code>参数</p>
<pre><code class="hljs">python -m venv myenv2 --system-site-packages
</code></pre>
<p>两种方式，我们都希望能够独立使用pip来管理包。但是第二种方式发现并没有pip
文件。</p>
<h2 id="WIN下的解决办法"><a href="#WIN下的解决办法" class="headerlink" title=" WIN下的解决办法"></a><a name="hh1"></a> WIN下的解决办法</h2><p>因为我一般都是用神器<code>pycharm</code>，幸运的是<code>pycharm</code>提供了一个简单的方法。</p>
<p><img src="/images/env-1.png" alt="env-1"></p>
<p>可以看到目录下是有pip的。</p>
<p><img src="/images/env-2.png" alt="env-2"></p>
<h2 id="Linux下的解决办法"><a href="#Linux下的解决办法" class="headerlink" title=" Linux下的解决办法"></a><a name="hh2"></a> Linux下的解决办法</h2><p>如果不使用<code>pycharm</code>是不是就没办法了呢。我们google一下
关键字<code>python system-site-packages no pip</code>很顺利的找到
这个链接<a href="https://bugs.python.org/issue24875">pyvenv doesn´t install PIP inside a new venv with –system-site-package</a>
这个是python的bug跟踪记录。大概看看应该能明白，原来
我们遇到的这个问题，已经在<code>2015-08-16</code>就被人标记了。但是直到最近还没有解决。
但是最新的更新是几天前<code>last changed 2017-01-13</code>。呵呵看看这些大咖
都讨论些啥。</p>
<p>看到这句话，我笑了。这个问题的等级被标记为普通。所以一直没有解决。
而这个大咖觉得这个问题如果不解决，非但<code>--system-site-packages</code>没有用，
甚至会误导大量的初学者。</p>
<blockquote>
<p>I agree this makes –system-site-packages a useless option unless it’s fixed. We just had many beginners install pyvenv’s and get very confused because of this.</p>
</blockquote>
<p>最后发现补丁已经提交了，而且就在几天前。但是很显然没有进入我们的安装版里。
我在我的debian虚拟机上安装了python3.6.0。测试了一下这个bug是存在的。
那么问题简单了。把源码改一下吧，根据这个<a href="https://bugs.python.org/review/24875/patch/19738/77413">patch</a>
然后重新编译安装。测试一下。</p>
<pre><code class="hljs"> ~/ python
Python 3.6.0 (default, Jan 17 2017, 22:12:56) 
[GCC 4.9.2] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; 
 ~/ pip list --format=columns
Package    Version
---------- -------
binarytree 1.1.1  
pip        9.0.1  
setuptools 28.8.0 
</code></pre>
<p>这是我当前的python版本和已经安装的包。其中有个<code>binarytree</code>。
现在创建一个继承全部包的虚拟环境。</p>
<pre><code class="hljs"> ~/tmp/ python -m venv fenv --system-site-packages
 ~/tmp/ cd fenv/bin
 ~/tmp/fenv/bin/ ls
activate      activate.fish  easy_install-3.6  pip3    python
activate.csh  easy_install   pip               pip3.6  python3
 ~/tmp/fenv/bin/ ./pip list --format=columns
Package    Version
---------- -------
binarytree 1.1.1  
pip        9.0.1  
setuptools 28.8.0 
</code></pre>
<p>嗯成功了。</p>
<h2 id="可能的解决办法"><a href="#可能的解决办法" class="headerlink" title=" 可能的解决办法"></a><a name="hh3"></a> 可能的解决办法</h2><p>虽然第二种办法很好。但是需要修改源代码。可是服务器上的代码是不能修改的呀。
那可以尝试自己写一个venv.Builder，对其中的create方法进行覆盖，这个方法
我没有尝试。如果你尝试了，也可以发邮件告诉我结果。</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>venv</tag>
      </tags>
  </entry>
  <entry>
    <title>[leetcode 295]Find Median from Data Stream 原创解法</title>
    <url>/2017/01/31/2017-1-31-leetcode-295/</url>
    <content><![CDATA[<h2 id="题目概述"><a href="#题目概述" class="headerlink" title=" 题目概述"></a><a name="hh0"></a> 题目概述</h2><p><a href="https://leetcode.com/problems/find-median-from-data-stream/">原题链接</a></p>
<pre><code class="hljs">Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.

Examples: 
 `[2,3,4]` , the median is 3

 `[2,3]`, the median is (2 + 3) / 2 = 2.5

Design a data structure that supports the following two operations:

- void addNum(int num) - Add a integer number from the data stream to the data structure. 
- double findMedian() - Return the median of all elements so far.   
For example:

addNum(1)
addNum(2)
findMedian() -&gt; 1.5
addNum(3) 
findMedian() -&gt; 2
</code></pre>
<span id="more"></span>

<h2 id="第一想到的解法"><a href="#第一想到的解法" class="headerlink" title=" 第一想到的解法"></a><a name="hh1"></a> 第一想到的解法</h2><p>找到一串数字的中位数，那么首先要对数字进行排列。否则怎么知道哪个
数字是处于中间的呢。快排是不行的，因为快排是一个离线算法。必须要
读进所有的数字。总不能每增加一个数做一次快排吧。
插入排序是一种在线算法，每增加一个数字遍历一遍就好。
那就实现一下吧。以下是实现的解法。但是超时了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python3</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MedianFinder</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        initialize your data structure here.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.q = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addNum</span>(<span class="hljs-params">self, num</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type num: int</span><br><span class="hljs-string">        :rtype: void</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.q:<br>            <span class="hljs-variable language_">self</span>.q.append(num)<br>        <span class="hljs-keyword">else</span>:<br>            i = <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.q) - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> i &gt;= <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.q[i] &gt; num:<br>                    i -= <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-variable language_">self</span>.q.insert(i + <span class="hljs-number">1</span>, num)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findMedian</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :rtype: float</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.q:<br>            n = <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.q)<br>            r = n % <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> r == <span class="hljs-number">0</span>:<br>                mid = n // <span class="hljs-number">2</span><br>                <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">self</span>.q[mid - <span class="hljs-number">1</span>] + <span class="hljs-variable language_">self</span>.q[mid]) / <span class="hljs-number">2.0</span><br>            <span class="hljs-keyword">else</span>:<br>                mid = (n - <span class="hljs-number">1</span>) // <span class="hljs-number">2</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.q[mid]<br></code></pre></td></tr></table></figure>

<h2 id="使用链表"><a href="#使用链表" class="headerlink" title=" 使用链表"></a><a name="hh2"></a> 使用链表</h2><p>这个方法再插入一个数字的时间复杂度也是<code>O(n)</code>，所以如果我们不使用
python的<code>list</code>而是使用一个自己创建的链表，那么插入的时间复杂度
是<code>O(1)</code>至少应该快一些。嗯，重新实现一遍。以下是实现的代码，但是
还是超时了。而且速度和前一种相当。说明python内置的<code>list</code>效率是相当
高的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python3</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Linker</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, v</span>):<br>        <span class="hljs-variable language_">self</span>.pre = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.v = v<br>        <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MedianFinder1</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        initialize your data structure here.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.median = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.end = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.odd = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addNum</span>(<span class="hljs-params">self, num</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type num: int</span><br><span class="hljs-string">        :rtype: void</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.end:<br>            <span class="hljs-variable language_">self</span>.end = Linker(num)<br>            <span class="hljs-variable language_">self</span>.mid = <span class="hljs-variable language_">self</span>.end<br>            <span class="hljs-variable language_">self</span>.mid_next = <span class="hljs-literal">None</span><br>            <span class="hljs-variable language_">self</span>.odd = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 是否增加了计数个</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-variable language_">self</span>.odd = <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.odd<br>            tmp = <span class="hljs-variable language_">self</span>.end<br>            tmp_next = <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">while</span> tmp <span class="hljs-keyword">and</span> tmp.v &gt; num: <br>                tmp_next = tmp<br>                tmp = tmp.pre<br><br>            linker = Linker(num)<br>            <span class="hljs-keyword">if</span> tmp_next <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-variable language_">self</span>.end = linker<br><br>            <span class="hljs-keyword">if</span> tmp <span class="hljs-keyword">and</span> tmp_next <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                tmp.<span class="hljs-built_in">next</span> = linker<br>                linker.pre = tmp<br>            <span class="hljs-keyword">elif</span> tmp <span class="hljs-keyword">and</span> tmp_next:<br>                tmp.<span class="hljs-built_in">next</span> = linker<br>                linker.pre = tmp<br>                linker.<span class="hljs-built_in">next</span> = tmp_next<br>                tmp_next.pre = linker<br>            <span class="hljs-keyword">elif</span> tmp <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> tmp_next:<br>                linker.<span class="hljs-built_in">next</span> = tmp_next<br>                tmp_next.pre = linker<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.odd:<br>                <span class="hljs-comment"># 从两个中位数变为一个</span><br>                <span class="hljs-keyword">if</span> num &lt; <span class="hljs-variable language_">self</span>.mid.v:<br>                    <span class="hljs-variable language_">self</span>.mid_next = <span class="hljs-literal">None</span><br>                <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.mid.v &lt;= num &lt; <span class="hljs-variable language_">self</span>.mid_next.v:<br>                    <span class="hljs-variable language_">self</span>.mid = <span class="hljs-variable language_">self</span>.mid.<span class="hljs-built_in">next</span><br>                    <span class="hljs-variable language_">self</span>.mid_next = <span class="hljs-literal">None</span><br>                <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.mid_next.v &lt;= num:<br>                    <span class="hljs-variable language_">self</span>.mid = <span class="hljs-variable language_">self</span>.mid_next<br>                    <span class="hljs-variable language_">self</span>.mid_next = <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 从一个中位数变为两个</span><br>                <span class="hljs-keyword">if</span> num &lt; <span class="hljs-variable language_">self</span>.mid.v:<br>                    <span class="hljs-variable language_">self</span>.mid_next = <span class="hljs-variable language_">self</span>.mid<br>                    <span class="hljs-variable language_">self</span>.mid = <span class="hljs-variable language_">self</span>.mid.pre<br><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-variable language_">self</span>.mid_next = <span class="hljs-variable language_">self</span>.mid.<span class="hljs-built_in">next</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findMedian</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :rtype: float</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.mid:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.odd:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.mid.v<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">self</span>.mid.v + <span class="hljs-variable language_">self</span>.mid.<span class="hljs-built_in">next</span>.v) / <span class="hljs-number">2.0</span><br></code></pre></td></tr></table></figure>






<p>33行还是按照插入排序从末尾开始向前遍历，但是因为我们有中位数
，那么就可以与中位数进行比较，然后减少一半的时间。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MedianFinder2</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        initialize your data structure here.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.mid = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.odd = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addNum</span>(<span class="hljs-params">self, num</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type num: int</span><br><span class="hljs-string">        :rtype: void</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.mid:<br>            <span class="hljs-variable language_">self</span>.mid = Linker(num)<br>            <span class="hljs-variable language_">self</span>.mid_next = <span class="hljs-literal">None</span><br>            <span class="hljs-variable language_">self</span>.odd = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 是否增加了计数个</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-variable language_">self</span>.odd = <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.odd<br>            tmp = <span class="hljs-variable language_">self</span>.mid<br>            tmp_next = <span class="hljs-variable language_">self</span>.mid.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> num &lt; <span class="hljs-variable language_">self</span>.mid.v:<br>                <span class="hljs-keyword">while</span> tmp <span class="hljs-keyword">and</span> tmp.v &gt; num:<br>                    tmp_next = tmp<br>                    tmp = tmp.pre<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">while</span> tmp_next <span class="hljs-keyword">and</span> tmp_next.v &lt;= num:<br>                    tmp = tmp_next<br>                    tmp_next = tmp.<span class="hljs-built_in">next</span><br><br>            linker = Linker(num)<br><br>            <span class="hljs-keyword">if</span> tmp <span class="hljs-keyword">and</span> tmp_next <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                tmp.<span class="hljs-built_in">next</span> = linker<br>                linker.pre = tmp<br>            <span class="hljs-keyword">elif</span> tmp <span class="hljs-keyword">and</span> tmp_next:<br>                tmp.<span class="hljs-built_in">next</span> = linker<br>                linker.pre = tmp<br>                linker.<span class="hljs-built_in">next</span> = tmp_next<br>                tmp_next.pre = linker<br>            <span class="hljs-keyword">elif</span> tmp <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> tmp_next:<br>                linker.<span class="hljs-built_in">next</span> = tmp_next<br>                tmp_next.pre = linker<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.odd:<br>                <span class="hljs-comment"># 从两个中位数变为一个</span><br>                <span class="hljs-keyword">if</span> num &lt; <span class="hljs-variable language_">self</span>.mid.v:<br>                    <span class="hljs-variable language_">self</span>.mid_next = <span class="hljs-literal">None</span><br>                <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.mid.v &lt;= num &lt; <span class="hljs-variable language_">self</span>.mid_next.v:<br>                    <span class="hljs-variable language_">self</span>.mid = <span class="hljs-variable language_">self</span>.mid.<span class="hljs-built_in">next</span><br>                    <span class="hljs-variable language_">self</span>.mid_next = <span class="hljs-literal">None</span><br>                <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.mid_next.v &lt;= num:<br>                    <span class="hljs-variable language_">self</span>.mid = <span class="hljs-variable language_">self</span>.mid_next<br>                    <span class="hljs-variable language_">self</span>.mid_next = <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 从一个中位数变为两个</span><br>                <span class="hljs-keyword">if</span> num &lt; <span class="hljs-variable language_">self</span>.mid.v:<br>                    <span class="hljs-variable language_">self</span>.mid_next = <span class="hljs-variable language_">self</span>.mid<br>                    <span class="hljs-variable language_">self</span>.mid = <span class="hljs-variable language_">self</span>.mid.pre<br><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-variable language_">self</span>.mid_next = <span class="hljs-variable language_">self</span>.mid.<span class="hljs-built_in">next</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findMedian</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :rtype: float</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.mid:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.odd:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.mid.v<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">self</span>.mid.v + <span class="hljs-variable language_">self</span>.mid.<span class="hljs-built_in">next</span>.v) / <span class="hljs-number">2.0</span><br></code></pre></td></tr></table></figure>





<p>修改后的还是快了一倍的时间，但是还是超时了。无法通过。</p>
<h2 id="最终解法要用堆"><a href="#最终解法要用堆" class="headerlink" title=" 最终解法要用堆"></a><a name="hh3"></a> 最终解法要用堆</h2><p>还是用笔在纸上把问题重新描述一下吧。通常非常管用。
<strong>既然题目要求得到中位数，那么其实并没有要求对所有的数字进行排序。
而且又要快速的取得中间值，那么最大最小堆是最接近的。</strong>
往堆里插入一个数字的时间复杂度是<code>O(lgN)</code>，而取最小值的操作为<code>O(1)</code>。
总的时间复杂度是<code>O(NlgN)</code>。嗯，比前面的<code>O(N**2)</code>肯定是要快的。
但是堆只能取最大或最小的值，怎么取中间值呢？哈哈，把数字一分为二，
使用两个堆就解决了。如果数字从小到大排列，那么前一半用一个最大堆，
后一般用一个最小堆。以下是通过的代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> heapq <span class="hljs-keyword">import</span> heappush,heappushpop<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MedianFinder3</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        initialize your data structure here.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.a = [] <span class="hljs-comment"># 从小到mid；最大堆</span><br>        <span class="hljs-variable language_">self</span>.b = [] <span class="hljs-comment"># 从 mid+1 到大 ,最小堆</span><br>        <span class="hljs-variable language_">self</span>.odd = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addNum</span>(<span class="hljs-params">self, num</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type num: int</span><br><span class="hljs-string">        :rtype: void</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.odd = <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.odd<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.b:<br>            <span class="hljs-variable language_">self</span>.b.append(num)<br>        <span class="hljs-keyword">else</span> :<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.odd :<br>                <span class="hljs-keyword">if</span> num &lt; <span class="hljs-variable language_">self</span>.b[<span class="hljs-number">0</span>] :<br>                    heappush(<span class="hljs-variable language_">self</span>.a, -num)<br>                <span class="hljs-keyword">else</span> :<br>                    v = heappushpop(<span class="hljs-variable language_">self</span>.b, num)<br>                    heappush(<span class="hljs-variable language_">self</span>.a, -v)<br>            <span class="hljs-keyword">else</span> :<br>                <span class="hljs-keyword">if</span> num &lt; (-<span class="hljs-variable language_">self</span>.a[<span class="hljs-number">0</span>]) :<br>                    v = heappushpop(<span class="hljs-variable language_">self</span>.a, -num)<br>                    heappush(<span class="hljs-variable language_">self</span>.b, -v)<br>                <span class="hljs-keyword">elif</span> -<span class="hljs-variable language_">self</span>.a[<span class="hljs-number">0</span>] &lt;= num &lt; <span class="hljs-variable language_">self</span>.b[<span class="hljs-number">0</span>] :<br>                    heappush(<span class="hljs-variable language_">self</span>.b, num)<br>                <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.b[<span class="hljs-number">0</span>] &lt;= num :<br>                    heappush(<span class="hljs-variable language_">self</span>.b, num)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findMedian</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :rtype: float</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.odd :<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.b[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">else</span> :<br>            <span class="hljs-keyword">return</span> (-<span class="hljs-variable language_">self</span>.a[<span class="hljs-number">0</span>] + <span class="hljs-variable language_">self</span>.b[<span class="hljs-number">0</span>])/<span class="hljs-number">2.0</span><br></code></pre></td></tr></table></figure>

<h2 id="吐槽"><a href="#吐槽" class="headerlink" title=" 吐槽"></a><a name="hh4"></a> 吐槽</h2><p>python只默认实现了一个最小堆。想要一个最大堆，还得像第<code>23</code>行
代码那样使用一种取负数技巧。虽然<code>heapq</code>模块里有一个构造最大堆的方法
<code>_heapify_max()</code>但是却没有<code>_heappushpop_max</code>这样的方法。真是无语啊。</p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>[leetcode 312]Burst Balloons原创解法</title>
    <url>/2017/10/07/leetcode-312/</url>
    <content><![CDATA[<h2 id="题目概述"><a href="#题目概述" class="headerlink" title=" 题目概述"></a><a name="hh0"></a> 题目概述</h2><p><a href="https://leetcode.com/problems/burst-balloons/">312原题链接</a></p>
<pre><code class="hljs">Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.

Find the maximum coins you can collect by bursting the balloons wisely.

examples:
nums = [3,1,5,8] --&gt; [3,5,8] --&gt;   [3,8]   --&gt;  [8]  --&gt; []
coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167
</code></pre>
<span id="more"></span>

<h2 id="简单直接的解法"><a href="#简单直接的解法" class="headerlink" title=" 简单直接的解法"></a><a name="hh1"></a> 简单直接的解法</h2><p>遍历回溯法，建立一个集合，把遍历过的数字放在该集合里。算法的复杂度是O(n!)。解法如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution1</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxCoins</span>(<span class="hljs-params">self, nums</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type nums: List[int]</span><br><span class="hljs-string">        :rtype: int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        path = []<br>        max_path = [path]<br>        <span class="hljs-built_in">max</span> = [<span class="hljs-number">0</span>]<br>        s = [<span class="hljs-number">0</span>]<br>        D = <span class="hljs-built_in">set</span>()<br>        <span class="hljs-variable language_">self</span>.find(nums, path, D, s, <span class="hljs-built_in">max</span>, max_path)<br>        <span class="hljs-built_in">print</span>(max_path[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">self, nums, path, D, s, <span class="hljs-built_in">max</span>, max_path</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(path) == <span class="hljs-built_in">len</span>(nums):<br>            <span class="hljs-keyword">if</span> s[<span class="hljs-number">0</span>] &gt; <span class="hljs-built_in">max</span>[<span class="hljs-number">0</span>]:<br>                <span class="hljs-built_in">max</span>[<span class="hljs-number">0</span>] = s[<span class="hljs-number">0</span>]<br>                max_path[<span class="hljs-number">0</span>] = path[:]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>                <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> D:<br>                    path.append(i)<br>                    D.add(i)<br>                    tmp = <span class="hljs-variable language_">self</span>.compute(i, nums, D)<br>                    s[<span class="hljs-number">0</span>] += tmp<br>                    <span class="hljs-variable language_">self</span>.find(nums, path, D, s, <span class="hljs-built_in">max</span>, max_path)<br>                    path.pop()<br>                    D.remove(i)<br>                    s[<span class="hljs-number">0</span>] -= tmp<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">compute</span>(<span class="hljs-params">self, i, nums, D</span>):<br>        left, right = <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> j <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> D:<br>                left = nums[j]<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> k <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> D:<br>                right = nums[k]<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> left * right * nums[i]<br></code></pre></td></tr></table></figure>

<h2 id="回顾矩阵链解法"><a href="#回顾矩阵链解法" class="headerlink" title=" 回顾矩阵链解法"></a><a name="hh2"></a> 回顾矩阵链解法</h2><p>以上的方法无疑会超时，但是它是我们理解问题，验证其它算法的基础。
我们希望能够得到一个多项式时间的解法，按照以往的经验，我们如果能够找到一个贪心算法是最好的，
但是如果我们能够有一个贪心算法，那么也一定能够有一个动态规划方法。<code>CRLS</code>对贪心和动态规划做了清楚的
描述，核心都是要找到最优子结构，并且证明存在最优子结构——这其实也是最难的部分，<code>因为动态规划方法从来只是一个思想，本质上不过是 递归的一种优化而已</code>。</p>
<p><code>CRLS</code>中在动态规划一章中用了几个例子来详细展示动态规划方法。其中第二个例子就是矩阵链问题————如果有一个
矩阵链<code>A1*A2*A3*A4</code>，其中A1是1x5的矩阵，A2是5x1的矩阵，A3是1x5的矩阵，A4是5x1的矩阵。那么先计算<code>A1*A2</code>和<code>A3*A4</code>
则是比较好的，代价较小都是<code>1x5x1=5</code>。而<code>A2*A3</code>则是比较糟糕的，因为<code>A2*A3</code>的计算代价是<code>5x1x5=25</code>。</p>
<blockquote>
<p>对给定的两个矩阵相乘<code>A_ik*A_kj</code>,
计算的代价是<code>i*k*j</code>。</p>
</blockquote>
<h2 id="等价转换"><a href="#等价转换" class="headerlink" title=" 等价转换"></a><a name="hh3"></a> 等价转换</h2><p>矩阵链中计算的代价是三个数相乘，而我们这里也是三个数字相乘。对于三个气球（数字）<code>5·1·5</code>，如果戳破第一个气球（数字），则得分（代价）是1x5x1，如果戳破第二个气球（数字）
得分（代价）是5x1x5，戳破第三个气球（数字）得分（代价）是1x5x1。对于1x5x1可以转换为1x5的矩阵和5x1的矩阵的代价。
5x1x5，可以转换为5x1的矩阵和1x5的矩阵的代价。最终，三个数字<code>5·1·5</code>可以等价转换为求解四个矩阵
<code>A1*A2*A3*A4</code>的最大计算代价的问题。所以第一步就是把n个数字转换为n+1个矩阵表示，第二步就是把矩阵链问题的递归求解中
的min改成max。如果这两个问题是等价的，那么我们的解法一定可以通过测试。并且似乎也不用去证明了。（其实这是最难的部分。）</p>
<p>以下是通过的<code>memoization</code>解法，算法的复杂度是O(n^2)，与矩阵链问题的复杂度一样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution2</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxCoins</span>(<span class="hljs-params">self, nums</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type nums: List[int]</span><br><span class="hljs-string">        :rtype: int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-built_in">list</span> = <span class="hljs-variable language_">self</span>.get(nums) <span class="hljs-comment"># 转换为n+1个矩阵的表示。每个pair tuple对应矩阵的长和宽。</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br>        n += <span class="hljs-number">1</span><br>        m = [[<span class="hljs-literal">None</span>] * n <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)] <span class="hljs-comment"># 声明一个子问题空间是n^2的记忆体</span><br>        <span class="hljs-built_in">print</span>(m)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            m[i][i] = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.recursive(<span class="hljs-built_in">list</span>, m, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, nums</span>):<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-built_in">list</span> = [(<span class="hljs-number">1</span>, nums[<span class="hljs-number">0</span>])]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &lt; n):<br>                <span class="hljs-built_in">list</span>.append((nums[i], nums[i + <span class="hljs-number">1</span>]))<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">list</span>.append((nums[i], <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recursive</span>(<span class="hljs-params">self, <span class="hljs-built_in">list</span>, m, i, j</span>):<br>        <span class="hljs-keyword">if</span> m[i][j] <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> m[i][j]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">max</span> = -<span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, j):<br>                a = <span class="hljs-variable language_">self</span>.recursive(<span class="hljs-built_in">list</span>, m, i, k)<br>                b = <span class="hljs-variable language_">self</span>.recursive(<span class="hljs-built_in">list</span>, m, k + <span class="hljs-number">1</span>, j)<br>                v = a + b + <span class="hljs-built_in">list</span>[i][<span class="hljs-number">0</span>] * <span class="hljs-built_in">list</span>[k][<span class="hljs-number">1</span>] * <span class="hljs-built_in">list</span>[j][<span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">if</span> v &gt; <span class="hljs-built_in">max</span> :<br>                    <span class="hljs-built_in">max</span> = v<br>            m[i][j] = <span class="hljs-built_in">max</span><br>            <span class="hljs-keyword">return</span> m[i][j]<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>[leetcode 329]Longest Increasing Path in a Matrix 原创解法</title>
    <url>/2017/03/12/2017-3-12-leetcode-329/</url>
    <content><![CDATA[<h2 id="题目概述"><a href="#题目概述" class="headerlink" title=" 题目概述"></a><a name="hh0"></a> 题目概述</h2><p><a href="https://leetcode.com/problems/longest-increasing-path-in-a-matrix/">原题链接</a></p>
<pre><code class="hljs">Given an integer matrix, find the length of the longest increasing path 
From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

example:
nums = [
  [9,9,4],
  [6,6,8],
  [2,1,1]
]
return 4
</code></pre>
<span id="more"></span>

<h2 id="回溯法"><a href="#回溯法" class="headerlink" title=" 回溯法"></a><a name="hh1"></a> 回溯法</h2><p>首先想到的就是回溯法(backtracking)。思路也很简单，就是遍历每个位置，
并以此位置的数字作为开始，向四个方向进行回溯遍历。最终找到最长的序列。
以下代码的36行和38行进行回溯。不过毫无疑问超时了。在这个基础上还可以
进一步优化，比如只对in-degree为0的位置的数字进行考察。但是还是不行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestIncreasingPath</span>(<span class="hljs-params">self, matrix</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        回溯法解法。</span><br><span class="hljs-string">        :type matrix: List[List[int]]</span><br><span class="hljs-string">        :rtype: int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><br>        <span class="hljs-keyword">if</span> matrix:<br>            hight = <span class="hljs-built_in">len</span>(matrix)<br>            width = <span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])<br><br>            s = <span class="hljs-built_in">set</span>((u, v) <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(hight) <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width))<br><br>            result = [<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> s:<br>                p = [item]<br>                <span class="hljs-variable language_">self</span>.find(matrix, item, p, result, s)<br><br>            <span class="hljs-keyword">return</span> result[<span class="hljs-number">0</span>]<br><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">self, matrix, item, p, result, s</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.has_no_choice(matrix, item, p, s):<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(p) &gt; result[<span class="hljs-number">0</span>]):<br>                result[<span class="hljs-number">0</span>] = <span class="hljs-built_in">len</span>(p)<br>        <span class="hljs-keyword">else</span>:<br>            u, v = item<br>            four = [(u + <span class="hljs-number">1</span>, v), (u - <span class="hljs-number">1</span>, v), (u, v + <span class="hljs-number">1</span>), (u, v - <span class="hljs-number">1</span>)]<br>            <span class="hljs-keyword">for</span> one <span class="hljs-keyword">in</span> four:<br>                x, y = one<br>                <span class="hljs-keyword">if</span> (x, y) <span class="hljs-keyword">in</span> s <span class="hljs-keyword">and</span> (x, y) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> p <span class="hljs-keyword">and</span> matrix[x][y] &lt; matrix[u][v]:<br>                    p.append((x, y))<br>                    <span class="hljs-variable language_">self</span>.find(matrix, (x, y), p, result, s)<br>                    p.pop()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_no_choice</span>(<span class="hljs-params">self, matrix, item, p, s</span>):<br>        u, v = item<br>        four = [(u + <span class="hljs-number">1</span>, v), (u - <span class="hljs-number">1</span>, v), (u, v + <span class="hljs-number">1</span>), (u, v - <span class="hljs-number">1</span>)]<br><br>        <span class="hljs-keyword">for</span> one <span class="hljs-keyword">in</span> four:<br>            x, y = one<br>            <span class="hljs-keyword">if</span> one <span class="hljs-keyword">in</span> s <span class="hljs-keyword">and</span> one <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> p <span class="hljs-keyword">and</span> matrix[x][y] &lt; matrix[u][v]:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>

<h2 id="拓扑排序和记忆体"><a href="#拓扑排序和记忆体" class="headerlink" title=" 拓扑排序和记忆体"></a><a name="hh2"></a> 拓扑排序和记忆体</h2><p>看看leetcode会给我们什么提示呢？点开<code>show tags</code>可以看到这个问题的标签，
<code>Topological Sort</code>和<code>Memoization</code>。既然使用topsort那么肯定要把这个问题
转化为DAG问题了。如此一来，令人想到，可以先把矩阵数字使用topsort排成
一排，然后再利用曾经遇到的求解最长递增子序列的动态规划算法进行求解。
以下是实现的代码，拓扑排序加动态规划。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestIncreasingPath</span>(<span class="hljs-params">self, matrix</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type matrix: List[List[int]]</span><br><span class="hljs-string">        :rtype: int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><br>        <span class="hljs-keyword">if</span> matrix:<br>            hight = <span class="hljs-built_in">len</span>(matrix)<br>            width = <span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])<br><br>            s = <span class="hljs-built_in">set</span>((u, v) <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(hight) <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width))<br>            G = <span class="hljs-variable language_">self</span>.create_graph(matrix, s)<br>            topsort_list = <span class="hljs-variable language_">self</span>.topsort(G)<br>            result = <span class="hljs-variable language_">self</span>.find_longest_path(G, topsort_list)<br>            <span class="hljs-keyword">return</span> result<br><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_graph</span>(<span class="hljs-params">self, matrix, s</span>):<br>        G = &#123;&#125;<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> s:<br>            u, v = item<br>            G[item] = <span class="hljs-built_in">set</span>()<br>            center = matrix[u][v]<br>            four = [(u + <span class="hljs-number">1</span>, v), (u - <span class="hljs-number">1</span>, v), (u, v + <span class="hljs-number">1</span>), (u, v - <span class="hljs-number">1</span>)]<br>            <span class="hljs-keyword">for</span> one <span class="hljs-keyword">in</span> four:<br>                <span class="hljs-keyword">if</span> one <span class="hljs-keyword">in</span> s:<br>                    x, y = one<br>                    adjacent = matrix[x][y]<br>                    <span class="hljs-keyword">if</span> center &gt; adjacent:<br>                        G[item].add(one)<br>        <span class="hljs-keyword">return</span> G<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tr</span>(<span class="hljs-params">self, G</span>):<br>        H = &#123;&#125;<br>        <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> G:<br>            H[u] = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> G:<br>            <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> G[u]:<br>                H[v] += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> H<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">topsort</span>(<span class="hljs-params">self, G</span>):<br><br>        H = <span class="hljs-variable language_">self</span>.tr(G)<br>        q = deque()<br>        sorted_list = []<br>        <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> H :<br>            <span class="hljs-keyword">if</span> H[u] == <span class="hljs-number">0</span> :<br>                q.append(u)<br>        <span class="hljs-keyword">while</span> q:<br>            u = q.popleft()<br>            sorted_list.append(u)<br>            <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> G[u]:<br>                H[v] -= <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> H[v] == <span class="hljs-number">0</span> :<br>                    q.append(v)<br><br>        <span class="hljs-keyword">return</span> sorted_list<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_longest_path</span>(<span class="hljs-params">self, G, topsort_list</span>):<br>        n = <span class="hljs-built_in">len</span>(topsort_list)<br><br>        memo = [<span class="hljs-number">1</span>] * n<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>            node = topsort_list[i]<br>            value = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> pre <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, i):<br>                pre_node = topsort_list[pre]<br>                <span class="hljs-keyword">if</span> node <span class="hljs-keyword">in</span> G[pre_node]:<br>                    value = <span class="hljs-built_in">max</span>(value, memo[pre] + <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    value = <span class="hljs-built_in">max</span>(value, memo[pre])<br>            memo[i] = value<br><br>        result = <span class="hljs-built_in">max</span>(memo)<br>        <span class="hljs-comment">#print(memo)</span><br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure>

<h2 id="进一步优化"><a href="#进一步优化" class="headerlink" title=" 进一步优化"></a><a name="hh3"></a> 进一步优化</h2><p>上边的解法还是超时了，时间不会消耗在topsort上，因为这个方法是<code>O(|V|+|E|)</code>的。
主要的时间花在了动态规划上，因为这是一个<code>O(N^2)</code>的算法。
我们仔细看看第72到76行这个内循环，发现遍历所有当前节点之前的节点是无效的。
因为可以进入当前节点的节点不会超过４个。所以我们可以修改一下这个内循环。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">tr2</span>(<span class="hljs-params">self, G</span>):<br>    H = &#123;&#125;<br>    <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> G:<br>        H[u] = <span class="hljs-built_in">set</span>()<br><br>    <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> G:<br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> G[u]:<br>            H[v].add(u)<br>    <span class="hljs-keyword">return</span> H<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_longest_path</span>(<span class="hljs-params">self, G, topsort_list</span>):<br>    n = <span class="hljs-built_in">len</span>(topsort_list)<br><br>    dic = &#123; node : <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> topsort_list &#125;<br>    H = <span class="hljs-variable language_">self</span>.tr2(G)<br><br>    s = &#123;topsort_list[<span class="hljs-number">0</span>]&#125;<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>        node = topsort_list[i]<br>        s.add(node)<br>        value = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> pre_node <span class="hljs-keyword">in</span> H[node] :<br>            <span class="hljs-keyword">if</span> pre_node <span class="hljs-keyword">in</span> s :<br>                value = <span class="hljs-built_in">max</span>(value, dic[pre_node] + <span class="hljs-number">1</span>)<br>        dic[node] = value<br><br>    result = <span class="hljs-built_in">max</span>(dic.values())<br>    <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure>

<p>这里我们在１６行使用一个dict来代替之前的memo，
这样就可以把一个<code>O(N^2)</code>改成一个<code>O(N)</code>的了。
测试一下，幸运的通过了。不过只打败了<code>1.7%</code>。</p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>编译和运行Clojure分支20081217源码</title>
    <url>/2017/03/23/2017-3-23-compile-and-run-clojure/</url>
    <content><![CDATA[<h2 id="Clojure-branch-20081217"><a href="#Clojure-branch-20081217" class="headerlink" title=" Clojure branch 20081217"></a><a name="hh0"></a> Clojure branch 20081217</h2><p>为啥要做这件事情呢？</p>
<ol>
<li>Clojure是一门jvm语言，使用了asm。</li>
<li>branch 20081217是最初的版本便于研究。</li>
</ol>
<span id="more"></span>

<h2 id="下载branch-20081217"><a href="#下载branch-20081217" class="headerlink" title=" 下载branch 20081217"></a><a name="hh1"></a> 下载branch 20081217</h2><p>本来直接这样一条语句很简单的事情，但是由于网络太慢。我只好
直接下载这个分支的源码zip包。</p>
<pre><code class="hljs">git clone https://github.com/clojure/clojure.git
git checkout 20081217
</code></pre>
<h2 id="编译环境配置"><a href="#编译环境配置" class="headerlink" title=" 编译环境配置"></a><a name="hh2"></a> 编译环境配置</h2><p>虽然有<code>pom.xml</code>文件但是简单的导入到<code>IDEA</code>并不起作用。
还是按照官方说明来搞吧，用<code>ant</code>编译。
下载最新的ant版本1.10，并使用jdk1.8是会出错的。
想想十年前的情况。找到ant-1.7和jdk1.5进行编译才行。
以下是编译的结果，最后在根目录下生成了<code>clojure.jar</code>。</p>
<pre><code class="hljs">d:\work\idea\clojure-20081217&gt;ant
Buildfile: build.xml

clean:
   [delete] Deleting directory d:\work\idea\clojure-20081217\classes

init:
    [mkdir] Created dir: d:\work\idea\clojure-20081217\classes

compile_java:
    [javac] Compiling 113 source files to d:\work\idea\clojure-20081217\classes
    [javac] 注意：某些输入文件使用了未经检查或不安全的操作。
    [javac] 注意：要了解详细信息，请使用 -Xlint:unchecked 重新编译。

compile_clojure:
     [java] Compiling clojure.core to d:\work\idea\clojure-20081217\classes
     [java] Compiling clojure.main to d:\work\idea\clojure-20081217\classes
     [java] Compiling clojure.set to d:\work\idea\clojure-20081217\classes
     [java] Compiling clojure.xml to d:\work\idea\clojure-20081217\classes
     [java] Compiling clojure.zip to d:\work\idea\clojure-20081217\classes
     [java] Compiling clojure.inspector to d:\work\idea\clojure-20081217\classes

jar:
      [jar] Building jar: d:\work\idea\clojure-20081217\clojure.jar

BUILD SUCCESSFUL
Total time: 13 seconds
</code></pre>
<h2 id="运行"><a href="#运行" class="headerlink" title=" 运行"></a><a name="hh3"></a> 运行</h2><p>官方<code>readme</code>给出了办法来证明运行成功。执行<code>java -cp clojure.jar clojure.lang.Repl</code>
，这样就可以进入clojure的repl环境。</p>
<pre><code class="hljs">d:\work\idea\clojure-20081217&gt;java -cp clojure.jar clojure.lang.Repl
Clojure
user=&gt; (def n 2)
#&#39;user/n
user=&gt; (* n 2)
4
user=&gt;
</code></pre>
<p>如何运行一个clj文件呢？可以这样做。</p>
<ul>
<li>在根路径下创建一个hello.clj文件，内容为<code>(print &quot;hello world&quot;)</code></li>
<li>运行命令<code>java -cp clojure.jar clojure.lang.Script hello.clj</code></li>
</ul>
<p>如下所示。</p>
<pre><code class="hljs">d:\work\idea\clojure-20081217&gt;java -cp clojure.jar clojure.lang.Script hello_world.clj
hello world
</code></pre>
<p>成功了。</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>clojure</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>从大文件中找到出现次数最多的10个数</title>
    <url>/2017/11/27/find-top-n/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title=" 问题"></a><a name="hh0"></a> 问题</h2><p>这是一个经典题，面试的时候经常会遇到。
例如：文件的内容如下</p>
<pre><code class="hljs">26329
46184
94842
9036
96555
40954
38187
15548
51452
861
51010
8721
13666
69837 
</code></pre>
<p>每行一个数字，找到出现次数最多的数。通常的解法是遍历文件一遍，用hashmap维护一个(number &#x3D;&gt; freq)，
然后用最小堆找到最大的10个数。</p>
<span id="more"></span>

<h2 id="用Trie代替Hashmap"><a href="#用Trie代替Hashmap" class="headerlink" title=" 用Trie代替Hashmap"></a><a name="hh1"></a> 用Trie代替Hashmap</h2><p>如果内存很小，hashmap放不下怎么办呢？可以使用Trie来代替HashMap。
但是我们这里的Trie在<code>insert</code>一个串的时候会在叶子节点用一个count来计数。
这里的叶子节点特指<code>isEnd</code>为<code>true</code>的TrieNode。
通常Trie用于匹配字符串，会有<code>startsWith</code>方法。但是我们这里不需要这个方法，而需要一个遍历
所有叶子节点的方法<code>traverseLeaf</code>。下面就是我们的<code>Trie</code>class。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ym.parallel;<br><br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">import</span> java.util.ArrayDeque;<br><span class="hljs-keyword">import</span> java.util.Deque;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by ym on 11/26/2017.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Trie.class);<br>    <span class="hljs-keyword">private</span> TrieNode root;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;<br>        root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieNode</span>(<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-type">TrieNode</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-type">TrieNode</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">Character</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(i);<br><br>            <span class="hljs-keyword">if</span> (parent.contains(c)) &#123;<br>                child = parent.get(c);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                child = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieNode</span>(c);<br>                parent.put(c, child);<br>                child.parent = parent;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span>) &#123;<br>                child.isEnd = <span class="hljs-literal">true</span>;<br>                child.count += <span class="hljs-number">1</span>;<br>            &#125;<br>            parent = child;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">traverseLeaf</span><span class="hljs-params">(TrieClient client)</span> &#123;<br>        Deque&lt;TrieNode&gt; deque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>        deque.push(root);<br><br>        <span class="hljs-keyword">while</span> (!deque.isEmpty()) &#123;<br>            <span class="hljs-type">TrieNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> deque.pop();<br>            <span class="hljs-keyword">if</span> (tmp.isEnd) &#123;<br>                client.visit(tmp);<br>            &#125;<br><br>            <span class="hljs-keyword">for</span> (Map.Entry&lt;Character, TrieNode&gt; entry : tmp.children.entrySet()) &#123;<br>                deque.push(entry.getValue());<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieNode</span> &#123;<br>        <span class="hljs-keyword">private</span> HashMap&lt;Character, TrieNode&gt; children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isEnd</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">private</span> Character c;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">TrieNode</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        TrieNode(Character c) &#123;<br>            <span class="hljs-built_in">this</span>.c = c;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(Character c, TrieNode node)</span> &#123;<br>            children.putIfAbsent(c, node);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(Character c)</span> &#123;<br>            <span class="hljs-keyword">return</span> children.containsKey(c);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> TrieNode <span class="hljs-title function_">get</span><span class="hljs-params">(Character c)</span> &#123;<br>            <span class="hljs-keyword">return</span> children.get(c);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-type">TrieNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<br>            <span class="hljs-keyword">while</span> (node.c != <span class="hljs-literal">null</span>) &#123;<br>                s.insert(<span class="hljs-number">0</span>, node.c.toString());<br>                node = node.parent;<br>            &#125;<br>            <span class="hljs-keyword">return</span> s.toString();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TrieClient</span> &#123;<br><br>        <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(TrieNode node)</span> &#123;<br>            logger.info(node.getString() + <span class="hljs-string">&quot;:&quot;</span> + node.count);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Trie</span> <span class="hljs-variable">trie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Trie</span>();<br>        trie.insert(<span class="hljs-string">&quot;abc&quot;</span>);<br>        trie.insert(<span class="hljs-string">&quot;ab&quot;</span>);<br>        trie.insert(<span class="hljs-string">&quot;ab&quot;</span>);<br>        trie.insert(<span class="hljs-string">&quot;cde&quot;</span>);<br>        trie.insert(<span class="hljs-string">&quot;cde&quot;</span>);<br>        trie.traverseLeaf(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieClient</span>() &#123;&#125;);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>运行main的结果如下：</p>
<pre><code class="hljs">2017-11-27 10:40:52 INFO  Trie:103    cde:2
2017-11-27 10:40:52 INFO  Trie:103    ab:2
2017-11-27 10:40:52 INFO  Trie:103    abc:1
</code></pre>
<h2 id="用Trie实现的Java代码"><a href="#用Trie实现的Java代码" class="headerlink" title=" 用Trie实现的Java代码"></a><a name="hh2"></a> 用Trie实现的Java代码</h2><p>这个<code>Trie</code>怎么用呢？以下是完整的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ym.parallel;<br><br><span class="hljs-keyword">import</span> com.google.common.base.MoreObjects;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by ym on 11/26/2017.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SolutionTrie</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(SolutionTrie.class);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String path;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Trie</span> <span class="hljs-variable">trie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Trie</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> PriorityQueue&lt;IPCounter&gt; heap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>        path = <span class="hljs-string">&quot;d:/tmp/log_ip.txt&quot;</span>;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findTopTen</span><span class="hljs-params">()</span> &#123;<br><br>        logger.info(<span class="hljs-string">&quot;compute begin&quot;</span>);<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path)));) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                trie.insert(line);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        logger.info(<span class="hljs-string">&quot;read complete.&quot;</span>);<br><br>        trie.traverseLeaf(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Trie</span>.TrieClient() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Trie.TrieNode node)</span> &#123;<br>                <span class="hljs-type">IPCounter</span> <span class="hljs-variable">ipCounter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IPCounter</span>(node.getString(), node.getCount());<br>                <span class="hljs-keyword">if</span> (heap.size() &lt; <span class="hljs-number">10</span>) &#123;<br>                    heap.add(ipCounter);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (heap.peek().count &lt; ipCounter.count) &#123;<br>                        heap.poll();<br>                        heap.add(ipCounter);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-keyword">while</span> (!heap.isEmpty()) &#123;<br>            logger.info(heap.poll().toString());<br>        &#125;<br>        logger.info(<span class="hljs-string">&quot;compute end&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IPCounter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span> &#123;<br>        <span class="hljs-keyword">private</span> String ip;<br>        <span class="hljs-keyword">private</span> Integer count;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">IPCounter</span><span class="hljs-params">(String ip, Integer count)</span> &#123;<br>            <span class="hljs-built_in">this</span>.ip = ip;<br>            <span class="hljs-built_in">this</span>.count = count;<br>        &#125;<br><br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object o)</span> &#123;<br>            <span class="hljs-type">IPCounter</span> <span class="hljs-variable">ipCounter</span> <span class="hljs-operator">=</span> (IPCounter) o;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count.compareTo(ipCounter.count);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> MoreObjects.toStringHelper(<span class="hljs-built_in">this</span>).add(<span class="hljs-string">&quot;Ip&quot;</span>, ip).add(<span class="hljs-string">&quot;count&quot;</span>, count).toString();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>java</tag>
        <tag>algorithm</tag>
        <tag>trie</tag>
      </tags>
  </entry>
  <entry>
    <title>How to call java code in Grails 3.2.6</title>
    <url>/2017/03/06/2017-3-6-grails-call-java/</url>
    <content><![CDATA[<h2 id="解决方法"><a href="#解决方法" class="headerlink" title=" 解决方法"></a><a name="hh0"></a> 解决方法</h2><p>我的<code>Grails</code>的环境是</p>
<pre><code class="hljs">grails -v
| Grails Version: 3.2.6
| Groovy Version: 2.4.7
| JVM Version: 1.8.0_71
</code></pre>
<span id="more"></span>

<p>grails 3.2.6是用gradle进行构建的。所以如果要添加java类，
就需要修改<code>build.gradle</code>。</p>
<h2 id="第一步"><a href="#第一步" class="headerlink" title=" 第一步"></a><a name="hh1"></a> 第一步</h2><p>创建<code>src/main/java</code>目录。对于<code>com.yanggeorge.XMLtest</code>类，
则要创建<code>src/main/java/com/yanggeorge/</code>目录，并把XMLtest.java放在该
路径下。</p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title=" 第二步"></a><a name="hh2"></a> 第二步</h2><p>在<code>build.gradle</code>文件中添加如下代码</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&quot;java&quot;</span><br><br>task compileOne (<span class="hljs-attr">type:</span> JavaCompile) &#123;<br>    source = sourceSets.main.java.srcDirs<br>    include <span class="hljs-string">&#x27;com/yanggeorge/XMLtest.java&#x27;</span><br>    classpath = sourceSets.main.compileClasspath<br>    destinationDir = sourceSets.main.output.classesDir<br>&#125;<br><br>compileOne.options.compilerArgs = [<span class="hljs-string">&quot;-sourcepath&quot;</span>, <span class="hljs-string">&quot;$projectDir/src/main/java&quot;</span>]<br></code></pre></td></tr></table></figure>

<h2 id="第三步"><a href="#第三步" class="headerlink" title=" 第三步"></a><a name="hh3"></a> 第三步</h2><p>编译XMLtest.java。可以用<code>grails compile</code>进行编译。</p>
<pre><code class="hljs">D:\work\grails&gt;grails compile
:compileJava UP-TO-DATE
:compileGroovy UP-TO-DATE
:buildProperties
:processResources UP-TO-DATE
:classes UP-TO-DATE

BUILD SUCCESSFUL

Total time: 23.638 secs
D:\work\grails&gt;
</code></pre>
<h2 id="第四步"><a href="#第四步" class="headerlink" title=" 第四步"></a><a name="hh4"></a> 第四步</h2><p>修改<code>grails-app/conf/spring/resources.groovy</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">import</span> com.yanggeorge.XMLtest<br><br>beans = &#123;<br>    myXMLtest(XMLtest)<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="第五步"><a href="#第五步" class="headerlink" title=" 第五步"></a><a name="hh5"></a> 第五步</h2><p>已经可以使用<code>myXMLtest</code>了，例如创建一个service，<code>grails-app/services/rss/RssService.groovy</code>
第６行就是依赖注入的bean。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">import</span> grails.transaction.Transactional<br><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RssService</span> &#123;<br><br>    <span class="hljs-keyword">def</span> myXMLtest<br><br>    <span class="hljs-keyword">def</span> serviceMethod(String url, String keyword) &#123;<br>        <span class="hljs-keyword">def</span> items = myXMLtest.getAllItems(url)<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
        <tag>grails</tag>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Write a simple parser for MiniLisp by using JavaCC</title>
    <url>/2017/05/19/2017-5-19-javacc-minilisp/</url>
    <content><![CDATA[<h2 id="MiniLisp是什么？"><a href="#MiniLisp是什么？" class="headerlink" title=" MiniLisp是什么？"></a><a name="hh0"></a> MiniLisp是什么？</h2><p><a href="https://github.com/rui314/minilisp">MiniLisp</a>是一个只用几百行代码实现的Lisp。以下是实现的
基本特性。</p>
<ul>
<li>integers, symbols, cons cells,</li>
<li>global variables,</li>
<li>lexically-scoped local variables,</li>
<li>closures,</li>
<li>if conditional,</li>
<li>primitive functions, such as +, &#x3D;, &lt;, or list,</li>
<li>user-defined functions,</li>
<li>a macro system,</li>
<li>and a copying garbage collector.</li>
</ul>
<span id="more"></span>


<p>在笔者看来真是麻雀虽小五脏俱全啊。这是一个非常值得研究的项目。</p>
<h2 id="JavaCC是什么？"><a href="#JavaCC是什么？" class="headerlink" title=" JavaCC是什么？"></a><a name="hh1"></a> JavaCC是什么？</h2><p><a href="https://javacc.org/">JavaCC</a>据说是一个非常易用好理解的<code>LL(k)</code>的Parser生成工具。
说它好理解是指它生成的Java代码要比<code>LR</code>类型的容易理解。毕竟<code>LL</code>是<code>Top-Down Parser</code>呀。
笔者以前只用过<code>LR(1)</code>类型的工具，<code>JavaCC</code>则从来没用过。</p>
<h2 id="MiniLisp的BNF语法描述没有怎么办？"><a href="#MiniLisp的BNF语法描述没有怎么办？" class="headerlink" title=" MiniLisp的BNF语法描述没有怎么办？"></a><a name="hh2"></a> MiniLisp的BNF语法描述没有怎么办？</h2><p><code>MiniLisp</code>的作者并没有使用<code>yacc</code>等工具，而是自己手写的<code>Top-Down Parser</code>。所以无法得到
<code>MiniLisp</code>的BNF描述。</p>
<p>没关系，既然是Lisp方言，那么先看看传统的Lisp的BNF语法是什么。这里有一个简单的BNF版本
<a href="http://cui.unige.ch/isi/bnf/LISP/BNFlisp.html">BNF rules of LISP</a></p>
<pre><code class="hljs">s_expression = atomic_symbol \
              / &quot;(&quot; s_expression &quot;.&quot;s_expression &quot;)&quot; \
              / list 

list = &quot;(&quot; s_expression &lt; s_expression &gt; &quot;)&quot;

atomic_symbol = letter atom_part

atom_part = empty / letter atom_part / number atom_part

letter = &quot;a&quot; / &quot;b&quot; / &quot; ...&quot; / &quot;z&quot;

number = &quot;1&quot; / &quot;2&quot; / &quot; ...&quot; / &quot;9&quot;

empty = &quot; &quot;
</code></pre>
<p>想要实现MiniLisp的Parser，首先要理解这个BNF规则。</p>
<h2 id="MiniLisp的jj文件"><a href="#MiniLisp的jj文件" class="headerlink" title=" MiniLisp的jj文件"></a><a name="hh3"></a> MiniLisp的jj文件</h2><p>以下是用JavaCC生成MiniLisp
 Parser的jj文件。用javacc编译之后，会报一个警告<code>117行和118行发生conflict</code>。但是笔者已经加上<code>LOOKAHEAD(2)</code>了。
不知道为什么还警告，而且也单独对这部分进行了测试，完全没有问题。另外，这个生成的Parser并没有构造AST。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">options &#123;<br>  STATIC = <span class="hljs-literal">false</span>;<br>  DEBUG_PARSER = <span class="hljs-literal">true</span>;<br>  DEBUG_LOOKAHEAD = <span class="hljs-literal">true</span>;<br>  DEBUG_TOKEN_MANAGER = <span class="hljs-literal">false</span>;<br>  ERROR_REPORTING = <span class="hljs-literal">true</span>;<br>  JAVA_UNICODE_ESCAPE = <span class="hljs-literal">false</span>;<br>  UNICODE_INPUT = <span class="hljs-literal">false</span>;<br>  IGNORE_CASE = <span class="hljs-literal">false</span>;<br>  USER_TOKEN_MANAGER = <span class="hljs-literal">false</span>;<br>  USER_CHAR_STREAM = <span class="hljs-literal">false</span>;<br>  BUILD_PARSER = <span class="hljs-literal">true</span>;<br>  BUILD_TOKEN_MANAGER = <span class="hljs-literal">true</span>;<br>  SANITY_CHECK = <span class="hljs-literal">true</span>;<br>  FORCE_LA_CHECK = <span class="hljs-literal">true</span>;<br>&#125;<br><br>PARSER_BEGIN(MiniLisp)<br><br><span class="hljs-keyword">package</span> ym.minilisp;<br><br><span class="hljs-keyword">import</span> ym.minilisp.node.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MiniLisp</span> &#123;<br><br>  <span class="hljs-comment">/** Main entry point. */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>    <span class="hljs-type">MiniLisp</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniLisp</span>(System.in);<br>    parser.Input();<br>  &#125;<br><br>&#125;<br>PARSER_END(MiniLisp)<br><br><br>TOKEN :<br>&#123;<br>      &lt;EMPTY: [<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;\t&quot;</span>,<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;\r&quot;</span>] ([<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;\t&quot;</span>,<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;\r&quot;</span>])*&gt;<br>    | &lt;LP: <span class="hljs-string">&quot;(&quot;</span>&gt;<br>    | &lt;RP: <span class="hljs-string">&quot;)&quot;</span>&gt;<br>    | &lt;DOT: <span class="hljs-string">&quot;.&quot;</span>&gt;<br>    | &lt;MINUS: <span class="hljs-string">&quot;-&quot;</span>&gt;<br>    | &lt;PLUS: <span class="hljs-string">&quot;+&quot;</span>&gt;<br>    | &lt;EQ: <span class="hljs-string">&quot;=&quot;</span>&gt;<br>    | &lt;AND: <span class="hljs-string">&quot;and&quot;</span>&gt;<br>    | &lt;NOT: <span class="hljs-string">&quot;not&quot;</span>&gt;<br>    | &lt;OR: <span class="hljs-string">&quot;or&quot;</span>&gt;<br>    | &lt;GT: <span class="hljs-string">&quot;&gt;&quot;</span>&gt;<br>    | &lt;LT: <span class="hljs-string">&quot;&lt;&quot;</span>&gt;<br>    | &lt;LE: <span class="hljs-string">&quot;&lt;=&quot;</span>&gt;<br>    | &lt;GE: <span class="hljs-string">&quot;&gt;=&quot;</span>&gt;<br>    | &lt;SQUOTE: <span class="hljs-string">&quot;&#x27;&quot;</span>&gt;<br>    | &lt;QUOTE: <span class="hljs-string">&quot;quote&quot;</span>&gt;<br>    | &lt;NUM: [<span class="hljs-string">&quot;1&quot;</span>-<span class="hljs-string">&quot;9&quot;</span>] ( [<span class="hljs-string">&quot;0&quot;</span>-<span class="hljs-string">&quot;9&quot;</span>] )* | <span class="hljs-string">&quot;0&quot;</span>&gt;<br>    | &lt;ID: ([<span class="hljs-string">&quot;a&quot;</span>-<span class="hljs-string">&quot;z&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>-<span class="hljs-string">&quot;Z&quot;</span>,<span class="hljs-string">&quot;_&quot;</span>,<span class="hljs-string">&quot;@&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-string">&quot;$&quot;</span>,<span class="hljs-string">&quot;%&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>]) (~[<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;\r&quot;</span>,<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;)&quot;</span>,<span class="hljs-string">&quot;\t&quot;</span>,<span class="hljs-string">&quot;#&quot;</span>,<span class="hljs-string">&quot;;&quot;</span>,<span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;&#125;&quot;</span>,<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;]&quot;</span>])* &gt;<br>    | &lt;COMMENT: ([<span class="hljs-string">&quot;;&quot;</span>])(~[<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;\r&quot;</span>])* [<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;\r&quot;</span>]&gt;<br>&#125;<br><br><br><span class="hljs-comment">/** Root production. */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">Input</span><span class="hljs-params">()</span> :<br>&#123;&#125;<br>&#123;<br>    ( Expr() )*  &lt;EOF&gt;<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">Expr</span><span class="hljs-params">()</span>:<br>&#123;&#125;<br>&#123;<br>      NonSExpr()<br>    | SExpr()<br>&#125;<br><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">NonSExpr</span><span class="hljs-params">()</span>:<br>&#123;&#125;<br>&#123;<br>    &lt;EMPTY&gt;<br>   |&lt;COMMENT&gt;<br>&#125;<br><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">SExpr</span><span class="hljs-params">()</span> :<br>&#123;&#125;<br>&#123;<br>      SymbolExpr()<br>    | &lt;LP&gt; (NonSExpr())* (SExpr() (NonSExpr())* )*  [&lt;DOT&gt; (NonSExpr())*  (SExpr() (NonSExpr())* )*] &lt;RP&gt;<br>    | SQuoteExpr()<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">SQuoteExpr</span><span class="hljs-params">()</span>:<br>&#123;&#125;<br>&#123;<br>    &lt;SQUOTE&gt; SExpr()<br>&#125;<br><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">SymbolExpr</span><span class="hljs-params">()</span>:<br>&#123;&#125;<br>&#123;<br>    Symbol() LOOKAHEAD(&#123; getToken(<span class="hljs-number">1</span>).kind == LP || getToken(<span class="hljs-number">1</span>).kind == RP|| getToken(<span class="hljs-number">1</span>).kind == DOT || getToken(<span class="hljs-number">1</span>).kind == COMMENT || getToken(<span class="hljs-number">1</span>).kind == EMPTY &#125;)<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">Symbol</span><span class="hljs-params">()</span>:<br>&#123;&#125;<br>&#123;<br>       &lt;PLUS&gt;<br>    |  &lt;EQ&gt;<br>    |  &lt;AND&gt;<br>    |  &lt;NOT&gt;<br>    |  &lt;OR&gt;<br>    |  &lt;GT&gt;<br>    |  &lt;LT&gt;<br>    |  &lt;LE&gt;<br>    |  &lt;GE&gt;<br>    |  LOOKAHEAD(<span class="hljs-number">2</span>) &lt;MINUS&gt; &lt;NUM&gt;<br>    |  &lt;MINUS&gt;<br>    |  &lt;NUM&gt;<br>    |  &lt;ID&gt;<br>&#125;<br></code></pre></td></tr></table></figure>


<h2 id="测试代码"><a href="#测试代码" class="headerlink" title=" 测试代码"></a><a name="hh4"></a> 测试代码</h2><p>以下是对生成的MiniLisp.java文件进行测试的类。其中<code>test14</code>和<code>test15</code>是对
MiniLisp项目下的life.lisp和nqueens.lisp文件内容完整解析测试。
没有报错，说明jj中的规则可以解析MiniLisp。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ym.minilisp;<br><br><span class="hljs-keyword">import</span> java.io.StringReader;<br><span class="hljs-keyword">import</span> junit.framework.TestCase;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestParser</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TestCase</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;((a.b).(b.(c)))&quot;</span>;<br>        call(s);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(a b c)&quot;</span>;<br>        call(s);<br>        s = <span class="hljs-string">&quot;(a b . c)&quot;</span>;<br>        call(s);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(a .(b c))&quot;</span>;<br>        call(s);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; ( ( a b ) . ( b c ) ) &quot;</span>;<br>        call(s);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;( a ( a b )  ( b c ) ) &quot;</span>;<br>        call(s);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(define a 1) (define b -1) &quot;</span>;<br>        call(s);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test7</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; (+ 1 -2 a b (- 1 2)) &quot;</span>;<br>        call(s);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test8</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; (defun next (board x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (let c (count board x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;       (if (alive? board x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;           (or (= c 2) (= c 3))\n&quot;</span><br>                + <span class="hljs-string">&quot;         (= c 3))))&quot;</span>;<br>        System.out.println(s);<br>        call(s);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test9</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(defun count (board x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (let at (lambda (x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;            (if (alive? board x y) 1 0))\n&quot;</span><br>                + <span class="hljs-string">&quot;       (+ (at (- x 1) (- y 1))\n&quot;</span><br>                + <span class="hljs-string">&quot;          (at (- x 1) y)\n&quot;</span><br>                + <span class="hljs-string">&quot;          (at (- x 1) (+ y 1))\n&quot;</span><br>                + <span class="hljs-string">&quot;          (at x (- y 1))\n&quot;</span><br>                + <span class="hljs-string">&quot;          (at x (+ y 1))\n&quot;</span><br>                + <span class="hljs-string">&quot;          (at (+ x 1) (- y 1))\n&quot;</span><br>                + <span class="hljs-string">&quot;          (at (+ x 1) y)\n&quot;</span><br>                + <span class="hljs-string">&quot;          (at (+ x 1) (+ y 1)))))&quot;</span>;<br>        System.out.println(s);<br>        call(s);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test10</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; &#x27;(+ 1 2) &quot;</span>;<br>        call(s);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test11</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(cons &#x27;1 &#x27;2)&quot;</span>;<br>        call(s);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test12</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(defmacro progn (expr . rest)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (list (cons &#x27;lambda (cons () (cons expr rest)))))&quot;</span>;<br>        call(s);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test13</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;;;fadfsdfasdfasdfasdfa\n&quot;</span><br>                + <span class="hljs-string">&quot;(cons &#x27;1 &#x27;2)&quot;</span>;<br>        call(s);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test131</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(cons ;;fadfsdfasdfasdfasdfa\n&quot;</span><br>                + <span class="hljs-string">&quot;  &#x27;1 &#x27;2)&quot;</span>;<br>        call(s);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test132</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;;;fadfsdfasdfasdfasdfa\n&quot;</span><br>                + <span class="hljs-string">&quot;  \n&quot;</span><br>                + <span class="hljs-string">&quot;;;fadfsdfasdfasdfasdf\n&quot;</span>;<br><br>        call(s);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test133</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(list ;;fadfsdfasdfasdfasdfa\n&quot;</span><br>                + <span class="hljs-string">&quot;  a  ;;fadfsdfasdfasdfasdfa\n &quot;</span><br>                + <span class="hljs-string">&quot;b)&quot;</span>;<br>        call(s);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test14</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; Conway&#x27;s game of life\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; (progn expr ...)\n&quot;</span><br>                + <span class="hljs-string">&quot;;; =&gt; ((lambda () expr ...))\n&quot;</span><br>                + <span class="hljs-string">&quot;(defmacro progn (expr . rest)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (list (cons &#x27;lambda (cons () (cons expr rest)))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun list (x . y)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (cons x y))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun not (x)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (if x () t))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; (let var val body ...)\n&quot;</span><br>                + <span class="hljs-string">&quot;;; =&gt; ((lambda (var) body ...) val)\n&quot;</span><br>                + <span class="hljs-string">&quot;(defmacro let (var val . body)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (cons (cons &#x27;lambda (cons (list var) body))\n&quot;</span><br>                + <span class="hljs-string">&quot;\t(list val)))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; (and e1 e2 ...)\n&quot;</span><br>                + <span class="hljs-string">&quot;;; =&gt; (if e1 (and e2 ...))\n&quot;</span><br>                + <span class="hljs-string">&quot;;; (and e1)\n&quot;</span><br>                + <span class="hljs-string">&quot;;; =&gt; e1\n&quot;</span><br>                + <span class="hljs-string">&quot;(defmacro and (expr . rest)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (if rest\n&quot;</span><br>                + <span class="hljs-string">&quot;      (list &#x27;if expr (cons &#x27;and rest))\n&quot;</span><br>                + <span class="hljs-string">&quot;    expr))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; (or e1 e2 ...)\n&quot;</span><br>                + <span class="hljs-string">&quot;;; =&gt; (let &lt;tmp&gt; e1\n&quot;</span><br>                + <span class="hljs-string">&quot;;;      (if &lt;tmp&gt; &lt;tmp&gt; (or e2 ...)))\n&quot;</span><br>                + <span class="hljs-string">&quot;;; (or e1)\n&quot;</span><br>                + <span class="hljs-string">&quot;;; =&gt; e1\n&quot;</span><br>                + <span class="hljs-string">&quot;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; The reason to use the temporary variables is to avoid evaluating the\n&quot;</span><br>                + <span class="hljs-string">&quot;;; arguments more than once.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defmacro or (expr . rest)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (if rest\n&quot;</span><br>                + <span class="hljs-string">&quot;      (let var (gensym)\n&quot;</span><br>                + <span class="hljs-string">&quot;           (list &#x27;let var expr\n&quot;</span><br>                + <span class="hljs-string">&quot;                 (list &#x27;if var var (cons &#x27;or rest))))\n&quot;</span><br>                + <span class="hljs-string">&quot;    expr))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; (when expr body ...)\n&quot;</span><br>                + <span class="hljs-string">&quot;;; =&gt; (if expr (progn body ...))\n&quot;</span><br>                + <span class="hljs-string">&quot;(defmacro when (expr . body)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (cons &#x27;if (cons expr (list (cons &#x27;progn body)))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; (unless expr body ...)\n&quot;</span><br>                + <span class="hljs-string">&quot;;; =&gt; (if expr () body ...)\n&quot;</span><br>                + <span class="hljs-string">&quot;(defmacro unless (expr . body)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (cons &#x27;if (cons expr (cons () body))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; Numeric operators\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun &lt;= (e1 e2)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (or (&lt; e1 e2)\n&quot;</span><br>                + <span class="hljs-string">&quot;      (= e1 e2)))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; List operators\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; Applies each element of lis to fn, and returns their return values as a list.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun map (lis fn)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (when lis\n&quot;</span><br>                + <span class="hljs-string">&quot;    (cons (fn (car lis))\n&quot;</span><br>                + <span class="hljs-string">&quot;\t  (map (cdr lis) fn))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Returns nth element of lis.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun nth (lis n)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (if (= n 0)\n&quot;</span><br>                + <span class="hljs-string">&quot;      (car lis)\n&quot;</span><br>                + <span class="hljs-string">&quot;    (nth (cdr lis) (- n 1))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Returns the nth tail of lis.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun nth-tail (lis n)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (if (= n 0)\n&quot;</span><br>                + <span class="hljs-string">&quot;      lis\n&quot;</span><br>                + <span class="hljs-string">&quot;    (nth-tail (cdr lis) (- n 1))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Returns a list consists of m .. n-1 integers.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun %iota (m n)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (unless (&lt;= n m)\n&quot;</span><br>                + <span class="hljs-string">&quot;    (cons m (%iota (+ m 1) n))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Returns a list consists of 0 ... n-1 integers.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun iota (n)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (%iota 0 n))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; Main\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;(define width 10)\n&quot;</span><br>                + <span class="hljs-string">&quot;(define height 10)\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Returns location (x, y)&#x27;s element.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun get (board x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (nth (nth board y) x))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Returns true if location (x, y)&#x27;s value is \&quot;@\&quot;.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun alive? (board x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (and (&lt;= 0 x)\n&quot;</span><br>                + <span class="hljs-string">&quot;       (&lt; x height)\n&quot;</span><br>                + <span class="hljs-string">&quot;       (&lt;= 0 y)\n&quot;</span><br>                + <span class="hljs-string">&quot;       (&lt; y width)\n&quot;</span><br>                + <span class="hljs-string">&quot;       (eq (get board x y) &#x27;@)))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Print out the given board.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun print (board)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (if (not board)\n&quot;</span><br>                + <span class="hljs-string">&quot;      &#x27;$\n&quot;</span><br>                + <span class="hljs-string">&quot;    (println (car board))\n&quot;</span><br>                + <span class="hljs-string">&quot;    (print (cdr board))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun count (board x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (let at (lambda (x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;            (if (alive? board x y) 1 0))\n&quot;</span><br>                + <span class="hljs-string">&quot;       (+ (at (- x 1) (- y 1))\n&quot;</span><br>                + <span class="hljs-string">&quot;          (at (- x 1) y)\n&quot;</span><br>                + <span class="hljs-string">&quot;          (at (- x 1) (+ y 1))\n&quot;</span><br>                + <span class="hljs-string">&quot;          (at x (- y 1))\n&quot;</span><br>                + <span class="hljs-string">&quot;          (at x (+ y 1))\n&quot;</span><br>                + <span class="hljs-string">&quot;          (at (+ x 1) (- y 1))\n&quot;</span><br>                + <span class="hljs-string">&quot;          (at (+ x 1) y)\n&quot;</span><br>                + <span class="hljs-string">&quot;          (at (+ x 1) (+ y 1)))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun next (board x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (let c (count board x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;       (if (alive? board x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;           (or (= c 2) (= c 3))\n&quot;</span><br>                + <span class="hljs-string">&quot;         (= c 3))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun run (board)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (while t\n&quot;</span><br>                + <span class="hljs-string">&quot;    (print board)\n&quot;</span><br>                + <span class="hljs-string">&quot;    (println &#x27;*)\n&quot;</span><br>                + <span class="hljs-string">&quot;    (let newboard (map (iota height)\n&quot;</span><br>                + <span class="hljs-string">&quot;                       (lambda (y)\n&quot;</span><br>                + <span class="hljs-string">&quot;                         (map (iota width)\n&quot;</span><br>                + <span class="hljs-string">&quot;                              (lambda (x)\n&quot;</span><br>                + <span class="hljs-string">&quot;                                (if (next board x y) &#x27;@ &#x27;_)))))\n&quot;</span><br>                + <span class="hljs-string">&quot;         (setq board newboard))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;(run &#x27;((_ _ _ _ _ _ _ _ _ _)\n&quot;</span><br>                + <span class="hljs-string">&quot;       (_ _ _ _ _ _ _ _ _ _)\n&quot;</span><br>                + <span class="hljs-string">&quot;       (_ _ _ _ _ _ _ _ _ _)\n&quot;</span><br>                + <span class="hljs-string">&quot;       (_ _ _ _ _ _ _ _ _ _)\n&quot;</span><br>                + <span class="hljs-string">&quot;       (_ _ _ _ _ _ _ _ _ _)\n&quot;</span><br>                + <span class="hljs-string">&quot;       (_ _ _ _ _ _ _ _ _ _)\n&quot;</span><br>                + <span class="hljs-string">&quot;       (_ _ _ _ _ _ _ _ _ _)\n&quot;</span><br>                + <span class="hljs-string">&quot;       (_ @ @ @ _ _ _ _ _ _)\n&quot;</span><br>                + <span class="hljs-string">&quot;       (_ _ _ @ _ _ _ _ _ _)\n&quot;</span><br>                + <span class="hljs-string">&quot;       (_ _ @ _ _ _ _ _ _ _)))\n&quot;</span>;<br>        call(s);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test15</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; N-queens puzzle solver.\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; The N queens puzzle is the problem of placing N chess queens on an N x N\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; chessboard so that no two queens attack each\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; other. http://en.wikipedia.org/wiki/Eight_queens_puzzle\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; This program solves N-queens puzzle by depth-first backtracking.\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; Basic macros\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; Because the language does not have quasiquote, we need to construct an\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; expanded form using cons and list.\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; (progn expr ...)\n&quot;</span><br>                + <span class="hljs-string">&quot;;; =&gt; ((lambda () expr ...))\n&quot;</span><br>                + <span class="hljs-string">&quot;(defmacro progn (expr . rest)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (list (cons &#x27;lambda (cons () (cons expr rest)))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun list (x . y)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (cons x y))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun not (x)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (if x () t))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; (let1 var val body ...)\n&quot;</span><br>                + <span class="hljs-string">&quot;;; =&gt; ((lambda (var) body ...) val)\n&quot;</span><br>                + <span class="hljs-string">&quot;(defmacro let1 (var val . body)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (cons (cons &#x27;lambda (cons (list var) body))\n&quot;</span><br>                + <span class="hljs-string">&quot;\t(list val)))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; (and e1 e2 ...)\n&quot;</span><br>                + <span class="hljs-string">&quot;;; =&gt; (if e1 (and e2 ...))\n&quot;</span><br>                + <span class="hljs-string">&quot;;; (and e1)\n&quot;</span><br>                + <span class="hljs-string">&quot;;; =&gt; e1\n&quot;</span><br>                + <span class="hljs-string">&quot;(defmacro and (expr . rest)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (if rest\n&quot;</span><br>                + <span class="hljs-string">&quot;      (list &#x27;if expr (cons &#x27;and rest))\n&quot;</span><br>                + <span class="hljs-string">&quot;    expr))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; (or e1 e2 ...)\n&quot;</span><br>                + <span class="hljs-string">&quot;;; =&gt; (let1 &lt;tmp&gt; e1\n&quot;</span><br>                + <span class="hljs-string">&quot;;;      (if &lt;tmp&gt; &lt;tmp&gt; (or e2 ...)))\n&quot;</span><br>                + <span class="hljs-string">&quot;;; (or e1)\n&quot;</span><br>                + <span class="hljs-string">&quot;;; =&gt; e1\n&quot;</span><br>                + <span class="hljs-string">&quot;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; The reason to use the temporary variables is to avoid evaluating the\n&quot;</span><br>                + <span class="hljs-string">&quot;;; arguments more than once.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defmacro or (expr . rest)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (if rest\n&quot;</span><br>                + <span class="hljs-string">&quot;      (let1 var (gensym)\n&quot;</span><br>                + <span class="hljs-string">&quot;\t    (list &#x27;let1 var expr\n&quot;</span><br>                + <span class="hljs-string">&quot;\t\t  (list &#x27;if var var (cons &#x27;or rest))))\n&quot;</span><br>                + <span class="hljs-string">&quot;    expr))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; (when expr body ...)\n&quot;</span><br>                + <span class="hljs-string">&quot;;; =&gt; (if expr (progn body ...))\n&quot;</span><br>                + <span class="hljs-string">&quot;(defmacro when (expr . body)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (cons &#x27;if (cons expr (list (cons &#x27;progn body)))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; (unless expr body ...)\n&quot;</span><br>                + <span class="hljs-string">&quot;;; =&gt; (if expr () body ...)\n&quot;</span><br>                + <span class="hljs-string">&quot;(defmacro unless (expr . body)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (cons &#x27;if (cons expr (cons () body))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; Numeric operators\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun &lt;= (e1 e2)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (or (&lt; e1 e2)\n&quot;</span><br>                + <span class="hljs-string">&quot;      (= e1 e2)))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; List operators\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Applies each element of lis to pred. If pred returns a true value, terminate\n&quot;</span><br>                + <span class="hljs-string">&quot;;; the evaluation and returns pred&#x27;s return value. If all of them return (),\n&quot;</span><br>                + <span class="hljs-string">&quot;;; returns ().\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun any (lis pred)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (when lis\n&quot;</span><br>                + <span class="hljs-string">&quot;    (or (pred (car lis))\n&quot;</span><br>                + <span class="hljs-string">&quot;\t(any (cdr lis) pred))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; Applies each element of lis to fn, and returns their return values as a list.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun map (lis fn)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (when lis\n&quot;</span><br>                + <span class="hljs-string">&quot;    (cons (fn (car lis))\n&quot;</span><br>                + <span class="hljs-string">&quot;\t  (map (cdr lis) fn))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Returns nth element of lis.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun nth (lis n)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (if (= n 0)\n&quot;</span><br>                + <span class="hljs-string">&quot;      (car lis)\n&quot;</span><br>                + <span class="hljs-string">&quot;    (nth (cdr lis) (- n 1))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Returns the nth tail of lis.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun nth-tail (lis n)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (if (= n 0)\n&quot;</span><br>                + <span class="hljs-string">&quot;      lis\n&quot;</span><br>                + <span class="hljs-string">&quot;    (nth-tail (cdr lis) (- n 1))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Returns a list consists of m .. n-1 integers.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun %iota (m n)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (unless (&lt;= n m)\n&quot;</span><br>                + <span class="hljs-string">&quot;    (cons m (%iota (+ m 1) n))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Returns a list consists of 0 ... n-1 integers.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun iota (n)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (%iota 0 n))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Returns a new list whose length is len and all members are init.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun make-list (len init)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (unless (= len 0)\n&quot;</span><br>                + <span class="hljs-string">&quot;    (cons init (make-list (- len 1) init))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Applies fn to each element of lis.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun for-each (lis fn)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (or (not lis)\n&quot;</span><br>                + <span class="hljs-string">&quot;      (progn (fn (car lis))\n&quot;</span><br>                + <span class="hljs-string">&quot;\t     (for-each (cdr lis) fn))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; N-queens solver\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Creates size x size list filled with symbol \&quot;x\&quot;.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun make-board (size)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (map (iota size)\n&quot;</span><br>                + <span class="hljs-string">&quot;       (lambda (_)\n&quot;</span><br>                + <span class="hljs-string">&quot;\t (make-list size &#x27;x))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Returns location (x, y)&#x27;s element.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun get (board x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (nth (nth board x) y))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Set symbol \&quot;@\&quot; to location (x, y).\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun set (board x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (setcar (nth-tail (nth board x) y) &#x27;@))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Set symbol \&quot;x\&quot; to location (x, y).\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun clear (board x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (setcar (nth-tail (nth board x) y) &#x27;x))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Returns true if location (x, y)&#x27;s value is \&quot;@\&quot;.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun set? (board x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (eq (get board x y) &#x27;@))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Print out the given board.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun print (board)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (if (not board)\n&quot;</span><br>                + <span class="hljs-string">&quot;      &#x27;$\n&quot;</span><br>                + <span class="hljs-string">&quot;    (println (car board))\n&quot;</span><br>                + <span class="hljs-string">&quot;    (print (cdr board))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Returns true if we cannot place a queen at position (x, y), assuming that\n&quot;</span><br>                + <span class="hljs-string">&quot;;; queens have already been placed on each row from 0 to x-1.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun conflict? (board x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (any (iota x)\n&quot;</span><br>                + <span class="hljs-string">&quot;       (lambda (n)\n&quot;</span><br>                + <span class="hljs-string">&quot;\t (or\n&quot;</span><br>                + <span class="hljs-string">&quot;\t  ;; Check if there&#x27;s no conflicting queen upward\n&quot;</span><br>                + <span class="hljs-string">&quot;\t  (set? board n y)\n&quot;</span><br>                + <span class="hljs-string">&quot;\t  ;; Upper left\n&quot;</span><br>                + <span class="hljs-string">&quot;\t  (let1 z (+ y (- n x))\n&quot;</span><br>                + <span class="hljs-string">&quot;\t\t(and (&lt;= 0 z)\n&quot;</span><br>                + <span class="hljs-string">&quot;\t\t     (set? board n z)))\n&quot;</span><br>                + <span class="hljs-string">&quot;\t  ;; Upper right\n&quot;</span><br>                + <span class="hljs-string">&quot;\t  (let1 z (+ y (- x n))\n&quot;</span><br>                + <span class="hljs-string">&quot;\t\t(and (&lt; z board-size)\n&quot;</span><br>                + <span class="hljs-string">&quot;\t\t     (set? board n z)))))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;; Find positions where we can place queens at row x, and continue searching for\n&quot;</span><br>                + <span class="hljs-string">&quot;;; the next row.\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun %solve (board x)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (if (= x board-size)\n&quot;</span><br>                + <span class="hljs-string">&quot;      ;; Problem solved\n&quot;</span><br>                + <span class="hljs-string">&quot;      (progn (print board)\n&quot;</span><br>                + <span class="hljs-string">&quot;\t     (println &#x27;$))\n&quot;</span><br>                + <span class="hljs-string">&quot;    (for-each (iota board-size)\n&quot;</span><br>                + <span class="hljs-string">&quot;\t      (lambda (y)\n&quot;</span><br>                + <span class="hljs-string">&quot;\t\t(unless (conflict? board x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;\t\t  (set board x y)\n&quot;</span><br>                + <span class="hljs-string">&quot;\t\t  (%solve board (+ x 1))\n&quot;</span><br>                + <span class="hljs-string">&quot;\t\t  (clear board x y))))))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;(defun solve (board)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (println &#x27;start)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (%solve board 0)\n&quot;</span><br>                + <span class="hljs-string">&quot;  (println &#x27;done))\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;;;; Main\n&quot;</span><br>                + <span class="hljs-string">&quot;;;;\n&quot;</span><br>                + <span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;(define board-size 8)\n&quot;</span><br>                + <span class="hljs-string">&quot;(define board (make-board board-size))\n&quot;</span><br>                + <span class="hljs-string">&quot;(solve board)\n&quot;</span>;<br>        call(s);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">MiniLisp</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniLisp</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(s));<br>        parser.Input();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
        <tag>javacc</tag>
        <tag>lisp</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle脚本实现web开发框架的一键构建</title>
    <url>/2017/05/24/2017-5-24-gradle-build-project/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title=" 问题"></a><a name="hh0"></a> 问题</h2><p>Java世界里构建项目用什么工具呢，ant，maven和gradle。maven非常流行，
原因无非是maven仓库和项目架构的约定。但是ant构建过程更加容易理解，
因为ant展示了所有的操作。gradle拥有基于groovy语言的DSL语言且继承了
maven仓库的思想所以笔者认为未来是属于gradle的。</p>
<span id="more"></span>

<p>特别是最近在搭建springmvc-jpa-mysql开发框架的时候，发现怎么也找不到一个
archetype可以做到一键构建demo project。</p>
<h2 id="何谓一键构建"><a href="#何谓一键构建" class="headerlink" title=" 何谓一键构建"></a><a name="hh1"></a> 何谓一键构建</h2><p>何谓一键构建呢，有人用maven也可以很快搭建一个，通常可以把之前的
项目复制一份修改一下，似乎没有那么麻烦。但笔者还是觉得执行几个命令，
回车一下就构建完成，更加让人舒心。如图所示，创建一个空项目dir，然后把build.gradle
放入该路径下，执行</p>
<pre><code class="hljs">gradle init
gradle build -x test
gradle run
</code></pre>
<p>就可以在浏览器里访问<code>http://localhost:8080/greeting?name=GoodJob</code>链接了。
以下是过程展示。当然了因为jar包都已经下载过了，所以似乎还比较快。
否则的话一定会联网下载jar包的。
<img src="/images/2017-5-24-1.gif" alt="gradle-build-process"></p>
<p>以下导入IDEA中后所示的文件结构。
<img src="/images/2017-5-24-2.jpg" alt="gradle-project-structure"></p>
<h2 id="build-gradle文件内容"><a href="#build-gradle文件内容" class="headerlink" title=" build.gradle文件内容"></a><a name="hh2"></a> build.gradle文件内容</h2><p><code>build.gradle</code>构建基于spring-boot的springmvc-jpa-mysql框架demo项目的脚本如下。
该脚本一目了然，无需赘述。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">def</span> createFile = &#123; String path, String content -&gt;<br>    File f = file(path)<br>    <span class="hljs-keyword">if</span> (f.exists()) &#123;<br>        f.delete()<br>    &#125;<br>    f.withWriter(<span class="hljs-string">&quot;UTF-8&quot;</span>) &#123; writer -&gt;<br>        writer.write(content)<br>    &#125;<br>&#125;<br><br>task init(<span class="hljs-attr">type:</span> InitBuild, <span class="hljs-attr">dependsOn :</span> [<span class="hljs-string">&quot;bak-build-file&quot;</span>, <span class="hljs-string">&quot;create-dirs&quot;</span>, <span class="hljs-string">&quot;create-files&quot;</span>]) &#123;<br>    doLast &#123;<br>        String buildGradleContent = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">buildscript &#123;</span><br><span class="hljs-string">    repositories &#123;</span><br><span class="hljs-string">        mavenCentral()</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    dependencies &#123;</span><br><span class="hljs-string">        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE&quot;)</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">apply plugin: &#x27;java\&#x27;</span><br><span class="hljs-string">apply plugin: &#x27;eclipse\&#x27;</span><br><span class="hljs-string">apply plugin: &#x27;idea\&#x27;</span><br><span class="hljs-string">apply plugin: &#x27;application\&#x27;</span><br><span class="hljs-string">apply plugin: &#x27;org.springframework.boot\&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">jar &#123;</span><br><span class="hljs-string">    baseName = &#x27;spring-boot-demo\&#x27;</span><br><span class="hljs-string">    version = &#x27;0.1.0\&#x27;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">repositories &#123;</span><br><span class="hljs-string">    mavenCentral()</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">sourceCompatibility = 1.8</span><br><span class="hljs-string">targetCompatibility = 1.8</span><br><span class="hljs-string"></span><br><span class="hljs-string">dependencies &#123;</span><br><span class="hljs-string">    compile(&quot;org.springframework.boot:spring-boot-starter-web&quot;) &#123;</span><br><span class="hljs-string">        exclude module: &quot;spring-boot-starter-tomcat&quot;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    compile(&quot;org.springframework.boot:spring-boot-starter-jetty&quot;)</span><br><span class="hljs-string">    compile(&quot;org.springframework.boot:spring-boot-starter-actuator&quot;)</span><br><span class="hljs-string">    compile(&quot;org.springframework.boot:spring-boot-starter-thymeleaf&quot;)</span><br><span class="hljs-string">    compile(&quot;org.springframework.boot:spring-boot-starter-data-jpa&quot;)</span><br><span class="hljs-string">    compile(&quot;org.springframework.boot:spring-boot-devtools&quot;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    compile(&quot;mysql:mysql-connector-java&quot;)</span><br><span class="hljs-string">    compile(&quot;org.apache.commons:commons-lang3:3.5&quot;)</span><br><span class="hljs-string">    testCompile(&quot;junit:junit&quot;)</span><br><span class="hljs-string">    testCompile(&quot;org.springframework.boot:spring-boot-starter-test&quot;)</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">mainClassName = &quot;hello.Application&quot;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>        createFile(<span class="hljs-string">&quot;build.gradle&quot;</span>, buildGradleContent)<br>    &#125;<br>&#125;<br><br>task <span class="hljs-string">&quot;bak-build-file&quot;</span>(<span class="hljs-attr">type:</span> Copy) &#123;<br>    from <span class="hljs-string">&quot;build.gradle&quot;</span><br>    into <span class="hljs-string">&quot;build.gradle.bak&quot;</span><br>&#125;<br><br>task <span class="hljs-string">&quot;create-dirs&quot;</span> &#123;<br>    description <span class="hljs-string">&quot;create spring-boot-jpa-test project dirs.&quot;</span><br>    doLast &#123;<br>        file(<span class="hljs-string">&quot;src/main/java/hello&quot;</span>).mkdirs()<br>        file(<span class="hljs-string">&quot;src/main/resources/templates&quot;</span>).mkdirs()<br>        file(<span class="hljs-string">&quot;src/main/webapp/WEB-INF/classes&quot;</span>).mkdirs()<br>        file(<span class="hljs-string">&quot;src/test/java/hello&quot;</span>).mkdirs()<br>        file(<span class="hljs-string">&quot;src/test/resources&quot;</span>).mkdirs()<br>    &#125;<br>&#125;<br><br><br><br>task <span class="hljs-string">&quot;create-files&quot;</span> &#123;<br>    description <span class="hljs-string">&quot;create spring-boot-jpa-test related files.&quot;</span><br>    doLast &#123;<br>        String ApplicationContent, HelloControllerContent, UserRepositoryContent, UserContent, GreetingControllerContent<br>        String ApplicationTestsContent, ServletInitializerContent, HelloControllerTestContent<br>        String applicationPropertiesContent<br>        String webXmlContent, indexJspContent, greetingHtmlContent<br><br>        ApplicationContent = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">package hello;</span><br><span class="hljs-string"></span><br><span class="hljs-string">import java.util.Arrays;</span><br><span class="hljs-string"></span><br><span class="hljs-string">import org.springframework.boot.CommandLineRunner;</span><br><span class="hljs-string">import org.springframework.boot.SpringApplication;</span><br><span class="hljs-string">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="hljs-string">import org.springframework.context.ApplicationContext;</span><br><span class="hljs-string">import org.springframework.context.annotation.Bean;</span><br><span class="hljs-string"></span><br><span class="hljs-string">@SpringBootApplication</span><br><span class="hljs-string">public class Application &#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public static void main(String[] args) &#123;</span><br><span class="hljs-string">        SpringApplication.run(Application.class, args);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @Bean</span><br><span class="hljs-string">    public CommandLineRunner commandLineRunner(ApplicationContext ctx) &#123;</span><br><span class="hljs-string">        return args -&gt; &#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string">            System.out.println(&quot;Let&#x27;s inspect the beans provided by Spring Boot:&quot;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">            String[] beanNames = ctx.getBeanDefinitionNames();</span><br><span class="hljs-string">            Arrays.sort(beanNames);</span><br><span class="hljs-string">            for (String beanName : beanNames) &#123;</span><br><span class="hljs-string">                //System.out.println(beanName);</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        &#125;;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">		&#x27;&#x27;&#x27;</span><br>        HelloControllerContent = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">package hello;</span><br><span class="hljs-string"></span><br><span class="hljs-string">import org.springframework.web.bind.annotation.RestController;</span><br><span class="hljs-string">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="hljs-string"></span><br><span class="hljs-string">@RestController</span><br><span class="hljs-string">public class HelloController &#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @RequestMapping(&quot;/&quot;)</span><br><span class="hljs-string">    public String index() &#123;</span><br><span class="hljs-string">        return &quot;Greetings from Spring Boot!&quot;;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>        UserRepositoryContent = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">package hello;</span><br><span class="hljs-string"></span><br><span class="hljs-string">import org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="hljs-string">import org.springframework.data.jpa.repository.Query;</span><br><span class="hljs-string">import org.springframework.data.repository.query.Param;</span><br><span class="hljs-string"></span><br><span class="hljs-string">/**</span><br><span class="hljs-string"> * Created by YM on 5/16/2017.</span><br><span class="hljs-string"> */</span><br><span class="hljs-string">public interface UserRepository extends JpaRepository&lt;User, Long&gt; &#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    User findByName(String name);</span><br><span class="hljs-string">    User findByNameAndAge(String name, Integer age);</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @Query(&quot;from User u where u.name=:name&quot;)</span><br><span class="hljs-string">    User findUser(@Param(&quot;name&quot;) String name);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>        UserContent = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">package hello;</span><br><span class="hljs-string"></span><br><span class="hljs-string">import javax.persistence.Column;</span><br><span class="hljs-string">import javax.persistence.Entity;</span><br><span class="hljs-string">import javax.persistence.GeneratedValue;</span><br><span class="hljs-string">import javax.persistence.Id;</span><br><span class="hljs-string"></span><br><span class="hljs-string">/**</span><br><span class="hljs-string"> * Created by YM on 5/16/2017.</span><br><span class="hljs-string"> */</span><br><span class="hljs-string">@Entity</span><br><span class="hljs-string">public class User &#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @Id</span><br><span class="hljs-string">    @GeneratedValue</span><br><span class="hljs-string">    private Long id;</span><br><span class="hljs-string">    @Column(nullable = false)</span><br><span class="hljs-string">    private String name;</span><br><span class="hljs-string">    @Column(nullable = false)</span><br><span class="hljs-string">    private Integer age;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public User() &#123;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public User(String name, int age) &#123;</span><br><span class="hljs-string">        this.name = name;</span><br><span class="hljs-string">        this.age = age;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public Integer getAge() &#123;</span><br><span class="hljs-string">        return age;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public String getName() &#123;</span><br><span class="hljs-string">        return name;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public Long getId() &#123;</span><br><span class="hljs-string">        return id;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void setAge(Integer age) &#123;</span><br><span class="hljs-string">        this.age = age;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void setId(Long id) &#123;</span><br><span class="hljs-string">        this.id = id;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    public void setName(String name) &#123;</span><br><span class="hljs-string">        this.name = name;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>        ApplicationTestsContent = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">import hello.Application;</span><br><span class="hljs-string">import hello.User;</span><br><span class="hljs-string">import hello.UserRepository;</span><br><span class="hljs-string">import java.util.Date;</span><br><span class="hljs-string">import org.apache.commons.lang3.time.DateUtils;</span><br><span class="hljs-string">import org.junit.Assert;</span><br><span class="hljs-string">import org.junit.Test;</span><br><span class="hljs-string">import org.junit.runner.RunWith;</span><br><span class="hljs-string">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="hljs-string">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="hljs-string">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="hljs-string">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="hljs-string"></span><br><span class="hljs-string">/**</span><br><span class="hljs-string"> * Created by YM on 5/16/2017.</span><br><span class="hljs-string"> */</span><br><span class="hljs-string">@RunWith(SpringRunner.class)</span><br><span class="hljs-string">@SpringBootTest(classes = Application.class)</span><br><span class="hljs-string">public class ApplicationTests &#123;</span><br><span class="hljs-string">    @Autowired</span><br><span class="hljs-string">    private UserRepository userRepository;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @Test</span><br><span class="hljs-string">    public void test() throws Exception &#123;</span><br><span class="hljs-string">        // 创建10条记录</span><br><span class="hljs-string">        userRepository.save(new User(&quot;AAA&quot;, 10));</span><br><span class="hljs-string">        userRepository.save(new User(&quot;BBB&quot;, 20));</span><br><span class="hljs-string">        userRepository.save(new User(&quot;CCC&quot;, 30));</span><br><span class="hljs-string">        userRepository.save(new User(&quot;DDD&quot;, 40));</span><br><span class="hljs-string">        userRepository.save(new User(&quot;EEE&quot;, 50));</span><br><span class="hljs-string">        userRepository.save(new User(&quot;FFF&quot;, 60));</span><br><span class="hljs-string">        userRepository.save(new User(&quot;GGG&quot;, 70));</span><br><span class="hljs-string">        userRepository.save(new User(&quot;HHH&quot;, 80));</span><br><span class="hljs-string">        userRepository.save(new User(&quot;III&quot;, 90));</span><br><span class="hljs-string">        userRepository.save(new User(&quot;JJJ&quot;, 100));</span><br><span class="hljs-string">        // 测试findAll, 查询所有记录</span><br><span class="hljs-string">        Assert.assertEquals(10, userRepository.findAll().size());</span><br><span class="hljs-string">        // 测试findByName, 查询姓名为FFF的User</span><br><span class="hljs-string">        Assert.assertEquals(60, userRepository.findByName(&quot;FFF&quot;).getAge().longValue());</span><br><span class="hljs-string">        // 测试findUser, 查询姓名为FFF的User</span><br><span class="hljs-string">        Assert.assertEquals(60, userRepository.findUser(&quot;FFF&quot;).getAge().longValue());</span><br><span class="hljs-string">        // 测试findByNameAndAge, 查询姓名为FFF并且年龄为60的User</span><br><span class="hljs-string">        Assert.assertEquals(&quot;FFF&quot;, userRepository.findByNameAndAge(&quot;FFF&quot;, 60).getName());</span><br><span class="hljs-string">        // 测试删除姓名为AAA的User</span><br><span class="hljs-string">        userRepository.delete(userRepository.findByName(&quot;AAA&quot;));</span><br><span class="hljs-string">        // 测试findAll, 查询所有记录, 验证上面的删除是否成功</span><br><span class="hljs-string">        Assert.assertEquals(9, userRepository.findAll().size());</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>        GreetingControllerContent = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">package hello;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">import org.springframework.stereotype.Controller;</span><br><span class="hljs-string">import org.springframework.ui.Model;</span><br><span class="hljs-string">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="hljs-string">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="hljs-string"></span><br><span class="hljs-string">@Controller</span><br><span class="hljs-string">public class GreetingController &#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @RequestMapping(&quot;/greeting&quot;)</span><br><span class="hljs-string">    public String greeting(@RequestParam(value = &quot;name&quot;, required = false, defaultValue = &quot;World&quot;) String name,</span><br><span class="hljs-string">            Model model) &#123;</span><br><span class="hljs-string">        model.addAttribute(&quot;name&quot;, name);</span><br><span class="hljs-string">        return &quot;greeting&quot;;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>        ServletInitializerContent = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">package hello;</span><br><span class="hljs-string"></span><br><span class="hljs-string">import org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="hljs-string">import org.springframework.boot.web.support.SpringBootServletInitializer;</span><br><span class="hljs-string"></span><br><span class="hljs-string">/**</span><br><span class="hljs-string"> * Created by YM on 5/16/2017.</span><br><span class="hljs-string"> */</span><br><span class="hljs-string">public class ServletInitializer extends SpringBootServletInitializer &#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @Override</span><br><span class="hljs-string">    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;</span><br><span class="hljs-string">        return builder.sources(hello.Application.class);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>        HelloControllerTestContent = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">package hello;</span><br><span class="hljs-string"></span><br><span class="hljs-string">import static org.hamcrest.Matchers.equalTo;</span><br><span class="hljs-string">import static org.junit.Assert.assertThat;</span><br><span class="hljs-string"></span><br><span class="hljs-string">import java.net.URL;</span><br><span class="hljs-string"></span><br><span class="hljs-string">import org.junit.Before;</span><br><span class="hljs-string">import org.junit.Test;</span><br><span class="hljs-string">import org.junit.runner.RunWith;</span><br><span class="hljs-string">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="hljs-string">import org.springframework.boot.context.embedded.LocalServerPort;</span><br><span class="hljs-string">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="hljs-string">import org.springframework.boot.test.web.client.TestRestTemplate;</span><br><span class="hljs-string">import org.springframework.http.ResponseEntity;</span><br><span class="hljs-string">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="hljs-string"></span><br><span class="hljs-string">@RunWith(SpringRunner.class)</span><br><span class="hljs-string">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="hljs-string">public class HelloControllerTest &#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @LocalServerPort</span><br><span class="hljs-string">    private int port;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    private URL base;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @Autowired</span><br><span class="hljs-string">    private TestRestTemplate template;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @Before</span><br><span class="hljs-string">    public void setUp() throws Exception &#123;</span><br><span class="hljs-string">        this.base = new URL(&quot;http://localhost:&quot; + port + &quot;/&quot;);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @Test</span><br><span class="hljs-string">    public void getHello() throws Exception &#123;</span><br><span class="hljs-string">        ResponseEntity&lt;String&gt; response = template.getForEntity(base.toString(),</span><br><span class="hljs-string">                String.class);</span><br><span class="hljs-string">        assertThat(response.getBody(), equalTo(&quot;Greetings from Spring Boot!&quot;));</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>        createFile(<span class="hljs-string">&quot;src/main/java/hello/Application.java&quot;</span>, ApplicationContent)<br>        createFile(<span class="hljs-string">&quot;src/main/java/hello/HelloController.java&quot;</span>, HelloControllerContent)<br>        createFile(<span class="hljs-string">&quot;src/main/java/hello/UserRepository.java&quot;</span>, UserRepositoryContent)<br>        createFile(<span class="hljs-string">&quot;src/main/java/hello/User.java&quot;</span>, UserContent)<br>        createFile(<span class="hljs-string">&quot;src/main/java/hello/GreetingController.java&quot;</span>, GreetingControllerContent)<br>        createFile(<span class="hljs-string">&quot;src/main/java/hello/ServletInitializer.java&quot;</span>, ServletInitializerContent)<br>        createFile(<span class="hljs-string">&quot;src/test/java/ApplicationTests.java&quot;</span>, ApplicationTestsContent)<br>        createFile(<span class="hljs-string">&quot;src/test/java/hello/HelloControllerTest.java&quot;</span>, HelloControllerTestContent)<br><br>        applicationPropertiesContent = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">spring.datasource.driverClassName=</span><br><span class="hljs-string">spring.datasource.url=jdbc:mysql://localhost:3306/test</span><br><span class="hljs-string">spring.datasource.username=root</span><br><span class="hljs-string">spring.datasource.password=root</span><br><span class="hljs-string">spring.jpa.properties.hibernate.hbm2ddl.auto=create</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>        createFile(<span class="hljs-string">&quot;src/main/resources/application.properties&quot;</span>, applicationPropertiesContent)<br>        println <span class="hljs-string">&quot;Please modify src/main/resources/application.properties&quot;</span><br><br>        webXmlContent = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="hljs-string"> &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span><br><span class="hljs-string"> &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot; &gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;web-app&gt;</span><br><span class="hljs-string">  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</span><br><span class="hljs-string">&lt;/web-app&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>        indexJspContent = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>        greetingHtmlContent = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;!DOCTYPE HTML&gt;</span><br><span class="hljs-string">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="hljs-string">&lt;head&gt;</span><br><span class="hljs-string">    &lt;title&gt;Getting Started: Serving Web Content&lt;/title&gt;</span><br><span class="hljs-string">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</span><br><span class="hljs-string">&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">&lt;p th:text=&quot;&#x27;Hello, &#x27; + $&#123;name&#125; + &#x27;!&#x27;&quot; /&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>        createFile(<span class="hljs-string">&quot;src/main/webapp/WEB-INF/web.xml&quot;</span>, webXmlContent)<br>        createFile(<span class="hljs-string">&quot;src/main/webapp/index.jsp&quot;</span>, indexJspContent)<br>        createFile(<span class="hljs-string">&quot;src/main/resources/templates/greeting.html&quot;</span>, greetingHtmlContent)<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>gradle</tag>
        <tag>build</tag>
      </tags>
  </entry>
  <entry>
    <title>How to resize VirtualBox fixed image size and keep contents unchanged ?</title>
    <url>/2017/07/09/2017-7-9-resize-fixed-image/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title=" 问题"></a><a name="hh0"></a> 问题</h2><p>如何更改镜像文件的大小呢，尤其是如何把一个固定大小的镜像变大，并且之前的内容完全不改变。
我尝试了一些方法，比如下面的几个步骤。1.查看信息，2.克隆新的vdi，3.调整大小，4.再查看信息。</p>
<span id="more"></span>

<blockquote>
<p>VBoxManage showhdinfo mydisk.vdi<br>VBoxManage clonehd mydisk.vdi mydiskClone.vdi<br>VBoxManage modifyhd mydiskClone.vdi –resize 61440<br>VBoxManage showhdinfo mydiskClone.vdi</p>
</blockquote>
<p>这个方法的确是调整了大小，不过镜像文件变成了<code>dynamic size</code>而不是<code>fixed size</code>。这还好了，
最麻烦的是，当使用新的vdi的时候，发现自己的用户已经无法登陆，只能使用root用户登陆了。
这是无法接受的。</p>
<h2 id="用GParted实现"><a href="#用GParted实现" class="headerlink" title=" 用GParted实现"></a><a name="hh1"></a> 用GParted实现</h2><p>幸运的是有人给出了详细的方法。</p>
<blockquote>
<p><img src="/images/20170710-1.jpg" alt="resize-method"></p>
</blockquote>
<p>我来解释一下，其中最核心的就是</p>
<pre><code class="hljs">dd if=/dev/sda of=/dev/sdb
</code></pre>
<p>执行完成这个语句之后，不要进行分区等任何操作。
（虽然看到新增加的磁盘处于未分配的状态。）直接单独挂载这个磁盘启动。
果然可以登陆，一切照旧。但是只是这样并没有完成磁盘空间变大。只是实现了内容的复制。
要想扩大，就需要使用GParted进行resize了。重新使用GParted Live CD进入新磁盘的分区图形界面，
可以发现新磁盘的某些空间已经进行分区，但是还有部分空间没有进行分区。
在我这里是这样显示的</p>
<pre>
 ------------------------------------------------------
 |     sda            |  swap  |     unallocated      |   
 ------------------------------------------------------
</pre>

<ol>
<li>首先删掉swap交换分区。这样&#x2F;dev&#x2F;sda分区紧接着就是未分配的空间了。</li>
<li>接着resize sda分区。留几百兆做swap交换分区。</li>
<li>最后创建一个交换分区。</li>
</ol>
<p>最后重启。应该会发现无法登陆，出现这样一个提示
<code>a start job is running for dev-disk-by…</code>。耐心等待一下，发现还是可以正常登陆的。
而且磁盘的空间变大了。一切似乎不错。</p>
<h2 id="解决最后的小问题"><a href="#解决最后的小问题" class="headerlink" title=" 解决最后的小问题"></a><a name="hh2"></a> 解决最后的小问题</h2><p>重启一下看看，发现还是有<code>a start job is running for dev-disk-by…</code>这个提示，
需要等待一两分钟，真是糟糕。别担心，这是因为重新创建了swap交换分区的缘故。有人已经给出了解决办法。</p>
<blockquote>
<p>To avoid the issue, in &#x2F;etc&#x2F;fstab you can either
Replace the swap UUID with the new one (run sudo blkid to find it) after the primary partition resizing.</p>
</blockquote>
<p><img src="/images/20170710-2.jpg" alt="reset-swap-uuid"></p>
<p>重启，问题解决了。</p>
]]></content>
      <tags>
        <tag>image</tag>
        <tag>resize</tag>
        <tag>virutalbox</tag>
      </tags>
  </entry>
  <entry>
    <title>宏扩展的执行逻辑初探(一)</title>
    <url>/2018/11/09/minilisp/</url>
    <content><![CDATA[<h2 id="宏是怎么扩展的呢？"><a href="#宏是怎么扩展的呢？" class="headerlink" title="宏是怎么扩展的呢？"></a>宏是怎么扩展的呢？</h2><p>比较流行的编程语言中，<code>Java</code>,<code>Python</code>都没有定义宏的功能。<code>c</code>语言中的宏限制比较大，
没有<code>Lisp</code>中的宏强大。以下提到的宏，指的是Lisp方言中的宏。</p>
<p>宏的求值可以分为两个步骤 </p>
<ol>
<li>扩展（expand）–编译期  </li>
<li>求值（eval）  –运行期</li>
</ol>
<p>这看起来很简单，但是实际写macro的时候，就会有很多的困惑。这里的主要矛盾就是理解
以下两个过程，</p>
<ol>
<li>在一个宏的内部调用另一个函数</li>
<li>在一个宏的内部调用另一个宏</li>
</ol>
<p>不同的lisp方言有不同的实现。以下用Clojure来研究宏的用法。</p>
<span id="more"></span>

<h2 id="宏内部调用函数-call-function-inside-macro"><a href="#宏内部调用函数-call-function-inside-macro" class="headerlink" title="宏内部调用函数(call function inside macro)"></a>宏内部调用函数(call function inside macro)</h2><p>宏扩展阶段，就会调用函数进行求值。</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">(<span class="hljs-name">use</span> &#x27;clojure.walk)<br>(<span class="hljs-name">defmacro</span> fool [x]<br>  (<span class="hljs-name">+</span> x <span class="hljs-number">1</span>))<br><br>(<span class="hljs-name">macroexpand-all</span> &#x27;(fool <span class="hljs-number">2</span>))   <br></code></pre></td></tr></table></figure>
<p>运行结果如下，可以看到宏扩展阶段已经调用<code>+</code>函数进行了求值。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#&#x27;user/fool</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>

<p>这里的<code>+</code>是一个函数。</p>
<h2 id="宏内部调用宏（call-macro-inside-macro"><a href="#宏内部调用宏（call-macro-inside-macro" class="headerlink" title="宏内部调用宏（call macro inside macro)"></a>宏内部调用宏（call macro inside macro)</h2><p>继续上面的例子，我们定义一个加法宏，然后在fool的内部调用该宏。</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">(<span class="hljs-name">use</span> &#x27;clojure.walk)<br><br>(<span class="hljs-name">defmacro</span> plus [x y]<br>  (<span class="hljs-name">+</span> x y))<br><br>(<span class="hljs-name">defmacro</span> fool [x]<br>  (<span class="hljs-name">plus</span> x <span class="hljs-number">1</span>))<br><br>(<span class="hljs-name">macroexpand-all</span> &#x27;(fool <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure>

<p>运行这段代码会得到以下的错误信息。重点就是理解这里为什么会报错。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">CompilerException java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ClassCastException</span>: clojure<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Symbol</span> cannot be cast to java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Number</span>, compiling:(/tmp/form-init4487875798119154898<span class="hljs-selector-class">.clj</span>:<span class="hljs-number">8</span>:<span class="hljs-number">3</span>) <br></code></pre></td></tr></table></figure>

<p>这里报错说是Symbol无法转换为数字。可是我们明明输入的是2。</p>
<p>事实的过程如下，</p>
<ol>
<li>扩展 (fool 2)</li>
<li>进入fool的body</li>
<li>扩展 (plus x 1) — 这里x是一个Symbol，而不是x-value</li>
<li>进入宏plus的body</li>
<li>对(+ x 1)求值  —到这里报错了，因为x是一个Symbol。</li>
</ol>
<p>所以，如果直接在一个宏的内部调用另一个宏，很可能编译都无法通过。因为编译期会对宏进行扩展，
但不会绑定实参。</p>
<p>那么怎么正确的使用呢，这里引入了一个概念叫<code>emit a macro call inside a macro</code>。</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">(<span class="hljs-name">use</span> &#x27;clojure.walk)<br><br>(<span class="hljs-name">defmacro</span> plus [x y]<br>  (<span class="hljs-name">+</span> x y))<br><br>(<span class="hljs-name">defmacro</span> fool [x]<br>  (<span class="hljs-name">list</span> &#x27;plus x <span class="hljs-number">1</span>))<br><br>(<span class="hljs-name">macroexpand-1</span> &#x27;(fool <span class="hljs-number">2</span>))    <span class="hljs-comment">;; (plus 2 1)</span><br>(<span class="hljs-name">macroexpand-all</span> &#x27;(fool <span class="hljs-number">2</span>))  <span class="hljs-comment">;; 3</span><br></code></pre></td></tr></table></figure>

<p>结果如下，只扩展一次，会得到<code>(plus 2 1)</code>， 而完全扩展会得到<code>3</code>。</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel">=&gt; nil<br>#&#x27;user/plus<br>#&#x27;user/fool<br>(plus <span class="hljs-number">2</span> <span class="hljs-number">1</span>)<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>

<p>具体过程如下，</p>
<ol>
<li>扩展(fool 2)</li>
<li>进入fool的body</li>
<li>求值(list ‘plus x-value 1) – 这里x-value是2</li>
<li>得到(plus x-value 1)  – 这里x-value是2</li>
<li>发现仍然是一个宏，继续扩展</li>
<li>进入plus的body</li>
<li>求值(+ x-value 1)为3 – 这里x-value是2</li>
</ol>
<h2 id="语法引用（Syntax-Quote）"><a href="#语法引用（Syntax-Quote）" class="headerlink" title="语法引用（Syntax Quote）"></a>语法引用（Syntax Quote）</h2><p>正是因为需要频繁的使用list来进行宏调用，因此发明了这样的语法糖。</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">(<span class="hljs-name">use</span> &#x27;clojure.walk)<br><br>(<span class="hljs-name">defmacro</span> plus [x y]<br>  (<span class="hljs-name">+</span> x y))<br><br>(<span class="hljs-name">defmacro</span> fool [x]<br>  `(plus ~x <span class="hljs-number">1</span>))    <span class="hljs-comment">;; &lt;- 这里等价于 (list &#x27;plus x 1))</span><br><br>(<span class="hljs-name">macroexpand-1</span> &#x27;(fool <span class="hljs-number">2</span>))<br>(<span class="hljs-name">macroexpand-all</span> &#x27;(fool <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>clojure</tag>
        <tag>lisp</tag>
        <tag>macro</tag>
      </tags>
  </entry>
  <entry>
    <title>[leetcode 352]原创解法</title>
    <url>/2018/11/08/2018-11-8-leetcode-352/</url>
    <content><![CDATA[<h2 id="题目概述"><a href="#题目概述" class="headerlink" title=" 题目概述"></a><a name="hh0"></a> 题目概述</h2><p><a href="https://leetcode.com/problems/data-stream-as-disjoint-intervals/">原题链接</a></p>
<blockquote>
<p>Given a data stream input of non-negative integers a1, a2, …, an, …, summarize the numbers seen so far as a list of disjoint intervals.</p>
<p>For example, suppose the integers from the data stream are 1, 3, 7, 2, 6, …, then the summary will be:</p>
<p>[1, 1]
[1, 1], [3, 3]
[1, 1], [3, 3], [7, 7]
[1, 3], [7, 7]
[1, 3], [6, 7]</p>
</blockquote>
<span id="more"></span>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title=" 解题思路"></a><a name="hh1"></a> 解题思路</h2><p>断断续续思考了一段时间。naive的想法考虑了以下几点，</p>
<ol>
<li>一个list存放interval，然后遍历。</li>
<li>需要查比邻的interval的值，因为需要合并。</li>
<li>需要插入新的interval</li>
</ol>
<p>从这几点首先想到用二叉搜索树来存放interval，这样既能快速查到，又能保证有序，
但是实现起来的时候，发现有两个问题，</p>
<ol>
<li>合并节点非常复杂（其实可以做到）</li>
<li>简单的二叉搜索树无法保证是平衡树（这个非常影响性能）</li>
</ol>
<p>最后考虑的结果是这样的，</p>
<ol>
<li>用list存放有序的interval</li>
<li>使用二分查找保证快速找到最近的interval</li>
<li>合并interval的时候比较简单快速。</li>
</ol>
<h2 id="一遍通过的解法"><a href="#一遍通过的解法" class="headerlink" title=" 一遍通过的解法"></a><a name="hh2"></a> 一遍通过的解法</h2><p>编码的过程，比较慢，写了快一个小时，因为要仔细考虑边界值的问题，
但是一遍就通过了测试，比较开心，毕竟该题号称<code>hard</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for an interval.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Interval</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, s=<span class="hljs-number">0</span>, e=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-variable language_">self</span>.start = s<br>        <span class="hljs-variable language_">self</span>.end = e<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[&#123;&#125;,&#123;&#125;]&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-variable language_">self</span>.start, <span class="hljs-variable language_">self</span>.end)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">nearest</span>(<span class="hljs-params">arr, val</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    返回最接近的interval的索引</span><br><span class="hljs-string">    :param arr:</span><br><span class="hljs-string">    :param val:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    start = <span class="hljs-number">0</span><br>    end = <span class="hljs-built_in">len</span>(arr) - <span class="hljs-number">1</span><br>    mid = <span class="hljs-built_in">int</span>((start + end) / <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">while</span> start &lt; end:<br>        item = arr[mid]<br>        <span class="hljs-keyword">if</span> item.start - <span class="hljs-number">1</span> &lt;= val &lt;= item.end + <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> mid<br>        <span class="hljs-keyword">elif</span> val &lt; item.start - <span class="hljs-number">1</span>:<br>            end = mid<br>        <span class="hljs-keyword">elif</span> val &gt; item.end + <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> start == mid:<br>                start = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                start = mid<br><br>        mid = <span class="hljs-built_in">int</span>((start + end) / <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> mid<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SummaryRanges</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Initialize your data structure here.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.arr = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addNum</span>(<span class="hljs-params">self, val</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type val: int</span><br><span class="hljs-string">        :rtype: void</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.arr) == <span class="hljs-number">0</span>:<br>            interval = Interval(val, val)<br>            <span class="hljs-variable language_">self</span>.arr.append(interval)<br>        <span class="hljs-keyword">else</span>:<br>            i = nearest(<span class="hljs-variable language_">self</span>.arr, val)<br>            item = <span class="hljs-variable language_">self</span>.arr[i]<br>            <span class="hljs-keyword">if</span> item.start &lt;= val &lt;= item.end:<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">elif</span> val == item.start - <span class="hljs-number">1</span>:<br>                item.start = val<br>                <span class="hljs-keyword">while</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.arr[i - <span class="hljs-number">1</span>].end == item.start - <span class="hljs-number">1</span>:<br>                    <span class="hljs-variable language_">self</span>.arr[i - <span class="hljs-number">1</span>].end = item.end<br>                    <span class="hljs-variable language_">self</span>.arr.pop(i)<br>                    item = <span class="hljs-variable language_">self</span>.arr[i - <span class="hljs-number">1</span>]<br>                    i = i - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> val == item.end + <span class="hljs-number">1</span>:<br>                item.end = val<br>                <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.arr) - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.arr[i + <span class="hljs-number">1</span>].start == item.end + <span class="hljs-number">1</span>:<br>                    item.end = <span class="hljs-variable language_">self</span>.arr[i + <span class="hljs-number">1</span>].end<br>                    <span class="hljs-variable language_">self</span>.arr.pop(i + <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> val &lt; item.start - <span class="hljs-number">1</span>:<br>                interval = Interval(val, val)<br>                <span class="hljs-variable language_">self</span>.arr.insert(i, interval)<br>            <span class="hljs-keyword">elif</span> val &gt; item.end + <span class="hljs-number">1</span>:<br>                interval = Interval(val, val)<br>                <span class="hljs-variable language_">self</span>.arr.insert(i + <span class="hljs-number">1</span>, interval)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getIntervals</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :rtype: List[Interval]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.arr<br><br><br><span class="hljs-comment"># Your SummaryRanges object will be instantiated and called as such:</span><br><span class="hljs-comment"># obj = SummaryRanges()</span><br><span class="hljs-comment"># obj.addNum(val)</span><br><span class="hljs-comment"># param_2 = obj.getIntervals()</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    obj = SummaryRanges()<br>    obj.addNum(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(obj.getIntervals())  <span class="hljs-comment"># [1,1]</span><br>    obj.addNum(<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(obj.getIntervals())  <span class="hljs-comment"># [1,1],[3,3]</span><br>    obj.addNum(<span class="hljs-number">7</span>)<br>    <span class="hljs-built_in">print</span>(obj.getIntervals())  <span class="hljs-comment"># [1,1],[3,3],[7,7]</span><br>    obj.addNum(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(obj.getIntervals())  <span class="hljs-comment"># [1,3],[7,7]</span><br>    obj.addNum(<span class="hljs-number">6</span>)<br>    <span class="hljs-built_in">print</span>(obj.getIntervals())  <span class="hljs-comment"># [1,3],[6,7]</span><br></code></pre></td></tr></table></figure>

<h2 id="高效的Python-List"><a href="#高效的Python-List" class="headerlink" title=" 高效的Python List"></a><a name="hh2"></a> 高效的Python List</h2><p>我一开始不愿意使用list的本质原因是需要在List的中间删除和插入数据，因为
对于一个size为n的list，list.pop(0)的时间复杂度是O(n)。
但是Python的List似乎仍然非常高效，即使在list中间删除和插入数。我本来以为
我的这个解法会超时呢，结果居然击败的80%的提交。</p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>宏扩展的执行逻辑初探(二)</title>
    <url>/2018/12/09/macro/</url>
    <content><![CDATA[<h2 id="再来一个例子"><a href="#再来一个例子" class="headerlink" title="再来一个例子"></a>再来一个例子</h2><p>看看以下运行的结果是什么呢？</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">(<span class="hljs-name">defmacro</span> a_macro [x]<br>  (<span class="hljs-name">list</span> &#x27;+ <span class="hljs-number">1</span> x))<br><br>(<span class="hljs-name">macroexpand-1</span> &#x27;(a_macro (+ <span class="hljs-number">1</span> <span class="hljs-number">2</span>)) )  <span class="hljs-comment">;; =&gt; ?</span><br></code></pre></td></tr></table></figure>

<p>如果是一个函数呢？</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">(<span class="hljs-name">defn</span> a_func [x]<br>  (<span class="hljs-name">list</span> &#x27;+ <span class="hljs-number">1</span> x))<br><br>(<span class="hljs-name">a_func</span> (<span class="hljs-name">+</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>)) <span class="hljs-comment">;; =&gt; ?</span><br></code></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="宏参数绑定表达式，而不是表达式的值"><a href="#宏参数绑定表达式，而不是表达式的值" class="headerlink" title="宏参数绑定表达式，而不是表达式的值"></a>宏参数绑定表达式，而不是表达式的值</h2><p>a_macro进行扩展的的运行结果是</p>
<pre><code class="hljs">#&#39;user/a_macro
(+ 1 (+ 1 2))    # 注意！不是 (+ 1 3)
</code></pre>
<p>而不是<code>(+ 1 3)</code>。说明扩展宏的时候，宏的参数绑定的是表达式，
<code>x</code>绑定了表达式<code>(+ 1 2)</code>，这样宏内部的list函数求值运行的时候，x的值是一个表达式<code>(+ 1 2)</code>。</p>
<p>a_func则不同，内部调用同样的list函数的时候，入参<code>(+ 1 2)</code>首先进行了求值。因此<code>x</code>绑定的是<code>3</code> 。
因此a_func运行结果是</p>
<pre><code class="hljs">(+ 1 3)
</code></pre>
]]></content>
      <tags>
        <tag>clojure</tag>
        <tag>lisp</tag>
        <tag>macro</tag>
      </tags>
  </entry>
  <entry>
    <title>[leetcode 337]打败了100%的解法</title>
    <url>/2018/02/24/2018-2-24-robber-3/</url>
    <content><![CDATA[<h2 id="题目概述"><a href="#题目概述" class="headerlink" title=" 题目概述"></a><a name="hh0"></a> 题目概述</h2><p><a href="https://leetcode.com/problems/house-robber-iii/description/">原题链接</a></p>
<pre><code class="hljs">The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the &quot;root.&quot; Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that &quot;all houses in this place forms a binary tree&quot;. It will automatically contact the police if two directly-linked houses were broken into on the same night.
Determine the maximum amount of money the thief can rob tonight without alerting the police.
</code></pre>
<figure class="highlight tap"><table><tr><td class="code"><pre><code class="hljs tap">Example 1:<br>     3<br>    / \<br>  <span class="hljs-number"> 2 </span>  2<br>    \   \ <br>    <span class="hljs-number"> 4 </span>  1<br>Maximum amount of money the thief can rob =<span class="hljs-number"> 3 </span>+<span class="hljs-number"> 4 </span>+<span class="hljs-number"> 1 </span>= 8.<br></code></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="最快的解法"><a href="#最快的解法" class="headerlink" title=" 最快的解法"></a><a name="hh1"></a> 最快的解法</h2><p>以下代码打败了100%的其它python3解法。
带记忆体的递归，也就是动态规划。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rob</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type root: TreeNode</span><br><span class="hljs-string">        :rtype: int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.memo = &#123;&#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.dp(root)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> root <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.memo :<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.memo[root]<br><br>            v1 = <span class="hljs-variable language_">self</span>.dp(root.left) + <span class="hljs-variable language_">self</span>.dp(root.right)<br><br>            v2 = root.val<br>            <span class="hljs-keyword">if</span> root.left <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                v2 += <span class="hljs-variable language_">self</span>.dp(root.left.left) + <span class="hljs-variable language_">self</span>.dp(root.left.right)<br>            <span class="hljs-keyword">if</span> root.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                v2 += <span class="hljs-variable language_">self</span>.dp(root.right.left) + <span class="hljs-variable language_">self</span>.dp(root.right.right)<br>            <span class="hljs-variable language_">self</span>.memo[root] = <span class="hljs-built_in">max</span>(v1, v2)<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.memo[root]<br></code></pre></td></tr></table></figure>



<h2 id="截图留念"><a href="#截图留念" class="headerlink" title=" 截图留念"></a><a name="hh2"></a> 截图留念</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache">              <span class="hljs-attribute">You</span> are Here!<br><span class="hljs-attribute">Your</span> runtime beats <span class="hljs-number">100</span>.<span class="hljs-number">00</span>% of python3 submissions.<br></code></pre></td></tr></table></figure>
<p><img src="/images/2018-2-24.png" alt="robber3_submit_result"></p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>[leetcode 341]练练手</title>
    <url>/2018/08/18/2018-8-18-leetcode-341/</url>
    <content><![CDATA[<h2 id="题目概述"><a href="#题目概述" class="headerlink" title=" 题目概述"></a><a name="hh0"></a> 题目概述</h2><p><a href="https://leetcode.com//problems/flatten-nested-list-iterator/description/">原题链接</a></p>
<blockquote>
<p>  Given a nested list of integers, implement an iterator to flatten it.</p>
<p>  Each element is either an integer, or a list – whose elements may also be integers or other lists.
  Input: [[1,1],2,[1,1]]
  Output: [1,1,2,1,1]</p>
</blockquote>
<span id="more"></span>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title=" 解题思路"></a><a name="hh1"></a> 解题思路</h2><p>如果只是遍历一遍，用类似二叉树的中序遍历就好了。但是因为要生成迭代子，那么就得
考虑用栈来模拟递归了。</p>
<p>当然这个题目是比较简单的，压栈的是一个tuple－(list, index)。第一个是list，第二个指向
list的第几个item。</p>
<h2 id="第一次通过的解法"><a href="#第一次通过的解法" class="headerlink" title=" 第一次通过的解法"></a><a name="hh2"></a> 第一次通过的解法</h2><p>比较慢。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NestedIterator</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, nestedList</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Initialize your data structure here.</span><br><span class="hljs-string">        :type nestedList: List[NestedInteger]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.q = [(nestedList, <span class="hljs-number">0</span>)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :rtype: int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><br>        val = <span class="hljs-literal">None</span><br>        not_find = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.q <span class="hljs-keyword">and</span> not_find:<br>            arr, num = <span class="hljs-variable language_">self</span>.q.pop()<br>            <span class="hljs-keyword">if</span> num &lt; <span class="hljs-built_in">len</span>(arr):<br>                ele = arr[num]<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(ele, <span class="hljs-built_in">int</span>): <span class="hljs-comment"># 如果提交需要改成　ele.isInteger()</span><br>                    val = ele            <span class="hljs-comment"># ................  ele.getInteger()</span><br>                    not_find = <span class="hljs-literal">False</span><br>                    <span class="hljs-variable language_">self</span>.q.append((arr, num + <span class="hljs-number">1</span>))<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-variable language_">self</span>.q.append((arr, num + <span class="hljs-number">1</span>))<br>                    <span class="hljs-variable language_">self</span>.q.append((ele, <span class="hljs-number">0</span>))  <span class="hljs-comment"># 如果提交改成，self.q.append((ele.getList(),0))</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">if</span> not_find <span class="hljs-keyword">else</span> val<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hasNext</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :rtype: bool</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        has_next = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> has_next <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.q:<br>            arr, num = <span class="hljs-variable language_">self</span>.q.pop()<br>            <span class="hljs-keyword">if</span> num &lt; <span class="hljs-built_in">len</span>(arr):<br>                ele = arr[num]<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(ele, <span class="hljs-built_in">int</span>):<br>                    has_next = <span class="hljs-literal">True</span><br>                    <span class="hljs-variable language_">self</span>.q.append((arr, num))<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-variable language_">self</span>.q.append((arr, num + <span class="hljs-number">1</span>))<br>                    <span class="hljs-variable language_">self</span>.q.append((ele, <span class="hljs-number">0</span>))<br><br>        <span class="hljs-keyword">return</span> has_next<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    nestedlist = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-number">3</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>], <span class="hljs-number">6</span>]<br>    i, v = NestedIterator(nestedlist), []<br>    <span class="hljs-keyword">while</span> i.hasNext(): v.append(i.<span class="hljs-built_in">next</span>())<br>    <span class="hljs-built_in">print</span>(v)  <span class="hljs-comment"># [1, 2, 3, 4, 5, 6]</span><br></code></pre></td></tr></table></figure>

<h2 id="优化后的解法"><a href="#优化后的解法" class="headerlink" title=" 优化后的解法"></a><a name="hh3"></a> 优化后的解法</h2><p>之前的解法大概是140ms跑通了44个测试。而大多数的解法则在70ms左右。
怎么改进呢？
has_next和next方法本质上是一样的，可以只保留一个next就可以实现两个方法了。
那么我们可以提前跑next方法，缓存两个值。</p>
<p>以下是改进后的速度提升了一倍。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NestedIterator2</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, nestedList</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Initialize your data structure here.</span><br><span class="hljs-string">        :type nestedList: List[NestedInteger]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.q = [(nestedList, <span class="hljs-number">0</span>)]<br>        <span class="hljs-variable language_">self</span>.next_val = <span class="hljs-variable language_">self</span>.next0()<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.next_val <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> :<br>            <span class="hljs-variable language_">self</span>.has_next = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-variable language_">self</span>.has_next = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        curr_val = <span class="hljs-variable language_">self</span>.next_val<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.has_next:<br>            <span class="hljs-variable language_">self</span>.next_val = <span class="hljs-variable language_">self</span>.next0()<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.next_val <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-variable language_">self</span>.has_next = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-variable language_">self</span>.has_next = <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">return</span> curr_val<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hasNext</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :rtype: bool</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.has_next<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next0</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :rtype: int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><br>        val = <span class="hljs-literal">None</span><br>        not_find = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.q <span class="hljs-keyword">and</span> not_find:<br>            arr, num = <span class="hljs-variable language_">self</span>.q.pop()<br>            <span class="hljs-keyword">if</span> num &lt; <span class="hljs-built_in">len</span>(arr):<br>                ele = arr[num]<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(ele, <span class="hljs-built_in">int</span>):<br>                    val = ele<br>                    not_find = <span class="hljs-literal">False</span><br>                    <span class="hljs-variable language_">self</span>.q.append((arr, num + <span class="hljs-number">1</span>))<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-variable language_">self</span>.q.append((arr, num + <span class="hljs-number">1</span>))<br>                    <span class="hljs-variable language_">self</span>.q.append((ele, <span class="hljs-number">0</span>))<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">if</span> not_find <span class="hljs-keyword">else</span> val<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>BitTorrent协议（二）之获取下载源</title>
    <url>/2019/01/10/2019-1-10-bt-2/</url>
    <content><![CDATA[<h2 id="如何获取下载源"><a href="#如何获取下载源" class="headerlink" title="如何获取下载源"></a>如何获取下载源</h2><p>作为一个downloader开始下载资源首先要向tracker宣布自己的存在，同时获得其他downloader的地址。
这里的downloader我们统一称为对等节点（peer），因此接下来要做的事情就是与tracker通信，获取peers。</p>
<span id="more"></span>


<h2 id="获取下载源的协议"><a href="#获取下载源的协议" class="headerlink" title="获取下载源的协议"></a>获取下载源的协议</h2><p>有两种方法，</p>
<ul>
<li>方法一：基于HTTP的GET请求</li>
</ul>
<p>官网文档 <a href="http://www.bittorrent.org/beps/bep_0003.html">BEP3</a> 中的trackers章节告诉我们可以使用HTTP &#x2F;GET
来得到peer的信息。也就是发送一个GET请求。</p>
<ul>
<li>方法二：基于UDP的tracker协议</li>
</ul>
<p>再对照如下tracker列表就可以明白了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">http://tracker.trackerfix.com:80/announce  <span class="hljs-comment"># 方法一</span><br><br>udp://9.rarbg.me:2710/announce  <span class="hljs-comment"># 方法二</span><br> <br>udp://9.rarbg.to:2710/announce <span class="hljs-comment"># 方法二</span><br></code></pre></td></tr></table></figure>

<p>方法一看起来是更简单的方法，但是在GFW保护下，这些采用方法一的服务端口都无法访问。因此只能尝试方法二。</p>
<h2 id="基于UDP的Tracker协议"><a href="#基于UDP的Tracker协议" class="headerlink" title="基于UDP的Tracker协议"></a>基于UDP的Tracker协议</h2><p>UDP协议本来也是一种更好的选择，因为传输的字节更少。官网文档<a href="http://www.bittorrent.org/beps/bep_0015.html">UDP Tracker Protocol for BitTorrent</a>
详细说明了原因。</p>
<blockquote>
<p>Using HTTP introduces significant overhead. There’s overhead at the ethernet layer (14 bytes per packet), at the IP layer (20 bytes per packet), at the TCP layer (20 bytes per packet) and at the HTTP layer. About 10 packets are used for a request plus response containing 50 peers and the total number of bytes used is about 1206 [1]. This overhead can be reduced significantly by using a UDP based protocol. The protocol proposed here uses 4 packets and about 618 bytes, reducing traffic by 50%. For a client, saving 1 kbyte every hour isn’t significant, but for a tracker serving a million peers, reducing traffic by 50% matters a lot. An additional advantage is that a UDP based binary protocol doesn’t require a complex parser and no connection handling, reducing the complexity of tracker code and increasing it’s performance.</p>
</blockquote>
<p>简单来说就是方法一基于TCP的，每个基于TCP的请求的头部自然要比基于UDP的请求大。</p>
<p>UDP协议包含三个过程，</p>
<ul>
<li>CONNECT</li>
<li>ANNOUNCE</li>
<li>SCRAPE</li>
</ul>
<p>我们关心的是发布（ANNOUNCE），接下来重点看如何实现。</p>
<h2 id="实现发布"><a href="#实现发布" class="headerlink" title="实现发布"></a>实现发布</h2><p>两个步骤，</p>
<ul>
<li>CONNECT，获取connection_id</li>
<li>ANNOUNCE，拿着connection_id和info_hash等参数再请求。</li>
</ul>
<p>参考了<a href="https://www.libtorrent.org/udp_tracker_protocol.html">Bittorrent udp-tracker protocol extension</a>
因为对入参和返回参数说明的更详细一些。用的tracker是一个热门的磁力链接。</p>
<pre><code class="hljs">ip = &#39;exodus.desync.com&#39;  # get from tracker list
port = 6969  # get from tracker list
</code></pre>
<p>而info_hash是用uTorrent软件打开该磁力链接后获得的。</p>
<pre><code class="hljs">1aa4c13830b822c1375686d685a9fce23405f6ba
</code></pre>
<p>以下是代码实现。uTorrent软件打开磁力链接会拿到tracker列表。</p>
<p>announce的重要参数说明</p>
<ol>
<li>num_want : -1  # 希望获得的peer个数，则是默认的peer个数</li>
<li>ip : 0  # 当前发送udp包的地址</li>
<li>port : 监听的公网端口</li>
</ol>
<p>一旦发布完成，该监听的端口会收到DHT协议的请求，例如FIND_NODE</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br>__author__ = <span class="hljs-string">&#x27;ym&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Date        : &#x27;2019/1/8&#x27;</span><br><span class="hljs-string">    Description :  udp tracker protocol</span><br><span class="hljs-string">    </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> struct<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ip_me</span>():<br>    <span class="hljs-keyword">import</span> psutil<br>    <span class="hljs-keyword">import</span> socket<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_ip_addresses</span>(<span class="hljs-params">family</span>):<br>        <span class="hljs-keyword">for</span> interface, snics <span class="hljs-keyword">in</span> psutil.net_if_addrs().items():<br>            <span class="hljs-keyword">for</span> snic <span class="hljs-keyword">in</span> snics:<br>                <span class="hljs-keyword">if</span> snic.family == family:<br>                    <span class="hljs-keyword">yield</span> (interface, snic.address)<br><br>    addrs = <span class="hljs-built_in">list</span>(get_ip_addresses(socket.AF_INET))<br>    <span class="hljs-keyword">for</span> tup <span class="hljs-keyword">in</span> addrs:<br>        <span class="hljs-keyword">if</span> tup[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;en0&#x27;</span>:<br>            <span class="hljs-keyword">return</span> tup[<span class="hljs-number">1</span>]<br><br><br>SOURCE_IP = ip_me()<br>SOURCE_PORT = <span class="hljs-number">59876</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">to_byte</span>(<span class="hljs-params">integer, length=<span class="hljs-number">4</span></span>):<br>    <span class="hljs-keyword">return</span> integer.to_bytes(length, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">udp_send</span>(<span class="hljs-params">ip, port, data</span>):<br>    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  <span class="hljs-comment"># UDP</span><br>    sock.bind((SOURCE_IP, SOURCE_PORT))<br>    sock.sendto(data, (ip, port))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">udp_recv</span>(<span class="hljs-params">ip, port</span>):<br>    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  <span class="hljs-comment"># UDP</span><br>    sock.bind((ip, port))<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        data, addr = sock.recvfrom(<span class="hljs-number">2048</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;received message:&quot;</span>, data)<br>        <span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UdpAnnouceRequest</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.connection_id = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.action = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.transaction_id = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.info_hash = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.peer_id = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.downloaded = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.left = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.uploaded = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.event = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.ip = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.key = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.num_want = -<span class="hljs-number">1</span><br>        <span class="hljs-variable language_">self</span>.port = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.extensions = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_bytes</span>(<span class="hljs-params">self</span>):<br>        result = to_byte(<span class="hljs-variable language_">self</span>.connection_id, <span class="hljs-number">8</span>)<br>        result += to_byte(<span class="hljs-variable language_">self</span>.action)<br>        result += to_byte(<span class="hljs-variable language_">self</span>.transaction_id)<br>        result += <span class="hljs-variable language_">self</span>.info_hash<br>        result += <span class="hljs-variable language_">self</span>.peer_id<br>        result += to_byte(<span class="hljs-variable language_">self</span>.downloaded, <span class="hljs-number">8</span>)<br>        result += to_byte(<span class="hljs-variable language_">self</span>.left, <span class="hljs-number">8</span>)<br>        result += to_byte(<span class="hljs-variable language_">self</span>.uploaded, <span class="hljs-number">8</span>)<br>        result += to_byte(<span class="hljs-variable language_">self</span>.event)<br>        result += to_byte(<span class="hljs-variable language_">self</span>.ip)<br>        result += to_byte(<span class="hljs-variable language_">self</span>.key)<br>        result += struct.pack(<span class="hljs-string">&quot;&gt;i&quot;</span>, <span class="hljs-variable language_">self</span>.num_want)<br>        result += to_byte(<span class="hljs-variable language_">self</span>.port, <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">udp_announcing</span>(<span class="hljs-params">request: UdpAnnouceRequest, dst_ip, dst_port</span>):<br>    data = request.get_bytes()<br>    udp_send(dst_ip, dst_port, data)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect</span>(<span class="hljs-params">tracker_ip, tracker_port</span>):<br>    protocol_id = <span class="hljs-number">0x41727101980</span>  <span class="hljs-comment"># magic number</span><br>    action = <span class="hljs-number">0</span>  <span class="hljs-comment"># connect</span><br>    transaction_id = <span class="hljs-number">123</span>  <span class="hljs-comment"># random</span><br><br>    data = struct.pack(<span class="hljs-string">&quot;&gt;Qii&quot;</span>, protocol_id, action, transaction_id)<br>    udp_send(tracker_ip, tracker_port, data)<br><br>    reply = udp_recv(SOURCE_IP, SOURCE_PORT)<br>    action, transaction_id, connection_id = struct.unpack(<span class="hljs-string">&quot;&gt;iiQ&quot;</span>, reply)<br>    fmt = <span class="hljs-string">&quot;connect reply:\n\taction:&#123;&#125;, transaction_id:&#123;&#125;, connection_id:&#123;&#125;&quot;</span><br>    <span class="hljs-built_in">print</span>(fmt.<span class="hljs-built_in">format</span>(action, transaction_id, connection_id))<br>    <span class="hljs-keyword">return</span> connection_id<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">announce</span>(<span class="hljs-params">connection_id, dst_ip, dst_port</span>):<br>    request = UdpAnnouceRequest()<br>    request.connection_id = connection_id<br>    request.action = <span class="hljs-number">1</span><br>    request.transaction_id = <span class="hljs-number">1234</span>  <span class="hljs-comment"># random</span><br>    request.info_hash = <span class="hljs-built_in">bytearray</span>.fromhex(<span class="hljs-string">&#x27;1aa4c13830b822c1375686d685a9fce23405f6ba&#x27;</span>)  <span class="hljs-comment"># compute from meta_info</span><br>    request.peer_id = <span class="hljs-built_in">bytearray</span>.fromhex(<span class="hljs-string">&#x27;ab&#x27;</span> * <span class="hljs-number">20</span>)  <span class="hljs-comment"># random</span><br>    request.downloaded = <span class="hljs-number">0</span><br>    request.left = <span class="hljs-number">1509949440</span>  <span class="hljs-comment"># from meta_info</span><br>    request.uploaded = <span class="hljs-number">0</span><br>    request.ip = <span class="hljs-number">0</span>  <span class="hljs-comment"># default</span><br>    request.key = <span class="hljs-number">314</span><br>    request.port = <span class="hljs-number">59601</span>  <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># print(request)</span><br>    udp_announcing(request, dst_ip, dst_port)<br>    <span class="hljs-keyword">return</span> udp_recv(SOURCE_IP, SOURCE_PORT)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">udp_process</span>():<br>    ip = <span class="hljs-string">&#x27;exodus.desync.com&#x27;</span>  <span class="hljs-comment"># get from tracker list</span><br>    port = <span class="hljs-number">6969</span>  <span class="hljs-comment"># get from tracker list</span><br>    connection_id = connect(ip, port)<br>    reply = announce(connection_id, ip, port)<br>    action, transaction_id, interval, leechers, seeders = struct.unpack(<span class="hljs-string">&quot;&gt;iiiii&quot;</span>, reply[<span class="hljs-number">0</span>:<span class="hljs-number">20</span>])<br>    fmt = <span class="hljs-string">&quot;announce_reply:\n\taction:&#123;&#125;, transaction_id:&#123;&#125;, interval:&#123;&#125;s, leechers:&#123;&#125;, seeders:&#123;&#125;&quot;</span><br>    <span class="hljs-built_in">print</span>(fmt.<span class="hljs-built_in">format</span>(action, transaction_id, interval, leechers, seeders))<br>    peers = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>, <span class="hljs-built_in">len</span>(reply), <span class="hljs-number">6</span>):<br>        <span class="hljs-keyword">if</span> i + <span class="hljs-number">6</span> &lt;= <span class="hljs-built_in">len</span>(reply):<br>            data = reply[i:i + <span class="hljs-number">6</span>]<br>            n1, n2, n3, n4, peer_port = struct.unpack(<span class="hljs-string">&quot;&gt;BBBBH&quot;</span>, data)<br>            peer_ip = <span class="hljs-string">&quot;&#123;&#125;.&#123;&#125;.&#123;&#125;.&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(n1, n2, n3, n4)<br>            peers.append((peer_ip, peer_port))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;get &#123;&#125; peers:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(peers), peers))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    udp_process()<br></code></pre></td></tr></table></figure>

<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>运行日志如下，可以看到拿到了200个peers的ipv4地址和端口。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>python3.<span class="hljs-number">7</span> <span class="hljs-regexp">/Users/ym</span><span class="hljs-regexp">/charm/</span>pytest<span class="hljs-regexp">/ym/</span>bt/udp_announce.py<br>received message: <span class="hljs-string">b&#x27;\x00\x00\x00\x00\x00\x00\x00&#123;\xd89\xa8\x9dv\xd3=]&#x27;</span><br>connect reply:<br>	action:<span class="hljs-number">0</span>, transaction_id:<span class="hljs-number">123</span>, connection_id:<span class="hljs-number">15580669780121828701</span><br>received message: <span class="hljs-string">b&#x27;\x00\x00\x00\x01\x00\x00\x04\xd2\x00\x00\x07_\x00\x00\x00%\x00\x00\x01qi\xe8\xff\xd8XWl\x18-F\xbcd\x9e\xae&#125;\xea\xaa[\xd41S\&#x27;\xcb\x0eb\x14\x8f\xcfbcg\xcd\xaf9\xe0\x1f-\xf7*\xa6\xa2\x86)P\xadl\xbc\xbf)\xb6&#123;\xc4w\xaa)\xcd\xf0@cF--;M\xa6Wp\xce\xc7\xff\xfc\xcf\xbb\x9e\x18\x9c\xec\x96\xc4\xcf\x83PS\x06_\xb4zmc\xd3\x82i\xef\x0b\xeb\xd0\xaf ~d\xf3\x8c\xde\x9b?\xfc\xdb!1\x93W\x0b\xc3I\xad\xf4,)\xf0\x1c\xc5\xe0\x98\x80\xbbZ\xb4^UA#\&#x27;|\x95\x7fd\xc77p\xc8Z\xadN\xb5p\xc7K\xbc\xd31i\x9c\xe0\x7f0\xaeV\x02\xc2\xe3G.R\x92\xfc\x15\xc8\x05R\x18\x18I\x943H3~\r\xd3\x89=\x06\xe6\xbb86-y\xd1\xa6\xca\xcb)\xd7\r\x8aLo)\xcb\xda\x8e;K)Z&lt;\x9c\xb0\x87);Q\xd0\xb2\x8b\x18\xa5\xc2T\xb8\xd7\x05\x90;\x83\xf1^\xca\x8eeB\xa1a\xb9\xe8\x15z\x83\xde\x93\n\xba\x91+\x9em\xb1\x9b\xd0V\x82Y\xf2\xb5\xad\xc7\rV\x06\xf8^k\x14R\x8eP\xb1\xfb\x15Rf\x1eV\xd0\x05R-\xd9\xf5\xc2&quot;@\x86\xf0K\x00\x00@B\xdeFa*\x1f;\x02&lt;\xa2\xa7\x18l\xed\xfa\xd2\xf4\x05k#\x81\xe8\xa5\x01\xban\x82\xcd\t\xd57\xb8\x8eQ\xdd\xd4\x1b\x13\xfalh\xd0\x83\xa5J\xa9\xb5\xce\xe7x:\xb8\xe1\xc9\xab\xc6\xf9\xa3:\xc5\xed\xc5\xe4\xd2c\xb6\xb9\x1cL\xc0\x19\x8b&lt;\xbfn\x9a\xc2\x80\xcc\xf3\xc3?\xefn\x8dg\xa5=\x0cm\xb1^\xfcU\xf3[&#125;\xdd\x90\x82yS\xe9o\xf3\xf0R@w\xc0\xf4\&#x27;\xae\xd0SR\xcc\xde@\xc5\xf8\xdb\x9e\x8a\x0f\xb3\x08_\x90\xb4\xc1\xa9=\xda$\x1a\xe1n\xe8V\r\xe5\xe1b\x8cr&#123;1\xc3^\x05\xe8bR\x00Sn\xe5\x7fe\xe5G4V5I \x1bjQ\x9a\x80\x7f\xce\xe7y\xd5\xde]\xbc\x81D\xbd\xbf\xf1\xb8K\xdfZ\x8d\xe5\xa9=\xda#\x1a\xe1sE\xbb\xb8\xd4Oi\xa7\x10V\xe9\xffgG\x10\xf3\x8f\xde^\xea#S+%\\\xeeN_\xba\xbd3\x07g\xaf\xdb\xb3)\xa1:#\xe0G%\x98\xce\x84&#125;\xe2\xd8ch\xeaN\xb2\xbe\xabp\xe3\xd2?\xb7\r\xcd\x9d\xf3\x8c\xa8\x01\x18I\xabH\x90\x84,A\x9a\x02&#125;\xd1\\\xdd\x94bp\x8d:\xa7e:p\n\x17\x93\xb0\xb9h\x05\xa9)b\xdc\\\xed\x0f;]\x9dX\x10\x96\x98u\x92R\x18\x8a+\xc2LR\x0cH\xa7z\x06&gt;\x96OI2\x9f.\xb6\xbax9\xee)\xbaS\x8b\x9b\x81)\x8b\xfa&amp;m,)P\xe4\x95\xc8s%\x8e\x03+&gt;\x1e\xc5\xf8\x92\xba\xb9\xca\xc4\xca\xa9\xba\xd3(\xc3Yxr\x07_\xbe:\x08\x08\xc8\x9c\xb2P\x14X\x7f\xcf\x9aIWU\xc6G\x80j\xa0\x9dRSx\xf4n\x07w\xe4m\xbe\xd4`\xc8\xd5g\xf4\xf2&#125;\xe1\x01g5I%\xc1\xa1\\c@\x89\x99\x9bVSE\x95\xfb\xdeV\x12\xe0F\&#x27;gR\x17n\x90\x91\xf4O\xb7c\xa6\xd1\xfcOC9\xf0s\xee+\xf6\xc8u\xe1\xed+\xf1\x91DGD)Zo\x9e\xf3y\x18\xcb\x97\x9e=\&#x27;\xc4\xca\xa9\xba\xcbO\xa5\xe7(\x0e8\xc1\xa2\xf6k\x92\x14\x82q\x14b.\xe7oi\xe8X\x86\xe2\xbagF\xcc\xc2\xed\x83`+\xbdk\x99\xdfR\x07u\xa2\xbf\x8cBW\xcfc\x00\x00?\x8f\xecq\x00\x00)\xd2\n\xe3\xe9\xca\x1f-g\x8a\xe5y\xde\xb8\xe8\xad\xab\xc4\xd8\x97\xb8\x9f\xd0d\xd0g\xe9\xa2\xdb\xbd\xc4\xd1\xe9\xa4\x86\xc2\xc4\xcf\xb83\xe2\xaa\xc3\x93\xb5\xbe&amp;\xfb\x9c\xde.\xdc\xd2\x14\x9aF9B\xa4&#123;p\xcd\x9d\xf6\xe0\xcai\xb8\x99u\xf0+g&#123;$\xb5\xb3LZ\xdbs\xab\x99~Qd\xff\xdf\xe8\xefP\&#x27;\x86\xc9:\x8aMD\xf3F\x88\xb8H\xe5%G\x84M1\x92\r~\xe9\x13)OB\xe1Vi\xdd\xcb\x16\xf53\xb3\xba\x96\x86\xaf\xba:\xb2\xa6!$\x7f\xdd|k\xc0+\x8a&#125;&#123;\xf5\x14\x8eAVy68&amp;K\xb1tZ`\nY\xb8l\x04\xd7\xfb\x84\xb3h\xcfSb*\x93`\x17\xb5[\xebGV\x89\x15S\x91\xd1KA\xd7\xc4\xa3o?\xf5:\x9b\x83\x1d.\xd1,c\x05\x16\xb6\xba\xfd\xab97\xb2\x9d\xf9&gt;g\xeb\x82i\xa4&#123;G\xb7i\xe8V1\x91\xafg\xfc\xca\x96\xaf\x16g\x04\xf8\x8a\xda!_^\x9d\xaf\xd2-^\xaf\x94\x0c\xbc\x0f^L\x0f,\xc3\x00Y\xedbW\xf5\x84WFe\xc7\xaeAV\x19|\x9e\xb0\xcfH\xe6\xda\x88&lt;\xdcFA\xe3\x15q\x08)\x8b\xf3:L\x1b)&lt;\xe9\xf5\xaa[\x1f\xd7\x0e\x08Z\xb2\x01\t\x87,R\xd9\xcb\xd4\x9bSx&quot;\xca\x8e[f`N\xc5\xed\x81\x96b\xdc\xc5\xe8\x1av#\&#x27;\xc5\xe8\x13n\xdbn\xc4\xf9g\xc4:\x15\xbbp|\xa6#\&#x27;\xb7W\xa9\x9b@5u\xc2\xdcQd\xef&#x27;</span><br>announce_reply:<br>	action:<span class="hljs-number">1</span>, transaction_id:<span class="hljs-number">1234</span>, interval:<span class="hljs-number">1887</span>s, leechers:<span class="hljs-number">37</span>, seeders:<span class="hljs-number">369</span><br>get <span class="hljs-number">200</span> peers:[(<span class="hljs-string">&#x27;105.232.255.216&#x27;</span>, <span class="hljs-number">22615</span>), (<span class="hljs-string">&#x27;108.24.45.70&#x27;</span>, <span class="hljs-number">48228</span>), (<span class="hljs-string">&#x27;158.174.125.234&#x27;</span>, <span class="hljs-number">43611</span>), (<span class="hljs-string">&#x27;212.49.83.39&#x27;</span>, <span class="hljs-number">51982</span>), (<span class="hljs-string">&#x27;98.20.143.207&#x27;</span>, <span class="hljs-number">25187</span>), (<span class="hljs-string">&#x27;103.205.175.57&#x27;</span>, <span class="hljs-number">57375</span>), (<span class="hljs-string">&#x27;45.247.42.166&#x27;</span>, <span class="hljs-number">41606</span>), (<span class="hljs-string">&#x27;41.80.173.108&#x27;</span>, <span class="hljs-number">48319</span>), (<span class="hljs-string">&#x27;41.182.123.196&#x27;</span>, <span class="hljs-number">30634</span>), (<span class="hljs-string">&#x27;41.205.240.64&#x27;</span>, <span class="hljs-number">25414</span>), (<span class="hljs-string">&#x27;45.45.59.77&#x27;</span>, <span class="hljs-number">42583</span>), (<span class="hljs-string">&#x27;112.206.199.255&#x27;</span>, <span class="hljs-number">64719</span>), (<span class="hljs-string">&#x27;187.158.24.156&#x27;</span>, <span class="hljs-number">60566</span>), (<span class="hljs-string">&#x27;196.207.131.80&#x27;</span>, <span class="hljs-number">21254</span>), (<span class="hljs-string">&#x27;95.180.122.109&#x27;</span>, <span class="hljs-number">25555</span>), (<span class="hljs-string">&#x27;130.105.239.11&#x27;</span>, <span class="hljs-number">60368</span>), (<span class="hljs-string">&#x27;175.32.126.100&#x27;</span>, <span class="hljs-number">62348</span>), (<span class="hljs-string">&#x27;222.155.63.252&#x27;</span>, <span class="hljs-number">56097</span>), (<span class="hljs-string">&#x27;49.147.87.11&#x27;</span>, <span class="hljs-number">49993</span>), (<span class="hljs-string">&#x27;173.244.44.41&#x27;</span>, <span class="hljs-number">61468</span>), (<span class="hljs-string">&#x27;197.224.152.128&#x27;</span>, <span class="hljs-number">47962</span>), (<span class="hljs-string">&#x27;180.94.85.65&#x27;</span>, <span class="hljs-number">8999</span>), (<span class="hljs-string">&#x27;124.149.127.100&#x27;</span>, <span class="hljs-number">50999</span>), (<span class="hljs-string">&#x27;112.200.90.173&#x27;</span>, <span class="hljs-number">20149</span>), (<span class="hljs-string">&#x27;112.199.75.188&#x27;</span>, <span class="hljs-number">54065</span>), (<span class="hljs-string">&#x27;105.156.224.127&#x27;</span>, <span class="hljs-number">12462</span>), (<span class="hljs-string">&#x27;86.2.194.227&#x27;</span>, <span class="hljs-number">18222</span>), (<span class="hljs-string">&#x27;82.146.252.21&#x27;</span>, <span class="hljs-number">51205</span>), (<span class="hljs-string">&#x27;82.24.24.73&#x27;</span>, <span class="hljs-number">37939</span>), (<span class="hljs-string">&#x27;72.51.126.13&#x27;</span>, <span class="hljs-number">54153</span>), (<span class="hljs-string">&#x27;61.6.230.187&#x27;</span>, <span class="hljs-number">14390</span>), (<span class="hljs-string">&#x27;45.121.209.166&#x27;</span>, <span class="hljs-number">51915</span>), (<span class="hljs-string">&#x27;41.215.13.138&#x27;</span>, <span class="hljs-number">19567</span>), (<span class="hljs-string">&#x27;41.203.218.142&#x27;</span>, <span class="hljs-number">15179</span>), (<span class="hljs-string">&#x27;41.90.60.156&#x27;</span>, <span class="hljs-number">45191</span>), (<span class="hljs-string">&#x27;41.59.81.208&#x27;</span>, <span class="hljs-number">45707</span>), (<span class="hljs-string">&#x27;24.165.194.84&#x27;</span>, <span class="hljs-number">47319</span>), (<span class="hljs-string">&#x27;5.144.59.131&#x27;</span>, <span class="hljs-number">61790</span>), (<span class="hljs-string">&#x27;202.142.101.66&#x27;</span>, <span class="hljs-number">41313</span>), (<span class="hljs-string">&#x27;185.232.21.122&#x27;</span>, <span class="hljs-number">33758</span>), (<span class="hljs-string">&#x27;147.10.186.145&#x27;</span>, <span class="hljs-number">11166</span>), (<span class="hljs-string">&#x27;109.177.155.208&#x27;</span>, <span class="hljs-number">22146</span>), (<span class="hljs-string">&#x27;89.242.181.173&#x27;</span>, <span class="hljs-number">50957</span>), (<span class="hljs-string">&#x27;86.6.248.94&#x27;</span>, <span class="hljs-number">27412</span>), (<span class="hljs-string">&#x27;82.142.80.177&#x27;</span>, <span class="hljs-number">64277</span>), (<span class="hljs-string">&#x27;82.102.30.86&#x27;</span>, <span class="hljs-number">53253</span>), (<span class="hljs-string">&#x27;82.45.217.245&#x27;</span>, <span class="hljs-number">49698</span>), (<span class="hljs-string">&#x27;64.134.240.75&#x27;</span>, <span class="hljs-number">0</span>), (<span class="hljs-string">&#x27;64.66.222.70&#x27;</span>, <span class="hljs-number">24874</span>), (<span class="hljs-string">&#x27;31.59.2.60&#x27;</span>, <span class="hljs-number">41639</span>), (<span class="hljs-string">&#x27;24.108.237.250&#x27;</span>, <span class="hljs-number">54004</span>), (<span class="hljs-string">&#x27;5.107.35.129&#x27;</span>, <span class="hljs-number">59557</span>), (<span class="hljs-string">&#x27;1.186.110.130&#x27;</span>, <span class="hljs-number">52489</span>), (<span class="hljs-string">&#x27;213.55.184.142&#x27;</span>, <span class="hljs-number">20957</span>), (<span class="hljs-string">&#x27;212.27.19.250&#x27;</span>, <span class="hljs-number">27752</span>), (<span class="hljs-string">&#x27;208.131.165.74&#x27;</span>, <span class="hljs-number">43445</span>), (<span class="hljs-string">&#x27;206.231.120.58&#x27;</span>, <span class="hljs-number">47329</span>), (<span class="hljs-string">&#x27;201.171.198.249&#x27;</span>, <span class="hljs-number">41786</span>), (<span class="hljs-string">&#x27;197.237.197.228&#x27;</span>, <span class="hljs-number">53859</span>), (<span class="hljs-string">&#x27;182.185.28.76&#x27;</span>, <span class="hljs-number">49177</span>), (<span class="hljs-string">&#x27;139.60.191.110&#x27;</span>, <span class="hljs-number">39618</span>), (<span class="hljs-string">&#x27;128.204.243.195&#x27;</span>, <span class="hljs-number">16367</span>), (<span class="hljs-string">&#x27;110.141.103.165&#x27;</span>, <span class="hljs-number">15628</span>), (<span class="hljs-string">&#x27;109.177.94.252&#x27;</span>, <span class="hljs-number">22003</span>), (<span class="hljs-string">&#x27;91.125.221.144&#x27;</span>, <span class="hljs-number">33401</span>), (<span class="hljs-string">&#x27;83.233.111.243&#x27;</span>, <span class="hljs-number">61522</span>), (<span class="hljs-string">&#x27;64.119.192.244&#x27;</span>, <span class="hljs-number">10158</span>), (<span class="hljs-string">&#x27;208.83.82.204&#x27;</span>, <span class="hljs-number">56896</span>), (<span class="hljs-string">&#x27;197.248.219.158&#x27;</span>, <span class="hljs-number">35343</span>), (<span class="hljs-string">&#x27;179.8.95.144&#x27;</span>, <span class="hljs-number">46273</span>), (<span class="hljs-string">&#x27;169.61.218.36&#x27;</span>, <span class="hljs-number">6881</span>), (<span class="hljs-string">&#x27;110.232.86.13&#x27;</span>, <span class="hljs-number">58849</span>), (<span class="hljs-string">&#x27;98.140.114.123&#x27;</span>, <span class="hljs-number">12739</span>), (<span class="hljs-string">&#x27;94.5.232.98&#x27;</span>, <span class="hljs-number">20992</span>), (<span class="hljs-string">&#x27;83.110.229.127&#x27;</span>, <span class="hljs-number">26085</span>), (<span class="hljs-string">&#x27;71.52.86.53&#x27;</span>, <span class="hljs-number">18720</span>), (<span class="hljs-string">&#x27;27.106.81.154&#x27;</span>, <span class="hljs-number">32895</span>), (<span class="hljs-string">&#x27;206.231.121.213&#x27;</span>, <span class="hljs-number">56925</span>), (<span class="hljs-string">&#x27;188.129.68.189&#x27;</span>, <span class="hljs-number">49137</span>), (<span class="hljs-string">&#x27;184.75.223.90&#x27;</span>, <span class="hljs-number">36325</span>), (<span class="hljs-string">&#x27;169.61.218.35&#x27;</span>, <span class="hljs-number">6881</span>), (<span class="hljs-string">&#x27;115.69.187.184&#x27;</span>, <span class="hljs-number">54351</span>), (<span class="hljs-string">&#x27;105.167.16.86&#x27;</span>, <span class="hljs-number">59903</span>), (<span class="hljs-string">&#x27;103.71.16.243&#x27;</span>, <span class="hljs-number">36830</span>), (<span class="hljs-string">&#x27;94.234.35.83&#x27;</span>, <span class="hljs-number">11045</span>), (<span class="hljs-string">&#x27;92.238.78.95&#x27;</span>, <span class="hljs-number">47805</span>), (<span class="hljs-string">&#x27;51.7.103.175&#x27;</span>, <span class="hljs-number">56243</span>), (<span class="hljs-string">&#x27;41.161.58.35&#x27;</span>, <span class="hljs-number">57415</span>), (<span class="hljs-string">&#x27;37.152.206.132&#x27;</span>, <span class="hljs-number">32226</span>), (<span class="hljs-string">&#x27;216.99.104.234&#x27;</span>, <span class="hljs-number">20146</span>), (<span class="hljs-string">&#x27;190.171.112.227&#x27;</span>, <span class="hljs-number">53823</span>), (<span class="hljs-string">&#x27;183.13.205.157&#x27;</span>, <span class="hljs-number">62348</span>), (<span class="hljs-string">&#x27;168.1.24.73&#x27;</span>, <span class="hljs-number">43848</span>), (<span class="hljs-string">&#x27;144.132.44.65&#x27;</span>, <span class="hljs-number">39426</span>), (<span class="hljs-string">&#x27;125.209.92.221&#x27;</span>, <span class="hljs-number">37986</span>), (<span class="hljs-string">&#x27;112.141.58.167&#x27;</span>, <span class="hljs-number">25914</span>), (<span class="hljs-string">&#x27;112.10.23.147&#x27;</span>, <span class="hljs-number">45241</span>), (<span class="hljs-string">&#x27;104.5.169.41&#x27;</span>, <span class="hljs-number">25308</span>), (<span class="hljs-string">&#x27;92.237.15.59&#x27;</span>, <span class="hljs-number">23965</span>), (<span class="hljs-string">&#x27;88.16.150.152&#x27;</span>, <span class="hljs-number">30098</span>), (<span class="hljs-string">&#x27;82.24.138.43&#x27;</span>, <span class="hljs-number">49740</span>), (<span class="hljs-string">&#x27;82.12.72.167&#x27;</span>, <span class="hljs-number">31238</span>), (<span class="hljs-string">&#x27;62.150.79.73&#x27;</span>, <span class="hljs-number">12959</span>), (<span class="hljs-string">&#x27;46.182.186.120&#x27;</span>, <span class="hljs-number">14830</span>), (<span class="hljs-string">&#x27;41.186.83.139&#x27;</span>, <span class="hljs-number">39809</span>), (<span class="hljs-string">&#x27;41.139.250.38&#x27;</span>, <span class="hljs-number">27948</span>), (<span class="hljs-string">&#x27;41.80.228.149&#x27;</span>, <span class="hljs-number">51315</span>), (<span class="hljs-string">&#x27;37.142.3.43&#x27;</span>, <span class="hljs-number">15902</span>), (<span class="hljs-string">&#x27;197.248.146.186&#x27;</span>, <span class="hljs-number">47562</span>), (<span class="hljs-string">&#x27;196.202.169.186&#x27;</span>, <span class="hljs-number">54056</span>), (<span class="hljs-string">&#x27;195.89.120.114&#x27;</span>, <span class="hljs-number">1887</span>), (<span class="hljs-string">&#x27;190.58.8.8&#x27;</span>, <span class="hljs-number">51356</span>), (<span class="hljs-string">&#x27;178.80.20.88&#x27;</span>, <span class="hljs-number">32719</span>), (<span class="hljs-string">&#x27;154.73.87.85&#x27;</span>, <span class="hljs-number">50759</span>), (<span class="hljs-string">&#x27;128.106.160.157&#x27;</span>, <span class="hljs-number">21075</span>), (<span class="hljs-string">&#x27;120.244.110.7&#x27;</span>, <span class="hljs-number">30692</span>), (<span class="hljs-string">&#x27;109.190.212.96&#x27;</span>, <span class="hljs-number">51413</span>), (<span class="hljs-string">&#x27;103.244.242.125&#x27;</span>, <span class="hljs-number">57601</span>), (<span class="hljs-string">&#x27;103.53.73.37&#x27;</span>, <span class="hljs-number">49569</span>), (<span class="hljs-string">&#x27;92.99.64.137&#x27;</span>, <span class="hljs-number">39323</span>), (<span class="hljs-string">&#x27;86.83.69.149&#x27;</span>, <span class="hljs-number">64478</span>), (<span class="hljs-string">&#x27;86.18.224.70&#x27;</span>, <span class="hljs-number">10087</span>), (<span class="hljs-string">&#x27;82.23.110.144&#x27;</span>, <span class="hljs-number">37364</span>), (<span class="hljs-string">&#x27;79.183.99.166&#x27;</span>, <span class="hljs-number">53756</span>), (<span class="hljs-string">&#x27;79.67.57.240&#x27;</span>, <span class="hljs-number">29678</span>), (<span class="hljs-string">&#x27;43.246.200.117&#x27;</span>, <span class="hljs-number">57837</span>), (<span class="hljs-string">&#x27;43.241.145.68&#x27;</span>, <span class="hljs-number">18244</span>), (<span class="hljs-string">&#x27;41.90.111.158&#x27;</span>, <span class="hljs-number">62329</span>), (<span class="hljs-string">&#x27;24.203.151.158&#x27;</span>, <span class="hljs-number">15655</span>), (<span class="hljs-string">&#x27;196.202.169.186&#x27;</span>, <span class="hljs-number">52047</span>), (<span class="hljs-string">&#x27;165.231.40.14&#x27;</span>, <span class="hljs-number">14529</span>), (<span class="hljs-string">&#x27;162.246.107.146&#x27;</span>, <span class="hljs-number">5250</span>), (<span class="hljs-string">&#x27;113.20.98.46&#x27;</span>, <span class="hljs-number">59247</span>), (<span class="hljs-string">&#x27;105.232.88.134&#x27;</span>, <span class="hljs-number">58042</span>), (<span class="hljs-string">&#x27;103.70.204.194&#x27;</span>, <span class="hljs-number">60803</span>), (<span class="hljs-string">&#x27;96.43.189.107&#x27;</span>, <span class="hljs-number">39391</span>), (<span class="hljs-string">&#x27;82.7.117.162&#x27;</span>, <span class="hljs-number">49036</span>), (<span class="hljs-string">&#x27;66.87.207.99&#x27;</span>, <span class="hljs-number">0</span>), (<span class="hljs-string">&#x27;63.143.236.113&#x27;</span>, <span class="hljs-number">0</span>), (<span class="hljs-string">&#x27;41.210.10.227&#x27;</span>, <span class="hljs-number">59850</span>), (<span class="hljs-string">&#x27;31.45.103.138&#x27;</span>, <span class="hljs-number">58745</span>), (<span class="hljs-string">&#x27;222.184.232.173&#x27;</span>, <span class="hljs-number">43972</span>), (<span class="hljs-string">&#x27;216.151.184.159&#x27;</span>, <span class="hljs-number">53348</span>), (<span class="hljs-string">&#x27;208.103.233.162&#x27;</span>, <span class="hljs-number">56253</span>), (<span class="hljs-string">&#x27;196.209.233.164&#x27;</span>, <span class="hljs-number">34498</span>), (<span class="hljs-string">&#x27;196.207.184.51&#x27;</span>, <span class="hljs-number">58026</span>), (<span class="hljs-string">&#x27;195.147.181.190&#x27;</span>, <span class="hljs-number">9979</span>), (<span class="hljs-string">&#x27;156.222.46.220&#x27;</span>, <span class="hljs-number">53780</span>), (<span class="hljs-string">&#x27;154.70.57.66&#x27;</span>, <span class="hljs-number">42107</span>), (<span class="hljs-string">&#x27;112.205.157.246&#x27;</span>, <span class="hljs-number">57546</span>), (<span class="hljs-string">&#x27;105.184.153.117&#x27;</span>, <span class="hljs-number">61483</span>), (<span class="hljs-string">&#x27;103.123.36.181&#x27;</span>, <span class="hljs-number">45900</span>), (<span class="hljs-string">&#x27;90.219.115.171&#x27;</span>, <span class="hljs-number">39294</span>), (<span class="hljs-string">&#x27;81.100.255.223&#x27;</span>, <span class="hljs-number">59631</span>), (<span class="hljs-string">&#x27;80.39.134.201&#x27;</span>, <span class="hljs-number">14986</span>), (<span class="hljs-string">&#x27;77.68.243.70&#x27;</span>, <span class="hljs-number">35000</span>), (<span class="hljs-string">&#x27;72.229.37.71&#x27;</span>, <span class="hljs-number">33869</span>), (<span class="hljs-string">&#x27;49.146.13.126&#x27;</span>, <span class="hljs-number">59667</span>), (<span class="hljs-string">&#x27;41.79.66.225&#x27;</span>, <span class="hljs-number">22121</span>), (<span class="hljs-string">&#x27;221.203.22.245&#x27;</span>, <span class="hljs-number">13235</span>), (<span class="hljs-string">&#x27;186.150.134.175&#x27;</span>, <span class="hljs-number">47674</span>), (<span class="hljs-string">&#x27;178.166.33.36&#x27;</span>, <span class="hljs-number">32733</span>), (<span class="hljs-string">&#x27;124.107.192.43&#x27;</span>, <span class="hljs-number">35453</span>), (<span class="hljs-string">&#x27;123.245.20.142&#x27;</span>, <span class="hljs-number">16726</span>), (<span class="hljs-string">&#x27;121.54.56.38&#x27;</span>, <span class="hljs-number">19377</span>), (<span class="hljs-string">&#x27;116.90.96.10&#x27;</span>, <span class="hljs-number">22968</span>), (<span class="hljs-string">&#x27;108.4.215.251&#x27;</span>, <span class="hljs-number">33971</span>), (<span class="hljs-string">&#x27;104.207.83.98&#x27;</span>, <span class="hljs-number">10899</span>), (<span class="hljs-string">&#x27;96.23.181.91&#x27;</span>, <span class="hljs-number">60231</span>), (<span class="hljs-string">&#x27;86.137.21.83&#x27;</span>, <span class="hljs-number">37329</span>), (<span class="hljs-string">&#x27;75.65.215.196&#x27;</span>, <span class="hljs-number">41839</span>), (<span class="hljs-string">&#x27;63.245.58.155&#x27;</span>, <span class="hljs-number">33565</span>), (<span class="hljs-string">&#x27;46.209.44.99&#x27;</span>, <span class="hljs-number">1302</span>), (<span class="hljs-string">&#x27;182.186.253.171&#x27;</span>, <span class="hljs-number">14647</span>), (<span class="hljs-string">&#x27;178.157.249.62&#x27;</span>, <span class="hljs-number">26603</span>), (<span class="hljs-string">&#x27;130.105.164.123&#x27;</span>, <span class="hljs-number">18359</span>), (<span class="hljs-string">&#x27;105.232.86.49&#x27;</span>, <span class="hljs-number">37295</span>), (<span class="hljs-string">&#x27;103.252.202.150&#x27;</span>, <span class="hljs-number">44822</span>), (<span class="hljs-string">&#x27;103.4.248.138&#x27;</span>, <span class="hljs-number">55841</span>), (<span class="hljs-string">&#x27;95.94.157.175&#x27;</span>, <span class="hljs-number">53805</span>), (<span class="hljs-string">&#x27;94.175.148.12&#x27;</span>, <span class="hljs-number">48143</span>), (<span class="hljs-string">&#x27;94.76.15.44&#x27;</span>, <span class="hljs-number">49920</span>), (<span class="hljs-string">&#x27;89.237.98.87&#x27;</span>, <span class="hljs-number">62852</span>), (<span class="hljs-string">&#x27;87.70.101.199&#x27;</span>, <span class="hljs-number">44609</span>), (<span class="hljs-string">&#x27;86.25.124.158&#x27;</span>, <span class="hljs-number">45263</span>), (<span class="hljs-string">&#x27;72.230.218.136&#x27;</span>, <span class="hljs-number">15580</span>), (<span class="hljs-string">&#x27;70.65.227.21&#x27;</span>, <span class="hljs-number">28936</span>), (<span class="hljs-string">&#x27;41.139.243.58&#x27;</span>, <span class="hljs-number">19483</span>), (<span class="hljs-string">&#x27;41.60.233.245&#x27;</span>, <span class="hljs-number">43611</span>), (<span class="hljs-string">&#x27;31.215.14.8&#x27;</span>, <span class="hljs-number">23218</span>), (<span class="hljs-string">&#x27;1.9.135.44&#x27;</span>, <span class="hljs-number">21209</span>), (<span class="hljs-string">&#x27;203.212.155.83&#x27;</span>, <span class="hljs-number">30754</span>), (<span class="hljs-string">&#x27;202.142.91.102&#x27;</span>, <span class="hljs-number">24654</span>), (<span class="hljs-string">&#x27;197.237.129.150&#x27;</span>, <span class="hljs-number">25308</span>), (<span class="hljs-string">&#x27;197.232.26.118&#x27;</span>, <span class="hljs-number">8999</span>), (<span class="hljs-string">&#x27;197.232.19.110&#x27;</span>, <span class="hljs-number">56174</span>), (<span class="hljs-string">&#x27;196.249.103.196&#x27;</span>, <span class="hljs-number">14869</span>), (<span class="hljs-string">&#x27;187.112.124.166&#x27;</span>, <span class="hljs-number">8999</span>), (<span class="hljs-string">&#x27;183.87.169.155&#x27;</span>, <span class="hljs-number">16437</span>), (<span class="hljs-string">&#x27;117.194.220.81&#x27;</span>, <span class="hljs-number">25839</span>)]<br><br>Process finished with <span class="hljs-keyword">exit</span> code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>bitTorrent</tag>
        <tag>protocol</tag>
        <tag>p2p</tag>
      </tags>
  </entry>
  <entry>
    <title>BitTorrent协议（四）之bitfield消息</title>
    <url>/2019/01/21/2019-1-23-bt-4/</url>
    <content><![CDATA[<h2 id="bitfield消息"><a href="#bitfield消息" class="headerlink" title="bitfield消息"></a>bitfield消息</h2><p><a href="http://www.bittorrent.org/beps/bep_0003.html">BEP3</a>的peer message章节说明了几种消息类型。
其中bitfield消息理解起来是容易的，但是实际过程中却略有不同。</p>
<span id="more"></span>

<blockquote>
<p>‘bitfield’ is only ever sent as the first message. Its payload is a bitfield with each index that downloader has sent set to one and the rest set to zero. Downloaders which don’t have anything yet may skip the ‘bitfield’ message. The first byte of the bitfield corresponds to indices 0 - 7 from high bit to low bit, respectively. The next one 8-15, etc. Spare bits at the end are set to zero.</p>
</blockquote>
<p>这段话的意思很简单，举例说明一下，如果一个文件有10个分片，那么如果没有下载任何数据，那么bitfield的值应该是（为了便于阅读每个字节的二进制码 以一个空格键隔开）</p>
<pre><code class="hljs">0b0000 0000 0000
</code></pre>
<p>如果下载了piece 0， 则值应该是</p>
<pre><code class="hljs">0b1000 0000 0000 
</code></pre>
<p>如果全部下载完成，则应该是</p>
<pre><code class="hljs">0b1111 1111 1100
</code></pre>
<p>一共是10个1，表示10个piece。</p>
<p>但是实际上呢，对于一个下载完成的文件，获取到的bitfield值是<code>0b111111111100</code>么？</p>
<p>我们可以自己制作一个种子来验证一下。 </p>
<h2 id="本地验证"><a href="#本地验证" class="headerlink" title="本地验证"></a>本地验证</h2><p>用uTorrent软件选择本地的一个文件制作一个种子文件。如下图所示</p>
<p><img src="/images/bt-4-pic-1.png" alt="file-bt"></p>
<p>该文件有110个片。</p>
<p>我们读取代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> absolute_import<br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> division<br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><br>__author__ = <span class="hljs-string">&#x27;ym&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Date        : &#x27;2019/1/22&#x27;</span><br><span class="hljs-string">    Description :</span><br><span class="hljs-string">    </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> ym.bt.peer_protocol <span class="hljs-keyword">import</span> pack_handshake, unpack_handshake, sendall, recv, pack_extend<br><span class="hljs-keyword">from</span> ym.bt.parse_torrent <span class="hljs-keyword">import</span> BDecode<br><span class="hljs-keyword">from</span> ym.bt.udp_announce <span class="hljs-keyword">import</span> ip_me<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">from</span> bitstring <span class="hljs-keyword">import</span> BitArray, Bits<br><br>log = logging.getLogger()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>():<br>    <span class="hljs-keyword">try</span>:<br>        info_hash = <span class="hljs-string">&#x27;c99c3b7a5ba31a8966e6c9a40bc4f83887a107e5&#x27;</span><br>        ip, port = ip_me(), <span class="hljs-number">40959</span><br>        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>        sock.settimeout(<span class="hljs-number">1</span>)<br>        sock.connect((ip, port))<br><br>        handshake = pack_handshake(info_hash)<br>        rt = sendall(sock, handshake)<br>        <span class="hljs-keyword">if</span> rt <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sent=&#123;&#125;, data=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(rt, handshake))<br>        data = recv(sock, <span class="hljs-number">68</span>)<br><br>        tup = unpack_handshake(data)<br>        <span class="hljs-keyword">if</span> tup <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-built_in">print</span>(tup)<br><br>        <span class="hljs-comment"># interested</span><br>        data = struct.pack(<span class="hljs-string">&quot;&gt;i B&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>        rt = sendall(sock, data)<br>        <span class="hljs-keyword">if</span> rt <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        bitfield = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            data = recv(sock, <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">if</span> data <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span><br>            num, = struct.unpack(<span class="hljs-string">&quot;&gt;i&quot;</span>, data)<br>            tmp = recv(sock, <span class="hljs-number">1</span>)<br><br>            <span class="hljs-keyword">if</span> tmp <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-built_in">id</span>, = struct.unpack(<span class="hljs-string">&quot;&gt;B&quot;</span>, tmp)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;id=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>))<br>            tmp = recv(sock, <span class="hljs-built_in">int</span>(num) - <span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;recv=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(tmp))<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">id</span> == <span class="hljs-number">5</span>:<br>                <span class="hljs-comment"># bitfield</span><br>                bitfield = BitArray(tmp)<br>                <span class="hljs-built_in">print</span>(bitfield.<span class="hljs-built_in">bin</span>)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">pass</span><br><br><br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        log.exception(e)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    download()<br><br><br></code></pre></td></tr></table></figure>

<p>我们看到日志如下</p>
<pre><code class="hljs">/usr/local/bin/python3.7 /Users/ym/charm/pytest/ym/bt/bt_download.py
sent=ok, data=b&#39;\x13BitTorrent protocol\x00\x00\x00\x00\x00\x10\x00\x01\xc9\x9c;z[\xa3\x1a\x89f\xe6\xc9\xa4\x0b\xc4\xf88\x87\xa1\x07\xe5ym111111111111111111&#39;
Handshake(fixed_num=19, bt_head=b&#39;BitTorrent protocol&#39;, reserved=b&#39;\x00\x00\x00\x00\x00\x10\x00\x05&#39;, info_hash=b&#39;\xc9\x9c;z[\xa3\x1a\x89f\xe6\xc9\xa4\x0b\xc4\xf88\x87\xa1\x07\xe5&#39;, peer_id=b&#39;-UM1870-\x14\xab\x9c\xa8$G\x8euX\x91\xad\x9e&#39;)
id=20
recv=b&#39;\x00d1:ei0e4:ipv616:\xfe\x80\x00\x00\x00\x00\x00\x00\x04:^:D[\x0c\x9212:complete_agoi1e1:md11:upload_onlyi3e12:ut_holepunchi4e11:ut_metadatai2e6:ut_pexi1e12:ut_recommendi5e10:ut_commenti6ee13:metadata_sizei2270e1:pi40959e4:reqqi255e1:v19:\xc2\xb5Torrent Mac 1.8.76:yourip4:\xc0\xa8+Re&#39;
id=5
recv=b&#39;\xff\xff\xffg~\xaf\xbf=\x7f\xff\xeb&amp;\xdd\x98&#39;
1111111111111111111111110110011101111110101011111011111100111101011111111111111111101011001001101101110110011000
</code></pre>
<p>这是怎么回事，为什么中间会有这么多0呢，不是已经下载完成了么？</p>
<pre><code class="hljs">111111111111111111111111011001110111111010101111101111110011110...
</code></pre>
<p>应该是110个1才对。而且如果再运行几遍会发现每次有不同的index的片是0。</p>
<h2 id="have消息"><a href="#have消息" class="headerlink" title="have消息"></a>have消息</h2><p>原来这是uTorrent软件实现的一个策略，即使已经下载完成，也不会返回110个1的bitfield。而是用<code>have消息</code>来
补全，也就是id为4的peer消息。have消息的值是一个piece的index值，表示该piece下载完成。</p>
<p>因此，我们需要根据bitfield消息和have消息来看是否下载完成。代码修改一下，每接收到一个have消息就把相应的index
置为1。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ym.bt.peer_protocol <span class="hljs-keyword">import</span> pack_handshake, unpack_handshake, sendall, recv, pack_extend<br><span class="hljs-keyword">from</span> ym.bt.parse_torrent <span class="hljs-keyword">import</span> BDecode<br><span class="hljs-keyword">from</span> ym.bt.udp_announce <span class="hljs-keyword">import</span> ip_me<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">from</span> bitstring <span class="hljs-keyword">import</span> BitArray, Bits<br><br>log = logging.getLogger()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>():<br>    <span class="hljs-keyword">try</span>:<br>        info_hash = <span class="hljs-string">&#x27;c99c3b7a5ba31a8966e6c9a40bc4f83887a107e5&#x27;</span><br>        ip, port = ip_me(), <span class="hljs-number">40959</span><br>        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>        sock.settimeout(<span class="hljs-number">1</span>)<br>        sock.connect((ip, port))<br><br>        handshake = pack_handshake(info_hash)<br>        rt = sendall(sock, handshake)<br>        <span class="hljs-keyword">if</span> rt <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sent=&#123;&#125;, data=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(rt, handshake))<br>        data = recv(sock, <span class="hljs-number">68</span>)<br><br>        tup = unpack_handshake(data)<br>        <span class="hljs-keyword">if</span> tup <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-built_in">print</span>(tup)<br><br>        <span class="hljs-comment"># interested</span><br>        data = struct.pack(<span class="hljs-string">&quot;&gt;i B&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>        rt = sendall(sock, data)<br>        <span class="hljs-keyword">if</span> rt <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        bitfield = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            data = recv(sock, <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">if</span> data <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span><br>            num, = struct.unpack(<span class="hljs-string">&quot;&gt;i&quot;</span>, data)<br>            tmp = recv(sock, <span class="hljs-number">1</span>)<br><br>            <span class="hljs-keyword">if</span> tmp <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-built_in">id</span>, = struct.unpack(<span class="hljs-string">&quot;&gt;B&quot;</span>, tmp)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;id=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>))<br>            tmp = recv(sock, <span class="hljs-built_in">int</span>(num) - <span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;recv=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(tmp))<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">id</span> == <span class="hljs-number">5</span>:<br>                <span class="hljs-comment"># bitfield</span><br>                bitfield = BitArray(tmp)<br>                <span class="hljs-built_in">print</span>(bitfield.<span class="hljs-built_in">bin</span>)<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">id</span> == <span class="hljs-number">4</span>:<br>                <span class="hljs-comment"># have</span><br>                index, = struct.unpack(<span class="hljs-string">&quot;&gt;i&quot;</span>, tmp)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;index=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(index))<br>                <span class="hljs-keyword">if</span> bitfield.<span class="hljs-built_in">bin</span>[index] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>                    bitfield.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;1&#x27;</span>, index)<br>                    <span class="hljs-built_in">print</span>(bitfield.<span class="hljs-built_in">bin</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">pass</span><br><br><br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        log.exception(e)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    download()<br></code></pre></td></tr></table></figure>

<p>我们再看一下日志</p>
<pre><code class="hljs">/usr/local/bin/python3.7 /Users/ym/charm/pytest/ym/bt/bt_download.py
sent=ok, data=b&#39;\x13BitTorrent protocol\x00\x00\x00\x00\x00\x10\x00\x01\xc9\x9c;z[\xa3\x1a\x89f\xe6\xc9\xa4\x0b\xc4\xf88\x87\xa1\x07\xe5ym111111111111111111&#39;
Handshake(fixed_num=19, bt_head=b&#39;BitTorrent protocol&#39;, reserved=b&#39;\x00\x00\x00\x00\x00\x10\x00\x05&#39;, info_hash=b&#39;\xc9\x9c;z[\xa3\x1a\x89f\xe6\xc9\xa4\x0b\xc4\xf88\x87\xa1\x07\xe5&#39;, peer_id=b&#39;-UM1870-\x14\xabY\x08\r\x82=\xd1J^\x930&#39;)
id=20
recv=b&#39;\x00d1:ei0e4:ipv616:\xfe\x80\x00\x00\x00\x00\x00\x00\x04:^:D[\x0c\x9212:complete_agoi1e1:md11:upload_onlyi3e12:ut_holepunchi4e11:ut_metadatai2e6:ut_pexi1e12:ut_recommendi5e10:ut_commenti6ee13:metadata_sizei2270e1:pi40959e4:reqqi255e1:v19:\xc2\xb5Torrent Mac 1.8.76:yourip4:\xc0\xa8+Re&#39;
id=5
recv=b&#39;\xfb\xdf\xbf\xee\xdf\xdf\x9d\xef\xb9\xfa\xfbv^\xf8&#39;
1111101111011111101111111110111011011111110111111001110111101111101110011111101011111011011101100101111011111000
id=4
recv=b&#39;\x00\x00\x002&#39;
index=50
1111101111011111101111111110111011011111110111111011110111101111101110011111101011111011011101100101111011111000

...
...
...

id=4
recv=b&#39;\x00\x00\x00b&#39;
index=98
1111111111011111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111100
id=4
recv=b&#39;\x00\x00\x00X&#39;
index=88
1111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100
id=4
recv=b&#39;\x00\x00\x00\n&#39;
index=10
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100
already recv:b&#39;&#39;
timed out
Traceback (most recent call last):
  File &quot;/Users/ym/charm/pytest/ym/bt/peer_protocol.py&quot;, line 40, in recv
    tmp = sock.recv(n - len(data))
socket.timeout: timed out

Process finished with exit code 0
</code></pre>
<p>可以看到，确实是110个1。</p>
]]></content>
      <tags>
        <tag>bitTorrent</tag>
        <tag>protocol</tag>
        <tag>p2p</tag>
      </tags>
  </entry>
  <entry>
    <title>BitTorrent协议（五）之下载文件</title>
    <url>/2019/01/25/2019-1-25-bt-5/</url>
    <content><![CDATA[<h2 id="单节点下载小文件"><a href="#单节点下载小文件" class="headerlink" title="单节点下载小文件"></a>单节点下载小文件</h2><p>从多个peer进行下载的算法显然是复杂的，更不用说下载一个很大的文件。这里只是简单验证一下，
从单个peer下载文件。</p>
<span id="more"></span>

<p>还是利用<code>uTorrent</code>软件来进行验证。</p>
<p>可以用之前介绍的方法来下载metadata。 获取到的info信息如下，</p>
<pre><code class="hljs">&#123;&#39;length&#39;: 1799542, &#39;name&#39;: &#39;show.gif&#39;, &#39;piece length&#39;: 16384, &#39;pieces&#39;: [&#39;32bd6b1b19914363f3c4d6ac4aca3f8acc1fc9be&#39;, &#39;189f81db5c5c12f21483fb24ee709ff6c08a0517&#39;, &#39;a3133d83aabfa6793418d3cb325012b0d4bfae46&#39;, &#39;0e3d60244fabc21b723b8cd88f5f987d87743e89&#39;, &#39;132157b55b0c5b7ee9a20243846eb3f1c5ac80dc&#39;, &#39;92c37804b00d5430c67747ec5fee0868445ecd69&#39;, &#39;5f1bb90f1ae670f7cbc3daa49d219d7d1b45acbf&#39;, &#39;0fb09e567a1370f7903f55dff250503482de8b3e&#39;, &#39;6dd7073806b41b4ed27d45f8dbccc0a0c10be50d&#39;, &#39;1fcaa683cb850fce41395576c798a61e6cf905b5&#39;, &#39;b61629bf5a6bf0e40e67e1cbdf91bb739a02d518&#39;, &#39;f63a3fa985c3debb543bbcf75adeda9ab67ac9c9&#39;, &#39;e90e01fb4ceb645ee449ae0956cfb9308beeccb5&#39;, &#39;cbfa039f843f7243fb2074e465741eda474e3977&#39;, &#39;943840bcfff18968113222d932298f813e5cc179&#39;, &#39;c209625e0ddf0facb53b30f4480537deadae6793&#39;, &#39;f71e53fb153ad59e73eeb527bb72156e747f9275&#39;, &#39;c5beef4d546249e731f67307904cfc78c74f1bca&#39;, &#39;565f7f1f15a0eb25c53ca93dfb064806788b48ec&#39;, &#39;8fef5d00ba48a62546dd2a17e8710a0cc8d2d1f9&#39;, &#39;f668e1c8053cc48660106013fb2b6f985e96ae2f&#39;, &#39;c6f2b38f8ec06b52988b2a440bdc1e113db1bf56&#39;, &#39;d9b628b10d349deb67e318969697311c8108c111&#39;, &#39;b822aecd7d71a4182e47c7c33ed507b7ba98a9ff&#39;, &#39;8b43bb5a107942f21af0dfe93551c24ec7ed01e7&#39;, &#39;fbed560ff746b870aa9a341fdeeb3b2a84437b1d&#39;, &#39;34026cdef61fe05668cb1ae45f8ca46a47539993&#39;, &#39;1d68c176d5a8c019840d9013652c03d7118335c1&#39;, &#39;5476b766cab277119970254a595fd69029553d09&#39;, &#39;f01dcc57eaf647ff9a7884e0c2ce6ce616a50e7d&#39;, &#39;54972dab56f5e7df31dce81d44354a39c2952da7&#39;, &#39;858184b28005ea4f11cae7b280cf964bd63c5036&#39;, &#39;cdc80e8a3fbd0d258dd2557aea6fdf0b778a9740&#39;, &#39;126862f9026fae3348f19d7d285658713f545d52&#39;, &#39;2cbd85f935a8a14de068e8284a449f3ab3345db9&#39;, &#39;f37dadec918d6a4295fb3ced2e5e3c06680dc138&#39;, &#39;b69389c850cf159cbbc50b67cce7304e48cd2fc8&#39;, &#39;520922981a1f4752742c6b680956ea62ce98f008&#39;, &#39;8e28d442dd20d82a88f9a17983fa2f7e704c958d&#39;, &#39;1e3363ae14e1c0e03060a99a4f18163b1ffb07c5&#39;, &#39;f3237eeb35b900c3b6c7aa7e3ad33096d1717cb1&#39;, &#39;f287d5e00c33e65fc5c73fd0e152dfcc4c75b643&#39;, &#39;8499d07f2fdaeebaab73c008725de0f8c7f3156f&#39;, &#39;8e3936cf42625dfc4dd71a5128aedd051581a933&#39;, &#39;fe9db13341c3f7378c0cc0fe69895bd1a1635546&#39;, &#39;86a383614a32021187439e662a0d9981d3266dac&#39;, &#39;e8fe2fbd7bc75f212188f30129ff2b5fbc326fc8&#39;, &#39;c535c7d03b83d0cee8b56c380d839de86450259d&#39;, &#39;09317f2958a7ce16af570417dc2f4ff56b74739a&#39;, &#39;597198e18e4fd6df0598e55ad6ac41ddd9fbfe4c&#39;, &#39;9289b6999a360314dc5c4b5a09aec9b20aec1f13&#39;, &#39;6611f3a373aeecfd23bbce43f3993e8b770ba550&#39;, &#39;81fb04659a20bb00edba72c456f8ef7809dc87f3&#39;, &#39;59496e456e24d27871fcb8127934df33925888af&#39;, &#39;308db6c4eff529d1caa2e436cb53ad5f0ff3ed19&#39;, &#39;f0bb16a3f35928b6c3fcbd45227e732211e422bb&#39;, &#39;e0bd3d3533f9ef6051bcfe4617b45920fd42a11b&#39;, &#39;79909209aa840c77043a2d9b2dddad042924b57e&#39;, &#39;899e90841a27a0c2cf691e3319ddfd6b139dd28f&#39;, &#39;ff46286f5f16cfbc9d2d5d4d9574d842adf88d12&#39;, &#39;5968efcadb0fa8b62702918e2bc6d109169b1688&#39;, &#39;2a1bb615d4cb43d08f1703b6dd55b6f036843b7e&#39;, &#39;bc04aacea03fa3f3457a182c64c2893eed7abde3&#39;, &#39;ba462044856ba2355ab59f0f92a6261908495508&#39;, &#39;58c5593a3f627c45fe995a5ad7c3abbdcd4558cb&#39;, &#39;4d44dfa3e97ce4f5ef510f11edc8e7fdeadc0127&#39;, &#39;76156e683a8d78dc84c9dc77b8b3295bf65ade85&#39;, &#39;0fedc3f5cc217b1195361eb24348e3da869ee9c8&#39;, &#39;d135bb807f863e4341ec5dfc3ce089e3ccb90423&#39;, &#39;9079bbc75010af82d5f820087a3d0bca68ba7335&#39;, &#39;f26d6acd59053b7e5c058e7e663a5aafdf08cbcd&#39;, &#39;3a528b4e824b7e4d94eb1771d25aab1333ee4f6c&#39;, &#39;a378b13c679091b4f6df535e274b489a1921487a&#39;, &#39;486a7b84e2d2826faf33fede673557abf13d4858&#39;, &#39;a707ce9e469a5f09bf9b20a51d36510971a8c902&#39;, &#39;fbf2945c8eb174e81d354ac0a217707e27d80df1&#39;, &#39;805fbf2e06bb2780c853a5d7cb760a09bbfede41&#39;, &#39;8077a90826ce293c28af8ec03bb9fe2bc968a87e&#39;, &#39;db5b68bc3ad6e1c7d9cadc0ef5336dac91ea7802&#39;, &#39;17db99964e9e6170c12a903fddf74614f765ac63&#39;, &#39;36a25d99fd2026aee1e93dffdab081325f6d82be&#39;, &#39;4941159f05a9c1b5316aaebe483b68ed2b3d9bf6&#39;, &#39;2783da31f7043a29011507c817c4469b03a7047f&#39;, &#39;1beaf2d802cc747acf82633d6d35498e1ef1c0f2&#39;, &#39;d9484d93128be7f62537f24609080dbf48fc15a1&#39;, &#39;a3d4b391af6a4787cc2581894a9ba952a04c06af&#39;, &#39;f09c619843ee7bf6898fdcce47dd89c329f113b3&#39;, &#39;9451d16f558cfeb8a65e92a74bcd627764d3b395&#39;, &#39;2d3ac710b84c7465044994de9c07437e629ff9aa&#39;, &#39;a7d6d56ef412462c1f0eef2a403bf2cba615710a&#39;, &#39;2b0804a61db331444c40c6d9817476c25438c702&#39;, &#39;2af9e4587ee984bfa68c2e832b61d060df812d9c&#39;, &#39;ac75705e3f02f67e319833309af23db3aeb6e9b1&#39;, &#39;002a18cb7b1836c01842c80107bce23f8899d046&#39;, &#39;2d532adec4d0de4582463c8028d7b7b1797e2ad6&#39;, &#39;4818335666c0fb4abf758fed7770f924766c08b0&#39;, &#39;753a675a197b8b7d3d8e579172aef2f5b5987ba5&#39;, &#39;69d335d9126f56b229304326e1bba38f48667b77&#39;, &#39;e57eb75086c332598025be0c424124b48f944790&#39;, &#39;7227355ee48815247ab824d580f0d8be6722ccc8&#39;, &#39;25872f29012b912e415165e3e04cb846cbfd5373&#39;, &#39;2c9aea7e3dd67d8f28551fd7c3a1ea31bbe1fa5d&#39;, &#39;64e09ec0c09b7b4c8743e1ee7899d494d9c19a99&#39;, &#39;252b538782968f65284bf2f5cfe6a804cc877567&#39;, &#39;f9e9a038358f557b9780efd2899d9f9557912821&#39;, &#39;27a6c6a7bcb3f7d53c04427f9f5bdd6c20eb78bb&#39;, &#39;79e21154bb06d1a91da161cc75e4f75dd7df3d93&#39;, &#39;10a8ea942ea2ce344c8b052d6a98f76825a0e13e&#39;, &#39;cce77357aaad177352a19d4f91ec0a35058e2e33&#39;, &#39;48f41629e57f84ae7637b11b396c78d318f7e84d&#39;]&#125;
</code></pre>
<p>这个文件的大小为1799542字节，每个片的长度是16384字节，一共110片。</p>
<p>通过简单计算可以知道，最后一片的长度只有13686。所以发request的消息的时候，要注意。</p>
<p>因为只有一个peer，简单的循环就够了。</p>
<h2 id="实现的代码"><a href="#实现的代码" class="headerlink" title="实现的代码"></a>实现的代码</h2><p>代码中充斥了全局变量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><br>__author__ = <span class="hljs-string">&#x27;ym&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Date        : &#x27;2019/1/22&#x27;</span><br><span class="hljs-string">    Description :</span><br><span class="hljs-string">    </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> ym.bt.peer_protocol <span class="hljs-keyword">import</span> pack_handshake, unpack_handshake, sendall, recv, pack_extend, sha1<br><span class="hljs-keyword">from</span> ym.bt.parse_torrent <span class="hljs-keyword">import</span> BDecode<br><span class="hljs-keyword">from</span> ym.bt.udp_announce <span class="hljs-keyword">import</span> ip_me<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">from</span> bitstring <span class="hljs-keyword">import</span> BitArray<br><br>log = logging.getLogger()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">bit_field, file_data</span>):<br>    <span class="hljs-keyword">try</span>:<br>        info_hash = <span class="hljs-string">&#x27;c99c3b7a5ba31a8966e6c9a40bc4f83887a107e5&#x27;</span><br>        ip, port = ip_me(), <span class="hljs-number">40959</span><br>        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>        sock.settimeout(<span class="hljs-number">1</span>)<br>        sock.connect((ip, port))<br><br>        handshake = pack_handshake(info_hash)<br>        rt = sendall(sock, handshake)<br>        <span class="hljs-keyword">if</span> rt <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;end&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sent=&#123;&#125;, data=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(rt, handshake))<br>        data = recv(sock, <span class="hljs-number">68</span>)<br><br>        tup = unpack_handshake(data)<br>        <span class="hljs-keyword">if</span> tup <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;end&quot;</span>)<br>        <span class="hljs-built_in">print</span>(tup)<br><br>        UT_METADATA_ID = <span class="hljs-number">1</span><br>        dic = &#123;<span class="hljs-string">&#x27;m&#x27;</span>: &#123;<span class="hljs-string">&#x27;ut_metadata&#x27;</span>: UT_METADATA_ID&#125;&#125;<br>        ext_handshake = pack_extend(dic, <span class="hljs-built_in">id</span>=<span class="hljs-number">20</span>, ext_id=<span class="hljs-number">0</span>)  <span class="hljs-comment"># 扩展协议的握手消息</span><br>        sock.sendall(ext_handshake)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sent|ext_handshake=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(ext_handshake))<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            data = recv(sock, <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">if</span> data <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;end&quot;</span>)<br>            num, = struct.unpack(<span class="hljs-string">&quot;&gt;i&quot;</span>, data)<br><br>            <span class="hljs-keyword">if</span> num == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">continue</span><br><br>            tmp = recv(sock, <span class="hljs-number">1</span>)<br><br>            <span class="hljs-keyword">if</span> tmp <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;end&quot;</span>)<br>            <span class="hljs-built_in">id</span>, = struct.unpack(<span class="hljs-string">&quot;&gt;B&quot;</span>, tmp)<br>            <span class="hljs-comment"># print(&quot;id=&#123;&#125;&quot;.format(id))</span><br>            tmp = recv(sock, <span class="hljs-built_in">int</span>(num) - <span class="hljs-number">1</span>)<br>            <span class="hljs-comment"># print(&quot;recv=&#123;&#125;&quot;.format(tmp))</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">id</span> == <span class="hljs-number">5</span>:<br>                <span class="hljs-comment"># bitfield</span><br>                <span class="hljs-keyword">if</span> bit_field <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                    bit_field = BitArray(tmp)<br>                    file_data = [<span class="hljs-literal">None</span>] * <span class="hljs-number">110</span>  <span class="hljs-comment"># pieces num</span><br>                <span class="hljs-built_in">print</span>(bit_field.<span class="hljs-built_in">bin</span>)<br><br>                <span class="hljs-comment"># interested</span><br>                send_interested(sock)<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">id</span> == <span class="hljs-number">4</span>:<br>                <span class="hljs-comment"># have</span><br>                index, = struct.unpack(<span class="hljs-string">&quot;&gt;i&quot;</span>, tmp)<br>                <span class="hljs-comment"># print(&quot;index=&#123;&#125;&quot;.format(index))</span><br>                <span class="hljs-keyword">if</span> bit_field.<span class="hljs-built_in">bin</span>[index] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>                    bit_field.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;1&#x27;</span>, index)<br>                    <span class="hljs-comment"># print(bitfield.bin)</span><br><br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">id</span> == <span class="hljs-number">1</span>:<br>                <span class="hljs-comment"># unchoke</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;unchoke&quot;</span>)<br>                send_request(bit_field, file_data, sock)<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">id</span> == <span class="hljs-number">7</span>:<br>                <span class="hljs-comment"># piece</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;piece&quot;</span>)<br>                index, begin = struct.unpack(<span class="hljs-string">&quot;&gt;i i&quot;</span>, tmp[<span class="hljs-number">0</span>:<span class="hljs-number">8</span>])<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;index=&#123;&#125;, begin=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(index, begin))<br>                <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(tmp[<span class="hljs-number">8</span>:]))<br>                file_data[index] = tmp[<span class="hljs-number">8</span>:]<br>                <span class="hljs-keyword">if</span> index == <span class="hljs-number">109</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;completed.&quot;</span>)<br>                    <span class="hljs-keyword">return</span> bit_field, file_data<br><br>                send_request(bit_field, file_data, sock)<br><br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">id</span> == <span class="hljs-number">20</span>:<br>                <span class="hljs-comment">#</span><br>                ext_id, = struct.unpack(<span class="hljs-string">&quot;&gt;B&quot;</span>, tmp[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>])<br>                <span class="hljs-keyword">if</span> ext_id == <span class="hljs-number">0</span>:<br>                    <span class="hljs-comment"># 扩展握手消息</span><br>                    dic, i, n = BDecode(tmp[<span class="hljs-number">1</span>:]).parse()<br>                    <span class="hljs-built_in">print</span>(dic)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">pass</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        log.exception(e)<br><br>    <span class="hljs-keyword">return</span> (bit_field, file_data)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_interested</span>(<span class="hljs-params">sock</span>):<br>    data = struct.pack(<span class="hljs-string">&quot;&gt;i B&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>    rt = sendall(sock, data)<br>    <span class="hljs-keyword">if</span> rt <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;end&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;interested=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(data))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_request</span>(<span class="hljs-params">bit_field, file_data, sock</span>):<br>    index = find_one(bit_field.<span class="hljs-built_in">bin</span>, file_data)<br>    <span class="hljs-keyword">if</span> index <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;end&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;request piece=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(index))<br>    data = pack_request(index)<br>    <span class="hljs-keyword">if</span> index == <span class="hljs-number">109</span>:<br>        data = pack_request(index, begin=<span class="hljs-number">0</span>, length=<span class="hljs-number">13686</span>)<br>    rt = sendall(sock, data)<br>    <span class="hljs-keyword">if</span> rt <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;end&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sent=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(data))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_one</span>(<span class="hljs-params">bit_array: <span class="hljs-built_in">str</span>, file_data: <span class="hljs-built_in">list</span></span>):<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(file_data):<br>        <span class="hljs-keyword">if</span> file_data[i] <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> bit_array[i] == <span class="hljs-string">&#x27;1&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br>        i += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(file_data):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> i<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pack_request</span>(<span class="hljs-params">index, begin=<span class="hljs-number">0</span>, length=<span class="hljs-number">16384</span></span>):<br>    <span class="hljs-keyword">return</span> struct.pack(<span class="hljs-string">&quot;&gt;i B i i i&quot;</span>, <span class="hljs-number">13</span>, <span class="hljs-number">6</span>, index, begin, length)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">not_finish</span>(<span class="hljs-params">file_data</span>):<br>    <span class="hljs-keyword">if</span> file_data <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> file_data:<br>        <span class="hljs-keyword">if</span> item <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    bit_field = <span class="hljs-literal">None</span><br>    file_data = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">while</span> not_finish(file_data):<br>        bit_field, file_data = download(bit_field, file_data)<br><br>    <span class="hljs-built_in">print</span>(bit_field)<br>    output = <span class="hljs-string">&#x27;/Users/ym/tmp/copy.gif&#x27;</span><br>    expected = &#123;<span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">1799542</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;show.gif&#x27;</span>, <span class="hljs-string">&#x27;piece length&#x27;</span>: <span class="hljs-number">16384</span>,<br>                <span class="hljs-string">&#x27;pieces&#x27;</span>: [<span class="hljs-string">&#x27;32bd6b1b19914363f3c4d6ac4aca3f8acc1fc9be&#x27;</span>, <span class="hljs-string">&#x27;189f81db5c5c12f21483fb24ee709ff6c08a0517&#x27;</span>,<br>                           <span class="hljs-string">&#x27;a3133d83aabfa6793418d3cb325012b0d4bfae46&#x27;</span>, <span class="hljs-string">&#x27;0e3d60244fabc21b723b8cd88f5f987d87743e89&#x27;</span>,<br>                           <span class="hljs-string">&#x27;132157b55b0c5b7ee9a20243846eb3f1c5ac80dc&#x27;</span>, <span class="hljs-string">&#x27;92c37804b00d5430c67747ec5fee0868445ecd69&#x27;</span>,<br>                           <span class="hljs-string">&#x27;5f1bb90f1ae670f7cbc3daa49d219d7d1b45acbf&#x27;</span>, <span class="hljs-string">&#x27;0fb09e567a1370f7903f55dff250503482de8b3e&#x27;</span>,<br>                           <span class="hljs-string">&#x27;6dd7073806b41b4ed27d45f8dbccc0a0c10be50d&#x27;</span>, <span class="hljs-string">&#x27;1fcaa683cb850fce41395576c798a61e6cf905b5&#x27;</span>,<br>                           <span class="hljs-string">&#x27;b61629bf5a6bf0e40e67e1cbdf91bb739a02d518&#x27;</span>, <span class="hljs-string">&#x27;f63a3fa985c3debb543bbcf75adeda9ab67ac9c9&#x27;</span>,<br>                           <span class="hljs-string">&#x27;e90e01fb4ceb645ee449ae0956cfb9308beeccb5&#x27;</span>, <span class="hljs-string">&#x27;cbfa039f843f7243fb2074e465741eda474e3977&#x27;</span>,<br>                           <span class="hljs-string">&#x27;943840bcfff18968113222d932298f813e5cc179&#x27;</span>, <span class="hljs-string">&#x27;c209625e0ddf0facb53b30f4480537deadae6793&#x27;</span>,<br>                           <span class="hljs-string">&#x27;f71e53fb153ad59e73eeb527bb72156e747f9275&#x27;</span>, <span class="hljs-string">&#x27;c5beef4d546249e731f67307904cfc78c74f1bca&#x27;</span>,<br>                           <span class="hljs-string">&#x27;565f7f1f15a0eb25c53ca93dfb064806788b48ec&#x27;</span>, <span class="hljs-string">&#x27;8fef5d00ba48a62546dd2a17e8710a0cc8d2d1f9&#x27;</span>,<br>                           <span class="hljs-string">&#x27;f668e1c8053cc48660106013fb2b6f985e96ae2f&#x27;</span>, <span class="hljs-string">&#x27;c6f2b38f8ec06b52988b2a440bdc1e113db1bf56&#x27;</span>,<br>                           <span class="hljs-string">&#x27;d9b628b10d349deb67e318969697311c8108c111&#x27;</span>, <span class="hljs-string">&#x27;b822aecd7d71a4182e47c7c33ed507b7ba98a9ff&#x27;</span>,<br>                           <span class="hljs-string">&#x27;8b43bb5a107942f21af0dfe93551c24ec7ed01e7&#x27;</span>, <span class="hljs-string">&#x27;fbed560ff746b870aa9a341fdeeb3b2a84437b1d&#x27;</span>,<br>                           <span class="hljs-string">&#x27;34026cdef61fe05668cb1ae45f8ca46a47539993&#x27;</span>, <span class="hljs-string">&#x27;1d68c176d5a8c019840d9013652c03d7118335c1&#x27;</span>,<br>                           <span class="hljs-string">&#x27;5476b766cab277119970254a595fd69029553d09&#x27;</span>, <span class="hljs-string">&#x27;f01dcc57eaf647ff9a7884e0c2ce6ce616a50e7d&#x27;</span>,<br>                           <span class="hljs-string">&#x27;54972dab56f5e7df31dce81d44354a39c2952da7&#x27;</span>, <span class="hljs-string">&#x27;858184b28005ea4f11cae7b280cf964bd63c5036&#x27;</span>,<br>                           <span class="hljs-string">&#x27;cdc80e8a3fbd0d258dd2557aea6fdf0b778a9740&#x27;</span>, <span class="hljs-string">&#x27;126862f9026fae3348f19d7d285658713f545d52&#x27;</span>,<br>                           <span class="hljs-string">&#x27;2cbd85f935a8a14de068e8284a449f3ab3345db9&#x27;</span>, <span class="hljs-string">&#x27;f37dadec918d6a4295fb3ced2e5e3c06680dc138&#x27;</span>,<br>                           <span class="hljs-string">&#x27;b69389c850cf159cbbc50b67cce7304e48cd2fc8&#x27;</span>, <span class="hljs-string">&#x27;520922981a1f4752742c6b680956ea62ce98f008&#x27;</span>,<br>                           <span class="hljs-string">&#x27;8e28d442dd20d82a88f9a17983fa2f7e704c958d&#x27;</span>, <span class="hljs-string">&#x27;1e3363ae14e1c0e03060a99a4f18163b1ffb07c5&#x27;</span>,<br>                           <span class="hljs-string">&#x27;f3237eeb35b900c3b6c7aa7e3ad33096d1717cb1&#x27;</span>, <span class="hljs-string">&#x27;f287d5e00c33e65fc5c73fd0e152dfcc4c75b643&#x27;</span>,<br>                           <span class="hljs-string">&#x27;8499d07f2fdaeebaab73c008725de0f8c7f3156f&#x27;</span>, <span class="hljs-string">&#x27;8e3936cf42625dfc4dd71a5128aedd051581a933&#x27;</span>,<br>                           <span class="hljs-string">&#x27;fe9db13341c3f7378c0cc0fe69895bd1a1635546&#x27;</span>, <span class="hljs-string">&#x27;86a383614a32021187439e662a0d9981d3266dac&#x27;</span>,<br>                           <span class="hljs-string">&#x27;e8fe2fbd7bc75f212188f30129ff2b5fbc326fc8&#x27;</span>, <span class="hljs-string">&#x27;c535c7d03b83d0cee8b56c380d839de86450259d&#x27;</span>,<br>                           <span class="hljs-string">&#x27;09317f2958a7ce16af570417dc2f4ff56b74739a&#x27;</span>, <span class="hljs-string">&#x27;597198e18e4fd6df0598e55ad6ac41ddd9fbfe4c&#x27;</span>,<br>                           <span class="hljs-string">&#x27;9289b6999a360314dc5c4b5a09aec9b20aec1f13&#x27;</span>, <span class="hljs-string">&#x27;6611f3a373aeecfd23bbce43f3993e8b770ba550&#x27;</span>,<br>                           <span class="hljs-string">&#x27;81fb04659a20bb00edba72c456f8ef7809dc87f3&#x27;</span>, <span class="hljs-string">&#x27;59496e456e24d27871fcb8127934df33925888af&#x27;</span>,<br>                           <span class="hljs-string">&#x27;308db6c4eff529d1caa2e436cb53ad5f0ff3ed19&#x27;</span>, <span class="hljs-string">&#x27;f0bb16a3f35928b6c3fcbd45227e732211e422bb&#x27;</span>,<br>                           <span class="hljs-string">&#x27;e0bd3d3533f9ef6051bcfe4617b45920fd42a11b&#x27;</span>, <span class="hljs-string">&#x27;79909209aa840c77043a2d9b2dddad042924b57e&#x27;</span>,<br>                           <span class="hljs-string">&#x27;899e90841a27a0c2cf691e3319ddfd6b139dd28f&#x27;</span>, <span class="hljs-string">&#x27;ff46286f5f16cfbc9d2d5d4d9574d842adf88d12&#x27;</span>,<br>                           <span class="hljs-string">&#x27;5968efcadb0fa8b62702918e2bc6d109169b1688&#x27;</span>, <span class="hljs-string">&#x27;2a1bb615d4cb43d08f1703b6dd55b6f036843b7e&#x27;</span>,<br>                           <span class="hljs-string">&#x27;bc04aacea03fa3f3457a182c64c2893eed7abde3&#x27;</span>, <span class="hljs-string">&#x27;ba462044856ba2355ab59f0f92a6261908495508&#x27;</span>,<br>                           <span class="hljs-string">&#x27;58c5593a3f627c45fe995a5ad7c3abbdcd4558cb&#x27;</span>, <span class="hljs-string">&#x27;4d44dfa3e97ce4f5ef510f11edc8e7fdeadc0127&#x27;</span>,<br>                           <span class="hljs-string">&#x27;76156e683a8d78dc84c9dc77b8b3295bf65ade85&#x27;</span>, <span class="hljs-string">&#x27;0fedc3f5cc217b1195361eb24348e3da869ee9c8&#x27;</span>,<br>                           <span class="hljs-string">&#x27;d135bb807f863e4341ec5dfc3ce089e3ccb90423&#x27;</span>, <span class="hljs-string">&#x27;9079bbc75010af82d5f820087a3d0bca68ba7335&#x27;</span>,<br>                           <span class="hljs-string">&#x27;f26d6acd59053b7e5c058e7e663a5aafdf08cbcd&#x27;</span>, <span class="hljs-string">&#x27;3a528b4e824b7e4d94eb1771d25aab1333ee4f6c&#x27;</span>,<br>                           <span class="hljs-string">&#x27;a378b13c679091b4f6df535e274b489a1921487a&#x27;</span>, <span class="hljs-string">&#x27;486a7b84e2d2826faf33fede673557abf13d4858&#x27;</span>,<br>                           <span class="hljs-string">&#x27;a707ce9e469a5f09bf9b20a51d36510971a8c902&#x27;</span>, <span class="hljs-string">&#x27;fbf2945c8eb174e81d354ac0a217707e27d80df1&#x27;</span>,<br>                           <span class="hljs-string">&#x27;805fbf2e06bb2780c853a5d7cb760a09bbfede41&#x27;</span>, <span class="hljs-string">&#x27;8077a90826ce293c28af8ec03bb9fe2bc968a87e&#x27;</span>,<br>                           <span class="hljs-string">&#x27;db5b68bc3ad6e1c7d9cadc0ef5336dac91ea7802&#x27;</span>, <span class="hljs-string">&#x27;17db99964e9e6170c12a903fddf74614f765ac63&#x27;</span>,<br>                           <span class="hljs-string">&#x27;36a25d99fd2026aee1e93dffdab081325f6d82be&#x27;</span>, <span class="hljs-string">&#x27;4941159f05a9c1b5316aaebe483b68ed2b3d9bf6&#x27;</span>,<br>                           <span class="hljs-string">&#x27;2783da31f7043a29011507c817c4469b03a7047f&#x27;</span>, <span class="hljs-string">&#x27;1beaf2d802cc747acf82633d6d35498e1ef1c0f2&#x27;</span>,<br>                           <span class="hljs-string">&#x27;d9484d93128be7f62537f24609080dbf48fc15a1&#x27;</span>, <span class="hljs-string">&#x27;a3d4b391af6a4787cc2581894a9ba952a04c06af&#x27;</span>,<br>                           <span class="hljs-string">&#x27;f09c619843ee7bf6898fdcce47dd89c329f113b3&#x27;</span>, <span class="hljs-string">&#x27;9451d16f558cfeb8a65e92a74bcd627764d3b395&#x27;</span>,<br>                           <span class="hljs-string">&#x27;2d3ac710b84c7465044994de9c07437e629ff9aa&#x27;</span>, <span class="hljs-string">&#x27;a7d6d56ef412462c1f0eef2a403bf2cba615710a&#x27;</span>,<br>                           <span class="hljs-string">&#x27;2b0804a61db331444c40c6d9817476c25438c702&#x27;</span>, <span class="hljs-string">&#x27;2af9e4587ee984bfa68c2e832b61d060df812d9c&#x27;</span>,<br>                           <span class="hljs-string">&#x27;ac75705e3f02f67e319833309af23db3aeb6e9b1&#x27;</span>, <span class="hljs-string">&#x27;002a18cb7b1836c01842c80107bce23f8899d046&#x27;</span>,<br>                           <span class="hljs-string">&#x27;2d532adec4d0de4582463c8028d7b7b1797e2ad6&#x27;</span>, <span class="hljs-string">&#x27;4818335666c0fb4abf758fed7770f924766c08b0&#x27;</span>,<br>                           <span class="hljs-string">&#x27;753a675a197b8b7d3d8e579172aef2f5b5987ba5&#x27;</span>, <span class="hljs-string">&#x27;69d335d9126f56b229304326e1bba38f48667b77&#x27;</span>,<br>                           <span class="hljs-string">&#x27;e57eb75086c332598025be0c424124b48f944790&#x27;</span>, <span class="hljs-string">&#x27;7227355ee48815247ab824d580f0d8be6722ccc8&#x27;</span>,<br>                           <span class="hljs-string">&#x27;25872f29012b912e415165e3e04cb846cbfd5373&#x27;</span>, <span class="hljs-string">&#x27;2c9aea7e3dd67d8f28551fd7c3a1ea31bbe1fa5d&#x27;</span>,<br>                           <span class="hljs-string">&#x27;64e09ec0c09b7b4c8743e1ee7899d494d9c19a99&#x27;</span>, <span class="hljs-string">&#x27;252b538782968f65284bf2f5cfe6a804cc877567&#x27;</span>,<br>                           <span class="hljs-string">&#x27;f9e9a038358f557b9780efd2899d9f9557912821&#x27;</span>, <span class="hljs-string">&#x27;27a6c6a7bcb3f7d53c04427f9f5bdd6c20eb78bb&#x27;</span>,<br>                           <span class="hljs-string">&#x27;79e21154bb06d1a91da161cc75e4f75dd7df3d93&#x27;</span>, <span class="hljs-string">&#x27;10a8ea942ea2ce344c8b052d6a98f76825a0e13e&#x27;</span>,<br>                           <span class="hljs-string">&#x27;cce77357aaad177352a19d4f91ec0a35058e2e33&#x27;</span>, <span class="hljs-string">&#x27;48f41629e57f84ae7637b11b396c78d318f7e84d&#x27;</span>]&#125;<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output, <span class="hljs-string">&quot;wb+&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(file_data)):<br>            file_datum = file_data[i]<br>            <span class="hljs-keyword">if</span> sha1(file_datum) != expected[<span class="hljs-string">&#x27;pieces&#x27;</span>][i]:<br>                <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;error hash&quot;</span>)<br>            f.write(file_datum)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;download ok.&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br><br></code></pre></td></tr></table></figure>

<h2 id="运行日志"><a href="#运行日志" class="headerlink" title="运行日志"></a>运行日志</h2><p>以下是运行日志。</p>
<pre><code class="hljs">/usr/local/bin/python3.7 /Users/ym/charm/pytest/ym/bt/bt_download_data.py
sent=ok, data=b&#39;\x13BitTorrent protocol\x00\x00\x00\x00\x00\x10\x00\x01\xc9\x9c;z[\xa3\x1a\x89f\xe6\xc9\xa4\x0b\xc4\xf88\x87\xa1\x07\xe5ym111111111111111111&#39;
Handshake(fixed_num=19, bt_head=b&#39;BitTorrent protocol&#39;, reserved=b&#39;\x00\x00\x00\x00\x00\x10\x00\x05&#39;, info_hash=b&#39;\xc9\x9c;z[\xa3\x1a\x89f\xe6\xc9\xa4\x0b\xc4\xf88\x87\xa1\x07\xe5&#39;, peer_id=b&#39;-UM1870-\x14\xab,SS\x82\x1d\x9crh\xc8d&#39;)
sent|ext_handshake=b&#39;\x00\x00\x00\x1a\x14\x00d1:md11:ut_metadatai1eee&#39;
&#123;&#39;e&#39;: 0, &#39;ipv4&#39;: &#39;ށ\x01\x14&#39;, &#39;ipv6&#39;: &#39;þ€\x00\x00\x00\x00\x00\x00\x04:^:D[\x0c’&#39;, &#39;complete_ago&#39;: 1, &#39;m&#39;: &#123;&#39;upload_only&#39;: 3, &#39;ut_holepunch&#39;: 4, &#39;ut_metadata&#39;: 2, &#39;ut_pex&#39;: 1, &#39;ut_recommend&#39;: 5, &#39;ut_comment&#39;: 6&#125;, &#39;metadata_size&#39;: 2270, &#39;p&#39;: 40959, &#39;reqq&#39;: 255, &#39;v&#39;: &#39;ÂµTorrent Mac 1.8.7&#39;, &#39;yourip&#39;: &#39;À¨+R&#39;&#125;
0111111101110111110111111111111111111101110111110011100111010110011111011111110101101110101101111000111111111100
interested=b&#39;\x00\x00\x00\x01\x02&#39;
unchoke
request piece=0
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=0, begin=0
16384
request piece=1
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=1, begin=0
16384
request piece=2
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=2, begin=0
16384
request piece=3
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=3, begin=0
16384
request piece=4
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=4, begin=0
16384
request piece=5
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=5, begin=0
16384
request piece=6
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=6, begin=0
16384
request piece=7
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=7, begin=0
16384
request piece=8
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=8, begin=0
16384
request piece=9
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\t\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=9, begin=0
16384
request piece=10
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\n\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=10, begin=0
16384
request piece=11
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=11, begin=0
16384
request piece=12
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=12, begin=0
16384
request piece=13
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\r\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=13, begin=0
16384
request piece=14
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=14, begin=0
16384
request piece=15
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=15, begin=0
16384
request piece=16
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=16, begin=0
16384
request piece=17
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=17, begin=0
16384
request piece=18
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=18, begin=0
16384
request piece=19
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=19, begin=0
16384
request piece=20
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=20, begin=0
16384
request piece=21
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=21, begin=0
16384
request piece=22
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=22, begin=0
16384
request piece=23
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=23, begin=0
16384
request piece=24
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=24, begin=0
16384
request piece=25
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x19\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=25, begin=0
16384
request piece=26
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x1a\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=26, begin=0
16384
request piece=27
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=27, begin=0
16384
request piece=28
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=28, begin=0
16384
request piece=29
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=29, begin=0
16384
request piece=30
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=30, begin=0
16384
request piece=31
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=31, begin=0
16384
request piece=32
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00 \x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=32, begin=0
16384
request piece=33
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00!\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=33, begin=0
16384
request piece=34
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00&quot;\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=34, begin=0
16384
request piece=35
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00#\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=35, begin=0
16384
request piece=36
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00$\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=36, begin=0
16384
request piece=37
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00%\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=37, begin=0
16384
request piece=38
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00&amp;\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=38, begin=0
16384
request piece=39
sent=b&quot;\x00\x00\x00\r\x06\x00\x00\x00&#39;\x00\x00\x00\x00\x00\x00@\x00&quot;
piece
index=39, begin=0
16384
request piece=40
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00(\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=40, begin=0
16384
request piece=41
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00)\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=41, begin=0
16384
request piece=42
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00*\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=42, begin=0
16384
request piece=43
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00+\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=43, begin=0
16384
request piece=44
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00,\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=44, begin=0
16384
request piece=45
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00-\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=45, begin=0
16384
request piece=46
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00.\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=46, begin=0
16384
request piece=47
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00/\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=47, begin=0
16384
request piece=48
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x000\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=48, begin=0
16384
request piece=49
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x001\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=49, begin=0
16384
request piece=50
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x002\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=50, begin=0
16384
request piece=51
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x003\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=51, begin=0
16384
request piece=52
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x004\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=52, begin=0
16384
request piece=53
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x005\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=53, begin=0
16384
request piece=54
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x006\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=54, begin=0
16384
request piece=55
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x007\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=55, begin=0
16384
request piece=56
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x008\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=56, begin=0
16384
request piece=57
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x009\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=57, begin=0
16384
request piece=58
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00:\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=58, begin=0
16384
request piece=59
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00;\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=59, begin=0
16384
request piece=60
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00&lt;\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=60, begin=0
16384
request piece=61
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00=\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=61, begin=0
16384
request piece=62
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00&gt;\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=62, begin=0
16384
request piece=63
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00?\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=63, begin=0
16384
request piece=64
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00@\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=64, begin=0
16384
request piece=65
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00A\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=65, begin=0
16384
request piece=66
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00B\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=66, begin=0
16384
request piece=67
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00C\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=67, begin=0
16384
request piece=68
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00D\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=68, begin=0
16384
request piece=69
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00E\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=69, begin=0
16384
request piece=70
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00F\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=70, begin=0
16384
request piece=71
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00G\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=71, begin=0
16384
request piece=72
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00H\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=72, begin=0
16384
request piece=73
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00I\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=73, begin=0
16384
request piece=74
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00J\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=74, begin=0
16384
request piece=75
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00K\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=75, begin=0
16384
request piece=76
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00L\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=76, begin=0
16384
request piece=77
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00M\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=77, begin=0
16384
request piece=78
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00N\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=78, begin=0
16384
request piece=79
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00O\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=79, begin=0
16384
request piece=80
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00P\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=80, begin=0
16384
request piece=81
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00Q\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=81, begin=0
16384
request piece=82
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00R\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=82, begin=0
16384
request piece=83
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00S\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=83, begin=0
16384
request piece=84
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00T\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=84, begin=0
16384
request piece=85
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00U\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=85, begin=0
16384
request piece=86
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00V\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=86, begin=0
16384
request piece=87
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00W\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=87, begin=0
16384
request piece=88
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00X\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=88, begin=0
16384
request piece=89
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00Y\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=89, begin=0
16384
request piece=90
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00Z\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=90, begin=0
16384
request piece=91
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00[\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=91, begin=0
16384
request piece=92
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00\\\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=92, begin=0
16384
request piece=93
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00]\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=93, begin=0
16384
request piece=94
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00^\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=94, begin=0
16384
request piece=95
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00_\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=95, begin=0
16384
request piece=96
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00`\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=96, begin=0
16384
request piece=97
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00a\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=97, begin=0
16384
request piece=98
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00b\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=98, begin=0
16384
request piece=99
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00c\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=99, begin=0
16384
request piece=100
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00d\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=100, begin=0
16384
request piece=101
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00e\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=101, begin=0
16384
request piece=102
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00f\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=102, begin=0
16384
request piece=103
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00g\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=103, begin=0
16384
request piece=104
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00h\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=104, begin=0
16384
request piece=105
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00i\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=105, begin=0
16384
request piece=106
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00j\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=106, begin=0
16384
request piece=107
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00k\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=107, begin=0
16384
request piece=108
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00l\x00\x00\x00\x00\x00\x00@\x00&#39;
piece
index=108, begin=0
16384
request piece=109
sent=b&#39;\x00\x00\x00\r\x06\x00\x00\x00m\x00\x00\x00\x00\x00\x005v&#39;
piece
index=109, begin=0
13686
completed.
0xfffffffffffffffffffffffffffc
download ok.

Process finished with exit code 0
</code></pre>
]]></content>
      <tags>
        <tag>bitTorrent</tag>
        <tag>protocol</tag>
        <tag>p2p</tag>
      </tags>
  </entry>
  <entry>
    <title>BitTorrent协议（一）之解析种子文件</title>
    <url>/2019/01/09/2019-1-9-bt-1/</url>
    <content><![CDATA[<h2 id="bt种子文件"><a href="#bt种子文件" class="headerlink" title="bt种子文件"></a>bt种子文件</h2><p>bt通过种子文件分享已经是一个过去时了，2009年<code>btChina</code>就已经关闭了。现在一般都是
使用磁力链接来分享文件。那么为什么种子文件分享不再流行了呢？为什么要用磁力链接呢？
磁力链接怎么实现的呢？</p>
<p>嗯这是这个系列要研究的问题。但是要研究磁力链接的实现原理，最好先从种子文件开始。</p>
<span id="more"></span>

<h2 id="种子文件-metainfo-files-的定义"><a href="#种子文件-metainfo-files-的定义" class="headerlink" title="种子文件(metainfo files)的定义"></a>种子文件(metainfo files)的定义</h2><p>官网文档 <a href="http://www.bittorrent.org/beps/bep_0003.html">BEP3</a> 中的metainfo files章节
讲的很清楚。</p>
<p>简单的说就是把tracker列表和分享的文件信息编码为一个二进制的文件。</p>
<ul>
<li>tracker列表是类似如下的列表</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//tracker.trackerfix.com:80/announce</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">udp:</span><span class="hljs-comment">//9.rarbg.me:2710/announce</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">udp:</span><span class="hljs-comment">//9.rarbg.to:2710/announce</span><br></code></pre></td></tr></table></figure>

<p>如果想要找到下载源，就要通过tracker找到peer节点。</p>
<ul>
<li>分享的文件信息（info）</li>
</ul>
<p>包含了文件的大小，分块个数，分块的sha1散列值。</p>
<h2 id="编码方式-bencoding"><a href="#编码方式-bencoding" class="headerlink" title="编码方式(bencoding)"></a>编码方式(bencoding)</h2><p>bt文件的编码逻辑取名为bencoding。</p>
<blockquote>
<p>Strings are length-prefixed base ten followed by a colon and the string. For example 4:spam corresponds to ‘spam’.</p>
<p>Integers are represented by an ‘i’ followed by the number in base 10 followed by an ‘e’. For example i3e corresponds to 3 and i-3e corresponds to -3. Integers have no size limitation. i-0e is invalid. All encodings with a leading zero, such as i03e, are invalid, other than i0e, which of course corresponds to 0.</p>
<p>Lists are encoded as an ‘l’ followed by their elements (also bencoded) followed by an ‘e’. For example l4:spam4:eggse corresponds to [‘spam’, ‘eggs’].</p>
<p>Dictionaries are encoded as a ‘d’ followed by a list of alternating keys and their corresponding values followed by an ‘e’. For example, d3:cow3:moo4:spam4:eggse corresponds to {‘cow’: ‘moo’, ‘spam’: ‘eggs’} and d4:spaml1:a1:bee corresponds to {‘spam’: [‘a’, ‘b’]}. Keys must be strings and appear in sorted order (sorted as raw strings, not alphanumerics).</p>
</blockquote>
<p>翻译为eBNF语法呢，就是如下</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">string</span> : num &#x27;:&#x27; &#123;CHAR&#125;*<br><br><span class="hljs-attribute">num</span> : 0 <br>    | [1-9][0-9]+ <br>    | &#x27;-&#x27; [1-9][0-9]+<br><br><span class="hljs-attribute">integer</span> : &#x27;i&#x27; num &#x27;e&#x27;<br><br><span class="hljs-attribute">list</span> : &#x27;l&#x27; &#123;element&#125;* &#x27;e&#x27;<br><br><span class="hljs-attribute">dic</span> : &#x27;d&#x27; &#123;pair&#125;* &#x27;e&#x27;<br><br><span class="hljs-attribute">pair</span> : string element<br><br><span class="hljs-attribute">element</span> : string<br>        | integer<br>        | list<br>        | dic<br></code></pre></td></tr></table></figure>

<h2 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h2><p>根据eBNF实现的解码代码如下， 把<code>get_content()</code>方法中path替换为种子文件的路径，运行就可以看到。
返回的解析结果中会有<code>info_hash</code>，该值是根据info的bencoding的二进制串计算的sha1值。这个值很重要
因为之后很多协议都会用到。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br>__author__ = <span class="hljs-string">&#x27;ym&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Date        : &#x27;2019/1/7&#x27;</span><br><span class="hljs-string">    Description :  解析torrent文件</span><br><span class="hljs-string">    </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BDecode</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, arr</span>):<br>        <span class="hljs-variable language_">self</span>.arr = arr<br>        <span class="hljs-variable language_">self</span>.n = <span class="hljs-built_in">len</span>(arr)<br>        <span class="hljs-variable language_">self</span>.i = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.dic()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">peek</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.i &lt; <span class="hljs-variable language_">self</span>.n:<br>            <span class="hljs-built_in">next</span> = <span class="hljs-variable language_">self</span>.arr[<span class="hljs-variable language_">self</span>.i]<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">next</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.i &lt; <span class="hljs-variable language_">self</span>.n:<br>            <span class="hljs-built_in">next</span> = <span class="hljs-variable language_">self</span>.arr[<span class="hljs-variable language_">self</span>.i]<br>            <span class="hljs-variable language_">self</span>.i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">next</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">num</span>(<span class="hljs-params">self</span>):<br>        num_str = <span class="hljs-string">&quot;&quot;</span><br>        peek = <span class="hljs-variable language_">self</span>.peek()<br><br>        <span class="hljs-keyword">if</span> peek <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;malformed num.&quot;</span>)<br><br>        <span class="hljs-keyword">if</span> peek == <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.peek(<span class="hljs-number">1</span>) <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;123456789&#x27;</span>:<br>            <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span>()  <span class="hljs-comment"># ignore &#x27;-&#x27;</span><br>            <span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.peek() <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;0123456789&quot;</span>:<br>                num_str += <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span>()<br>            <span class="hljs-keyword">if</span> num_str[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(num_str) &gt; <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;error : 0 starts with num&quot;</span>)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-built_in">int</span>(num_str)<br>        <span class="hljs-keyword">elif</span> peek <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;0123456789&#x27;</span>:<br>            <span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.peek() <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;0123456789&quot;</span>:<br>                num_str += <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span>()<br>            <span class="hljs-keyword">if</span> num_str[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(num_str) &gt; <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;error : 0 starts with num&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(num_str)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;malformed num.&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">string</span>(<span class="hljs-params">self, pieces=<span class="hljs-literal">False</span></span>):<br>        length = <span class="hljs-variable language_">self</span>.num()<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span>() != <span class="hljs-string">&#x27;:&#x27;</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;String must contain colon&quot;</span>)<br>        s = <span class="hljs-variable language_">self</span>.arr[<span class="hljs-variable language_">self</span>.i:(<span class="hljs-variable language_">self</span>.i + length)]<br>        <span class="hljs-variable language_">self</span>.i += length<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pieces:<br>            <span class="hljs-keyword">return</span> s.decode(<span class="hljs-string">&quot;utf8&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># pieces maps to a string whose length is a multiple of 20.</span><br>            <span class="hljs-comment"># It is to be subdivided into strings of length 20,</span><br>            <span class="hljs-comment"># each of which is the SHA1 hash of the piece at the corresponding index.</span><br>            result = []<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, length, <span class="hljs-number">20</span>):<br>                <span class="hljs-built_in">hash</span> = s[j:j + <span class="hljs-number">20</span>]<br>                result.append(<span class="hljs-built_in">hash</span>.<span class="hljs-built_in">hex</span>().lower())<br>            <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">integer</span>(<span class="hljs-params">self, timestamp=<span class="hljs-literal">False</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span>() != <span class="hljs-string">&quot;i&quot;</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Integer must begin with i&quot;</span>)<br>        val = <span class="hljs-variable language_">self</span>.num()<br><br>        <span class="hljs-keyword">if</span> timestamp:<br>            val = datetime.fromtimestamp(val).__str__()<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span>() != <span class="hljs-string">&quot;e&quot;</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Integer must end with e&quot;</span>)<br>        <span class="hljs-keyword">return</span> val<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">element</span>(<span class="hljs-params">self, pieces=<span class="hljs-literal">False</span>, timestamp=<span class="hljs-literal">False</span></span>):<br>        peek = <span class="hljs-variable language_">self</span>.peek()<br>        <span class="hljs-keyword">if</span> peek == <span class="hljs-string">&#x27;i&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.integer(timestamp)<br>        <span class="hljs-keyword">elif</span> peek == <span class="hljs-string">&quot;l&quot;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">list</span>()<br>        <span class="hljs-keyword">elif</span> peek == <span class="hljs-string">&#x27;d&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.dic()<br>        <span class="hljs-keyword">elif</span> peek <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;0123456789&quot;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.string(pieces)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;not recognize.&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">list</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span>() != <span class="hljs-string">&quot;l&quot;</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;list must begin with l&quot;</span>)<br>        result = []<br>        <span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.peek() != <span class="hljs-string">&#x27;e&#x27;</span>:<br>            result.append(<span class="hljs-variable language_">self</span>.element())<br>        <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span>()<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dic</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span>() != <span class="hljs-string">&#x27;d&#x27;</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;dic must begin with d&quot;</span>)<br>        result = <span class="hljs-built_in">dict</span>()<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.peek() != <span class="hljs-string">&quot;e&quot;</span>:<br>            key = <span class="hljs-variable language_">self</span>.string()<br>            val = <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">if</span> key == <span class="hljs-string">&quot;pieces&quot;</span>:<br>                val = <span class="hljs-variable language_">self</span>.element(pieces=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">elif</span> key == <span class="hljs-string">&#x27;creation date&#x27;</span>:<br>                val = <span class="hljs-variable language_">self</span>.element(timestamp=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">else</span>:<br>                info_start = <span class="hljs-literal">None</span><br>                info_end = <span class="hljs-literal">None</span><br>                <span class="hljs-keyword">if</span> key == <span class="hljs-string">&#x27;info&#x27;</span>:<br>                    info_start = <span class="hljs-variable language_">self</span>.i<br>                val = <span class="hljs-variable language_">self</span>.element()<br>                <span class="hljs-keyword">if</span> key == <span class="hljs-string">&#x27;info&#x27;</span>:<br>                    info_end = <span class="hljs-variable language_">self</span>.i<br>                    result[<span class="hljs-string">&#x27;info_hash&#x27;</span>] = <span class="hljs-variable language_">self</span>.sha1(<span class="hljs-variable language_">self</span>.arr[info_start:info_end])<br>            result[key] = val<br><br>        <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span>()<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sha1</span>(<span class="hljs-params">self, info</span>):<br>        <span class="hljs-keyword">import</span> hashlib<br>        p = hashlib.sha1()<br>        p.update(info)<br>        <span class="hljs-keyword">return</span> p.hexdigest()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_content</span>():<br>    path = <span class="hljs-string">&quot;/Users/ym/tmp/venom.torrent&quot;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">return</span> f.read()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    content = get_content()<br>    result = BDecode(content).parse()<br>    <span class="hljs-keyword">import</span> pprint<br>    pprint.pprint(result)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>

<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>用最近的毒液电影的种子进行解析，打印如下，
其中announce-list就是tracker列表。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">/usr/local/bin/python3.<span class="hljs-number">7</span> /Users/ym/charm/pytest/ym/bt/parse_torrent.py<br>&#123;&#x27;announce&#x27;<span class="hljs-punctuation">:</span> &#x27;http://tracker.trackerfix.com:80/announce&#x27;<span class="hljs-punctuation">,</span><br> &#x27;announce-list&#x27;<span class="hljs-punctuation">:</span> [[&#x27;http://tracker.trackerfix.com:80/announce&#x27;]<span class="hljs-punctuation">,</span><br>                   [&#x27;udp://9.rarbg.me:<span class="hljs-number">2710</span>/announce&#x27;]<span class="hljs-punctuation">,</span><br>                   [&#x27;udp://9.rarbg.to:<span class="hljs-number">2710</span>/announce&#x27;]]<span class="hljs-punctuation">,</span><br> &#x27;comment&#x27;<span class="hljs-punctuation">:</span> &#x27;Torrent downloaded from https://rarbg.to&#x27;<span class="hljs-punctuation">,</span><br> &#x27;created by&#x27;<span class="hljs-punctuation">:</span> &#x27;mktorrent 1.0&#x27;<span class="hljs-punctuation">,</span><br> &#x27;creation date&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">2018-11-28</span> 16:04:22&#x27;<span class="hljs-punctuation">,</span><br> &#x27;info&#x27;<span class="hljs-punctuation">:</span> &#123;&#x27;files&#x27;<span class="hljs-punctuation">:</span> [&#123;&#x27;length&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">100074</span><span class="hljs-punctuation">,</span> &#x27;path&#x27;<span class="hljs-punctuation">:</span> [&#x27;English.srt&#x27;]&#125;<span class="hljs-punctuation">,</span><br>                    &#123;&#x27;length&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">31</span><span class="hljs-punctuation">,</span> &#x27;path&#x27;<span class="hljs-punctuation">:</span> [&#x27;RARBG.txt&#x27;]&#125;<span class="hljs-punctuation">,</span><br>                    &#123;&#x27;length&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">4431023676</span><span class="hljs-punctuation">,</span><br>                     &#x27;path&#x27;<span class="hljs-punctuation">:</span> [&#x27;Venom.<span class="hljs-number">2018.72</span>0p.WEBRip.x264.AAC2.0-SHITBOX.mp4&#x27;]&#125;]<span class="hljs-punctuation">,</span><br>          &#x27;name&#x27;<span class="hljs-punctuation">:</span> &#x27;Venom.<span class="hljs-number">2018.72</span>0p.WEBRip.x264.AAC2.0-SHITBOX&#x27;<span class="hljs-punctuation">,</span><br>          &#x27;piece length&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">1048576</span><span class="hljs-punctuation">,</span><br>          &#x27;pieces&#x27;<span class="hljs-punctuation">:</span> [&#x27;a<span class="hljs-number">958677</span>e48a77aff<span class="hljs-number">6357</span>4c885d7fd<span class="hljs-number">7091515903</span>4&#x27;<span class="hljs-punctuation">,</span><br>                     &#x27;0c<span class="hljs-number">713356</span>b<span class="hljs-number">6345</span>4a<span class="hljs-number">914452</span>cdcc76a<span class="hljs-number">8470</span>fb4bc419&#x27;<span class="hljs-punctuation">,</span><br>                     ...<br>                     ...<br>                     ...<br>                     &#x27;b926b<span class="hljs-number">048253</span>bc506cb3f4e52acab9df6b93cf614&#x27;<span class="hljs-punctuation">,</span><br>                     &#x27;610f<span class="hljs-number">8485</span>ab8c56f53f594e<span class="hljs-number">0973</span>0a34e<span class="hljs-number">8529</span>e13b4&#x27;]&#125;<span class="hljs-punctuation">,</span><br> &#x27;info_hash&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">3329</span>7ac9c46f<span class="hljs-number">07150671</span>1f<span class="hljs-number">1281</span>4a3dd8ed8b73ed&#x27;&#125;<br><br>Process finished with exit code <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>bitTorrent</tag>
        <tag>protocol</tag>
        <tag>p2p</tag>
      </tags>
  </entry>
  <entry>
    <title>使用delve调试K3s</title>
    <url>/2019/11/19/debug-k3s/</url>
    <content><![CDATA[<h2 id="k3s是什么"><a href="#k3s是什么" class="headerlink" title="k3s是什么"></a>k3s是什么</h2><p><a href="http://k3s.io/">K3s</a>是什么？k8s的精简版。编译之后执行程序大小不到50M。
可以用在物联网的边缘计算侧。如果想深入了解k8s，那么k3s是个很好的起点。
那么如果能够断点调试k3s，就更好了。下面我们来看看怎么做。</p>
<span id="more"></span>

<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li>建议使用linux 64位操作系统。这样可以native构建。</li>
<li>建议性能好一些的机器，虚拟机编译会很慢</li>
<li>建议安装好docker</li>
<li>配置好go的环境，设置<code>GOPATH</code>，同时把<code>$GOPATH/bin</code>加入到<code>PATH</code></li>
<li>安装Goland这个集成开发环境</li>
<li>从github克隆k3s的代码，加上depth参数则不下载历史，速度会快很多<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> --depth 1 https://github.com/rancher/k3s.git <span class="hljs-variable">$GOPATH</span>/src/github.com/rancher/k3s<br></code></pre></td></tr></table></figure></li>
<li>安装delve的debug工具。完成之后会生成可执行文件<code>$GOPATH/bin/dlv</code><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> --depth 1 https://github.com/go-delve/delve.git <span class="hljs-variable">$GOPATH</span>/src/github.com/go-delve/delve<br>$ <span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/github.com/go-delve/delve<br>$ make install<br></code></pre></td></tr></table></figure></li>
<li>构建含有调试信息的可执行文件<code>k3s</code>,所在路径是<code>$GOPATH/src/github.com/rancher/k3s/</code><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/github.com/rancher/k3s<br>$ go build -gcflags <span class="hljs-string">&quot;all=-N -l&quot;</span> -o k3s<br></code></pre></td></tr></table></figure></li>
<li>用delve执行。这时候线程会监听2345的远程调试接入。<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/github.com/rancher/k3s<br>$ dlv --listen=:2345 --headless=<span class="hljs-literal">true</span> --api-version=2 <span class="hljs-built_in">exec</span> -- ./k3s server --docker --disable-agent<br></code></pre></td></tr></table></figure></li>
<li>Goland中添加k3s项目。项目根路径为<code>$GOPATH</code>，然后配置增加一个remote调试。在运行之前，在main.go上打一个断点。</li>
</ul>
<p>运行远程调试之后，成功。
<img src="/images/20191119-k3s-remote-debug.jpg" alt="remote-debug"></p>
]]></content>
      <tags>
        <tag>k3s</tag>
        <tag>delve</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>BitTorrent协议（六）之种子嗅探器</title>
    <url>/2019/02/18/2019-2-18-bt-6/</url>
    <content><![CDATA[<h2 id="Sniffer（嗅探器）"><a href="#Sniffer（嗅探器）" class="headerlink" title="Sniffer（嗅探器）"></a>Sniffer（嗅探器）</h2><p>实现一个简单的BT种子嗅探器才算是有点实际价值的吧。这样就可以把种子的metadata信息
缓存下来，提供按照文件名进行检索。</p>
<span id="more"></span>

<p>不过这里只是实现一个demo，有兴趣的话可以看看github上的<a href="https://github.com/shiyanhui/dht">dht</a>项目。</p>
<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>简单的说，就是把嗅探节点加入到其他节点的路由表中，等待其他节点发来的announce_peer请求，然后获取种子的metadata信息。</p>
<p>我们根据以下的代码具体说明。</p>
<ol>
<li><p>89行代码，向路由节点发送<code>find_node</code>请求。这些路由节点。就是25行代码的3个地址。
这样做的意义有两个，一方面，路由节点会把我们的节点加入到他们的路由表中。另一方面，路由节点会返回一个好节点列表。</p>
</li>
<li><p>252行代码，启动了6个线程。</p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="left">线程</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">listener</td>
<td align="left">代码93行，监听所有接收到的udp数据，并把这些放入到队列<code>recv_q</code></td>
</tr>
<tr>
<td align="left">t_dispatch</td>
<td align="left">代码106行，从队列<code>recv_q</code>中取出数据，并进行bdecoding，根据消息类别分别放入对应的队列。一共有三种：应答，请求，错误。</td>
</tr>
<tr>
<td align="left">t_hand_reply</td>
<td align="left">代码132行，从<code>reply_q</code>中取出数据，解码节点列表。每一个节点都插入到本地的路由表（这里不太好，最好先进行ping_node，确定是好节点再加入），并向其发送<code>find_node</code>消息</td>
</tr>
<tr>
<td align="left">t_hand_query</td>
<td align="left">代码165行，从<code>query_q</code>中取出请求，分别对四种请求进行应答处理，分别是ping，find_node, get_peers, announce_peer。</td>
</tr>
<tr>
<td align="left">t_hand_error</td>
<td align="left">错误消息的处理。</td>
</tr>
<tr>
<td align="left">t_handle_metadata</td>
<td align="left">代码234行，从<code>metadata_q</code>中取出已经获取的种子的metadata，打印并把种子保存再字典表中。</td>
</tr>
</tbody></table>
<ol start="3">
<li>代码165行，t_hand_query线程执行对请求进行处理。</li>
</ol>
<ul>
<li>ping: 返回本地节点id</li>
<li>find_node: 从本地路由表中查出与请求节点id最近的8个节点，并返回。（据说把本地id进行返回，有利于本地节点加入其他路由表）</li>
<li>get_peers: 这里进行了简单处理，仅仅返回空节点list。</li>
<li>announce_peer: 这个请求是有节点告诉我们有新的种子文件发布了，并告诉我们info_hash。然后我们拿着info_hash取进行获取metadata的操作。
代码207行，开启一个独立的获取metadata的线程。如果获取到metadata，则放入<code>metadata_q</code>中。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> absolute_import<br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> division<br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><br>__author__ = <span class="hljs-string">&#x27;ym&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Date        : &#x27;2019/2/3&#x27;</span><br><span class="hljs-string">    Description :</span><br><span class="hljs-string">    </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">from</span> ym.bt.routing_table <span class="hljs-keyword">import</span> RoutingTable, BTNode<br><span class="hljs-keyword">from</span> ym.bt.util <span class="hljs-keyword">import</span> id_generator, ip_me, decode_compact_node, encode_compact_node, format_size<br><span class="hljs-keyword">from</span> ym.bt.bencoding_bin <span class="hljs-keyword">import</span> BEncode<br><span class="hljs-keyword">from</span> ym.bt.bdecoding <span class="hljs-keyword">import</span> BDecode<br><span class="hljs-keyword">from</span> ym.bt.request_metadata <span class="hljs-keyword">import</span> request_metadata_top<br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> logging<br><br>log = logging.getLogger()<br><br>NODES = [(<span class="hljs-string">&quot;router.bittorrent.com&quot;</span>, <span class="hljs-number">6881</span>),<br>         (<span class="hljs-string">&quot;router.utorrent.com&quot;</span>, <span class="hljs-number">6881</span>),<br>         (<span class="hljs-string">&quot;dht.transmissionbt.com&quot;</span>, <span class="hljs-number">6881</span>)]<br><br>ID = id_generator()<br>SOURCE_IP = ip_me()<br>SOURCE_PORT = <span class="hljs-number">6881</span><br>TIME_OUT = <span class="hljs-number">1</span><br><br>INFO_HASH_METADATA_DIC = &#123;&#125;<br>RLOCK = threading.RLock()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">boot_step</span>(<span class="hljs-params">sock: socket.socket, local_node: BTNode</span>):<br>    <span class="hljs-comment"># send find_node query to NODES</span><br>    <span class="hljs-keyword">try</span>:<br>        dic = &#123;<span class="hljs-string">&quot;t&quot;</span>: <span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>: <span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;q&quot;</span>: <span class="hljs-string">&quot;find_node&quot;</span>,<br>               <span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;id&quot;</span>: local_node.<span class="hljs-built_in">id</span>.<span class="hljs-built_in">hex</span>(), <span class="hljs-string">&quot;target&quot;</span>: local_node.<span class="hljs-built_in">id</span>.<span class="hljs-built_in">hex</span>()&#125;&#125;<br>        data = BEncode(dic).encode_bin()<br><br>        <span class="hljs-keyword">for</span> NODE <span class="hljs-keyword">in</span> NODES:<br>            dst_ip, dst_port = NODE<br>            sock.sendto(data, (dst_ip, dst_port))<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;boot_step|send|dst_ip=&#123;&#125;|dst_port=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(dst_ip, dst_port))<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        log.exception(e)<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;boot_step error&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">request_metadata_thread</span>(<span class="hljs-params">peer_id: <span class="hljs-built_in">bytes</span>, info_hash, ip, port, metadata_q: Queue</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;request_metadata_thread|info_hash=&#123;&#125;|ip=&#123;&#125;|port=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(info_hash, ip, port))<br>        metadata_dic = request_metadata_top(peer_id, info_hash, ip, port)<br>        <span class="hljs-keyword">if</span> metadata_dic <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            metadata_q.put((metadata_dic, info_hash, ip, port))<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        log.exception(<span class="hljs-string">&quot;request_metadata_thread error&quot;</span>)<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;request metadata error&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>    sock.setblocking(<span class="hljs-literal">True</span>)<br>    sock.bind((SOURCE_IP, SOURCE_PORT))<br><br>    <span class="hljs-comment"># recv queue</span><br>    recv_q = Queue(maxsize=<span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># reply queue</span><br>    reply_q = Queue(maxsize=<span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># query queue</span><br>    query_q = Queue(maxsize=<span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># error queue</span><br>    error_q = Queue(maxsize=<span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># request metadata</span><br>    metadata_q = Queue(maxsize=<span class="hljs-number">0</span>)<br><br>    <span class="hljs-comment"># declare routing table</span><br>    rt = RoutingTable()<br><br>    local_node = BTNode(<span class="hljs-built_in">id</span>=ID, ip=SOURCE_IP, port=SOURCE_PORT)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;local_node=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(local_node))<br>    rt.insert(local_node)<br>    <span class="hljs-comment"># 1. boot step</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;boot start.&quot;</span>)<br>    boot_step(sock, local_node)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;boot end.&quot;</span>)<br><br>    <span class="hljs-comment"># 2. listener</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv_listener</span>(<span class="hljs-params">sock: socket.socket, recv_q: Queue</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">try</span>:<br>                data, addr = sock.recvfrom(<span class="hljs-number">2048</span>)<br>                <span class="hljs-comment"># print(&quot;recv_listener|recv|addr=&#123;&#125;&quot;.format(addr))</span><br>                recv_q.put((data, addr))<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;recv_listener error&quot;</span>)<br><br>    listener = threading.Thread(target=recv_listener, args=(sock, recv_q,))<br>    listener.daemon = <span class="hljs-literal">True</span><br><br>    <span class="hljs-comment"># 3. handle recv msg</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dispatch_recv</span>(<span class="hljs-params">recv_q: Queue, reply_q: Queue, query_q: Queue, error_q: Queue</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            data, addr = recv_q.get()<br>            <span class="hljs-keyword">try</span>:<br>                dic, i, n = BDecode(data).parse()<br>                <span class="hljs-comment"># print(&quot;dispatch_recv|dic=&#123;&#125;&quot;.format(dic))</span><br>                <span class="hljs-keyword">if</span> dic.get(<span class="hljs-string">&quot;y&quot;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                    v = dic[<span class="hljs-string">&#x27;y&#x27;</span>]<br>                    <span class="hljs-keyword">if</span> v == <span class="hljs-string">&#x27;r&#x27;</span>:<br>                        <span class="hljs-comment"># reply msg</span><br>                        reply_q.put((dic, addr))<br>                    <span class="hljs-keyword">elif</span> v == <span class="hljs-string">&#x27;q&#x27;</span>:<br>                        <span class="hljs-comment"># query msg</span><br>                        query_q.put((dic, addr))<br>                    <span class="hljs-keyword">elif</span> v == <span class="hljs-string">&#x27;e&#x27;</span>:<br>                        <span class="hljs-comment"># error msg</span><br>                        error_q.put((dic, addr))<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;unknown type msg.&quot;</span>)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                log.exception(<span class="hljs-string">&#x27;dispatch_recv error|data=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(data))<br><br>    t_dispatch = threading.Thread(target=dispatch_recv, args=(recv_q, reply_q, query_q, error_q,))<br>    t_dispatch.daemon = <span class="hljs-literal">True</span><br><br>    <span class="hljs-comment"># 4. handle reply</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_reply</span>(<span class="hljs-params">sock: socket.socket, reply_q: Queue, rt: RoutingTable</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            dic, addr = reply_q.get()<br>            <span class="hljs-keyword">try</span>:<br>                r = dic[<span class="hljs-string">&#x27;r&#x27;</span>]<br>                src_id = r[<span class="hljs-string">&#x27;id&#x27;</span>]<br>                src_ip, src_port = addr<br>                src_node = BTNode(<span class="hljs-built_in">id</span>=src_id, ip=src_ip, port=src_port)<br>                rt.insert(src_node)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;rt.size=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(rt.size()))<br>                <span class="hljs-comment"># print(&quot;handle_reply|src_ip=&#123;&#125;|src_port=&#123;&#125;&quot;.format(src_ip, src_port))</span><br>                <span class="hljs-keyword">if</span> r.get(<span class="hljs-string">&#x27;nodes&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                    <span class="hljs-comment"># ping every node and put good in rt.</span><br>                    nodes = decode_compact_node(r[<span class="hljs-string">&#x27;nodes&#x27;</span>])<br>                    dic = &#123;<span class="hljs-string">&quot;t&quot;</span>: <span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>: <span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;q&quot;</span>: <span class="hljs-string">&quot;find_node&quot;</span>,<br>                           <span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;id&quot;</span>: local_node.<span class="hljs-built_in">id</span>.<span class="hljs-built_in">hex</span>(), <span class="hljs-string">&quot;target&quot;</span>: local_node.<span class="hljs-built_in">id</span>.<span class="hljs-built_in">hex</span>()&#125;&#125;<br>                    data = BEncode(dic).encode_bin()<br>                    <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> nodes:<br>                        <span class="hljs-keyword">try</span>:<br>                            dst_ip, dst_port, <span class="hljs-built_in">id</span> = node<br>                            sock.sendto(data, (dst_ip, dst_port))<br>                        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                            log.exception(<span class="hljs-string">&quot;send node error|node=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(node))<br>                <span class="hljs-keyword">elif</span> r.get(<span class="hljs-string">&#x27;peers&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                    <span class="hljs-comment"># ping every peer and put good in rt.</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;handle_reply|peers&quot;</span>)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                log.exception(<span class="hljs-string">&quot;handle_reply error|dic=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(dic), e)<br><br>    t_hand_reply = threading.Thread(target=handle_reply, args=(sock, reply_q, rt,))<br>    t_hand_reply.daemon = <span class="hljs-literal">True</span><br><br>    <span class="hljs-comment"># 5. handle query</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_query</span>(<span class="hljs-params">sock: socket.socket, query_q: Queue</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            dic, addr = query_q.get()<br>            dst_ip, dst_port = addr<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;handle_query|addr=&#123;&#125;|dic=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(addr, dic))<br>                <span class="hljs-keyword">if</span> dic[<span class="hljs-string">&#x27;q&#x27;</span>] == <span class="hljs-string">&#x27;ping&#x27;</span>:<br>                    <span class="hljs-comment"># handle ping query</span><br>                    reply = &#123;<span class="hljs-string">&quot;t&quot;</span>: dic[<span class="hljs-string">&#x27;t&#x27;</span>], <span class="hljs-string">&quot;y&quot;</span>: <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>: &#123;<span class="hljs-string">&quot;id&quot;</span>: local_node.<span class="hljs-built_in">id</span>.<span class="hljs-built_in">hex</span>()&#125;&#125;<br>                    data = BEncode(reply).encode_bin()<br>                    sock.sendto(data, (dst_ip, dst_port))<br>                    <span class="hljs-comment"># print(&quot;handle_query|ping|send_reply|dst_ip=&#123;&#125;|dst_port=&#123;&#125;|data=&#123;&#125;&quot;.format(dst_ip, dst_port, data))</span><br>                <span class="hljs-keyword">elif</span> dic[<span class="hljs-string">&#x27;q&#x27;</span>] == <span class="hljs-string">&#x27;find_node&#x27;</span>:<br>                    <span class="hljs-comment"># handle find_node query</span><br>                    nodes = rt.find_closer(<span class="hljs-built_in">bytes</span>.fromhex(dic[<span class="hljs-string">&#x27;a&#x27;</span>][<span class="hljs-string">&#x27;id&#x27;</span>]))<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;local_node.id=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(local_node.<span class="hljs-built_in">id</span>.<span class="hljs-built_in">hex</span>()))<br>                    <span class="hljs-built_in">print</span>(nodes)<br>                    compact_node = encode_compact_node(nodes)<br>                    reply = &#123;<span class="hljs-string">&quot;t&quot;</span>: dic[<span class="hljs-string">&#x27;t&#x27;</span>], <span class="hljs-string">&quot;y&quot;</span>: <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>: &#123;<span class="hljs-string">&quot;id&quot;</span>: local_node.<span class="hljs-built_in">id</span>.<span class="hljs-built_in">hex</span>(), <span class="hljs-string">&quot;nodes&quot;</span>: compact_node&#125;&#125;<br>                    data = BEncode(reply).encode_bin()<br>                    sock.sendto(data, (dst_ip, dst_port))<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;handle_query|find_node|send_reply|dst_ip=&#123;&#125;|dst_port=&#123;&#125;|data=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(dst_ip, dst_port,<br>                                                                                                   data))<br>                <span class="hljs-keyword">elif</span> dic[<span class="hljs-string">&#x27;q&#x27;</span>] == <span class="hljs-string">&#x27;get_peers&#x27;</span>:<br>                    <span class="hljs-comment"># handle get_peers query</span><br>                    reply = &#123;<span class="hljs-string">&quot;t&quot;</span>: dic[<span class="hljs-string">&#x27;t&#x27;</span>], <span class="hljs-string">&quot;y&quot;</span>: <span class="hljs-string">&quot;r&quot;</span>,<br>                             <span class="hljs-string">&quot;r&quot;</span>: &#123;<span class="hljs-string">&quot;id&quot;</span>: local_node.<span class="hljs-built_in">id</span>.<span class="hljs-built_in">hex</span>(), <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-string">&quot;alenym&quot;</span>.encode(<span class="hljs-string">&quot;utf8&quot;</span>), <span class="hljs-string">&quot;nodes&quot;</span>: <span class="hljs-string">b&quot;&quot;</span>&#125;&#125;<br>                    data = BEncode(reply).encode_bin()<br>                    sock.sendto(data, (dst_ip, dst_port))<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;handle_query|get_peers|send_reply|dst_ip=&#123;&#125;|dst_port=&#123;&#125;|data=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(dst_ip, dst_port,<br>                                                                                                   data))<br>                <span class="hljs-keyword">elif</span> dic[<span class="hljs-string">&#x27;q&#x27;</span>] == <span class="hljs-string">&#x27;announce_peer&#x27;</span>:<br>                    <span class="hljs-comment"># handle announce_peer</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;handle_query|announce_peer|dic=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(dic))<br>                    info_hash = dic[<span class="hljs-string">&#x27;a&#x27;</span>].get(<span class="hljs-string">&#x27;info_hash&#x27;</span>)<br>                    <span class="hljs-keyword">with</span> RLOCK:<br>                        <span class="hljs-keyword">if</span> info_hash <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> info_hash <span class="hljs-keyword">in</span> INFO_HASH_METADATA_DIC:<br>                            <span class="hljs-keyword">continue</span><br><br>                    target_ip = dst_ip<br>                    target_port = dst_port<br><br>                    t_request_meta = threading.Thread(target=request_metadata_thread,<br>                                                      args=(<br>                                                          local_node.<span class="hljs-built_in">id</span>, info_hash, target_ip, target_port, metadata_q))<br>                    t_request_meta.start()<br><br><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;handle_query|other|dic=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(dic))<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                log.exception(<span class="hljs-string">&quot;handle_query error|dic=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(dic))<br><br>    t_hand_query = threading.Thread(target=handle_query, args=(sock, query_q,))<br>    t_hand_query.daemon = <span class="hljs-literal">True</span><br><br>    <span class="hljs-comment"># 6. handle error</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_error</span>(<span class="hljs-params">error_q: Queue</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            dic, addr = error_q.get()<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;handle_error|addr=&#123;&#125;|dic=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(addr, dic))<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                log.exception(<span class="hljs-string">&#x27;handle_error error&#x27;</span>, e)<br><br>    t_hand_error = threading.Thread(target=handle_error, args=(error_q,))<br>    t_hand_error.daemon = <span class="hljs-literal">True</span><br><br>    <span class="hljs-comment"># 7. handle requested metadata</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_metadata</span>(<span class="hljs-params">metadata_q: Queue</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">try</span>:<br>                metadata_dic, info_hash, ip, port = metadata_q.get()<br>                format_s = <span class="hljs-string">&quot;handle_metadata|info_hash=&#123;&#125;|ip=&#123;&#125;|port=&#123;&#125;|name=&#123;&#125;|size=&#123;&#125;&quot;</span><br>                file_name = metadata_dic[<span class="hljs-string">&#x27;name&#x27;</span>]<br>                size = format_size(metadata_dic.get(<span class="hljs-string">&#x27;length&#x27;</span>))<br>                <span class="hljs-built_in">print</span>(format_s.<span class="hljs-built_in">format</span>(info_hash, ip, port, file_name, size))<br>                <span class="hljs-keyword">with</span> RLOCK:<br>                    <span class="hljs-keyword">if</span> info_hash <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> INFO_HASH_METADATA_DIC:<br>                        INFO_HASH_METADATA_DIC[info_hash] = metadata_dic<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                log.exception(<span class="hljs-string">&quot;handle_metadata error&quot;</span>)<br><br><br>    t_handle_metadata = threading.Thread(target=handle_metadata, args=(metadata_q,))<br>    t_handle_metadata.daemon = <span class="hljs-literal">True</span><br><br>    listener.start()<br>    t_dispatch.start()<br>    t_hand_reply.start()<br>    t_hand_query.start()<br>    t_hand_error.start()<br>    t_handle_metadata.start()<br><br>    listener.join()<br>    t_dispatch.join()<br>    t_hand_reply.join()<br>    t_hand_query.join()<br>    t_hand_error.join()<br>    t_handle_metadata.join()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>
<h2 id="运行日志"><a href="#运行日志" class="headerlink" title="运行日志"></a>运行日志</h2><p>我们在一台有公网ip的电脑上运行十几分钟，过滤日志，查看接收到的种子信息如下，</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><code class="hljs coq">root@ubuntu:~# cat log.txt | <span class="hljs-type">grep</span> <span class="hljs-string">&quot;handle_metadata&quot;</span><br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">5553330</span>daa12bde6a2f71ab26f7b26688219f276|<span class="hljs-type">ip</span>=<span class="hljs-number">69.80</span><span class="hljs-number">.12</span><span class="hljs-number">.126</span>|<span class="hljs-type">port</span>=<span class="hljs-number">11715</span>|<span class="hljs-type">name</span>=War <span class="hljs-keyword">for</span> the Planet of the Apes <span class="hljs-number">2017</span> <span class="hljs-number">1080</span>p BluRay x264 DTS <span class="hljs-number">5.1</span> MSubS-Hon3y|<span class="hljs-type">size</span>=None<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">5556</span>f3a9c605dd009f92fddb91848f565439e4f4|<span class="hljs-type">ip</span>=<span class="hljs-number">59.169</span><span class="hljs-number">.228</span><span class="hljs-number">.207</span>|<span class="hljs-type">port</span>=<span class="hljs-number">62215</span>|<span class="hljs-type">name</span>=(C94) [くろすこスイッチ (くろすこ)] 冷泉さんといちゃいちゃする本 (ガールズ&amp;パンツァー).zip|<span class="hljs-type">size</span>=<span class="hljs-number">7.80</span>M<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">555333</span>edb2519c3aa93db4a150f6e021f5a138ff|<span class="hljs-type">ip</span>=<span class="hljs-number">96.40</span><span class="hljs-number">.42</span><span class="hljs-number">.32</span>|<span class="hljs-type">port</span>=<span class="hljs-number">32796</span>|<span class="hljs-type">name</span>=Princess Go Round|<span class="hljs-type">size</span>=None<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">572</span>d4df79a7151d9466d371b960cfece91289bf4|<span class="hljs-type">ip</span>=<span class="hljs-number">1.175</span><span class="hljs-number">.76</span><span class="hljs-number">.59</span>|<span class="hljs-type">port</span>=<span class="hljs-number">13283</span>|<span class="hljs-type">name</span>=(同人ゲーム) [<span class="hljs-number">181102</span>][RJ237312][ピンポイント／キングピン] 妻が隠していたビデオ…～元カレ寝取らせ観察記～ DL版 (files).rar|<span class="hljs-type">size</span>=<span class="hljs-number">1.08</span>G<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">572</span>edd8670066945538e4fe823294b45f2c2e3a3|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=<span class="hljs-number">0407</span>raw021|<span class="hljs-type">size</span>=None<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">574</span>b27358fc1604e65babf32abe839267d36ba4b|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=o0Akrios0o@www.sexinsex.com@假裝租屋 事實上在陽台勾引住宅區人妻|<span class="hljs-type">size</span>=None<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">54730</span>eeeb5d74a58f49c6da72eb90be922556f0a|<span class="hljs-type">ip</span>=<span class="hljs-number">219.98</span><span class="hljs-number">.7</span><span class="hljs-number">.166</span>|<span class="hljs-type">port</span>=<span class="hljs-number">18586</span>|<span class="hljs-type">name</span>=DSAM<span class="hljs-number">-29</span>-DVD|<span class="hljs-type">size</span>=None<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">57039</span>c3ef3343c5b288c5ff219c66f837a88e808|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=tmem|<span class="hljs-type">size</span>=None<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">5687578</span>db92c7df4ae3ab7e33c895f04b1e27d37|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=GNE<span class="hljs-number">-148</span>|<span class="hljs-type">size</span>=None<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">57</span>b832066b2103e29f3a4af256e25175da6dbdc2|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=[Thz.la]supa<span class="hljs-number">-154</span>|<span class="hljs-type">size</span>=None<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">56936</span>a12cdb3a1a837c8faa206a2dea189dadf66|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=club<span class="hljs-number">-022</span>_1.wmv|<span class="hljs-type">size</span>=<span class="hljs-number">2.96</span>G<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">570e89058161385</span>b1d7dfadfcdc2d9f276ab829b|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=avidol.us-PTBI<span class="hljs-number">-026.</span>wmv|<span class="hljs-type">size</span>=<span class="hljs-number">2.71</span>G<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">57</span>c30a1ddecac71142208425c610837b961f4de6|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=[HD]sad<span class="hljs-number">-039.</span>wmv|<span class="hljs-type">size</span>=<span class="hljs-number">3.52</span>G<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">56794273</span>cf092e0b4f671885a16cf2dbe484f559|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=KRE<span class="hljs-number">-002.</span>wmv|<span class="hljs-type">size</span>=<span class="hljs-number">1.20</span>G<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">5710</span>c35d85a9a0ed8cadc10bdcd09db5bb0c46fd|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=<span class="hljs-number">0111</span>-xv1088|<span class="hljs-type">size</span>=None<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">561</span>b55ec9a956f208f58b798d781bd5577a47b9e|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=<span class="hljs-number">52.</span>R18<span class="hljs-number">-099</span>|<span class="hljs-type">size</span>=None<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">57</span>c262437e7cf0ca5f24bff947757026f9cef9a8|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=DF<span class="hljs-number">-35976</span>|<span class="hljs-type">size</span>=None<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">565</span>bedb7fc17d20f017a668e2931cb1d30b53556|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=judexkwok@片瀬まこ合集<span class="hljs-number">06</span>|<span class="hljs-type">size</span>=None<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">57e93</span>ca1527cd35045f0ca75d0c96579dcf96d2a|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=SMDV<span class="hljs-number">-10</span>-DVD|<span class="hljs-type">size</span>=None<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">56747025</span>a196cb78db9f94d8ca933677f57e54b0|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=HUNT<span class="hljs-number">-759.</span>mp4|<span class="hljs-type">size</span>=<span class="hljs-number">2.01</span>G<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">56e45</span>f76194dadb2c799c7f2c9b34bc2fff07cee|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=<span class="hljs-number">0510</span>-sama538|<span class="hljs-type">size</span>=None<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">57</span>fae1a68ee9241a593c1623f64feb7927b40469|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=[thz.la]chunta<span class="hljs-number">-219</span>|<span class="hljs-type">size</span>=None<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">56</span>b89964da08b923b20722b89ccfc6ae4928aca3|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=HUNT<span class="hljs-number">-665</span>_2.mp4|<span class="hljs-type">size</span>=<span class="hljs-number">1.60</span>G<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">57528</span>d8633ee8b823aea17e47def172082072dd5|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=HUNT|<span class="hljs-type">size</span>=None<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">57</span>b14ca4cf260763e170e515b1f235ae5dca487f|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=SAMA<span class="hljs-number">-477</span>|<span class="hljs-type">size</span>=None<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">57</span>bc38a6f182dbd6be5b42371d645cc43cfa12e1|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=HUNT<span class="hljs-number">-710.</span>mp4|<span class="hljs-type">size</span>=<span class="hljs-number">1.82</span>G<br>handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">57</span>f2b65672462ff81834a928cf8e9863687dc220|<span class="hljs-type">ip</span>=<span class="hljs-number">14.199</span><span class="hljs-number">.224</span><span class="hljs-number">.142</span>|<span class="hljs-type">port</span>=<span class="hljs-number">22979</span>|<span class="hljs-type">name</span>=<span class="hljs-number">3208</span>|<span class="hljs-type">size</span>=None<br>...<br></code></pre></td></tr></table></figure>

<p>有些种子文件为什么没有文件大小呢？例如<code>size=None</code>,</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><code class="hljs coq">handle_metadata|<span class="hljs-type">info_hash</span>=<span class="hljs-number">54730</span>eeeb5d74a58f49c6da72eb90be922556f0a|<span class="hljs-type">ip</span>=<span class="hljs-number">219.98</span><span class="hljs-number">.7</span><span class="hljs-number">.166</span>|<span class="hljs-type">port</span>=<span class="hljs-number">18586</span>|<span class="hljs-type">name</span>=DSAM<span class="hljs-number">-29</span>-DVD|<span class="hljs-type">size</span>=None<br></code></pre></td></tr></table></figure>

<p>用info_hash过滤日志，可以看到metadata包含了一个<code>files</code>项，该项包含了多个文件。</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><code class="hljs prolog">root@ubuntu:~# cat log.txt | grep <span class="hljs-string">&quot;54730eeeb5d74a58f49c6da72eb90be922556f0a&quot;</span>| grep <span class="hljs-string">&quot;metadata_dic&quot;</span> <br>request_metadata|info_hash=<span class="hljs-number">54730</span>eeeb5d74a58f49c6da72eb90be922556f0a|metadata_dic=&#123;<span class="hljs-string">&#x27;files&#x27;</span>: [&#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\xc4&quot;%lT\xa14s\xd86\xd7a\xb1:\x8bC&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;788c531731917e92334c03423df5433b4d3d941d&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">228076</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;C9~Fang Ping Bi Cheng Xu防屏蔽程序.rar&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;C9~Fang Ping Bi Cheng Xu防屏蔽程序.rar&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\xff,5\xb4W\x1b\xf1\xb0\x16\x13=\x0c\xc1\xc5\xb56&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;b760813c2b6690123eb174b5561ce6b4a0b6e000&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">1966849</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;HOTAVXXX,Free Adult Movie, Fastest &amp; Newest Porn Movie Site.jpg&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;HOTAVXXX,Free Adult Movie, Fastest &amp; Newest Porn Movie Site.jpg&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\xfaggnH\xf8e&#125;O\x97\x04\xbb\x86\x9e\x92\xf5&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;9a8b43c663ecc46d3a29196cf527d8431fef842b&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">180</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;HOTAVXXX~最新最快的AV影片每日更新.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;HOTAVXXX~最新最快的AV影片每日更新.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\xff,5\xb4W\x1b\xf1\xb0\x16\x13=\x0c\xc1\xc5\xb56&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;b760813c2b6690123eb174b5561ce6b4a0b6e000&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">1966849</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;HOTAVXXX、自由な成人映画、最も速く&amp;最新ポルノ映画サイト.jpg&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;HOTAVXXX、自由な成人映画、最も速く&amp;最新ポルノ映画サイト.jpg&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;$\x13\xfd\\\x8b\xa5\xee=\xc0\xfb\x88\xff~\x03/\x18&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;dddbfe3e917739e1da7afcdd8a78e1a6677b6648&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">235</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;QQ愛真人視頻交友聊天室.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;QQ愛真人視頻交友聊天室.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;/\xe2\xcf\x1b\xc06\xea[\xda\x93\xb9\xd0\\\xc1\x14\x98&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;715c4e653db4bb74bb7e40073d55113f512299e9&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">628211</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;SIS001全面封殺.jpg&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;SIS001全面封殺.jpg&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\xf3\x19\x893\x8b\r\xc4\r\x99|W)\xf4\xce\x00J&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;c4eadc74cdbf36df8a66710f62932a60b1a0949a&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">267</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;[城風 - C9]~成人精品長篇區 最新http一手資源.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;[城風 - C9]~成人精品長篇區 最新http一手資源.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;r\xbab\x10i\xc4\x10&lt;f$\x10+p\x84\xd2Z&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;c6a1cb245511e4013c7510220ce3a6d912f8290f&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">217</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23(第六天魔王)@草榴社區.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23(第六天魔王)@草榴社區.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\xe4z.\xa4\xfa\x88h\xfe\x07\xedy\xc3\x13D\xe8\x7f&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;dddd22e1c4027a8e5c6cec98a4ef3dd29b951682&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">229</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23@ HD1080.org.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23@ HD1080.org.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\xf9\xee!X\xb3\x9d\xd9\x104\xc52\xc4\x872&amp;a&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;7191792635319be376c5ff3edd251e7bda81d069&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">267</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23@AV 天空.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23@AV 天空.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\xba\x18f&amp;*y&amp;\xf5H\xe8\x1f;8x\x1eA&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;d774c64c18ec44e607ba6825675e841332a0d4f4&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">188</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23@D.C.資訊交流網.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23@D.C.資訊交流網.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\x91\x97\x15O\rxh\x7fa\xbf^\xbf \x187K&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;f06835576489512e2c4a3ff58a5c4a2fed3131a3&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">174</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23@KTzone.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23@KTzone.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&quot;\xf7\xf1\x9c\xa0+\x15\xc5_\xdb2u&#x27;\x81\xcb\xefU&quot;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;25a54a9fdab494a60fdbd206089ee75c08913f24&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">235</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23@SexInSex! Board.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23@SexInSex! Board.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\x10k\x08\xafU\xcb\x05\x8b\x0f\xf9\xaf\xcb\r\xdd\xf3\xc4&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;a9bb602e06bb33483a1960db95bc65b535831c5d&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">1086</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23@公仔箱論壇.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23@公仔箱論壇.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;6-*X\x12\xf3f\xbe\xd8q\x15\xbe\x91[\xee4&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;d19dd08e932c7db940491e5ac259c6ad0ff225c3&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">188</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23@痴漢俱樂部.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23@痴漢俱樂部.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\x89\xe1CN\xef\xd1\x83\xc2\x8c?,|;\xdb\t\x10&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;47255a6ce6a43dc9af1de780fcffd210de793bfd&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">190</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23@香港廣場.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23@香港廣場.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\xaaJh&amp;\x1f\x88\x93\xda\x9bL\xca\xd9\x9c+V\xa9&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;168c3faa1f01a31b31c8d5a1bb7e699333e0bfe4&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">226</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_Plus28 討論區.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_Plus28 討論區.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&quot;\x04k`&#123;\x0b&#x27;\xee\x80\xb4\x8e\x91=\xa92\xaf\x95&quot;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;c7181e934379905222bf363317d8ae8ddfb12eb4&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">220</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_Touch99.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_Touch99.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\xaf\xbe+\xd5\xde\x96\xdc\xe0\xa8a\x18\x87b\x8d\xf6\x0c&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;a92caa360c647d14ae05655c6e43e9f28d7edcf5&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">208</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_WK綜合論壇.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_WK綜合論壇.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\x05&gt;\x9b.\nS\xb2\x9c&amp;L\xbc5H\x82\xcc\xcb&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;6fa079db3cafb196163e9a6b126f60a5d4aa85b1&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">156</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_mimip2p.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_mimip2p.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\xc3|\x1fKA\xb7\xdd\xb9\x87\xd3&#125;\x04\x8f&#125;\xb3m&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;1a709fb06ff75ced80995ab8fcdefa69744d7aa0&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">229</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_※=色界论坛=※ (开放注册） 色界论坛.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_※=色界论坛=※ (开放注册） 色界论坛.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;&gt;\x13\x98U3q\xf6u\xe6\x06\xc4\xa4\x91\xb24\xc5&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;350cdfa69ce763f8c2fad85e1f0f4323c3fb5dfa&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">208</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_九九情色帝国.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_九九情色帝国.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;E\x0c\x8a\xed5&#123;\x00\xe6\xdb\xfc\x9b\xb1|U%\xf5&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;384d925cb1da6605d49014622ed9f0b455efe343&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">261</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_性吧春暖花开,春暖花开性吧有你.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_性吧春暖花开,春暖花开性吧有你.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\xefE\xbe\xc2\xcf(\xf5\xe3\x18\x04\xdan\x8f\x08j\xcf&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;2509953b0831793667a904ee08229da3114835cf&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">214</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_找樂子論壇.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_找樂子論壇.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&quot;QuDc&#x27;zc]\xcb\xeb\xc0\x86-\xfe\xa5\xf4&quot;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;2e92574d6c46add45048b08aa15b4eae132c2cc1&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">235</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_無限討論區.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;dioguitar23_無限討論區.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;tf\xe0\xda\x8c&amp;\x96A\x9d\x9e~P\xe9\xd6\x83\xdb&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;6b2a83a72df99bd7f2a197cb6fd423a41e061b70&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">138</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;hav.tv-新幹線ONLINE~慶祝開站包月對折優惠~免費影片天看到爽!!.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;hav.tv-新幹線ONLINE~慶祝開站包月對折優惠~免費影片天看到爽!!.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\&#x27;\xf0\x08\xf1 &#123;\xa9&quot;\x13//(\xc7o\x9d`&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;226f0d140af4689833613f0f21a95608fff324ef&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">4324384768</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;hotavxxx.com_DSAM-29.ISO&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;hotavxxx.com_DSAM-29.ISO&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\x92]\xef\x0b\xa5\xee\xff\xd9\xb9\xd2\xd2\xc2J\x9e\x1a\xdc&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;eb8316fc354049e3bc1fb251bf6928dc55ed157a&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">131523</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;hotavxxx.com_DSAM-29.jpg&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;hotavxxx.com_DSAM-29.jpg&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;0\xaf\xc8Q\xc9\xa3\xfb\xacn\xf4\xde\xc1\r\x9c\xda\xbd&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;aa6975d6341d2a079661c066eb5244ee0fd1aaff&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">2254263</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;hotavxxx.com_DSAM-29A.jpg&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;hotavxxx.com_DSAM-29A.jpg&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\xa1\xaf\x1b\xd7\x84\xd2g\x87\x99&gt;\x82\xec\x94j\xb1U&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;7254c5e02a0119f38e9c0e7576a1d8ac04b59f67&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">214</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;❤dioguitar23❤18P2P-2013年04月2日 18p2p開放註冊3天.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;❤dioguitar23❤18P2P-2013年04月2日 18p2p開放註冊3天.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\xe0\x82]\xe7\xe2\xc3\xe0\x9bn\x81\x1d\xa4\x0fr\x9f+&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;cad3021392437e48d35faa57861e8ce0a89a6a0d&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">233</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;アジア表動画公開板 [城風 - C9].url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;アジア表動画公開板 [城風 - C9].url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\x9a\xdeh5D\x1e&#125;5`FeM\xf3\xcf\x1dt&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;37402d4e9e9fedb26ff5c833fbc399fb5462a4af&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">168</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;京色屋~即日起大降價.一片只要30元起.藍光片只要150元.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;京色屋~即日起大降價.一片只要30元起.藍光片只要150元.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;W\x9a\xf4E\x1d\xb0b(\x05_v\x00\xef\xe5\xe4\xe6&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;6d6df82810c4aa00152c3912d28bc13b6589a780&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">223</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;堂本屋 TW DMM~即日起大降價.一片只要30元起.藍光片只要150元.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;堂本屋 TW DMM~即日起大降價.一片只要30元起.藍光片只要150元.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\x83\x05t=\xda\x85\x84\xbc\x1c\xb3J\xac\x04\x94\xfea&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;52dcc77f3f2aad3ffd1cf4af73157deb1aeb8f4c&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">2994</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;更多精彩.rar&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;更多精彩.rar&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;&lt;\xf8Y\xfd\x08\x99.\xc5\xec\x0e\x03V\r\xb4%\x06&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;ab91ce91df44509574450c875435f3c2a7bf18cf&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">226</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;金花娱乐城-澳门网上真人赌博，90后性感荷官24小时在线存提款（5分钟到账）.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;金花娱乐城-澳门网上真人赌博，90后性感荷官24小时在线存提款（5分钟到账）.url&#x27;</span>]&#125;, &#123;<span class="hljs-string">&#x27;ed2k&#x27;</span>: b<span class="hljs-string">&#x27;\xfc*&quot;\xad\xdbva\xdf\xbf\x92\x0e\x83.\x08/\x84&#x27;</span>, <span class="hljs-string">&#x27;filehash&#x27;</span>: <span class="hljs-string">&#x27;b60f8d54f1756a04753905be9a9dc7982f33ad14&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">235</span>, <span class="hljs-string">&#x27;path&#x27;</span>: [<span class="hljs-string">&#x27;魔王の家-情慾視界~最新最快的成人資訊平台 魔王の家,http--bbs.hotavxxx.com.url&#x27;</span>], <span class="hljs-string">&#x27;path.utf-8&#x27;</span>: [<span class="hljs-string">&#x27;魔王の家-情慾視界~最新最快的成人資訊平台 魔王の家,http--bbs.hotavxxx.com.url&#x27;</span>]&#125;], <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;DSAM-29-DVD&#x27;</span>, <span class="hljs-string">&#x27;name.utf-8&#x27;</span>: <span class="hljs-string">&#x27;DSAM-29-DVD&#x27;</span>, <span class="hljs-string">&#x27;piece length&#x27;</span>: <span class="hljs-number">1048576</span>, <span class="hljs-string">&#x27;pieces&#x27;</span>: [<span class="hljs-string">&#x27;557c428f62f38fe8ac8d11411bc9796abb28254d&#x27;</span>, <span class="hljs-string">&#x27;53effb4976edd7d32c9be7a0315bfd40ff93875e&#x27;</span>, <span class="hljs-string">&#x27;c38ea041059367193bc3e9cc6fac40f67cfb377f&#x27;</span>, <span class="hljs-string">&#x27;63d640ba1942f834e4ec0340f84d8c0703a1f992&#x27;</span>, <span class="hljs-string">&#x27;8b783f6a2dc8ec649ad78acc8c49f892a8bf7663&#x27;</span>, <span class="hljs-string">&#x27;961a8f0b0cdfe010c979061082982c3548173948&#x27;</span>, <span class="hljs-string">&#x27;57dd2532983cf4d30bd442281d007ce0189b6eac&#x27;</span>, <span class="hljs-string">&#x27;d858de50e2a5d5dd60945ac687baa159697d88cd&#x27;</span>, <span class="hljs-string">&#x27;f7a262965c87d1c4d3cc10660176c4d063d16807&#x27;</span>, <span class="hljs-string">&#x27;43f7e4f982c4a47d94757071e8b280798d5fbfa9&#x27;</span>, ...<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>bitTorrent</tag>
        <tag>protocol</tag>
        <tag>p2p</tag>
      </tags>
  </entry>
  <entry>
    <title>Java语言中bytes convert to string and back not equal</title>
    <url>/2019/04/28/2019-4-28-byte-to-string-and-back/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>用google搜索关键词”java bytes to string and back not equal”，第一个就是我说的这个问题。
什么意思呢？就是在java中，bytes转化为string之后，再转换回bytes的时候，发现不相同了。
<strong>但是<code>Go</code>语言就没有这个问题哦</strong>。</p>
<span id="more"></span>

<p>运行如下java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;(<span class="hljs-type">byte</span>) <span class="hljs-number">0xc0</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0xa8</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0x00</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0x01</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0x04</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0x38</span>&#125;;<br>System.out.println(ByteBufUtil.hexDump(a));<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(a);<br>System.out.println(ByteBufUtil.hexDump(s.getBytes()));<br></code></pre></td></tr></table></figure>

<p>输出的结果如下：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><code class="hljs dns">c0a<span class="hljs-number">800010438</span><br>efbfbdefbfbd<span class="hljs-number">00010438</span><br></code></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>bytes转化为string类型，本质上要选择一种编码。那么选择的是什么呢？
我们看看<code>new String()</code>执行的代码。通过跟踪，可以看到，使用了默认的编码。
csn为<code>UTF-8</code>。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span>[] decode(<span class="hljs-keyword">byte</span>[] ba, <span class="hljs-keyword">int</span> off, <span class="hljs-keyword">int</span> len) &#123;<br>    String csn = Charset.defaultCharset().name();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// use charset name decode() variant which provides caching.</span><br>        <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">decode</span><span class="hljs-params">(csn, ba, off, len)</span></span>;<br>    &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException x) &#123;<br>        warnUnsupportedCharset(csn);<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">decode</span><span class="hljs-params">(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>, ba, off, len)</span></span>;<br>    &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException x) &#123;<br>        <span class="hljs-comment">// If this code is hit during VM initialization, MessageUtils is</span><br>        <span class="hljs-comment">// the only way we will be able to get any kind of error message.</span><br>        MessageUtils.err(<span class="hljs-string">&quot;ISO-8859-1 charset not available: &quot;</span><br>                         + x.toString());<br>        <span class="hljs-comment">// If we can not find ISO-8859-1 (a required encoding) then things</span><br>        <span class="hljs-comment">// are seriously wrong with the installation.</span><br>        System.exit(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>因为通常java编译的时候的默认编码是<code>UTF-8</code>。
那么如何保证转化为字符串还能够转换回来呢？</p>
<p>一种方法是使用<code>ISO-8859-1</code>。例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;(<span class="hljs-type">byte</span>) <span class="hljs-number">0xC0</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0xa8</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0x00</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0x01</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0x04</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0x38</span>&#125;;<br>System.out.println(ByteBufUtil.hexDump(a));<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(a, Charset.forName(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>));<br>System.out.println(ByteBufUtil.hexDump(s.getBytes(Charset.forName(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>))));<br></code></pre></td></tr></table></figure>
<p>结果是相等的。</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><code class="hljs dns">c0a<span class="hljs-number">800010438</span><br>c0a<span class="hljs-number">800010438</span><br></code></pre></td></tr></table></figure>

<h2 id="Go语言没有这个问题"><a href="#Go语言没有这个问题" class="headerlink" title="Go语言没有这个问题"></a>Go语言没有这个问题</h2><p>Go语言则对这个问题解决的非常好。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go">a := []<span class="hljs-type">byte</span>&#123;<span class="hljs-number">0xc0</span>, <span class="hljs-number">0xa8</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x38</span>&#125;<br>fmt.Println(a)<br>s := <span class="hljs-type">string</span>(a)<br>b := []<span class="hljs-type">byte</span>(s)<br>fmt.Println(b)<br></code></pre></td></tr></table></figure>
<p>运行结果是相等的。</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><code class="hljs tap">[192<span class="hljs-number"> 168 </span>0<span class="hljs-number"> 1 </span>4 56]<br>[192<span class="hljs-number"> 168 </span>0<span class="hljs-number"> 1 </span>4 56]<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>docker容器内访问mac主机的kafka</title>
    <url>/2020/03/09/connect-kafka/</url>
    <content><![CDATA[<h2 id="从容器内访问主机的kafka"><a href="#从容器内访问主机的kafka" class="headerlink" title="从容器内访问主机的kafka"></a>从容器内访问主机的kafka</h2><p>我最近遇到这样一个需求，需要从容器内的ClickHouse访问安装在mac主机的kafka。这个问题似乎很简单，
因为在windows上，虚拟机可以和host组成一个局域网，因此kafka只要绑定此网段的ip地址即可。
但是在我的mac主机下，这个方案行不通。</p>
<span id="more"></span>

<p>有几个原因，</p>
<ol>
<li>ClickHouse无法直接安装在mac上，需要编译（当然8G内存也可以编译，但是ninja需要限制job数量，要花很长时间）。</li>
<li>我的mac内存只有8G，使用vbox根本不可能，只能使用docker。</li>
<li>有现成的镜像，直接可以启动。并且host上可以直接连接ClickHouse。</li>
</ol>
<p>难点就在于容器和host根本不在一个网段。</p>
<h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><ol>
<li>修改主机上的kafka的相关配置如下</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">listeners=PLAINTEXT://0.0.0.0:9092<br><br>advertised.listeners=PLAINTEXT://host.docker.internal:9092<br></code></pre></td></tr></table></figure>

<ol start="2">
<li><code>/etc/hosts</code>文件添加</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">127.0.0.1       host.docker.internal<br></code></pre></td></tr></table></figure>

<ol start="3">
<li>在容器内，访问<code>host.docker.internal:9092</code></li>
</ol>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>docker desktop for mac会默认提供一个域名<code>host.docker.internal</code>给容器内
的应用访问主机的服务。所以，如果主机上启动一个rest服务<code>localhost:8080</code>，则容器内可以通过
<code>host.docker.internal:8080</code>直接访问。</p>
<p>但是如果kafka只是配置为</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby">listeners=<span class="hljs-variable constant_">PLAINTEXT</span><span class="hljs-symbol">://localhost</span><span class="hljs-symbol">:</span><span class="hljs-number">9092</span><br></code></pre></td></tr></table></figure>
<p>想直接访问kafka的broker则是不行的。我们会发现，在容器内，<code>telnet host.docker.internal 9092</code>是通的。这是为什么呢？</p>
<p>想要连接kafka的broker会进行基本的两步交互。</p>
<ol>
<li>client访问broker的地址”A”，然后broker会发送回去一个<code>advertised</code>地址”B”</li>
<li>client接收到地址”B”，然后尝试访问”B”</li>
</ol>
<p>如果不设置<code>advertised.listeners</code>，那么默认等于<code>listeners</code>的值。</p>
<p>所以对于这样的设置
<code>B=A=PLAINTEXT://localhost:9092</code>。容器内尝试访问”host.docker.internal:9092”，则会这样子，</p>
<ol>
<li>容器内访问host.docker.internal:9092，接收到地址B&#x3D;PLAINTEXT:&#x2F;&#x2F;localhost:9092</li>
<li>然后访问地址localhost:9092，失败。</li>
</ol>
<p>而如果在主机上访问则显然是成功的。</p>
<p>而我们的解决方法配置是这样的
<code>A=PLAINTEXT://localhost:9092, B=PLAINTEXT://host.docker.internal:9092</code></p>
<p>所以如果容器内访问的过程就是，</p>
<ol>
<li>容器内访问host.docker.internal:9092，接收到地址B&#x3D;PLAINTEXT:&#x2F;&#x2F;host.docker.internal:9092</li>
<li>然后访问host.docker.internal:9092，成功。</li>
</ol>
<p>而主机上的过程是，</p>
<ol>
<li>主机上访问localhost:9092,接收到地址B&#x3D;PLAINTEXT:&#x2F;&#x2F;host.docker.internal:9092</li>
<li>然后访问host.docker.internal:9092，根据&#x2F;etc&#x2F;hosts的域名解析为127.0.0.1:9092，成功。</li>
</ol>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我这里用<code>kafkacat</code>测试，实际上容器内的应用可以使用其他kafka客户端。</p>
<p>连接broker,并显示metadata</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">root@bb6b85562200:/# kafkacat -b host.docker.internal:9092 -L<br>Metadata for all topics (from broker 0: host.docker.internal:9092/0):<br> 1 brokers:<br>  broker 0 at host.docker.internal:9092<br> 8 topics:<br>  topic &quot;test-topic&quot; with 1 partitions:<br>    partition 0, leader 0, replicas: 0, isrs: 0<br>  topic &quot;flink-test&quot; with 1 partitions:<br>    partition 0, leader 0, replicas: 0, isrs: 0<br>  topic &quot;__consumer_offsets&quot; with 50 partitions:<br>    partition 0, leader 0, replicas: 0, isrs: 0<br>    partition 10, leader 0, replicas: 0, isrs: 0<br>...<br>...<br></code></pre></td></tr></table></figure>

<p>显示消息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">^Croot@bb6b85562200:/# kafkacat -b host.docker.internal:9092 -C -t flink-test -o beginning<br>&#123;seqNo: 1, eventTs: 1583739799986, id: even偶数, value: 4.57&#125;<br><span class="hljs-meta prompt_">% </span><span class="language-bash">Reached end of topic flink-test [0] at offset 1</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>kafka</tag>
        <tag>container</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>基于CLion和gdbserver实现远程调试c程序</title>
    <url>/2020/09/08/remote-debug-with-clion/</url>
    <content><![CDATA[<h2 id="远程调试c程序"><a href="#远程调试c程序" class="headerlink" title="远程调试c程序"></a>远程调试c程序</h2><p>最近基于<a href="https://github.com/alibaba/tsar">tsar</a>（阿里开源的一个基于c语言的监控程序）做二次开发，
因为以前从来没有在工作中写过c，所以这个简单的工作花了两周时间，期间用gdb进行调试，用valgrind检查内存泄漏。
但是最让我不舒服的就是gdb调试了，虽然gdb很给力，但是毕竟由奢入俭难，之前写Java，Python，Go都是可以用IDE进行
debug的。有图形化界面还是效率高很多，而对于新手，能够方便的debug源码就可以快速的理解项目。</p>
<p>那么怎么办呢？</p>
<span id="more"></span>


<h2 id="CLion"><a href="#CLion" class="headerlink" title="CLion"></a>CLion</h2><p>我一直以为CLion可以很好的理解cmake项目，但是对于大量的基于makefile编译的项目，则不能很好的解析，所以也无法利用CLion
进行代码调试。</p>
<p>但是并不是这样，虽然CLion无法理解代码中各种符号之间的依赖关系，但是调试只要有debug info和源码就可以进行图形化调试。</p>
<p>参考CLion远程开发的<a href="https://www.jetbrains.com/help/clion/remote-gdb-server.html">Remote GDB Server</a>，很简单就实现了。</p>
<h2 id="远程调试tsar"><a href="#远程调试tsar" class="headerlink" title="远程调试tsar"></a>远程调试tsar</h2><ol>
<li><p>mac下安装了CLion，linux下编译tsar。
在mac下，tsar项目源码路径——<code>/Users/ym/work/operation</code>
在linux下为,tsar项目源码路径——<code>/home/keyvalue/ym/operation</code></p>
</li>
<li><p>在CLion下创建一个<code>GDB remote debug</code>配置。
参数配置：</p>
</li>
</ol>
<ul>
<li><p>target remote args<br>10.4.104.153:1234    # 这是gdbserver的ip:port</p>
</li>
<li><p>path mappings 
remote path为<code>/home/keyvalue/ym/operation</code>，local path为<code>/Users/ym/work/operation</code></p>
</li>
</ul>
<p><img src="/images/gdb-remote-debug.png" alt="gdb remote debug config"></p>
<ol start="3">
<li><p>在linux下运行命令</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><code class="hljs vhdl">$ sudo gdbserver :<span class="hljs-number">1234</span> src/tsar <span class="hljs-comment">--cron</span><br><span class="hljs-keyword">Process</span> src/tsar created; pid = <span class="hljs-number">10216</span><br>Listening <span class="hljs-keyword">on</span> <span class="hljs-keyword">port</span> <span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>CLion下启动之前的<code>GDB remote debug</code>配置，就可以愉快的断点调试了。</p>
</li>
</ol>
<p><img src="/images/tsar-remote-debug.png" alt="tsar remote debug"></p>
]]></content>
      <tags>
        <tag>debug</tag>
        <tag>CLion</tag>
        <tag>gdb</tag>
        <tag>remote</tag>
      </tags>
  </entry>
  <entry>
    <title>自建根证书，中间证书和Server端X.509证书并搭建nginx验证Server端证书有效性</title>
    <url>/2020/10/09/x509-ca/</url>
    <content><![CDATA[<h2 id="X-509证书的颁发和使用"><a href="#X-509证书的颁发和使用" class="headerlink" title="X.509证书的颁发和使用"></a>X.509证书的颁发和使用</h2><p><code>X.509</code>证书是用来认证身份的，例如在访问一个HTTPS网站的时候，浏览器会首先下载该网站
的证书，验证是否有效。如果无效，浏览器会提示<code>您的连接不是私密连接</code>，进一步访问网站有风险。
如果有效则可以直接访问，不会告警。</p>
<p>浏览器怎么验证网站证书是否有效呢？简单说就是看网站证书的颁发机构是不是已经被操作系统信任，即看
颁发机构的身份证书是否已经安装到操作系统里，并被设置为信任。</p>
<p>那么我们接下来做的事情就是在<strong>mac系统上</strong>验证浏览器的上述行为。</p>
<span id="more"></span>

<p>验证步骤，</p>
<ol>
<li>生成根证书，中间证书和Server端证书(即用户证书)</li>
<li>本机搭建nginx服务器，并设置Server端证书（！！注意此时未安装根证书到操作系统）</li>
<li>浏览器访问<a href="https://localhost,出现告警提示/">https://localhost，出现告警提示</a></li>
<li>把根证书和中间证书安装到操作系统，并设置根证书为永久信任</li>
<li>重新访问<a href="https://localhost,正常,没有出现告警./">https://localhost，正常，没有出现告警。</a></li>
</ol>
<h2 id="第一步，生成根证书，中间证书和Server端证书"><a href="#第一步，生成根证书，中间证书和Server端证书" class="headerlink" title="第一步，生成根证书，中间证书和Server端证书"></a>第一步，生成根证书，中间证书和Server端证书</h2><p>颁发机构通常会有根机构和中间机构，根机构的证书自己签发自己，中间机构的证书由根机构签发，而Server端证书由中间机构签发。本人参考以下三篇文章创建了根证书，中间证书和Server端证书。</p>
<ul>
<li><a href="https://www.cnblogs.com/sparkdev/p/10369313.html">使用 OpenSSL 创建私有 CA：1 根证书</a></li>
<li><a href="https://www.cnblogs.com/sparkdev/p/10387520.html">使用 OpenSSL 创建私有 CA：2 中间证书</a></li>
<li><a href="https://www.cnblogs.com/sparkdev/p/10388395.html">使用 OpenSSL 创建私有 CA：3 用户证书</a></li>
</ul>
<p>不过需要注意的是，<strong>Server端证书有效期不要太长，否则即使安装了根证书也会告警</strong>。</p>
<h2 id="第二步，本机搭建nginx服务器，并设置Server端证书"><a href="#第二步，本机搭建nginx服务器，并设置Server端证书" class="headerlink" title="第二步，本机搭建nginx服务器，并设置Server端证书"></a>第二步，本机搭建nginx服务器，并设置Server端证书</h2><p>mac下安装nginx很简单</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">brew install nginx<br></code></pre></td></tr></table></figure>
<p>然后修改<code>/usr/local/etc/nginx/nginx.conf</code>文件，在server里添加三行</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">listen       <span class="hljs-number">443</span>    ssl;<br>ssl_certificate <span class="hljs-regexp">/Users/ym</span><span class="hljs-regexp">/tmp/my</span>ca<span class="hljs-regexp">/localhost/</span>certs/localhost.cert.pem;<br>ssl_certificate_key <span class="hljs-regexp">/Users/ym</span><span class="hljs-regexp">/tmp/my</span>ca<span class="hljs-regexp">/localhost/</span><span class="hljs-keyword">private</span>/localhost.key.pem;<br></code></pre></td></tr></table></figure>

<p>启动nginx</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">brew sevices <span class="hljs-literal">start</span> nginx <br></code></pre></td></tr></table></figure>

<h2 id="第三步，浏览器访问https-localhost"><a href="#第三步，浏览器访问https-localhost" class="headerlink" title="第三步，浏览器访问https://localhost"></a>第三步，浏览器访问<a href="https://localhost/">https://localhost</a></h2><p>显示告警信息
<img src="/images/ca-crt-invalid.png" alt="invalid-certificate"></p>
<h2 id="第四步，把根证书和中间证书安装到操作系统，并设置根证书为永久信任"><a href="#第四步，把根证书和中间证书安装到操作系统，并设置根证书为永久信任" class="headerlink" title="第四步，把根证书和中间证书安装到操作系统，并设置根证书为永久信任"></a>第四步，把根证书和中间证书安装到操作系统，并设置根证书为永久信任</h2><p>在mac系统下，点击lauchpad，并搜索<code>钥匙串访问</code>。可以看到登录下安装的证书。
在finder中打开根证书和中间证书，可以添加到登录账号下。
只需要设置根证书为永久信任即可。以为中间证书是由根证书签发的。
以下是已经安装的根证书
<img src="/images/root-ca.png" alt="root-ca-crt"></p>
<p>以下是已经安装的中间证书
<img src="/images/mid-ca.png" alt="mid-ca-crt"></p>
<h2 id="第五步，-重新访问https-localhost"><a href="#第五步，-重新访问https-localhost" class="headerlink" title="第五步， 重新访问https://localhost"></a>第五步， 重新访问<a href="https://localhost/">https://localhost</a></h2><p>重新访问<a href="https://localhost.正常./">https://localhost。正常。</a></p>
<p><img src="/images/valid-crt.png" alt="valid-crt"></p>
]]></content>
      <tags>
        <tag>certificate</tag>
        <tag>X.509</tag>
        <tag>nginx</tag>
        <tag>openssl</tag>
        <tag>ssl</tag>
      </tags>
  </entry>
  <entry>
    <title>在mac下跑一个Ingress的例子</title>
    <url>/2020/07/06/run-ingress-example-on-mac/</url>
    <content><![CDATA[<h2 id="Ingress是什么"><a href="#Ingress是什么" class="headerlink" title="Ingress是什么"></a>Ingress是什么</h2><p>在Kubernetes中，Ingress是一个对象，该对象允许从Kubernetes集群外部访问Kubernetes服务。 您可以 
通过创建一组规则来配置访问权限，这些规则定义了哪些入站连接可以访问哪些服务。</p>
<span id="more"></span>

<p>这里有篇文章很好的说明了Ingress，并给出了例子 —— <a href="https://matthewpalmer.net/kubernetes-app-developer/articles/kubernetes-ingress-guide-nginx-example.html">Kubernetes Ingress with Nginx Example</a></p>
<p>但是要想跑一下，首先要有一个k8s集群。下面首先在mac上安装一个k8s集群。</p>
<h2 id="在mac上安装k8s集群"><a href="#在mac上安装k8s集群" class="headerlink" title="在mac上安装k8s集群"></a>在mac上安装k8s集群</h2><p>我的mbp的配置是8G内存。</p>
<ol>
<li>下载<code>Docker.dmg</code>。</li>
<li>从这里下载搭建k8s所需要的镜像——<code>https://github.com/gotok8s/k8s-docker-desktop-for-mac</code>
使用的方法就是如下，我用的docker desktop的kubernates的版本是1.19.3所以，相应的要把文件<code>images</code>中的版本号进行修改，以匹配。<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/gotok8s/k8s-docker-desktop-for-mac.git<br>$ <span class="hljs-built_in">cd</span> k8s-docker-desktop-for-mac<br>$ <span class="hljs-built_in">cat</span> images<br>k8s.gcr.io/kube-proxy:v1.19.3=gotok8s/kube-proxy:v1.19.3<br>k8s.gcr.io/kube-controller-manager:v1.19.3=gotok8s/kube-controller-manager:v1.19.3<br>k8s.gcr.io/kube-scheduler:v1.19.3=gotok8s/kube-scheduler:v1.19.3<br>k8s.gcr.io/kube-apiserver:v1.19.3=gotok8s/kube-apiserver:v1.19.3<br>k8s.gcr.io/coredns:1.7.0=gotok8s/coredns:1.7.0<br>k8s.gcr.io/pause:3.2=gotok8s/pause:3.2<br>k8s.gcr.io/etcd:3.4.13-0=gotok8s/etcd:3.4.13-0<br>$ ./load_images.sh<br></code></pre></td></tr></table></figure></li>
<li>启动docker desktop，并在dashboard中修改docker使用的资源大小。我分配了5G，
交换内存设置为4G，cpu数量为3</li>
<li>勾选<code>Enable Kubernetes</code>和<code>Show system containers (advanced)</code>，启动，然后耐心等待。</li>
</ol>
<p>需要等待的时间比较长，因为还会下载多个镜像,如<code>docker/desktop-kubernetes</code>等等。</p>
<h2 id="安装ingress-nginx-controller"><a href="#安装ingress-nginx-controller" class="headerlink" title="安装ingress-nginx-controller"></a>安装ingress-nginx-controller</h2><p>我们从ingress-nginx的官网可以看到不同的安装方式，对于 Docker for Mac，一行命令搞定</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes/i</span>ngress-nginx<span class="hljs-regexp">/master/</span>deploy<span class="hljs-regexp">/static/</span>provider<span class="hljs-regexp">/cloud/</span>deploy.yaml<br></code></pre></td></tr></table></figure>

<p>这个需要下载镜像<code>quay.io/kubernetes-ingress-controller/nginx-ingress-controller</code>，所以也需要时间。直到看到如下pods</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ingress</span>-nginx   ingress-nginx-admission-create-frllm       <span class="hljs-number">0</span>/<span class="hljs-number">1</span>     Completed   <span class="hljs-number">0</span>          <span class="hljs-number">56</span>m<br><span class="hljs-attribute">ingress</span>-nginx   ingress-nginx-admission-patch-gbwpd        <span class="hljs-number">0</span>/<span class="hljs-number">1</span>     Completed   <span class="hljs-number">0</span>          <span class="hljs-number">56</span>m<br><span class="hljs-attribute">ingress</span>-nginx   ingress-nginx-controller-<span class="hljs-number">8</span>f7b9d799-c67xw   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running     <span class="hljs-number">2</span>          <span class="hljs-number">56</span>m<br></code></pre></td></tr></table></figure>

<h2 id="跑一个Ingress的例子"><a href="#跑一个Ingress的例子" class="headerlink" title="跑一个Ingress的例子"></a>跑一个Ingress的例子</h2><p><a href="https://matthewpalmer.net/kubernetes-app-developer/articles/kubernetes-ingress-guide-nginx-example.html">Kubernetes Ingress with Nginx Example</a>中的yaml文件需要外网才能看到。</p>
<p>我在此列出三个yaml文件</p>
<p>apple.yaml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apple-app</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">apple</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">apple-app</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">hashicorp/http-echo</span><br>      <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;-text=apple&quot;</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">apple-service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">apple</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">5678</span> <span class="hljs-comment"># Default port for image</span><br></code></pre></td></tr></table></figure>

<p>banana.yaml :</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">banana-app</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">banana</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">banana-app</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">hashicorp/http-echo</span><br>      <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;-text=banana&quot;</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">banana-service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">banana</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">5678</span> <span class="hljs-comment"># Default port for image</span><br></code></pre></td></tr></table></figure>

<p>ingress.yaml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">example-ingress</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">ingress.kubernetes.io/rewrite-target:</span> <span class="hljs-string">/</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/apple</span><br>          <span class="hljs-attr">backend:</span><br>            <span class="hljs-attr">serviceName:</span> <span class="hljs-string">apple-service</span><br>            <span class="hljs-attr">servicePort:</span> <span class="hljs-number">5678</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/banana</span><br>          <span class="hljs-attr">backend:</span><br>            <span class="hljs-attr">serviceName:</span> <span class="hljs-string">banana-service</span><br>            <span class="hljs-attr">servicePort:</span> <span class="hljs-number">5678</span><br></code></pre></td></tr></table></figure>

<p>执行命令，等待一下。因为要下载一个镜像“jettech&#x2F;kube-webhook-certgen”</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> kubectl apply <span class="hljs-operator">-f</span> apple.yaml<br><span class="hljs-variable">$</span> kubectl apply <span class="hljs-operator">-f</span> banana.yaml<br><span class="hljs-variable">$</span> kubectl create <span class="hljs-operator">-f</span> ingress.yaml<br></code></pre></td></tr></table></figure>

<p>查看ingress</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">$ kubectl <span class="hljs-keyword">describe</span> ingress <span class="hljs-operator">-</span>n <span class="hljs-keyword">default</span> example<span class="hljs-operator">-</span>ingress<br>Name:             example<span class="hljs-operator">-</span>ingress<br>Namespace:        <span class="hljs-keyword">default</span><br>Address:          localhost<br><span class="hljs-keyword">Default</span> backend:  <span class="hljs-keyword">default</span><span class="hljs-operator">-</span>http<span class="hljs-operator">-</span>backend:<span class="hljs-number">80</span> (<span class="hljs-operator">&lt;</span>error: endpoints &quot;default-http-backend&quot; <span class="hljs-keyword">not</span> found<span class="hljs-operator">&gt;</span>)<br>Rules:<br>  Host        Path  Backends<br>  <span class="hljs-comment">----        ----  --------</span><br>  <span class="hljs-operator">*</span>           <br>              <span class="hljs-operator">/</span>apple    apple<span class="hljs-operator">-</span>service:<span class="hljs-number">5678</span> (<span class="hljs-number">10.1</span><span class="hljs-number">.0</span><span class="hljs-number">.30</span>:<span class="hljs-number">5678</span>)<br>              <span class="hljs-operator">/</span>banana   banana<span class="hljs-operator">-</span>service:<span class="hljs-number">5678</span> (<span class="hljs-number">10.1</span><span class="hljs-number">.0</span><span class="hljs-number">.28</span>:<span class="hljs-number">5678</span>)<br>Annotations:  ingress.kubernetes.io<span class="hljs-operator">/</span>rewrite<span class="hljs-operator">-</span>target: <span class="hljs-operator">/</span><br>Events:<br>  Type    Reason  Age   <span class="hljs-keyword">From</span>                      Message<br>  <span class="hljs-comment">----    ------  ----  ----                      -------</span><br>  Normal  <span class="hljs-keyword">CREATE</span>  <span class="hljs-number">45</span>m   nginx<span class="hljs-operator">-</span>ingress<span class="hljs-operator">-</span>controller  Ingress <span class="hljs-keyword">default</span><span class="hljs-operator">/</span>example<span class="hljs-operator">-</span>ingress<br>  Normal  <span class="hljs-keyword">UPDATE</span>  <span class="hljs-number">44</span>m   nginx<span class="hljs-operator">-</span>ingress<span class="hljs-operator">-</span>controller  Ingress <span class="hljs-keyword">default</span><span class="hljs-operator">/</span>example<span class="hljs-operator">-</span>ingress<br>  Normal  <span class="hljs-keyword">CREATE</span>  <span class="hljs-number">14</span>m   nginx<span class="hljs-operator">-</span>ingress<span class="hljs-operator">-</span>controller  Ingress <span class="hljs-keyword">default</span><span class="hljs-operator">/</span>example<span class="hljs-operator">-</span>ingress<br></code></pre></td></tr></table></figure>

<p>最后测试</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs crystal"><br><span class="hljs-variable">$ </span>curl -kL <span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/localhost/apple</span><br>apple<br><br><span class="hljs-variable">$ </span>curl -kL <span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/localhost/banana</span><br>banana<br><br><span class="hljs-variable">$ </span>curl -kL <span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/localhost/notfound</span><br>default backend - <span class="hljs-number">404</span><br><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>k8s</tag>
        <tag>ingress</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Spring Integration实现文件写入</title>
    <url>/2020/08/14/write-file-with-spring-integration/</url>
    <content><![CDATA[<h2 id="Spring-Integration是什么"><a href="#Spring-Integration是什么" class="headerlink" title="Spring Integration是什么"></a>Spring Integration是什么</h2><p>Spring Integration是一个出现了10年的技术。随便搜索一下，就能看到历史的久远，但是实际项目中用的人很少？原因是什么呢？</p>
<span id="more"></span>

<p>难！很难！</p>
<p>因为Spring Integration已经是一套DSL了。所以学习它就是学习一种新的语言，一种新的编程范式。</p>
<h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p>就拿最简单的一个使用，如何写入一个文件，Google了几遍只能找到Spring的官方文档中的例子。如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@IntegrationComponentScan</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileWritingJavaApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span><br>                      <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplicationBuilder</span>(FileWritingJavaApplication.class)<br>                              .web(<span class="hljs-literal">false</span>)<br>                              .run(args);<br>             <span class="hljs-type">MyGateway</span> <span class="hljs-variable">gateway</span> <span class="hljs-operator">=</span> context.getBean(MyGateway.class);<br>             gateway.writeToFile(<span class="hljs-string">&quot;foo.txt&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(tmpDir.getRoot(), <span class="hljs-string">&quot;fileWritingFlow&quot;</span>), <span class="hljs-string">&quot;foo&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ServiceActivator(inputChannel = &quot;writeToFileChannel&quot;)</span><br>    <span class="hljs-keyword">public</span> MessageHandler <span class="hljs-title function_">fileWritingMessageHandler</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-type">Expression</span> <span class="hljs-variable">directoryExpression</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>().parseExpression(<span class="hljs-string">&quot;headers.directory&quot;</span>);<br>         <span class="hljs-type">FileWritingMessageHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWritingMessageHandler</span>(directoryExpression);<br>         handler.setFileExistsMode(FileExistsMode.APPEND);<br>         <span class="hljs-keyword">return</span> handler;<br>    &#125;<br><br>    <span class="hljs-meta">@MessagingGateway(defaultRequestChannel = &quot;writeToFileChannel&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyGateway</span> &#123;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeToFile</span><span class="hljs-params">(<span class="hljs-meta">@Header(FileHeaders.FILENAME)</span> String fileName,</span><br><span class="hljs-params">                       <span class="hljs-meta">@Header(FileHeaders.FILENAME)</span> File directory, String data)</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>可是一运行发现根本跑不起来，而且问题不止一处。</p>
<h2 id="完整的例子"><a href="#完整的例子" class="headerlink" title="完整的例子"></a>完整的例子</h2><p>我先给出修改后的可以正常运行的代码吧。可以和上面的比较一下，差别有好几处。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@IntegrationComponentScan</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileWriteConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MessageChannel <span class="hljs-title function_">writeToFileChannel</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DirectChannel</span> <span class="hljs-variable">directChannel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectChannel</span>();<br>        directChannel.subscribe(fileWritingMessageHandler());<br>        <span class="hljs-keyword">return</span> directChannel;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MessageHandler <span class="hljs-title function_">fileWritingMessageHandler</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">directoryExpression</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>().parseExpression(<span class="hljs-string">&quot;headers.directory&quot;</span>);<br>        <span class="hljs-type">FileWritingMessageHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWritingMessageHandler</span>(directoryExpression);<br>        handler.setFileExistsMode(FileExistsMode.REPLACE);<br>        <span class="hljs-comment">//https://stackoverflow.com/questions/29274479/spring-integration-no-output-channel-or-replychannel-header-available</span><br>        handler.setExpectReply(<span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">return</span> handler;<br>    &#125;<br><br>    <span class="hljs-meta">@MessagingGateway(defaultRequestChannel = &quot;writeToFileChannel&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">FileWriteGateway</span> &#123;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeToFile</span><span class="hljs-params">(<span class="hljs-meta">@Header(FileHeaders.FILENAME)</span> String fileName,</span><br><span class="hljs-params">                         <span class="hljs-meta">@Header(&quot;directory&quot;)</span> File directory,</span><br><span class="hljs-params">                         String data)</span>;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>然后写一个测试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(classes = Application.class)</span><br><span class="hljs-meta">@WebAppConfiguration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileWriteGatewayTest</span> &#123;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;SpringJavaInjectionPointsAutowiringInspection&quot;)</span><br>    <span class="hljs-meta">@Autowired</span><br>    FileWriteConfig.FileWriteGateway gateway;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        gateway.writeToFile(<span class="hljs-string">&quot;foo.txt&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/ym/tmp/&quot;</span>), <span class="hljs-string">&quot;fff&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>用法非常简单。但是配置却花了好长时间。但是只有通过使用才能慢慢理解这个框架。</p>
<p>写代码是不是像搭积木，像玩<code>magspace</code>。</p>
]]></content>
      <tags>
        <tag>spring</tag>
        <tag>integration</tag>
        <tag>write</tag>
        <tag>file</tag>
      </tags>
  </entry>
  <entry>
    <title>ASN.1语言规范介绍</title>
    <url>/2020/11/08/asn-1/</url>
    <content><![CDATA[<h2 id="ASN-1介绍"><a href="#ASN-1介绍" class="headerlink" title="ASN.1介绍"></a>ASN.1介绍</h2><p><code>X.509</code>证书常用的编码方式有DER格式和PEM格式。证书是一个对象的话，那么需要一个描述这个对象的语言。ASN.1就是这样的一个语言规范。而DER是ASN.1编码的一种方式。如果要解析DER编码文件，就需要了解ASN.1语言规范的编解码。</p>
<span id="more"></span>

<p>ASN.1（Abstract Syntax Notation One）是OSI（Open Source Interconnection）使用的描述对象的语言规范。OSI是X.200中定义的。而ASN.1是X.208中描述的。</p>
<p>下面是一个ASN.1的例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs asn.1">Foo DEFINITIONS ::= BEGIN<br><br>    Question ::= SEQUENCE &#123;<br>        id        INTEGER,<br>        question  IA5String<br>    &#125;<br><br>    Answer ::= SEQUENCE &#123;<br>        id        INTEGER,<br>        answer    BOOLEAN<br>    &#125;<br><br>END<br></code></pre></td></tr></table></figure>

<h2 id="以一个证书分析ASN-1语法"><a href="#以一个证书分析ASN-1语法" class="headerlink" title="以一个证书分析ASN.1语法"></a>以一个证书分析ASN.1语法</h2><p>以下是一个<code>PEM</code>格式的证书。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">-----BEGIN CERTIFICATE-----<br><br>MIIFwTCCA6mgAwIBAgIUNQk34EiXUjqgxnfhOZtv6zxIiekwDQYJKoZIhvcNAQEN<br><br>BQAwcDELMAkGA1UEBhMCQ04xEDAOBgNVBAgMB0JlaWppbmcxEDAOBgNVBAcMB0Jl<br><br>aWppbmcxEDAOBgNVBAoMB2V4YW1wbGUxETAPBgNVBAsMCFBlcnNvbmFsMRgwFgYD<br><br>VQQDDA9yZXBvLmVubmlvdC5uZXQwHhcNMjAwODExMDMwMzE0WhcNMzAwODA5MDMw<br><br>MzE0WjBwMQswCQYDVQQGEwJDTjEQMA4GA1UECAwHQmVpamluZzEQMA4GA1UEBwwH<br><br>QmVpamluZzEQMA4GA1UECgwHZXhhbXBsZTERMA8GA1UECwwIUGVyc29uYWwxGDAW<br><br>BgNVBAMMD3JlcG8uZW5uaW90Lm5ldDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCC<br><br>AgoCggIBAN6xDFkixeboRBjaVLi1/IjCfHvGS2xGihWrx2dN9jXIZWQqU2Lw8rLy<br><br>yzrnzSEJDRcUFGaXpRagHTYJPhcr31Sa4OkCsoorwElagcOOPQXAc1A87vBk1+r/<br><br>3eQu+IPGjr+3DU/yqNNuaq0CZgDDww9ttbyTb8JxZweXdAMjK0D7LiNCkpvwM1l6<br><br>ylVl9o5+ACA34qb81IyVAsGFSHP/ukcFIaC79Zf/7p3Tjm4uRkAdtQYJGwA0Oafk<br><br>HbPaPLOHPJdi+3+a/OmmBJamxyWXF9pJ/BRrxFrqtssnAhIyPsNqKsPDCknJOzwS<br><br>6vdTVsuMkLMUbc0OK1dSIulXxZaea+jXcZMYWUA4ZDNdo1SrMg3Vvj/CrLWgm7b0<br><br>T1Wb8tXsr2NUNoacMzDgN41Kz7Ht57LQURaFf9rzjqACHVYfj/Ad8/PmgA6V3Dc3<br><br>gvMvqOoyp2iic1xQ2GcIItHvqD4YwBSdtyxJc1N5llNBF7A6+JWVc0kJpOQCDKVb<br><br>U+0Py6ugnbb/pQ89/4zXXWyuTQO0BGULoHCo0++eF+pLcW6LstQNSUYxYRr4tmLr<br><br>sbUJFPoFcHXdQ9F8I2rBXdKCePHDBPQ2HexhANUWnRQdjtnYG9UQRQaDVKiCXUMj<br><br>9f6ixjN9DAz+SqndPksE0Ux0cgfkTEfi9N+5c7rCxzZYgH8UlFiDAgMBAAGjUzBR<br><br>MB0GA1UdDgQWBBRaOW9HUg7eACHGDuPMcc/k7nPmbjAfBgNVHSMEGDAWgBRaOW9H<br><br>Ug7eACHGDuPMcc/k7nPmbjAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBDQUA<br><br>A4ICAQCu1kx2rnRp9oiPw3Y2WuJ2hnzkMTUGPv4rpX0hgVSLNAEiDEvujz/pnHaJ<br><br>83+JZuMHebAQnWHXVaUdmzn7Yw9WsZoXu15st0WMOAC8cUZ4uD0t1osPJTSuc3hA<br><br>F0ZG3tHzuJBpX4T6pVrZ3jJvuY5vGJGCMwRdS4V7e6wQmLjzqf3oq05y9JlvKBYX<br><br>JdU69BynZ1vEtUuC91WJTTvlqLtbAS6LTSmnSYWscNpP4KOTXNfdf8HlKFRKGR2e<br><br>cVyAXu9bA89HeEeG8ztceyD2GO+S7xBNuZRV11Oi2xO59rJJAzzrIO1W8oda5lac<br><br>JVRI+n8w+hLG+bbq+24s9tVB0MBZj3/honpYRLOYMAT507YlOvDPjreudYHWJSLG<br><br>cTjRH0dtIgqbi8uTH3iJ2yWTq92OfGSSERofVdSOPrlzH5GpkpeIoRcYlP1KLnIy<br><br>wxlI4E7W50PX5rMKMIp4/p6ALgA7psuC7ZTzk3f7R/tmHBSNb5JiSbp7MjI+iVRE<br><br>zZX73VW1nLf4YaSS+MYNudAQl0ZoUvK3f0QEj4NwzRjDkdsUKI+X7Q2p03foBMCU<br><br>4ijSDMvjyn3JEvT878Fxh7KB4IbZKh3kj9RetGaGEljjgv/Pg3h2gu+GNPgk30xJ<br><br>TfK5QkRaYenm9aWKpHHf4hpUQlMKawxdS1k+3gVGwWu8YM/a0A==<br><br>-----END CERTIFICATE-----<br></code></pre></td></tr></table></figure>

<p>对这个证书进行解析的方法是用一个在线的工具 <a href="http://lapo.it/asn1js/">http://lapo.it/asn1js/</a>。</p>
<p>可以把上面base64编码的证书复制到网站解码之后，可以看到类似如下的结果。</p>
<p><img src="/images/2020-11-09.jpg" alt="cert-parse"></p>
<p>ASN.1的编码基本上遵循的是<code>type+length+value</code>的方式。</p>
<p>ASN.1的数据tag大概有以下几种，</p>
<table>
<thead>
<tr>
<th>type</th>
<th>tagNumber</th>
</tr>
</thead>
<tbody><tr>
<td>Boolean</td>
<td>0x01</td>
</tr>
<tr>
<td>Integer</td>
<td>0x02</td>
</tr>
<tr>
<td>BitString</td>
<td>0x03</td>
</tr>
<tr>
<td>OctetString</td>
<td>0x04</td>
</tr>
<tr>
<td>Null</td>
<td>0x05</td>
</tr>
<tr>
<td>ObjectIdentifier</td>
<td>0x06</td>
</tr>
<tr>
<td>Enumerated</td>
<td>0x0a</td>
</tr>
<tr>
<td>UTF8String</td>
<td>0x0c</td>
</tr>
<tr>
<td>Sequence</td>
<td>0x10</td>
</tr>
<tr>
<td>Set</td>
<td>0x11</td>
</tr>
<tr>
<td>PrintableString</td>
<td>0x13</td>
</tr>
<tr>
<td>IA5String</td>
<td>0x16</td>
</tr>
<tr>
<td>UTCTime</td>
<td>0x17</td>
</tr>
<tr>
<td>UnicodeString</td>
<td>0x1e</td>
</tr>
</tbody></table>
<p>那么具体看一下以上ca证书的前四个字节是什么含义。</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">30 </span><span class="hljs-number">82</span> <span class="hljs-number">05</span> C1<br></code></pre></td></tr></table></figure>

<ol>
<li><p>首先看是什么type。第一个字节<code>0x30</code>描述了type信息。tagClass &#x3D; 0x30 &gt;&gt; 6 &#x3D; 0 ，表示<code>universal isConstructed = 0x30 &amp; 0x20 = True</code>，对于<code>sequence</code>基本都是true,
<code>tagNumber = 0x30 &amp; 0x1F = 0x10</code> ，因此对应的<code>Sequence</code></p>
</li>
<li><p>接下来计算长度。
第二个字节为<code>0x82</code>,
分两种情况，判断表达式，<code>byte &amp; 0x7F == byte</code> 如果为true就是小于127。否则就是大于127。</p>
</li>
</ol>
<ul>
<li>长度是小于127(short form)
那么该该字节就是length，之后就是value的内容。</li>
<li>长度大于127(long form)，
byte &amp; 0x7F 表示length的编码长度。</li>
</ul>
<p>对于以上的例子，<code>0x82</code>是long form
因为 </p>
<figure class="highlight hy"><table><tr><td class="code"><pre><code class="hljs hy">( <span class="hljs-number">0</span>x82 == (<span class="hljs-number">0</span>x82 &amp; <span class="hljs-number">0</span>x7F) = <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure>
<p>那么表示长度的字节数量是 </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x82</span> &amp; <span class="hljs-number">0</span>x7F = <span class="hljs-number">0</span>x2<br></code></pre></td></tr></table></figure>
<p>因此’0x82’之后的两个字节’0x05’和’0xC1’组成长度。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">0x05C1</span> = <span class="hljs-number">1473</span> <br></code></pre></td></tr></table></figure>
<p>两个字节表示value的长度1473。</p>
<p>因此，</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">30 </span><span class="hljs-number">82</span> <span class="hljs-number">05</span> C1<br></code></pre></td></tr></table></figure>
<p>这个头四个字节的含义是，这个是<code>Sequence</code>类型，
长度是1473，这四节之后的1473个字节就是<code>Sequence</code>类型的值。</p>
]]></content>
      <tags>
        <tag>X.509</tag>
        <tag>ASN.1</tag>
      </tags>
  </entry>
  <entry>
    <title>k3s的Pod无法解析内网域名</title>
    <url>/2021/12/26/pod-resolve-dn/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>jetson tx2开发板上安装了<code>docker</code>和<code>k3s</code>，部署了一个pod，发现日志报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs log">&quot;dial tcp: lookup esmp-cloud-sync.dev.ennew.com on 10.43.0.10:53: no such host&quot;<br></code></pre></td></tr></table></figure>
<p>其中<code>esmp-cloud-sync.dev.ennew.com</code>是内网域名，说明pod无法解析该域名。</p>
<span id="more"></span>

<p>但是宿主机上能ping通该域名。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>os : ubuntu18.04</li>
<li>k3s: v1.18.9+k3s1</li>
<li>cpu arch : arm64</li>
<li>coreDNS: 1.6.9</li>
</ul>
<h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><p>首先检查宿主机的域名服务器设置。
如果不正常，则需要设置正确的域名服务器。并重启k3s服务和pod。
如果正常，则进一步检查k3s的DNS设置。而k3s的网络域名解析是由coreDNS控制的。</p>
<h3 id="查看宿主机的DNS设置"><a href="#查看宿主机的DNS设置" class="headerlink" title="查看宿主机的DNS设置"></a>查看宿主机的DNS设置</h3><p>宿主机的DNS设置，查看<code>/etc/resolv.conf</code> </p>
<pre><code class="hljs">$ cat /etc/resolv.conf 
# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
# 127.0.0.53 is the systemd-resolved stub resolver.
# run &quot;systemd-resolve --status&quot; to see details about the actual nameservers.

nameserver 127.0.0.53
search addom.xinaogroup.com
</code></pre>
<p>运行”systemd-resolve –status”查看实际的nameservers。</p>
<pre><code class="hljs">$ systemd-resolve --status
...
      DNS Servers: 10.36.8.40
                    10.36.8.41
                    127.0.0.1
        DNS Domain: ~.
                    addom.xinaogroup.com 
...
</code></pre>
<p>可以看到实际的域名服务器。pod里无法ping通的域名<code>esmp-cloud-sync.dev.ennew.com</code>，在宿主机环境是可以的。</p>
<h3 id="查看pod的DNS设置"><a href="#查看pod的DNS设置" class="headerlink" title="查看pod的DNS设置"></a>查看pod的DNS设置</h3><p>pod的DNS设置是由<code>CoreDNS</code>控制的。但是进入CoreDNS的pod，使用<code>kubectl exec</code>是不行的。需要使用边车模式，
先查看运行CoreDNS的容器的ID，然后用docker再启动一个容器。（因为k3s server是基于dockerd运行的，所以
可以用docker ps查看CoreDNS pod里的容器）</p>
<pre><code class="hljs">docker ps | grep coredns
ID=8afb33b91c9f
docker run -it --net=container:$ID --pid=container:$ID --volumes-from=$ID alpine sh
</code></pre>
<p>然后就可以查看CoreDNS的corefile配置文件</p>
<pre><code class="hljs"># cat /etc/coredns/Corefile 
.:53 &#123;
    errors
    health
    ready
    kubernetes cluster.local in-addr.arpa ip6.arpa &#123;
      pods insecure
      upstream
      fallthrough in-addr.arpa ip6.arpa
    &#125;
    hosts /etc/coredns/NodeHosts &#123;
      reload 1s
      fallthrough
    &#125;
    prometheus :9153
    forward . /etc/resolv.conf
    cache 30
    loop
    reload
    loadbalance
&#125;
</code></pre>
<p>从<code>forward . /etc/resolv.conf</code> 可以看出，由<code>/etc/resolv.conf</code>文件接管DNS设置。进一步查看该文件，</p>
<pre><code class="hljs">  # cat /etc/resolv.conf 
  nameserver 8.8.8.8
</code></pre>
<p>可以发现这里设置的<code>nameserver</code>是<code>8.8.8.8</code>，而不是<code>10.36.8.40</code>。因此在pod里虽然可以ping通公网域名
，例如<code>www.baidu.com</code>，但是无法ping通内网域名<code>esmp-cloud-sync.dev.ennew.com</code></p>
<p>另外查看CoreDNS的pod日志也可以看到无法解析内网域名<code>esmp-cloud-sync.dev.ennew.com</code>的错误。</p>
<h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>从排查结果可以看到，主要问题在于CoreDNS的DSN设置与宿主机的DNS设置不同，导致解析内网域名解析失败。这一点比较奇怪，通常k3s默认
会继承宿主机的DNS设置。</p>
<p>也就是pod里的<code>/etc/resolv.conf</code>，没有与宿主机的<code>/etc/resolv.conf</code>的内容一致。</p>
<p>再回头看看我们要解决的问题——pod里解析内网域名，那么最直接的方案就是修改CoreDNS的Corefile，
修改<code>forward . /etc/resolv.conf</code> 为<code>forward . 10.36.8.40</code> </p>
<p>但是这种方法的缺点是显而易见的，写死了。 我们还是希望找到一个方法能够令<code>/etc/resolv.conf</code>与宿主机的<code>/etc/resolv.conf</code>的内容一致</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>宿主机的<code>/etc/resolv.conf</code>文件是一个指向 <code>/run/systemd/resolve/resolv.conf</code>的软链接，查看该文件的内容</p>
<pre><code class="hljs">$ cat /run/systemd/resolve/resolv.conf
# This file is managed by man:systemd-resolved(8). Do not edit.
#
# This is a dynamic resolv.conf file for connecting local clients directly to
# all known uplink DNS servers. This file lists all configured search domains.
#
# Third party programs must not access this file directly, but only through the
# symlink at /etc/resolv.conf. To manage man:resolv.conf(5) in a different way,
# replace this symlink by a static file or a different symlink.
#
# See man:systemd-resolved.service(8) for details about the supported modes of
# operation for /etc/resolv.conf.

nameserver 10.36.8.40
nameserver 10.36.8.41
nameserver 127.0.0.1
search addom.xinaogroup.com
</code></pre>
<p>可以看到含有正确的nameservers。</p>
<p>另外 k3s 有启动参数<code>--resolv-conf</code>,可以指定默认的<code>resolv.conf</code>。</p>
<p>修改<code>/etc/systemd/system/k3s.service</code>，增加启动参数<code>--resolv-conf  /run/systemd/resolve/resolv.conf</code></p>
<pre><code class="hljs">...
ExecStart=/usr/local/bin/k3s \
server \
&#39;--docker&#39; \
&#39;--write-kubeconfig&#39; \
&#39;/home/tx2/.kube/config&#39; \
&#39;--write-kubeconfig-mode&#39; \
&#39;666&#39; \
&#39;--resolv-conf&#39; \
&#39;/run/systemd/resolve/resolv.conf&#39;
</code></pre>
<p>然后重新启动k3s，并且删除CoreDNS的pod（<code>kubectl delete pod -n kube-system coredns-xxxx</code>），令其自动创建一个新的pod。</p>
<p>这时候再查看CoreDNS pod里的&#x2F;etc&#x2F;resolv.conf, 内容一致了，</p>
<pre><code class="hljs">/ # cat /etc/resolv.conf
nameserver 10.36.8.40
nameserver 10.36.8.41
nameserver 127.0.0.1
search addom.xinaogroup.com
</code></pre>
<p>问题解决了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/weixin_34248258/article/details/92926584">完美解决K8s中的Pod无法解析外网域名问题</a></li>
<li><a href="http://www.mydlq.club/article/78/">解决 Kubernetes 中 Pod 无法正常域名解析问题分析与 IPVS parseIP Error 问题</a></li>
<li><a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/dns-debugging-resolution/">调试 DNS 问题</a></li>
<li><a href="https://linux-rtdocs.readthedocs.io/en/latest/k8s/coreDNS%E6%B7%BB%E5%8A%A0%E9%9D%99%E6%80%81DNS%E7%9A%84%E6%96%B9%E6%B3%95/">coredns添加静态DNS的方法</a></li>
<li><a href="https://www.xknote.com/ask/a0_1IQH.html">K3S Rancher - 基于 Debian 的 docker 镜像无法正确解析 dns</a></li>
</ul>
]]></content>
      <tags>
        <tag>k3s</tag>
        <tag>docker</tag>
        <tag>pod</tag>
        <tag>coredns</tag>
      </tags>
  </entry>
  <entry>
    <title>CLion2021调试Makefile项目</title>
    <url>/2021/07/15/2021-7-15-clion-makefile-debug/</url>
    <content><![CDATA[<h2 id="CLion介绍"><a href="#CLion介绍" class="headerlink" title="CLion介绍"></a>CLion介绍</h2><p><code>CLion</code>是一款针对C&#x2F;C++项目的跨平台的集成IDE（A cross-platform IDE for C and C++）。2020版本以前，只支持cmake项目，
但是2021版本对Makefile项目的支持度增加了。我们看看如何对Makefile项目进行断点调试。</p>
<span id="more"></span>

<p>我们用一个实际的项目作为例子。</p>
<h2 id="Go1-4源码"><a href="#Go1-4源码" class="headerlink" title="Go1.4源码"></a>Go1.4源码</h2><p>Go语言项目从源码编译有几种方式，其中一种方式是基于<a href="https://golang.org/doc/install/source#bootstrapFromSource">Bootstrap toolchain from C source code</a>,
也就是说，首先编译Go 1.4版本，然后用编译出来的<code>Go</code>，编译最新的Go版本。(<strong>UPDATE: Mac12.1 Monterey系统上不支持</strong>)</p>
<p>那么我下载这个Go1.4版本，<a href="https://dl.google.com/go/go1.4-bootstrap-20171003.tar.gz">go1.4-bootstrap-20171003.tar.gz</a>，
解压到某个路径下。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">~/work/go1.4/ <span class="hljs-keyword">ls</span>          <br>AUTHORS      LICENSE      README       api          doc          <span class="hljs-keyword">include</span>      misc         robots.txt   <span class="hljs-keyword">test</span><br>CONTRIBUTORS PATENTS      <span class="hljs-keyword">VERSION</span>      bin          favicon.ico  lib          pkg          src<br></code></pre></td></tr></table></figure>

<p>进入src路径下，运行make.bash文件，则开始编译。（当然需要build相关的工具）。为了看清楚bash脚本执行的内容，我们修改make.bash的
第一行改为 <code>set -ex</code>, 这样会打印详细的执行内容如下，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">g1.4/src/ $  ./make.bash <br>+ <span class="hljs-string">&#x27;[&#x27;</span> <span class="hljs-string">&#x27;!&#x27;</span> -f run.bash <span class="hljs-string">&#x27;]&#x27;</span><br>+ <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(uname)</span>&quot;</span> <span class="hljs-keyword">in</span><br>++ <span class="hljs-built_in">uname</span><br>+ ld --version<br>+ grep <span class="hljs-string">&#x27;gold.* 2\.20&#x27;</span><br>+ <span class="hljs-keyword">for</span> se_mount <span class="hljs-keyword">in</span> /selinux /sys/fs/selinux<br>+ <span class="hljs-string">&#x27;[&#x27;</span> -d /selinux -a -f /selinux/booleans/allow_execstack -a -x /usr/sbin/selinuxenabled <span class="hljs-string">&#x27;]&#x27;</span><br>+ <span class="hljs-keyword">for</span> se_mount <span class="hljs-keyword">in</span> /selinux /sys/fs/selinux<br>+ <span class="hljs-string">&#x27;[&#x27;</span> -d /sys/fs/selinux -a -f /sys/fs/selinux/booleans/allow_execstack -a -x /usr/sbin/selinuxenabled <span class="hljs-string">&#x27;]&#x27;</span><br>++ <span class="hljs-built_in">uname</span> -s<br>+ <span class="hljs-string">&#x27;[&#x27;</span> Darwin == GNU/kFreeBSD <span class="hljs-string">&#x27;]&#x27;</span><br>+ <span class="hljs-built_in">rm</span> -f ./runtime/runtime_defs.go<br>+ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;# Building C bootstrap tool.&#x27;</span><br><span class="hljs-comment"># Building C bootstrap tool.</span><br>+ <span class="hljs-built_in">echo</span> cmd/dist<br>cmd/dist<br>++ <span class="hljs-built_in">cd</span> ..<br>++ <span class="hljs-built_in">pwd</span><br>+ <span class="hljs-built_in">export</span> GOROOT=/Users/ym/work/go1.4<br>+ GOROOT=/Users/ym/work/go1.4<br>+ GOROOT_FINAL=/Users/ym/work/go1.4<br>+ DEFGOROOT=<span class="hljs-string">&#x27;-DGOROOT_FINAL=&quot;/Users/ym/work/go1.4&quot;&#x27;</span><br>+ mflag=<br>+ <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$GOHOSTARCH</span>&quot;</span> <span class="hljs-keyword">in</span><br>++ <span class="hljs-built_in">uname</span><br>+ <span class="hljs-string">&#x27;[&#x27;</span> Darwin == Darwin <span class="hljs-string">&#x27;]&#x27;</span><br>+ mflag=<span class="hljs-string">&#x27; -mmacosx-version-min=10.6&#x27;</span><br>++ <span class="hljs-built_in">type</span> -t gcc<br>++ <span class="hljs-built_in">type</span> -t clang<br>+ <span class="hljs-string">&#x27;[&#x27;</span> -z <span class="hljs-string">&#x27;&#x27;</span> -a -z file -a -n file <span class="hljs-string">&#x27;]&#x27;</span><br>+ gcc -mmacosx-version-min=10.6 -O2 -Wall -Werror -o cmd/dist/dist -Icmd/dist <span class="hljs-string">&#x27;-DGOROOT_FINAL=&quot;/Users/ym/work/go1.4&quot;&#x27;</span> cmd/dist/arm.c cmd/dist/buf.c cmd/dist/build.c cmd/dist/buildgc.c cmd/dist/buildgo.c cmd/dist/buildruntime.c cmd/dist/main.c cmd/dist/plan9.c cmd/dist/unix.c cmd/dist/windows.c<br>++ ./cmd/dist/dist <span class="hljs-built_in">env</span> -p<br>+ <span class="hljs-built_in">eval</span> <span class="hljs-string">&#x27;CC=&quot;clang&quot;&#x27;</span> <span class="hljs-string">&#x27;CC_FOR_TARGET=&quot;clang&quot;&#x27;</span> <span class="hljs-string">&#x27;GOROOT=&quot;/Users/ym/work/go1.4&quot;&#x27;</span> <span class="hljs-string">&#x27;GOBIN=&quot;/Users/ym/me/go/test/bin&quot;&#x27;</span> <span class="hljs-string">&#x27;GOARCH=&quot;amd64&quot;&#x27;</span> <span class="hljs-string">&#x27;GOOS=&quot;darwin&quot;&#x27;</span> <span class="hljs-string">&#x27;GOHOSTARCH=&quot;amd64&quot;&#x27;</span> <span class="hljs-string">&#x27;GOHOSTOS=&quot;darwin&quot;&#x27;</span> <span class="hljs-string">&#x27;GOTOOLDIR=&quot;/Users/ym/work/go1.4/pkg/tool/darwin_amd64&quot;&#x27;</span> <span class="hljs-string">&#x27;GOCHAR=&quot;6&quot;&#x27;</span> <span class="hljs-string">&#x27;PATH=&quot;/Users/ym/me/go/test/bin:/usr/local/opt/openssl@1.1/bin:/usr/local/opt/postgresql@12/bin:/Users/ym/work/go1.4/bin:/usr/local/Homebrew/bin:/usr/local/sbin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/usr/local/share/dotnet:~/.dotnet/tools:/Library/Apple/usr/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/ym/mybin/apache-maven-3.6.0/bin:/Users/ym/me/go/test/bin:/Users/ym/.rvm/bin:/Users/ym/mybin/spark-2.4.3-bin-hadoop2.7/bin/&quot;&#x27;</span><br>++ CC=clang<br>++ CC_FOR_TARGET=clang<br>++ GOROOT=/Users/ym/work/go1.4<br>++ GOBIN=/Users/ym/me/go/test/bin<br>++ GOARCH=amd64<br>++ GOOS=darwin<br>++ GOHOSTARCH=amd64<br>++ GOHOSTOS=darwin<br>++ GOTOOLDIR=/Users/ym/work/go1.4/pkg/tool/darwin_amd64<br>++ GOCHAR=6<br>++ PATH=<span class="hljs-string">&#x27;/Users/ym/me/go/test/bin:/usr/local/opt/openssl@1.1/bin:/usr/local/opt/postgresql@12/bin:/Users/ym/work/go1.4/bin:/usr/local/Homebrew/bin:/usr/local/sbin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/usr/local/share/dotnet:~/.dotnet/tools:/Library/Apple/usr/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/ym/mybin/apache-maven-3.6.0/bin:/Users/ym/me/go/test/bin:/Users/ym/.rvm/bin:/Users/ym/mybin/spark-2.4.3-bin-hadoop2.7/bin/&#x27;</span><br>+ <span class="hljs-string">&#x27;[&#x27;</span> <span class="hljs-string">&#x27;&#x27;</span> = <span class="hljs-literal">true</span> <span class="hljs-string">&#x27;]&#x27;</span><br>+ <span class="hljs-built_in">echo</span><br><br>+ <span class="hljs-string">&#x27;[&#x27;</span> <span class="hljs-string">&#x27;&#x27;</span> = --dist-tool <span class="hljs-string">&#x27;]&#x27;</span><br>+ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;# Building compilers and Go bootstrap tool for host, darwin/amd64.&#x27;</span><br><span class="hljs-comment"># Building compilers and Go bootstrap tool for host, darwin/amd64.</span><br>+ buildall=-a<br>+ <span class="hljs-string">&#x27;[&#x27;</span> <span class="hljs-string">&#x27;&#x27;</span> = --no-clean <span class="hljs-string">&#x27;]&#x27;</span><br>+ ./cmd/dist/dist bootstrap -a -v<br>lib9<br>libbio<br>liblink<br>cmd/cc<br>cmd/gc<br>cmd/6l<br>/Users/ym/work/go1.4/src/cmd/6l/../ld/dwarf.c:1479:15: warning: implicit conversion from <span class="hljs-string">&#x27;int&#x27;</span> to <span class="hljs-string">&#x27;char&#x27;</span> changes value from 156 to -100 [-Wconstant-conversion]<br>/Users/ym/work/go1.4/src/cmd/6l/../ld/dwarf.c:1763:21: warning: implicit conversion from <span class="hljs-string">&#x27;int&#x27;</span> to <span class="hljs-string">&#x27;char&#x27;</span> changes value from 144 to -112 [-Wconstant-conversion]<br>/Users/ym/work/go1.4/src/cmd/6l/../ld/lib.h:168:13: note: expanded from macro <span class="hljs-string">&#x27;cput&#x27;</span><br>cmd/6a<br>cmd/6c<br>/Users/ym/work/go1.4/src/cmd/6c/txt.c:995:28: warning: shifting a negative signed value is undefined [-Wshift-negative-value]<br>/Users/ym/work/go1.4/src/cmd/6c/txt.c:1045:28: warning: shifting a negative signed value is undefined [-Wshift-negative-value]<br>cmd/6g<br>/Users/ym/work/go1.4/src/cmd/6g/peep.c:771:13: warning: converting the enum constant to a boolean [-Wint-in-bool-context]<br>runtime<br>errors<br><span class="hljs-built_in">sync</span>/atomic<br><span class="hljs-built_in">sync</span><br>io<br>unicode<br>unicode/utf8<br>unicode/utf16<br>bytes<br>math<br>strings<br>strconv<br>bufio<br><span class="hljs-built_in">sort</span><br>container/heap<br>encoding/base64<br>syscall<br>time<br>os<br>reflect<br><span class="hljs-built_in">fmt</span><br>encoding<br>encoding/json<br>flag<br>path/filepath<br>path<br>io/ioutil<br><span class="hljs-built_in">log</span><br>regexp/syntax<br>regexp<br>go/token<br>go/scanner<br>go/ast<br>go/parser<br>os/exec<br>os/signal<br>net/url<br>text/template/parse<br>text/template<br>go/doc<br>go/build<br>cmd/go<br>+ <span class="hljs-built_in">cp</span> cmd/dist/dist /Users/ym/work/go1.4/pkg/tool/darwin_amd64/dist<br>+ /Users/ym/work/go1.4/pkg/tool/darwin_amd64/go_bootstrap clean -i std<br>+ <span class="hljs-built_in">echo</span><br><br>+ <span class="hljs-string">&#x27;[&#x27;</span> amd64 <span class="hljs-string">&#x27;!=&#x27;</span> amd64 -o darwin <span class="hljs-string">&#x27;!=&#x27;</span> darwin <span class="hljs-string">&#x27;]&#x27;</span><br>+ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;# Building packages and commands for darwin/amd64.&#x27;</span><br><span class="hljs-comment"># Building packages and commands for darwin/amd64.</span><br>+ CC=clang<br>+ /Users/ym/work/go1.4/pkg/tool/darwin_amd64/go_bootstrap install -ccflags <span class="hljs-string">&#x27;&#x27;</span> -gcflags <span class="hljs-string">&#x27;&#x27;</span> -ldflags <span class="hljs-string">&#x27;&#x27;</span> -v std<br>runtime<br>errors<br><span class="hljs-built_in">sync</span>/atomic<br>unicode<br>unicode/utf8<br>math<br><span class="hljs-built_in">sort</span><br>encoding<br>unicode/utf16<br>container/list<br><span class="hljs-built_in">sync</span><br>crypto/subtle<br>container/ring<br>image/color<br>runtime/race<br>container/heap<br>io<br>syscall<br>image/color/palette<br><span class="hljs-built_in">hash</span><br>crypto/cipher<br><span class="hljs-built_in">hash</span>/crc32<br>crypto/hmac<br><span class="hljs-built_in">hash</span>/adler32<br><span class="hljs-built_in">hash</span>/crc64<br><span class="hljs-built_in">hash</span>/fnv<br>bytes<br>strings<br>bufio<br>text/tabwriter<br>path<br>html<br>compress/bzip2<br>time<br>strconv<br>math/rand<br>math/cmplx<br>os<br>reflect<br>regexp/syntax<br>crypto<br>encoding/base64<br>net/url<br>crypto/aes<br>crypto/rc4<br>crypto/md5<br>crypto/sha1<br>crypto/sha256<br>crypto/sha512<br>encoding/pem<br>encoding/ascii85<br>encoding/base32<br>image<br>path/filepath<br>net<br>os/signal<br>io/ioutil<br>os/exec<br>regexp<br>image/draw<br>image/jpeg<br><span class="hljs-built_in">fmt</span><br>encoding/binary<br>cmd/pprof/internal/svg<br>crypto/des<br>index/suffixarray<br>cmd/internal/goobj<br>cmd/internal/rsc.io/arm/armasm<br>cmd/internal/rsc.io/x86/x86asm<br>debug/dwarf<br>debug/gosym<br>debug/plan9obj<br>flag<br><span class="hljs-built_in">log</span><br>go/token<br>encoding/json<br>encoding/xml<br>text/template/parse<br>go/scanner<br>debug/elf<br>debug/macho<br>debug/pe<br>go/ast<br>compress/flate<br>text/template<br>math/big<br>encoding/hex<br>mime<br>net/textproto<br>cmd/internal/objfile<br>net/http/internal<br>compress/gzip<br>runtime/pprof<br>cmd/pack<br>cmd/pprof/internal/profile<br>cmd/pprof/internal/tempfile<br>archive/tar<br>archive/zip<br>cmd/addr2line<br>cmd/nm<br>crypto/elliptic<br>encoding/asn1<br>crypto/rand<br>go/parser<br>go/printer<br>go/doc<br>crypto/ecdsa<br>crypto/rsa<br>crypto/dsa<br>crypto/x509/pkix<br>mime/multipart<br>cmd/objdump<br>cmd/pprof/internal/plugin<br>crypto/x509<br>html/template<br>go/build<br>cmd/cgo<br>go/format<br>cmd/fix<br>cmd/gofmt<br>crypto/tls<br>cmd/pprof/internal/symbolizer<br>cmd/pprof/internal/symbolz<br>cmd/pprof/internal/report<br>cmd/yacc<br>compress/lzw<br>compress/zlib<br>database/sql/driver<br>database/sql<br>encoding/csv<br>encoding/gob<br>cmd/pprof/internal/commands<br>image/gif<br>cmd/pprof/internal/driver<br>image/png<br><span class="hljs-built_in">log</span>/syslog<br>net/mail<br>os/user<br>runtime/debug<br>testing<br>testing/iotest<br>net/http<br>net/smtp<br>testing/quick<br>text/scanner<br>cmd/go<br>cmd/pprof/internal/fetch<br>expvar<br>net/http/cgi<br>net/http/cookiejar<br>net/http/httptest<br>net/http/httputil<br>net/http/pprof<br>cmd/pprof<br>net/rpc<br>net/http/fcgi<br>net/rpc/jsonrpc<br>+ <span class="hljs-built_in">echo</span><br><br>+ <span class="hljs-built_in">rm</span> -f /Users/ym/work/go1.4/pkg/tool/darwin_amd64/go_bootstrap<br>+ <span class="hljs-string">&#x27;[&#x27;</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">&#x27;!=&#x27;</span> --no-banner <span class="hljs-string">&#x27;]&#x27;</span><br>+ /Users/ym/work/go1.4/pkg/tool/darwin_amd64/dist banner<br><br>---<br>Installed Go <span class="hljs-keyword">for</span> darwin/amd64 <span class="hljs-keyword">in</span> /Users/ym/work/go1.4<br>Installed commands <span class="hljs-keyword">in</span> /Users/ym/me/go/test/bin<br></code></pre></td></tr></table></figure>

<p>我们看到15-33行, 首先编译了<code>cmd/dist</code>文件夹下的c代码，生成了一个dist可执行文件，并调用了 <code>/cmd/dist/dist env -p</code></p>
<pre>
<b># Building C bootstrap tool.</b>
+ echo cmd/dist
cmd/dist
++ cd ..
++ pwd
+ export GOROOT=/Users/ym/work/go1.4
+ GOROOT=/Users/ym/work/go1.4
+ GOROOT_FINAL=/Users/ym/work/go1.4
+ DEFGOROOT='-DGOROOT_FINAL="/Users/ym/work/go1.4"'
+ mflag=
+ case "$GOHOSTARCH" in
++ uname
+ '[' Darwin == Darwin ']'
+ mflag=' -mmacosx-version-min=10.6'
++ type -t gcc
++ type -t clang
+ '[' -z '' -a -z file -a -n file ']'
<b>+ gcc -mmacosx-version-min=10.6 -O2 -Wall -Werror -o cmd/dist/dist -Icmd/dist '-DGOROOT_FINAL="/Users/ym/work/go1.4"' cmd/dist/arm.c cmd/dist/buf.c cmd/dist/build.c cmd/dist/buildgc.c cmd/dist/buildgo.c cmd/dist/buildruntime.c cmd/dist/main.c cmd/dist/plan9.c cmd/dist/unix.c cmd/dist/windows.c 
++ ./cmd/dist/dist env -p</b>
</pre>

<p>那么我们来看看怎么在CLion中调试<code>/cmd/dist/dist env -p</code></p>
<h2 id="CLion调试cmd-x2F-dist"><a href="#CLion调试cmd-x2F-dist" class="headerlink" title="CLion调试cmd&#x2F;dist"></a>CLion调试cmd&#x2F;dist</h2><p>如果要用CLion直接打开cmd&#x2F;dist文件夹，会提示创建cmake项目，但是我们想直接使用调试Makefile项目。
那么我们在cmd&#x2F;dist目录下创建一个Makefile文件，内容如下</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><code class="hljs makefile">CFLAGS = -mmacosx-version-min=10.6 -g -Wall -Werror &#x27;-DGOROOT_FINAL=<span class="hljs-string">&quot;/Users/ym/work/go1.4&quot;</span>&#x27;<br>CC = gcc<br><br>SRC=arm.c buf.c build.c buildgc.c buildgo.c buildruntime.c main.c plan9.c unix.c windows.c<br>INCLUDE_DIR = ./<br><br><br>TARGET = dist<br><br><span class="hljs-section">all: <span class="hljs-variable">$(TARGET)</span></span><br><br><span class="hljs-variable">$(TARGET)</span>:<br>	<span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CFLAGS)</span> -I<span class="hljs-variable">$(INCLUDE_DIR)</span> <span class="hljs-variable">$(SRC)</span> -o <span class="hljs-variable">$@</span><br><br><br><span class="hljs-section">clean:</span><br>	rm <span class="hljs-variable">$(TARGET)</span><br><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: all clean</span><br></code></pre></td></tr></table></figure>

<p>其实就是根据make.bash打印的gcc编译命令改写的。需要注意的是要增加<code>-g</code>选项，这样才能调试。</p>
<p>然后参考<a href="https://www.jetbrains.com/help/clion/run-debug-configuration-makefile-application.html">Run&#x2F;Debug Configuration: Makefile Application</a></p>
<p>配置几个参数，核心要指定的就是Target和Executable文件 
<img src="/images/clion-debug-makefile-config.png" alt="clion-debug-makefile-config"></p>
<p>最后先clean，然后断点调试<code>unix.c</code>文件中的main入口函数。</p>
<p><img src="/images/clion-makefile-debug-show.png" alt="clion-makefile-debug-show"></p>
<p>成功了。</p>
]]></content>
      <tags>
        <tag>debug</tag>
        <tag>clion</tag>
        <tag>makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>[leetcode 390]Elimination Game原创解法</title>
    <url>/2022/02/06/2022-2-6-leetcode-390/</url>
    <content><![CDATA[<h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p><code>leetcode</code>现在支持<code>Go</code>了，这次用<code>Go</code>写一个算法题——消除游戏。</p>
<p><a href="https://leetcode.com/problems/elimination-game/">原题链接</a></p>
<pre><code class="hljs">You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr:

Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.
Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.
Keep repeating the steps again, alternating left to right and right to left, until a single number remains.
Given the integer n, return the last number that remains in arr.
</code></pre>
<p>Example 1:</p>
<p>Input: n &#x3D; 9</p>
<p>Output: 6</p>
<p>Explanation:</p>
<p>arr &#x3D; [<del>1</del>, 2, <del>3</del>, 4, <del>5</del>, 6, <del>7</del>, 8, <del>9</del>]</p>
<p>arr &#x3D; [2, <del>4</del>, 6, <del>8</del>]</p>
<p>arr &#x3D; [<del>2</del>, 6]</p>
<p>arr &#x3D; [6]</p>
<p>简单说就是从左至右消除，再从右到左消除，如果不唯一继续这个过程。对于这个例子，输入是9，那么开始就有1-9，
9个数。第一次，消除{1,3,5,7,9}, 第二次消除{8,4},第三次消除{2},最后留下数字6。</p>
<p>老办法，先用naive、暴力的方法求解，再优化。</p>
<span id="more"></span>

<h2 id="暴力求解方法"><a href="#暴力求解方法" class="headerlink" title="暴力求解方法"></a>暴力求解方法</h2><p>基本思路就是</p>
<ol>
<li>生成一个数组，含有1-n，n个整数。</li>
<li>从左到右消除，就是把偶数位置的数字依序移动到数组的左侧，并截取保留。例如从左至右消除数组[1,2,3,4,5,6,7,8,9],
移动偶数位置到左侧后，[2,4,6,8,5,6,7,8,9], 截取左侧后为[2,4,6,8]</li>
<li>从右至左消除，就是把奇数位置的数字依序移动到数组的右侧，并截取保留。例如从右至左消除数组[2,4,6,8],移动奇数
位置的数到右侧后，[2,4,2,6], 截取右侧后为[2,6]</li>
<li>如果不为1，继续步骤2</li>
</ol>
<p>代码如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//LastRemaining1 has time complexity O(n) and space complexity O(n)</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LastRemaining1</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>	arr := gen(n)<br><br>	leftToRight := <span class="hljs-literal">true</span><br>	<span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(arr) &gt; <span class="hljs-number">1</span> &#123;<br>		<span class="hljs-keyword">if</span> leftToRight &#123;<br>			<span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">len</span>(arr); i += <span class="hljs-number">2</span> &#123;<br>				arr[i/<span class="hljs-number">2</span>] = arr[i]<br>			&#125;<br>			length := <span class="hljs-built_in">len</span>(arr) / <span class="hljs-number">2</span><br>			arr = arr[<span class="hljs-number">0</span>:length]<br>		&#125; <span class="hljs-keyword">else</span> &#123;<br>			count := <span class="hljs-number">0</span><br>			<span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; <span class="hljs-built_in">len</span>(arr)<span class="hljs-number">-1</span>-i &gt;= <span class="hljs-number">0</span>; i += <span class="hljs-number">2</span> &#123;<br>				arr[<span class="hljs-built_in">len</span>(arr)<span class="hljs-number">-1</span>-i/<span class="hljs-number">2</span>] = arr[<span class="hljs-built_in">len</span>(arr)<span class="hljs-number">-1</span>-i]<br>				count += <span class="hljs-number">1</span><br>			&#125;<br>			arr = arr[<span class="hljs-built_in">len</span>(arr)-count:]<br>		&#125;<br><br>		leftToRight = !leftToRight<br>	&#125;<br><br>	<span class="hljs-keyword">return</span> arr[<span class="hljs-number">0</span>]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">gen</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>	arr := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, n)<br>	<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>		arr[i] = i + <span class="hljs-number">1</span><br>	&#125;<br>	<span class="hljs-keyword">return</span> arr<br>&#125;<br></code></pre></td></tr></table></figure>

<p>这个时间和空间复杂度都是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> ，空间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(n) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>
好理解。那么时间复杂度是怎么计算的呢？ 对于输入n，第一次消除遍历 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>n</mi><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{n}{2} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，第二次消除遍历 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>n</mi><msup><mn>2</mn><mn>2</mn></msup></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{n}{2^2} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，
第三次消除遍历<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>n</mi><msup><mn>2</mn><mn>3</mn></msup></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{n}{2^3} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>…因此总时间就是</p>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>n</mi><mn>2</mn></mfrac></mstyle><mo>+</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>n</mi><msup><mn>2</mn><mn>2</mn></msup></mfrac></mstyle><mo>+</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>n</mi><msup><mn>2</mn><mn>3</mn></msup></mfrac></mstyle><mo>+</mo><mo>…</mo><mo>≈</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\dfrac{n}{2} + \dfrac{n}{2^2} + \dfrac{n}{2^3} + \ldots \approx n </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.48312em;vertical-align:0em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>

<h2 id="分析和优化后的算法"><a href="#分析和优化后的算法" class="headerlink" title="分析和优化后的算法"></a>分析和优化后的算法</h2><p>暴力解法直观，但是空间占用太多了，当n很大的时候，直接栈溢出了。那么该怎么优化呢。只能是找规律，通过发现递推关系来求解。</p>
<p>也就是说，假如我们要求解的函数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi mathvariant="script">f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y=\mathcal{f}(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，其中<code>n</code>就是输入的自然数。<code>y</code>为剩余的最后的数字。
根据以往的经验我们考虑<strong>分治法</strong>，找到递推关系 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><msub><mi>a</mi><mi>n</mi></msub><mi mathvariant="script">f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mi mathvariant="script">f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mo>…</mo></mrow><annotation encoding="application/x-tex">\mathcal{f}(n+1) = a_n\mathcal{f}(n) + a_{n-1}\mathcal{f}(n-1) + \ldots </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.12em;vertical-align:0em;"></span><span class="minner">…</span></span></span></span></p>
<p>很显然，我们知道 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">f</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\mathcal{f}(1) = 1  </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">f</mi><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\mathcal{f}(2) = 2  </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">f</mi><mo stretchy="false">(</mo><mn>3</mn><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\mathcal{f}(3) = 2  </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span><span class="mopen">(</span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></p>
<p>通过观察，我们可以发现这样一个递归过程，经过一轮从左至右和从右至左的消除后，余下一个长度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>n</mi><mn>4</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{n}{4} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>的新的数列。
如果长度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>n</mi><mn>4</mn></mfrac></mstyle><mo>≤</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">\dfrac{n}{4} \leq 3 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，那么可以直接知道<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">f</mi><mo stretchy="false">(</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>n</mi><mn>4</mn></mfrac></mstyle><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{f}(\dfrac{n}{4}) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>的值，该值就是新数列的编号。
取出新数列的该编号的值并返回。
如果数列的长度大于3，那么返回新数列中编号为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">f</mi><mo stretchy="false">(</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>n</mi><mn>4</mn></mfrac></mstyle><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{f}(\dfrac{n}{4}) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>的数字。</p>
<p>也就是说我们发现了递推关系 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>∗</mo><mi mathvariant="script">f</mi><mo stretchy="false">(</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>n</mi><mn>4</mn></mfrac></mstyle><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{f}(n) = operator*\mathcal{f}(\dfrac{n}{4})  </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></p>
<p>举例说明我们的递归过程，当n&#x3D;9时，经过一轮从左至右和从右至左的消除后，余下一个长度为2的数列[2,6], 因为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">f</mi><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\mathcal{f}(2) = 2 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，
所以返回数列[2,6]编号为2的数，也就是数字6。</p>
<p>代码实现如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//LastRemaining2 has time complexity O(log(n)) and space complexity O(log(n))</span><br><span class="hljs-comment">//Runtime: 3 ms, faster than 85.71% of Go online submissions for Elimination Game.</span><br><span class="hljs-comment">//Memory Usage: 2.6 MB, less than 97.62% of Go online submissions for Elimination Game.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LastRemaining2</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>	<span class="hljs-keyword">return</span> f(n)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>	<span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span> &#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>	&#125;<br>	<span class="hljs-keyword">if</span> n == <span class="hljs-number">2</span> || n == <span class="hljs-number">3</span> &#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>	&#125;<br><br>	<span class="hljs-comment">//经过一轮从左至右和从右至左消除后</span><br>	last := last(n)                    <span class="hljs-comment">//数列的最后一个数字</span><br>	length := length(n)                <span class="hljs-comment">//数列的长度</span><br>	<span class="hljs-keyword">return</span> last - <span class="hljs-number">4</span>*(length-f(length)) <span class="hljs-comment">//返回数列中，编号为f(length)的数字</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">last</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>	<span class="hljs-keyword">return</span> n - (n % <span class="hljs-number">2</span>) - <span class="hljs-number">2</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">length</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>	n /= <span class="hljs-number">2</span><br>	n /= <span class="hljs-number">2</span><br>	<span class="hljs-keyword">return</span> n<br>&#125;<br></code></pre></td></tr></table></figure>
<p>时间复杂度和空间复杂度都是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mrow></mrow><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(\log{}n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> ，因为递归调用的次数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>4</mn></msub><mi>n</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>log</mi><mo>⁡</mo><mrow></mrow><mi>n</mi></mrow><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\log_{4}n = \dfrac{\log{}n}{2} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"></span><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 。</p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>通过ChatGPT实现Rust语言的八皇后算法</title>
    <url>/2023/01/12/2023-1-12-8-queens-chatgpt/</url>
    <content><![CDATA[<h2 id="ChatGPT是什么？"><a href="#ChatGPT是什么？" class="headerlink" title="ChatGPT是什么？"></a>ChatGPT是什么？</h2><p><a href="https://openai.com/blog/chatgpt/">ChatGPT</a>是基于<code>OpenAI</code>项目的聊天机器人。</p>
<p><code>OpenAI</code>项目由特斯拉创建，而<code>ChatGPT</code>的母公司当前估值$29bln，据说微软准备购买$10bln。</p>
<span id="more"></span>

<p>目前ChatGPT不对中国开放，想要注册不光需要VPN，还需要手机短信验证。不过注册完成后登录不需要短信验证了。</p>
<p>具体怎么注册登录ChatGPT可以参考其它文章。</p>
<h2 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h2><p>八皇后问题（英文：Eight queens），是由国际象棋棋手马克斯·贝瑟尔于1848年提出的问题，是回溯算法的典型案例。 
问题表述为：在8×8格的国际象棋上摆放8个皇后，使其不能互相攻击，
即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。 
高斯认为有76种方案。</p>
<p><img src="/images/2023-1-12-8queens-problem.png" alt="2023-1-12-8queens-problem"></p>
<h2 id="通过ChatGPT实现Rust语言的八皇后算法"><a href="#通过ChatGPT实现Rust语言的八皇后算法" class="headerlink" title="通过ChatGPT实现Rust语言的八皇后算法"></a>通过ChatGPT实现Rust语言的八皇后算法</h2><p>直接问ChatGPT, “How to write eight queens algorithm in rust?”
如下图所示，直接就把rust代码实现显示出来，并进行了说明。</p>
<p><img src="/images/2023-1-12-8queens-chatgpt.png" alt="2023-1-12-8queens-chatgpt"></p>
<p>把rust代码copy出来，增加测试代码<code>test_eight_queen()</code>。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">eight_queens</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">board</span> = <span class="hljs-built_in">vec!</span>[-<span class="hljs-number">1</span>; <span class="hljs-number">8</span>];<br><br>    <span class="hljs-title function_ invoke__">solve</span>(&amp;<span class="hljs-keyword">mut</span> board, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">solve</span>(board: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt;, target_row: <span class="hljs-type">i32</span>) &#123;<br>    <span class="hljs-keyword">if</span> target_row == <span class="hljs-number">8</span> &#123;<br>        <span class="hljs-title function_ invoke__">print_board</span>(board);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">column</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">8</span> &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-title function_ invoke__">is_safe</span>(board, target_row, column) &#123;<br>            board[target_row <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>] = column <span class="hljs-keyword">as</span> <span class="hljs-type">i32</span>;<br>            <span class="hljs-title function_ invoke__">solve</span>(board, target_row + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">is_safe</span>(board: &amp;<span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt;, row: <span class="hljs-type">i32</span>, column: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">r</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..row &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">c</span> = board[r <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>];<br><br>        <span class="hljs-keyword">if</span> c == column ||<br>            (row - r).<span class="hljs-title function_ invoke__">abs</span>() == (column - c).<span class="hljs-title function_ invoke__">abs</span>() &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print_board</span>(board: &amp;<span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt;) &#123;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">r</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">8</span> &#123;<br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">c</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">8</span> &#123;<br>            <span class="hljs-keyword">if</span> board[r <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>] == c <span class="hljs-keyword">as</span> <span class="hljs-type">i32</span> &#123;<br>                <span class="hljs-built_in">print!</span>(<span class="hljs-string">&quot;Q &quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">print!</span>(<span class="hljs-string">&quot;. &quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">#[cfg(test)]</span><br><span class="hljs-keyword">mod</span> tests &#123;<br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">test_eight_queen</span>() &#123;<br>        super::<span class="hljs-title function_ invoke__">eight_queens</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>直接运行，没有错误。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hello $ cargo test --bin hello eight_queens::tests::test_eight_queen -- --show-output<br>    Finished test [unoptimized + debuginfo] target(s) in 0.11s<br>     Running unittests src/main.rs (target/debug/deps/hello-257baa7e5ed28221)<br><br>running 1 test<br>test eight_queens::tests::test_eight_queen ... ok<br><br>successes:<br><br>---- eight_queens::tests::test_eight_queen stdout ----<br>Q . . . . . . . <br>. . . . Q . . . <br>. . . . . . . Q <br>. . . . . Q . . <br>. . Q . . . . . <br>. . . . . . Q . <br>. Q . . . . . . <br>. . . Q . . . . <br><br>Q . . . . . . . <br>. . . . . Q . . <br>. . . . . . . Q <br>. . Q . . . . . <br>. . . . . . Q . <br>. . . Q . . . . <br>. Q . . . . . . <br>. . . . Q . . . <br><br>Q . . . . . . . <br>. . . . . . Q . <br>. . . Q . . . . <br>. . . . . Q . . <br>. . . . . . . Q <br>. Q . . . . . . <br>. . . . Q . . . <br>. . Q . . . . . <br><br>Q . . . . . . . <br>. . . . . . Q . <br>. . . . Q . . . <br>. . . . . . . Q <br>. Q . . . . . . <br>. . . Q . . . . <br>. . . . . Q . . <br>. . Q . . . . . <br><br>. Q . . . . . . <br>. . . Q . . . . <br>. . . . . Q . . <br>. . . . . . . Q <br>. . Q . . . . . <br>Q . . . . . . . <br>. . . . . . Q . <br>. . . . Q . . . <br><br>. Q . . . . . . <br>. . . . Q . . . <br>. . . . . . Q . <br>Q . . . . . . . <br>. . Q . . . . . <br>. . . . . . . Q <br>. . . . . Q . . <br>. . . Q . . . . <br><br>. Q . . . . . . <br>. . . . Q . . . <br>. . . . . . Q . <br>. . . Q . . . . <br>Q . . . . . . . <br>. . . . . . . Q <br>. . . . . Q . . <br>. . Q . . . . . <br><br>... ignore<br>...<br>...<br><br>successes:<br>    eight_queens::tests::test_eight_queen<br><br>test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 22 filtered out; finished in 0.00s<br></code></pre></td></tr></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>ChatGPT给人非常惊艳的感觉。我考虑以后经常使用它，如果它一直免费的话。</p>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>ChatGPT</tag>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Iced的过程中理解Rust的关联类型</title>
    <url>/2023/02/28/2023-2-28-associated-type/</url>
    <content><![CDATA[<h2 id="关联类型-Associated-type"><a href="#关联类型-Associated-type" class="headerlink" title="关联类型(Associated type)"></a>关联类型(Associated type)</h2><p>关联类型是Rust为了解决类型参数(type parameter)之间的依赖关系而引入的。清楚的解释引入动机的文章就是
<a href="https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md#motivation">RFC095</a>
。</p>
<span id="more"></span>

<p>同时，这篇文章详细说明了如何<a href="https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md#motivation">引用关联类型</a>。</p>
<h2 id="一个实际的例子"><a href="#一个实际的例子" class="headerlink" title="一个实际的例子"></a>一个实际的例子</h2><p>我们在使用<a href="https://github.com/iced-rs/iced">Iced</a>（一个跨平台的GUI库）开发一个自定义样式的button的时候，
遇到了关联类型。</p>
<p>以下代码创建一个button对象，宽度80，高50，样式怎么输入呢？</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-title function_ invoke__">button</span>(<br>    <span class="hljs-title function_ invoke__">text</span>(input).<span class="hljs-title function_ invoke__">size</span>(<span class="hljs-number">24</span>)<br>        .<span class="hljs-title function_ invoke__">vertical_alignment</span>(Vertical::Center)<br>        .<span class="hljs-title function_ invoke__">horizontal_alignment</span>(Horizontal::Center)<br>)<br>    .<span class="hljs-title function_ invoke__">padding</span>(<span class="hljs-number">10</span>)<br>    .<span class="hljs-title function_ invoke__">width</span>(<span class="hljs-number">80</span>)<br>    .<span class="hljs-title function_ invoke__">height</span>(<span class="hljs-number">50</span>)<br>    .<span class="hljs-title function_ invoke__">style</span>( ?? )    <span class="hljs-comment">/// &lt;-- 这里该写什么呢？</span><br>    .<span class="hljs-title function_ invoke__">on_press</span>(msg)<br></code></pre></td></tr></table></figure>
<p>看看这个style方法的签名。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">iced_native::widget::button <br>impl&lt;&#x27;a, Message, Renderer&gt; Button&lt;&#x27;a, Message, Renderer&gt; <br>where     <br>    Renderer: crate::Renderer,     <br>    Renderer::Theme: StyleSheet,<br>pub fn style(mut self, style: &lt;Renderer::Theme as StyleSheet&gt;::Style) -&gt; Self<br>-------------------------------------------------------------<br>Sets the style variant of this Button.<br></code></pre></td></tr></table></figure>
<p>style方法是Button结构体的一个关联方法。</p>
<p>Button结构体是一个组件，它有两个类型参数，Message和Renderer。
其中<code>Renderer</code>类型参数的Bound在where中明确</p>
<ul>
<li>Renderer: crate::Renderer   需要实现<code>crate::Renderer</code> trait.</li>
<li>Renderer::Theme: StyleSheet 并且该<code>crate::Renderer</code> trait的<code>Theme</code>关联类型需要实现 <code>StyleSheet</code> trait.</li>
</ul>
<p><code>crate::Renderer</code> trait如下，有一个<code>Theme</code>关联类型</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/// A component that can be used by widgets to draw themselves on a screen.</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">trait</span> <span class="hljs-title class_">Renderer</span>: <span class="hljs-built_in">Sized</span> &#123;<br>    <span class="hljs-comment">/// The supported theme of the [`Renderer`].</span><br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Theme</span>;<br>    ...<br>    ...<br></code></pre></td></tr></table></figure>

<p>还是回到这个style方法<code>pub fn style(mut self, style: &lt;Renderer::Theme as StyleSheet&gt;::Style) -&gt; Self</code>。</p>
<p>这个方法的入参style的类型是<code>&lt;Renderer::Theme as StyleSheet&gt;::Style</code>，这个PATH的前缀是
<code>&lt;Renderer::Theme as StyleSheet&gt;</code> 表示实现了Renderer trait的类型的<code>Theme</code>关联类型 
需要实现<code>StyleSheet</code> trait。</p>
<p>因此<code>&lt;Renderer::Theme as StyleSheet&gt;::Style</code>完整的含义就是 </p>
<ol>
<li>某个渲染类型 SomeRenderer 实现了<code>crate::Renderer</code> trait. </li>
<li>某个样式板类型 SomeThemeType 实现了<code>button::StyleSheet</code>。</li>
<li>且 SomeRenderer::Theme &#x3D; SomeThemeType</li>
<li><code>&lt;Renderer::Theme as StyleSheet&gt;::Style</code>就是 SomeThemeType::Style &#x3D; &lt; ?? &gt;.</li>
</ol>
<p>因此style方法的入参的实际类型就是SomeStyleSheet::Style的实际类型。所以我们要找到SomeRenderer和SomeThemeType。</p>
<ol>
<li>先看<code>crate::Renderer</code> trait的实现类型有那些，可以看到<code>Renderer&lt;B, T&gt;</code><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span>&lt;B, T&gt; iced_native::Renderer <span class="hljs-keyword">for</span> <span class="hljs-title class_">Renderer</span>&lt;B, T&gt;<br><span class="hljs-keyword">where</span><br>    B: Backend,<br>&#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Theme</span> = T;<br>    ...<br>    ...<br></code></pre></td></tr></table></figure></li>
</ol>
<p>这个结构体如下，</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/// A backend-agnostic renderer that supports all the built-in widgets.</span><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Renderer</span>&lt;B: Backend, Theme&gt; &#123;<br>    backend: B,<br>    primitives: <span class="hljs-type">Vec</span>&lt;Primitive&gt;,<br>    theme: PhantomData&lt;Theme&gt;,<br>&#125;<br></code></pre></td></tr></table></figure>
<p>这个似乎就是我们要找的 SomeRenderer。但是这个<code>Renderer&lt;B, T&gt;</code>有两个类型参数，第二个就是Theme类型参数。还是没有看到
这个类型参数具体的类型是什么。继续看哪里使用了这个带有类型参数的结构体<code>Renderer&lt;B, T&gt;</code>。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/// A [`wgpu`] graphics renderer for [`iced`].</span><br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// [`wgpu`]: https://github.com/gfx-rs/wgpu-rs</span><br><span class="hljs-comment">/// [`iced`]: https://github.com/iced-rs/iced</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">Renderer</span>&lt;Theme = iced_native::Theme&gt; =<br>    iced_graphics::Renderer&lt;Backend, Theme&gt;;<br></code></pre></td></tr></table></figure>
<p>这里看到声明了一个新的类型<code>iced_wgpu::Renderer</code>，并且指定了<code>Theme = iced_style::theme::Theme</code>。
这个新的类型在哪里使用了呢？</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span>&lt;Theme&gt; iced_graphics::window::Compositor <span class="hljs-keyword">for</span> <span class="hljs-title class_">Compositor</span>&lt;Theme&gt; &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Settings</span> = Settings;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Renderer</span> = Renderer&lt;Theme&gt;;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Surface</span> = wgpu::Surface;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>&lt;W: HasRawWindowHandle + HasRawDisplayHandle&gt;(<br>        settings: <span class="hljs-keyword">Self</span>::Settings,<br>        compatible_window: <span class="hljs-type">Option</span>&lt;&amp;W&gt;,<br>    ) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;(<span class="hljs-keyword">Self</span>, <span class="hljs-keyword">Self</span>::Renderer), Error&gt; &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">compositor</span> = futures::executor::<span class="hljs-title function_ invoke__">block_on</span>(<span class="hljs-keyword">Self</span>::<span class="hljs-title function_ invoke__">request</span>(<br>            settings,<br>            compatible_window,<br>        ))<br>        .<span class="hljs-title function_ invoke__">ok_or</span>(Error::GraphicsAdapterNotFound)?;<br><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">backend</span> = compositor.<span class="hljs-title function_ invoke__">create_backend</span>();<br><br>        <span class="hljs-title function_ invoke__">Ok</span>((compositor, Renderer::<span class="hljs-title function_ invoke__">new</span>(backend)))  <span class="hljs-comment">/// &lt;--- 这里的Renderer就是指定了Theme的Renderer&lt;B,T&gt;</span><br>    &#125;<br></code></pre></td></tr></table></figure>
<p>因此这个<code>iced_wgpu::Renderer</code>就是我们要找的SomeRenderer，而SomeRenderer::Theme就是
<code>iced_style::theme::Theme</code>就是我们要找的SomeThemeType。</p>
<ol start="2">
<li>接着看<code>iced_style::theme::Theme</code>类型如何实现<code>button::StyleSheet</code> trait
<img src="/./images/20230228-button_style_for_theme.png" alt="button_stylesheet_for_theme">
从这里可以看到 <code>SomeThemeType::Style = iced_style::theme::Button</code>
因此style方法的入参是iced_style::theme::Button, 是一个枚举类型。</li>
</ol>
<figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/// The style of a button.</span><br><span class="hljs-meta">#[derive(Default)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Button</span> &#123;<br>    <span class="hljs-comment">/// The primary style.</span><br>    <span class="hljs-meta">#[default]</span><br>    Primary,<br>    <span class="hljs-comment">/// The secondary style.</span><br>    Secondary,<br>    <span class="hljs-comment">/// The positive style.</span><br>    Positive,<br>    <span class="hljs-comment">/// The destructive style.</span><br>    Destructive,<br>    <span class="hljs-comment">/// The text style.</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// Useful for links!</span><br>    Text,<br>    <span class="hljs-comment">/// A custom style.</span><br>    <span class="hljs-title function_ invoke__">Custom</span>(<span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> button::StyleSheet&lt;Style = Theme&gt;&gt;),<br>&#125; <br></code></pre></td></tr></table></figure>
<p>从定义可以看出，如果我们要实现自定义的样式就需要使用Button::Custom(Box::new(??)).</p>
<p>而<code>button::StyleSheet&lt;Style = Theme&gt;</code>类型意思是某类型实现了<code>button::StyleSheet</code> trait,
并且关联类型Style &#x3D; iced_style::theme::Theme. </p>
<p>所以我们可以写一个自定义的button样式了。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ButtonStyle</span>;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">StyleSheet</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">ButtonStyle</span> &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Style</span> = iced_style::theme::Theme; <span class="hljs-comment">///&lt;-- 这里可以简写为 type Style = Theme;</span><br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">active</span>(&amp;<span class="hljs-keyword">self</span>, style: &amp;<span class="hljs-keyword">Self</span>::Style) <span class="hljs-punctuation">-&gt;</span> Appearance &#123;<br>        Appearance &#123;<br>            shadow_offset: <span class="hljs-built_in">Default</span>::<span class="hljs-title function_ invoke__">default</span>(),<br>            background: <span class="hljs-title function_ invoke__">Some</span>(Background::<span class="hljs-title function_ invoke__">Color</span>(Color::<span class="hljs-title function_ invoke__">from_rgb8</span>(<span class="hljs-number">204</span>, <span class="hljs-number">204</span>, <span class="hljs-number">204</span>))),<br>            border_radius: <span class="hljs-number">5.0</span>,<br>            border_width: <span class="hljs-number">0.0</span>,<br>            border_color: <span class="hljs-built_in">Default</span>::<span class="hljs-title function_ invoke__">default</span>(),<br>            text_color: Color::<span class="hljs-title function_ invoke__">from_rgb8</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>),<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>style方法的入参就是<code>Button::Custom(Box::new(ButtonStyle&#123;&#125;))</code>。</p>
<p>最后style方法的使用如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-title function_ invoke__">button</span>(<br>    <span class="hljs-title function_ invoke__">text</span>(input).<span class="hljs-title function_ invoke__">size</span>(<span class="hljs-number">24</span>)<br>        .<span class="hljs-title function_ invoke__">vertical_alignment</span>(Vertical::Center)<br>        .<span class="hljs-title function_ invoke__">horizontal_alignment</span>(Horizontal::Center)<br>)<br>    .<span class="hljs-title function_ invoke__">padding</span>(<span class="hljs-number">10</span>)<br>    .<span class="hljs-title function_ invoke__">width</span>(<span class="hljs-number">80</span>)<br>    .<span class="hljs-title function_ invoke__">height</span>(<span class="hljs-number">50</span>)<br>    .<span class="hljs-title function_ invoke__">style</span>( Button::<span class="hljs-title function_ invoke__">Custom</span>(<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(ButtonStyle&#123;&#125;)) ) <span class="hljs-comment">/// 这里该写什么呢？</span><br>    .<span class="hljs-title function_ invoke__">on_press</span>(msg)<br></code></pre></td></tr></table></figure>

<h2 id="关于Iced"><a href="#关于Iced" class="headerlink" title="关于Iced"></a>关于Iced</h2><p><code>Iced</code>使用的Elm模型非常容易使用。我用它实现一个简单的计算器。
<img src="/./images/20230228-calculator.png" alt="calculator"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关联类型是Rust非常重要的特性。如果不深入理解的话，编译的错误信息都看不明白。</p>
]]></content>
      <tags>
        <tag>rust</tag>
        <tag>iced</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS下基于CMake自动打包部署Qt5项目</title>
    <url>/2023/06/07/2023-6-7-qt5-macos-bundle-app/</url>
    <content><![CDATA[<h2 id="Qt5项目打包部署"><a href="#Qt5项目打包部署" class="headerlink" title="Qt5项目打包部署"></a>Qt5项目打包部署</h2><p>MacOS下打包部署Qt5项目可以参考<a href="https://doc.qt.io/qt-5/macos-deployment.html">Qt for macOS - Deployment</a>。
这里采用cmake构建Qt5项目。</p>
<span id="more"></span>

<h2 id="CMake打包要点说明"><a href="#CMake打包要点说明" class="headerlink" title="CMake打包要点说明"></a>CMake打包要点说明</h2><p>MacOS下针对一个PicPicker的具体项目，说明CMake打包项目的要点:</p>
<ol>
<li>设置针对构建Qt项目的全局选项。<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># MOC（Meta-Object Compiler）是 Qt 框架中的一个工具，它用于在编译时生成元对象代码（meta-object code）。</span><br><span class="hljs-keyword">set</span>(CMAKE_AUTOMOC <span class="hljs-keyword">ON</span>)  <br><br><span class="hljs-comment"># RCC（Resource Compiler）是 Qt 框架中的一个工具，它用于将应用程序所需的资源文件（如图像、音频、样式表等）编译成二进制文件，并将其嵌入到可执行文件中，以便在运行时使用。</span><br><span class="hljs-keyword">set</span>(CMAKE_AUTORCC <span class="hljs-keyword">ON</span>)  <br><br><span class="hljs-comment"># UIC（User Interface Compiler）是 Qt 框架中的一个工具，它用于将 Qt Designer 设计的用户界面（UI）文件（.ui 文件）编译成 C++ 代码，以便在应用程序中使用。</span><br><span class="hljs-keyword">set</span>(CMAKE_AUTOUIC <span class="hljs-keyword">ON</span>)  <br><br><span class="hljs-comment"># 将当前目录包含到查找头文件的路径中，以便在处理 *.ui 文件时能够正确地找到相关的头文件。</span><br><span class="hljs-keyword">set</span>(CMAKE_INCLUDE_CURRENT_DIR <span class="hljs-keyword">ON</span>) <br></code></pre></td></tr></table></figure></li>
<li>find_package 命令用于查找指定的软件包，并加载该软件包所提供的一些变量和模块。<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">find_package</span>(Qt5 COMPONENTS<br>        Core<br>        Gui<br>        Widgets<br>        Xml<br>        REQUIRED)<br></code></pre></td></tr></table></figure></li>
<li>QT5_ADD_RESOURCES 是 CMake 中用于将 Qt 资源文件（.qrc 文件）编译成 C++ 代码的命令。<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># MyResources 是生成的 C++ 代码的输出文件名，application.qrc 是要编译的 Qt 资源文件的路径和文件名</span><br>QT5_ADD_RESOURCES(MyResources application.qrc)<br></code></pre></td></tr></table></figure></li>
<li>应用图标icns打包设置和国际化的打包路径设置<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 这样会设置应用图标的文件名</span><br><span class="hljs-keyword">set</span>(MACOSX_BUNDLE_ICON_FILE AppIcon.icns)<br><span class="hljs-comment"># 把&quot;$&#123;CMAKE_SOURCE_DIR&#125;/AppIcon.icns&quot;图标打包到&quot;Resources/&quot;路径下</span><br><span class="hljs-keyword">set</span>(app_icon_macos <span class="hljs-string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/AppIcon.icns&quot;</span>)<br><span class="hljs-keyword">set_source_files_properties</span>(<span class="hljs-variable">$&#123;app_icon_macos&#125;</span> PROPERTIES MACOSX_PACKAGE_LOCATION <span class="hljs-string">&quot;Resources&quot;</span>)<br><br><span class="hljs-comment"># 把国际化的*.qm打包到&quot;Resources/l10n&quot;路径下（这里目录l10n可以修改）</span><br><span class="hljs-keyword">set_source_files_properties</span>(<span class="hljs-variable">$&#123;l10n_files&#125;</span> PROPERTIES MACOSX_PACKAGE_LOCATION <span class="hljs-string">&quot;Resources/l10n&quot;</span>)<br></code></pre></td></tr></table></figure></li>
<li>构建可执行二进制目标为PicPicker。<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_executable</span>(PicPicker<br>        <span class="hljs-variable">$&#123;SOURCES&#125;</span><br>        <span class="hljs-variable">$&#123;MyResources&#125;</span><br>        <span class="hljs-variable">$&#123;app_icon_macos&#125;</span><br>        <span class="hljs-variable">$&#123;l10n_files&#125;</span><br>        )<br><br><span class="hljs-comment"># 这里的设置会告诉cmake在生成目标文件PicPicker之后，创建PicPicker.app/Contents/目录结构，并把二进制复制到</span><br><span class="hljs-comment"># &quot;PicPicker.app/Contents/MacOS/&quot;路径下。因此PicPicker运行时读取资源文件的相对路径为&quot;../Resources/&quot;</span><br><span class="hljs-keyword">set_target_properties</span>(PicPicker PROPERTIES<br>        MACOSX_BUNDLE <span class="hljs-keyword">TRUE</span><br>        )<br><br><span class="hljs-keyword">target_link_libraries</span>(PicPicker<br>        Qt5::Core<br>        Qt5::Gui<br>        Qt5::Widgets<br>        Qt5::Xml<br>        )<br></code></pre></td></tr></table></figure></li>
<li>使用 macdeployqt 工具自动处理Qt库的依赖关系和相关文件，将应用程序打包成一个独立的、可执行的 macOS 应用程序包（.app 文件），以便在其他机器上运行。<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 找到环境macdeployqt工具</span><br><span class="hljs-keyword">get_target_property</span>(_qmake_executable Qt5::qmake IMPORTED_LOCATION)<br><span class="hljs-keyword">get_filename_component</span>(_qt_bin_dir <span class="hljs-string">&quot;$&#123;_qmake_executable&#125;&quot;</span> DIRECTORY)<br><span class="hljs-keyword">find_program</span>(MACDEPLOYQT_EXECUTABLE macdeployqt HINTS <span class="hljs-string">&quot;$&#123;_qt_bin_dir&#125;&quot;</span>)<br><br><span class="hljs-comment"># 添加自定义命令，执行的时间为PicPicker二进制构建完成。</span><br><span class="hljs-keyword">add_custom_command</span>(<span class="hljs-keyword">TARGET</span> PicPicker POST_BUILD<br>        <span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;CMAKE_COMMAND&#125;</span> -E copy<br>        <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/AppIcon.icns&quot;</span><br>        <span class="hljs-string">&quot;$&lt;TARGET_FILE_DIR:PicPicker&gt;/../Resources/&quot;</span><br>        COMMENT <span class="hljs-string">&quot;Copy AppIcon.icns to Resources/&quot;</span><br>        &amp;&amp;<br>        <span class="hljs-keyword">COMMAND</span> <span class="hljs-string">&quot;$&#123;MACDEPLOYQT_EXECUTABLE&#125;&quot;</span><br>        ARGS <span class="hljs-string">&quot;PicPicker.app&quot;</span> <span class="hljs-string">&quot;-dmg&quot;</span> <span class="hljs-string">&quot;-always-overwrite&quot;</span> <span class="hljs-string">&quot;-no-strip&quot;</span><br>        COMMENT <span class="hljs-string">&quot;Execute macdeployqt to create macOS bundle&quot;</span><br>        )<br></code></pre></td></tr></table></figure></li>
</ol>
<p><strong>注意</strong> </p>
<p><code>MACOSX_BUNDLE</code>设置为<code>TRUE</code>已经会把文件拷贝到相应的路径，而这里再做一遍是因为
POST_BUILD 事件的触发是PicPicker链接完成，而不是复制文件到PicPicker.app的目录下，
因此会造成当进行dmg打包的时候，图标文件还没有复制到目录下。日志如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs log">[100%] Linking CXX executable PicPicker.app/Contents/MacOS/PicPicker<br>Execute macdeployqt to create macOS bundle<br>Copying OS X content PicPicker.app/Contents/Resources/AppIcon.icns<br>[100%] Built target PicPicker<br></code></pre></td></tr></table></figure>

<p>所以只能用此下策。使用cmake第二遍拷贝到<code>$&lt;TARGET_FILE_DIR:PicPicker&gt;/../Resources/</code>路径下。</p>
<p>PicPicker目标文件的路径是<code>PicPicker.app/MacOS/PicPicker</code>,因此<code>$&lt;TARGET_FILE_DIR:PicPicker&gt;</code>就是
<code>PicPicker.app/MacOS/</code>，所以<code>$&lt;TARGET_FILE_DIR:PicPicker&gt;/../Resources/</code>就是<code>PicPicker.app/Resources/</code></p>
<h2 id="CMakeLists-txt完整内容"><a href="#CMakeLists-txt完整内容" class="headerlink" title="CMakeLists.txt完整内容"></a>CMakeLists.txt完整内容</h2><p>仅供参考</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.23</span>)<br><span class="hljs-keyword">project</span>(picpicker)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">14</span>)<br><span class="hljs-keyword">set</span>(CMAKE_AUTOMOC <span class="hljs-keyword">ON</span>)<br><span class="hljs-keyword">set</span>(CMAKE_AUTORCC <span class="hljs-keyword">ON</span>)<br><span class="hljs-keyword">set</span>(CMAKE_AUTOUIC <span class="hljs-keyword">ON</span>)<br><span class="hljs-comment"># for *.ui to include current dir to find headers.</span><br><span class="hljs-keyword">set</span>(CMAKE_INCLUDE_CURRENT_DIR <span class="hljs-keyword">ON</span>)<br><br><span class="hljs-keyword">find_package</span>(Qt5 COMPONENTS<br>        Core<br>        Gui<br>        Widgets<br>        Xml<br>        REQUIRED)<br><br><span class="hljs-keyword">set</span>(SOURCES<br>        src/main.cpp<br>        src/mainwindow.cpp<br>        src/AppModel.cpp<br>        )<br><br><span class="hljs-keyword">set</span>(l10n_files<br>        )<br><br>QT5_ADD_RESOURCES(MyResources application.qrc)<br><br><span class="hljs-keyword">set</span>(MACOSX_BUNDLE_ICON_FILE AppIcon.icns)<br><span class="hljs-keyword">set</span>(app_icon_macos <span class="hljs-string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/AppIcon.icns&quot;</span>)<br><span class="hljs-keyword">set_source_files_properties</span>(<span class="hljs-variable">$&#123;app_icon_macos&#125;</span> PROPERTIES MACOSX_PACKAGE_LOCATION <span class="hljs-string">&quot;Resources&quot;</span>)<br><span class="hljs-keyword">set_source_files_properties</span>(<span class="hljs-variable">$&#123;l10n_files&#125;</span> PROPERTIES MACOSX_PACKAGE_LOCATION <span class="hljs-string">&quot;Resources/l10n&quot;</span>)<br><br><span class="hljs-keyword">add_executable</span>(PicPicker<br>        <span class="hljs-variable">$&#123;SOURCES&#125;</span><br>        <span class="hljs-variable">$&#123;MyResources&#125;</span><br>        <span class="hljs-variable">$&#123;app_icon_macos&#125;</span><br>        <span class="hljs-variable">$&#123;l10n_files&#125;</span><br>        )<br><br><span class="hljs-keyword">set_target_properties</span>(PicPicker PROPERTIES<br>        MACOSX_BUNDLE <span class="hljs-keyword">TRUE</span><br>        )<br><br><span class="hljs-keyword">target_link_libraries</span>(PicPicker<br>        Qt5::Core<br>        Qt5::Gui<br>        Qt5::Widgets<br>        Qt5::Xml<br>        )<br><br><span class="hljs-keyword">get_target_property</span>(_qmake_executable Qt5::qmake IMPORTED_LOCATION)<br><span class="hljs-keyword">get_filename_component</span>(_qt_bin_dir <span class="hljs-string">&quot;$&#123;_qmake_executable&#125;&quot;</span> DIRECTORY)<br><span class="hljs-keyword">find_program</span>(MACDEPLOYQT_EXECUTABLE macdeployqt HINTS <span class="hljs-string">&quot;$&#123;_qt_bin_dir&#125;&quot;</span>)<br><br><span class="hljs-keyword">add_custom_command</span>(<span class="hljs-keyword">TARGET</span> PicPicker POST_BUILD<br>        <span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;CMAKE_COMMAND&#125;</span> -E copy<br>        <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/AppIcon.icns&quot;</span><br>        <span class="hljs-string">&quot;$&lt;TARGET_FILE_DIR:PicPicker&gt;/../Resources/&quot;</span><br>        COMMENT <span class="hljs-string">&quot;Copy AppIcon.icns to Resources/&quot;</span><br>        &amp;&amp;<br>        <span class="hljs-keyword">COMMAND</span> <span class="hljs-string">&quot;$&#123;MACDEPLOYQT_EXECUTABLE&#125;&quot;</span><br>        ARGS <span class="hljs-string">&quot;PicPicker.app&quot;</span> <span class="hljs-string">&quot;-dmg&quot;</span> <span class="hljs-string">&quot;-always-overwrite&quot;</span> <span class="hljs-string">&quot;-no-strip&quot;</span><br>        COMMENT <span class="hljs-string">&quot;Execute macdeployqt to create macOS bundle&quot;</span><br>        )<br></code></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>因为没有使用QML，所以没有考虑打包QML文件的情况。</li>
<li>只是在Mac平台下。</li>
<li><code>-no-strip</code>参数在发布的时候要去掉，这里添加是为了开发时方便debug。</li>
<li><code>-always-overwrite</code>参数也是为了方便，直接覆盖已经产生的dmg文件。</li>
</ol>
]]></content>
      <tags>
        <tag>qt5</tag>
        <tag>cmake</tag>
        <tag>macos</tag>
        <tag>bundle</tag>
      </tags>
  </entry>
  <entry>
    <title>玩一下LangChain</title>
    <url>/2023/06/08/2023-6-8-langchain-openai/</url>
    <content><![CDATA[<h2 id="什么是LangChain"><a href="#什么是LangChain" class="headerlink" title="什么是LangChain"></a>什么是LangChain</h2><p>自从ChatGPT出现以来，就一直在使用，那么ChatGPT毕竟是有局限性的，因为ChatGPT训练的语料是有限的。很多问题回答不了，
也经常会胡言乱语闹笑话。</p>
<p>但是ChatGPT背后的大语言模型LLM是可以扩展的，也就是说，可以把特定的领域知识让LLM（大语言模型）学习。这样就在一定
程度上解决了局限性。</p>
<p>而<a href="https://github.com/hwchase17/langchain">LangChain项目</a>就是这样的杀手锏，这里是<a href="https://python.langchain.com/en/latest/">官方文档</a>。</p>
<span id="more"></span>

<p>本文代码和例子参考了<a href="https://blog.csdn.net/weixin_42608414/article/details/129493302">使用langchain打造自己的大型语言模型(LLMs)</a>，对中文资料进行处理。</p>
<h2 id="OpenAI的key"><a href="#OpenAI的key" class="headerlink" title="OpenAI的key"></a>OpenAI的key</h2><p>LangChain是一个框架，如果要使用，则需要调用大语言模型的API。正好有一朋友申请了<code>OPENAI_API_KEY</code>，这样就可以开始
跑跑代码了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>以下是Python代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> langchain.embeddings.openai <span class="hljs-keyword">import</span> OpenAIEmbeddings<br><span class="hljs-keyword">from</span> langchain.vectorstores <span class="hljs-keyword">import</span> Chroma<br><span class="hljs-keyword">from</span> langchain.text_splitter <span class="hljs-keyword">import</span> TokenTextSplitter<br><span class="hljs-keyword">from</span> langchain.llms <span class="hljs-keyword">import</span> OpenAI<br><span class="hljs-keyword">from</span> langchain.document_loaders <span class="hljs-keyword">import</span> DirectoryLoader<br><span class="hljs-keyword">from</span> langchain.chains <span class="hljs-keyword">import</span> RetrievalQAWithSourcesChain, ChatVectorDBChain<br><span class="hljs-keyword">import</span> jieba <span class="hljs-keyword">as</span> jb<br><br>os.environ[<span class="hljs-string">&quot;OPENAI_API_KEY&quot;</span>] = <span class="hljs-string">&quot;sk-xxxxxxx&quot;</span>  <span class="hljs-comment"># &lt;-- 这里替换为申请的key</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_txt</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">由于中文的语法的特殊性，对于中文的文档必须要做一些预处理工作：词语的拆分，</span><br><span class="hljs-string">也就是要把中文的语句拆分成一个个基本的词语单位，这里我们会用的一个分词工具：jieba，</span><br><span class="hljs-string">它会帮助我们对资料库中的所有文本文件进行分词处理。不过我们首先将这3个时事新闻的文本文件放置到Data文件夹下面，</span><br><span class="hljs-string">然后在data文件夹下面再建一个子文件夹:cut, 用来存放被分词过的文档：</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    files = [<span class="hljs-string">&#x27;天龙八部.txt&#x27;</span>]<br><br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>        <span class="hljs-comment"># 读取data文件夹中的中文文档</span><br>        my_file = <span class="hljs-string">f&quot;./data/<span class="hljs-subst">&#123;file&#125;</span>&quot;</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(my_file, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            data = f.read()<br><br>        <span class="hljs-comment"># 对中文文档进行分词处理</span><br>        cut_data = <span class="hljs-string">&quot; &quot;</span>.join([w <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(jb.cut(data))])<br>        <span class="hljs-comment"># 分词处理后的文档保存到data文件夹中的cut子文件夹中</span><br>        cut_file = <span class="hljs-string">f&quot;./data/cut/cut_<span class="hljs-subst">&#123;file&#125;</span>&quot;</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(cut_file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(cut_data)<br>            f.close()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">embeddings</span>():<br>    <span class="hljs-comment"># 加载文档</span><br>    loader = DirectoryLoader(<span class="hljs-string">&#x27;./data/cut&#x27;</span>, glob=<span class="hljs-string">&#x27;**/*.txt&#x27;</span>)<br>    docs = loader.load()<br>    <span class="hljs-comment"># 文档切块</span><br>    text_splitter = TokenTextSplitter(chunk_size=<span class="hljs-number">1000</span>, chunk_overlap=<span class="hljs-number">0</span>)<br>    doc_texts = text_splitter.split_documents(docs)<br>    <span class="hljs-comment"># 调用openai Embeddings</span><br>    embeddings = OpenAIEmbeddings()<br>    <span class="hljs-comment"># 向量化</span><br>    vectordb = Chroma.from_documents(doc_texts, embeddings, persist_directory=<span class="hljs-string">&quot;./data/cut&quot;</span>)<br>    vectordb.persist()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ask</span>():<br>    embeddings = OpenAIEmbeddings()<br><br>    docsearch = Chroma(persist_directory=<span class="hljs-string">&quot;./data/cut&quot;</span>, embedding_function=embeddings)<br><br>    chain = ChatVectorDBChain.from_llm(OpenAI(temperature=<span class="hljs-number">0</span>, model_name=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>), docsearch,<br>                                       return_source_documents=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># code to be executed repeatedly</span><br>            user_input = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;What&#x27;s your question: &quot;</span>)<br><br>            chat_history = []<br>            result = chain(&#123;<span class="hljs-string">&quot;question&quot;</span>: user_input, <span class="hljs-string">&quot;chat_history&quot;</span>: chat_history&#125;)<br><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Answer: &quot;</span> + result[<span class="hljs-string">&quot;answer&quot;</span>].replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>))<br>        <span class="hljs-keyword">except</span> KeyboardInterrupt:<br>            <span class="hljs-comment"># code to be executed when Ctrl+C is pressed</span><br>            <span class="hljs-keyword">break</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    preprocess_txt()<br>    embeddings()<br>    ask()<br></code></pre></td></tr></table></figure>

<h2 id="代码依赖模块"><a href="#代码依赖模块" class="headerlink" title="代码依赖模块"></a>代码依赖模块</h2><p>Python3.11安装依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pip install -r requirements.txt<br></code></pre></td></tr></table></figure>

<p>requirements.txt内容如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">aiohttp==3.8.4<br>aiosignal==1.3.1<br>anyio==3.7.0<br>argilla==1.8.0<br>async-timeout==4.0.2<br>attrs==23.1.0<br>backoff==2.2.1<br>certifi==2023.5.7<br>cffi==1.15.1<br>chardet==5.1.0<br>charset-normalizer==3.1.0<br>chromadb==0.3.26<br>click==8.1.3<br>clickhouse-connect==0.6.0<br>coloredlogs==15.0.1<br>commonmark==0.9.1<br>contourpy==1.0.7<br>cryptography==41.0.1<br>cycler==0.11.0<br>dataclasses-json==0.5.7<br>Deprecated==1.2.14<br>duckdb==0.8.0<br>et-xmlfile==1.1.0<br>fastapi==0.96.0<br>flatbuffers==23.5.26<br>fonttools==4.39.4<br>frozenlist==1.3.3<br>greenlet==2.0.2<br>h11==0.14.0<br>hnswlib==0.7.0<br>httpcore==0.16.3<br>httptools==0.5.0<br>httpx==0.23.3<br>humanfriendly==10.0<br>idna==3.4<br>jieba==0.42.1<br>joblib==1.2.0<br>kiwisolver==1.4.4<br>langchain==0.0.191<br>lxml==4.9.2<br>lz4==4.3.2<br>Markdown==3.4.3<br>marshmallow==3.19.0<br>marshmallow-enum==1.5.1<br>matplotlib==3.7.1<br>monotonic==1.6<br>mpmath==1.3.0<br>msg-parser==1.2.0<br>multidict==6.0.4<br>mypy-extensions==1.0.0<br>nltk==3.8.1<br>numexpr==2.8.4<br>numpy==1.23.5<br>olefile==0.46<br>onnxruntime==1.15.0<br>openai==0.27.7<br>openapi-schema-pydantic==1.2.4<br>openpyxl==3.1.2<br>overrides==7.3.1<br>packaging==23.1<br>pandas==1.5.3<br>pdf2image==1.16.3<br>pdfminer.six==20221105<br>Pillow==9.5.0<br>posthog==3.0.1<br>protobuf==4.23.2<br>pulsar-client==3.2.0<br>pycparser==2.21<br>pydantic==1.10.8<br>Pygments==2.15.1<br>pypandoc==1.11<br>pyparsing==3.0.9<br>python-dateutil==2.8.2<br>python-docx==0.8.11<br>python-dotenv==1.0.0<br>python-magic==0.4.27<br>python-pptx==0.6.21<br>pytz==2023.3<br>PyYAML==6.0<br>regex==2023.6.3<br>requests==2.31.0<br>rfc3986==1.5.0<br>rich==13.0.1<br>six==1.16.0<br>sniffio==1.3.0<br>SQLAlchemy==2.0.15<br>starlette==0.27.0<br>sympy==1.12<br>tabulate==0.9.0<br>tenacity==8.2.2<br>tiktoken==0.4.0<br>tokenizers==0.13.3<br>tqdm==4.65.0<br>typer==0.9.0<br>typing-inspect==0.9.0<br>typing_extensions==4.6.3<br>tzdata==2023.3<br>unstructured==0.7.1<br>urllib3==2.0.2<br>uvicorn==0.22.0<br>uvloop==0.17.0<br>watchfiles==0.19.0<br>websockets==11.0.3<br>wrapt==1.14.1<br>xlrd==2.0.1<br>XlsxWriter==3.1.2<br>yarl==1.9.2<br>zstandard==0.21.0<br></code></pre></td></tr></table></figure>

<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><p>而文本则放在 “.&#x2F;data&#x2F;“ 目录下，</p>
<p><code>天龙八部.txt</code> 内容如下，就是一些明确的信息。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">段誉和乔峰，虚竹是兄弟。<br><br>阿朱喜欢乔峰。<br><br>段誉喜欢王语嫣。<br></code></pre></td></tr></table></figure>

<p>如果直接问ChatGPT，”段誉的兄弟是谁”, “段誉有几个兄弟”则ChatGPT回答有些混乱。</p>
<p><img src="/./images/chatgpt-duanyu-brothers.png" alt="chatgpt-duanyu-brothers"></p>
<h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p>直接运行后，测试提问，如下。</p>
<p><img src="/./images/langchain-duanyu1.png" alt="langchain1"></p>
<p><img src="/./images/langchain-duanyu2.png" alt="langchain1"></p>
<p>很有意思。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>中文需要进行分词，与英文的处理不同。</li>
<li>需要避免4096 TOKEN的限制，则只能使用文章中提到模型建立Chain。<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">ChatVectorDBChain.from_llm(OpenAI(temperature=<span class="hljs-number">0</span>, model_name=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>), docsearch,<br>                                       return_source_documents=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></li>
<li>还是需要VPN才能使用，另外OPEN_API_KEY是需要花钱的。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/weixin_42608414/article/details/129493302">使用langchain打造自己的大型语言模型(LLMs)</a></li>
</ul>
]]></content>
      <tags>
        <tag>langchain</tag>
        <tag>openai</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS下LLDB调试Qt5程序</title>
    <url>/2023/06/09/2023-6-9-qt5-macos-lldb-debug/</url>
    <content><![CDATA[<h2 id="LLDB调试Qt5的问题"><a href="#LLDB调试Qt5的问题" class="headerlink" title="LLDB调试Qt5的问题"></a>LLDB调试Qt5的问题</h2><p>MacOS下，LLDB调试Qt5应用通常会遇到无法打印QString变量的问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs lldb">* thread #1, queue = &#x27;com.apple.main-thread&#x27;, stop reason = breakpoint 1.1<br>    frame #0: 0x0000000100003a81 a.out`main(argc=1, argv=0x00007ff7bfefeb40) at test.cpp:10:11<br>   7   	   QCoreApplication a(argc, argv);<br>   8   	<br>   9   	   QString s = &quot;Hello World&quot;;<br>-&gt; 10  	   return a.exec();<br>   11  	&#125;<br>Target 0: (a.out) stopped.<br>(lldb) print s<br>(QString) $0 = &#123;<br>  d = 0x0000600000c04b70<br>&#125;<br></code></pre></td></tr></table></figure>

<p>这里无法获取变量<code>s</code>的值<code>Hello World</code>，只能看到一个地址。</p>
<span id="more"></span>

<p>同样的，使用CLion等IDE使用LLDB调试Qt5应用的时候，也无法看到值。</p>
<h2 id="LLDB-Qt-Formatter"><a href="#LLDB-Qt-Formatter" class="headerlink" title="LLDB Qt Formatter"></a>LLDB Qt Formatter</h2><p>英雄来了， <a href="https://github.com/ayuckhulk/lldb-qt-formatters">https://github.com/ayuckhulk/lldb-qt-formatters</a></p>
<blockquote>
<p>I use Xcode and LLDB to debug my Qt programs, and got tired with there being no visualisation for all the built-in types. Here I endeavour to make all of these types visible through the debugger. Works with Qt 5.x. Tested with Qt 5.9.8, 5.13.2 and XCode 11.</p>
</blockquote>
<p>作者使用Xcode和LLDB开发Qt，苦于debug的时候看不到qt的内建类型的值。</p>
<p>怎么办呢，简单的说就是LLDB启动的时候，加载python脚本，把内建类型的显示值的计算方法替换掉。也就是LLDB可以加载这样的自定义Formatter，
对变量进行格式化输出 —— <a href="https://lldb.llvm.org/use/variable.html">Variable Formatting</a>，
Python脚本非常适合实现复杂的Formatter —— <a href="https://lldb.llvm.org/use/variable.html#id7">Python Scripting</a></p>
<p>安装方法如下：</p>
<blockquote>
<p>git clone this repo somewhere, e.g. ~&#x2F;qtlldb. Then add the following lines to your ~&#x2F;.lldbinit:</p>
<p>command script import ~&#x2F;qtlldb&#x2F;QtFormatters.py </br>
command source ~&#x2F;qtlldb&#x2F;QtFormatters.lldb</p>
</blockquote>
<p>这样，Qt的如下内建类型的值都可以在调试的时候可视化了。</p>
<ul>
<li>QString</li>
<li>QUrl</li>
<li>QList</li>
<li>QVector</li>
<li>QPointer</li>
<li>QSize</li>
<li>QSizeF</li>
<li>QPoint</li>
<li>QPointF</li>
<li>QRect</li>
<li>QRectF</li>
<li>QUuid</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>还用如下<code>test.cpp</code>代码测试，仅仅测试<code>QString</code>类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QCoreApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QString&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-function">QCoreApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br><br>   QString s = <span class="hljs-string">&quot;Hello World&quot;</span>;<br>   <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>编译一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">g++ -std=c++11 test.cpp $(pkg-config --cflags --libs Qt5Core) -g<br></code></pre></td></tr></table></figure>

<p>这里需要设置<code>PKG_CONFIG_PATH</code>一下</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><code class="hljs zsh"><span class="hljs-built_in">export</span> PKG_CONFIG_PATH=<span class="hljs-string">&quot;/usr/local/opt/qt@5/lib/&quot;</span><br></code></pre></td></tr></table></figure>

<p>然后LLDB调试a.out。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs lldb">$ lldb a.out<br>(lldb) target create &quot;a.out&quot;<br>Current executable set to &#x27;/Users/ym/tmp/lldb-qt-formatters/lldbtests/a.out&#x27; (x86_64).<br>(lldb) b 10<br>Breakpoint 1: where = a.out`main + 65 at test.cpp:10:11, address = 0x0000000100003a81<br>(lldb) r<br>Process 53042 launched: &#x27;/Users/ym/tmp/lldb-qt-formatters/lldbtests/a.out&#x27; (x86_64)<br>Process 53042 stopped<br>* thread #1, queue = &#x27;com.apple.main-thread&#x27;, stop reason = breakpoint 1.1<br>    frame #0: 0x0000000100003a81 a.out`main(argc=1, argv=0x00007ff7bfefeb40) at test.cpp:10:11<br>   7   	   QCoreApplication a(argc, argv);<br>   8   	<br>   9   	   QString s = &quot;Hello World&quot;;<br>-&gt; 10  	   return a.exec();<br>   11  	&#125;<br>Target 0: (a.out) stopped.<br>(lldb) print s<br>(QString) $0 = &quot;Hello World&quot; &#123;<br>  d = 0x0000600000c003f0<br>&#125;<br>(lldb) <br></code></pre></td></tr></table></figure>

<p>这里18行”Hello World”显示出来了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对LLDB启动进行设置之后，CLion里也可以愉快的调试了。</p>
<p><img src="/./images/lldb-debug-qt.png" alt="lldb-debug-qt"></p>
]]></content>
      <tags>
        <tag>debug</tag>
        <tag>qt5</tag>
        <tag>macos</tag>
        <tag>lldb</tag>
      </tags>
  </entry>
  <entry>
    <title>如何更好的打印语法树结构</title>
    <url>/2024/07/18/2024-7-18-slang-ast-hier-tree/</url>
    <content><![CDATA[<h2 id="什么是语法树"><a href="#什么是语法树" class="headerlink" title="什么是语法树"></a>什么是语法树</h2><p>语法树（Syntax Tree），是一种树状数据结构，
用于表示源代码的语法结构。每个节点都表示源代码中的一种语法结构。
语法树在编译器和解释器中被广泛使用，以帮助分析和处理编程语言的源代码。</p>
<span id="more"></span>

<p>语法树可以进一步分成具体语法树（<strong>C</strong>oncrete <strong>S</strong>yntax <strong>T</strong>ree）和抽象语法树（<strong>A</strong>bstract <strong>S</strong>yntax <strong>T</strong>ree）。
编译器前端通常会根据BNF语法生成CST，然后再根据语义构建AST。</p>
<p>为了方便用户使用语法树，通常会支持Visitor设计模式，这样自定义的Visitor就可以针对感兴趣的节点类型进行遍历。</p>
<p><strong>所以这样就引出一个问题，节点类型那么多，如何能直观的看到这个树形结构呢？尤其对于不支持反射的C++，无法Debug查看类型</strong></p>
<p>下面是作者在基于<a href="https://sv-lang.com/">slang</a>项目开发Lint规则的时候，作出的一些尝试。</p>
<p>slang是一个Modern C++项目，使用了很多C++17和C++20新特性。</p>
<blockquote>
<p>slang is a software library that provides various components for lexing, parsing, type checking, and elaborating SystemVerilog code. It comes with an executable tool that can compile and lint any SystemVerilog project, but it is also intended to be usable as a front end for synthesis tools, simulators, linters, code editors, and refactoring tools.</p>
<p>slang is the fastest and most compliant SystemVerilog frontend</p>
</blockquote>
<p>那么在说明这个问题之前，还是要对<code>SystemVerilog</code>进行简单的介绍。然后给出序列化为json格式的语法树，最后给出作者方案作为比较。</p>
<h2 id="SystemVerilog简介"><a href="#SystemVerilog简介" class="headerlink" title="SystemVerilog简介"></a>SystemVerilog简介</h2><p><code>SystemVerilog</code> 是一种硬件描述和验证语言（HDVL），是<code>Verilog</code>硬件描述语言的扩展。它结合了硬件描述语言（HDL）和硬件验证语言（HVL）的特性，旨在提供一种更强大和灵活的工具来设计和验证数字系统。SystemVerilog 由 Accellera 标准组织开发，并已被 IEEE 标准协会标准化为 IEEE 1800。</p>
<h3 id="SystemVerilog-的主要特点"><a href="#SystemVerilog-的主要特点" class="headerlink" title="SystemVerilog 的主要特点"></a>SystemVerilog 的主要特点</h3><ol>
<li><strong>综合和仿真</strong>：支持设计综合（synthesis）和仿真（simulation），可以用来描述硬件电路并验证其行为。</li>
<li><strong>面向对象编程</strong>：引入了面向对象编程（OOP）概念，如类（class）、继承（inheritance）、多态（polymorphism）等，用于更复杂的测试平台开发。</li>
<li><strong>高级验证功能</strong>：包含了许多高级验证功能，如断言（assertions）、约束随机化（constraint randomization）、覆盖率（coverage）等。</li>
<li><strong>接口和模块化</strong>：支持接口（interface）和模块化编程，促进设计的可重用性和模块化。</li>
<li><strong>并行处理</strong>：具有并行处理能力，可以描述并行硬件行为。</li>
<li><strong>组合逻辑和时序逻辑</strong>：支持组合逻辑和时序逻辑的建模。</li>
</ol>
<h3 id="SystemVerilog-的基本构造"><a href="#SystemVerilog-的基本构造" class="headerlink" title="SystemVerilog 的基本构造"></a>SystemVerilog 的基本构造</h3><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p>模块（module）是 <code>SystemVerilog</code> 的基本构造，用于定义电路的结构和行为。例如：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> adder (<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] b,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] sum<br>);<br>    <span class="hljs-keyword">assign</span> sum = a + b;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>

<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>接口（interface）用于定义模块之间的通信信号。例如：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">interface</span> simple_bus (<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> clk,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> reset<br>);<br>    <span class="hljs-keyword">logic</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data;<br>    <span class="hljs-keyword">logic</span> valid;<br><span class="hljs-keyword">endinterface</span><br></code></pre></td></tr></table></figure>

<h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>类（class）用于验证环境中的面向对象编程。例如：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> Packet;<br>    <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] addr;<br>    <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> display();<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">&quot;Address: %0h, Data: %0h&quot;</span>, addr, data);<br>    <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure>

<h3 id="SystemVerilog-的应用"><a href="#SystemVerilog-的应用" class="headerlink" title="SystemVerilog 的应用"></a>SystemVerilog 的应用</h3><ol>
<li><strong>硬件设计</strong>：用于描述数字电路的结构和行为，可以综合成实际的硬件电路。</li>
<li><strong>硬件验证</strong>：提供了丰富的验证功能，用于验证数字设计的正确性和性能，包括功能验证和形式验证。</li>
<li><strong>测试平台开发</strong>：可以用来开发复杂的测试平台，进行全面的硬件设计验证。</li>
</ol>
<h3 id="SystemVerilog-的优势"><a href="#SystemVerilog-的优势" class="headerlink" title="SystemVerilog 的优势"></a>SystemVerilog 的优势</h3><ol>
<li><strong>增强的表达能力</strong>：相比于 Verilog，SystemVerilog 提供了更强大的语法和语义，可以更高效地描述复杂的硬件和验证环境。</li>
<li><strong>高效的验证方法</strong>：引入了约束随机化、覆盖率驱动验证和断言等先进验证技术，大大提高了验证效率。</li>
<li><strong>面向对象编程</strong>：支持面向对象编程，使得验证代码更具结构性和可维护性。</li>
</ol>
<p>总的来说，<code>SystemVerilog</code> 是一种强大且灵活的硬件描述和验证语言，广泛应用于现代数字电路设计和验证领域。</p>
<h2 id="slang给出的json格式的AST"><a href="#slang给出的json格式的AST" class="headerlink" title="slang给出的json格式的AST"></a>slang给出的json格式的AST</h2><p>slang项目提供了一个命令行工具，并提供了<code>--ast-json</code>来序列化AST为json格式。还是以这个加法器模块为例，</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> adder (<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] b,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] sum<br>);<br>    <span class="hljs-keyword">assign</span> sum = a + b;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>
<p>序列化的json结构如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;design&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$root&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Root&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025570624</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;members&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CompilationUnit&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025963792</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;adder&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Instance&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025964560</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;adder&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;InstanceBody&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025964184</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;members&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Port&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025964704</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;direction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;In&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;internalSymbol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2199025964880 a&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Variable&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025964880</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;lifetime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Static&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;b&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Port&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025965256</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;direction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;In&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;internalSymbol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2199025965432 b&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;b&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Variable&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025965432</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;lifetime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Static&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sum&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Port&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025965808</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;direction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Out&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;internalSymbol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2199025965984 sum&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sum&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Variable&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025965984</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;lifetime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Static&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ContinuousAssign&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025966384</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;assignment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Assignment&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;left&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                  <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;NamedValue&quot;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;symbol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2199025965984 sum&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;right&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                  <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BinaryOp&quot;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;op&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Add&quot;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;left&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;NamedValue&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;symbol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2199025964880 a&quot;</span><br>                  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;right&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;NamedValue&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;logic[3:0]&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;symbol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2199025965432 b&quot;</span><br>                  <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isNonBlocking&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>              <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;definition&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2199025746816 adder&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;connections&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">]</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;definitions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;adder&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Definition&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2199025746816</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defaultNetType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2199025567936 wire&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;definitionKind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Module&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defaultLifetime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Static&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;unconnectedDrive&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;None&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span>        <br></code></pre></td></tr></table></figure>

<p>是不是首先感到，这个json格式有点太长了，因为一个节点会有很多属性。而且通过缩进也很难看出来节点的父子关系。</p>
<h2 id="tree命令行的启发"><a href="#tree命令行的启发" class="headerlink" title="tree命令行的启发"></a>tree命令行的启发</h2><p>树状结构是一个二维结构，很难展示。不过命令工具tree打印的树状结构非常清晰。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tree .</span><br>.<br>├── dir1<br>│    └── a.txt<br>└── dir2<br>     ├── b.txt<br>     └── c.txt<br></code></pre></td></tr></table></figure>
<p>可以看到这种展示方式很好的把父子关系展示了出来，清楚的看到一个目录下所包含的文件。</p>
<p>这种具体的层次树<code>hierarchical tree</code>称之为目录树。</p>
<h2 id="解决方案展示"><a href="#解决方案展示" class="headerlink" title="解决方案展示"></a>解决方案展示</h2><p>还是这个sv代码</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> adder (<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] a,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] b,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] sum<br>);<br>    <span class="hljs-keyword">assign</span> sum = a + b;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>

<h3 id="AST的优化展示"><a href="#AST的优化展示" class="headerlink" title="AST的优化展示"></a>AST的优化展示</h3><p>我们展示一下用目录树的方式，展现AST</p>
<p><img src="/./images/2024-adder-ast.jpg" alt="adder-ast">
可以看到每一行都是一个key-value键值对，用冒号分隔。同时加上term颜色区分。</p>
<p>绿色的key是节点的class类型，value部分则是节点的属性信息，以空格分隔。</p>
<p>这样就可以以紧凑的方式展示AST。</p>
<h3 id="CST的优化展示"><a href="#CST的优化展示" class="headerlink" title="CST的优化展示"></a>CST的优化展示</h3><p><code>slang</code>并没有给出命令行的方式展现CST，但是用户可能需要直接访问CST进行一些处理，
例如：格式化sv代码。</p>
<p>下面是用相似的方式展现<code>adder</code>的CST数据结构。可以看出来，叶子节点的value就是该节点的原始文本。</p>
<p><img src="/./images/2024-adder-cst.png" alt="adder-cst"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>参考目录树的展示方式，结合key-value和term color给出了更加紧凑和清晰的语法树展现方式。这种方式更加方便用户基于AST和CST进行开发。 </p>
<p>但是这种方式的缺点也是明确的，
就是不适合作为文本方式保存。也不适合展示大的代码。当然json方式也不适合（但是都可以通过hierarchical path的约束，只展示部分语法树结构。）。</p>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>AST</tag>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>BitTorrent协议（三）之磁力链接获取元数据</title>
    <url>/2019/01/21/2019-1-21-bt-3/</url>
    <content><![CDATA[<h2 id="磁力链接的含义"><a href="#磁力链接的含义" class="headerlink" title="磁力链接的含义"></a>磁力链接的含义</h2><p>如果把tracker给封了，那么就无法下载torrent。于是磁力链接为了解决这个问题而出现了。</p>
<span id="more"></span>

<p>以下是一个典型的磁力链接。只含有一个INFO_HASH。就是那个20个byte的Hex表示字符串。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">magnet:?<span class="hljs-attribute">xt</span>=urn:btih:E84213A794F3CCD890382A54A64CA68B7E925433<br></code></pre></td></tr></table></figure>

<p>INFO_HASH我们知道就是种子文件中，info的sha1值。于是我们就根据这个hash值，去询问peers，
通过扩展协议来获取这部分重要的info数据，这部分数据就是metadata。</p>
<p>metadata就是torrent的B编码中，info对应的数据。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">&#x27;info&#x27;<span class="hljs-punctuation">:</span> &#123;&#x27;files&#x27;<span class="hljs-punctuation">:</span> [&#123;&#x27;length&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">100074</span><span class="hljs-punctuation">,</span> &#x27;path&#x27;<span class="hljs-punctuation">:</span> [&#x27;English.srt&#x27;]&#125;<span class="hljs-punctuation">,</span><br>                    &#123;&#x27;length&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">31</span><span class="hljs-punctuation">,</span> &#x27;path&#x27;<span class="hljs-punctuation">:</span> [&#x27;RARBG.txt&#x27;]&#125;<span class="hljs-punctuation">,</span><br>                    &#123;&#x27;length&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">4431023676</span><span class="hljs-punctuation">,</span><br>                     &#x27;path&#x27;<span class="hljs-punctuation">:</span> [&#x27;Venom.<span class="hljs-number">2018.72</span>0p.WEBRip.x264.AAC2.0-SHITBOX.mp4&#x27;]&#125;]<span class="hljs-punctuation">,</span><br>          &#x27;name&#x27;<span class="hljs-punctuation">:</span> &#x27;Venom.<span class="hljs-number">2018.72</span>0p.WEBRip.x264.AAC2.0-SHITBOX&#x27;<span class="hljs-punctuation">,</span><br>          &#x27;piece length&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">1048576</span><span class="hljs-punctuation">,</span><br>          &#x27;pieces&#x27;<span class="hljs-punctuation">:</span> [&#x27;a<span class="hljs-number">958677</span>e48a77aff<span class="hljs-number">6357</span>4c885d7fd<span class="hljs-number">7091515903</span>4&#x27;<span class="hljs-punctuation">,</span><br>                     &#x27;0c<span class="hljs-number">713356</span>b<span class="hljs-number">6345</span>4a<span class="hljs-number">914452</span>cdcc76a<span class="hljs-number">8470</span>fb4bc419&#x27;<span class="hljs-punctuation">,</span><br>                     ...<br>                     ...<br>                     ...<br>                     &#x27;b926b<span class="hljs-number">048253</span>bc506cb3f4e52acab9df6b93cf614&#x27;<span class="hljs-punctuation">,</span><br>                     &#x27;610f<span class="hljs-number">8485</span>ab8c56f53f594e<span class="hljs-number">0973</span>0a34e<span class="hljs-number">8529</span>e13b4&#x27;]&#125;<span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure>

<p>因此，如果我们能够获取到metadata，就能够直接从peers下载数据了。</p>
<h2 id="获取metadata的详细过程"><a href="#获取metadata的详细过程" class="headerlink" title="获取metadata的详细过程"></a>获取metadata的详细过程</h2><p><a href="http://www.bittorrent.org/beps/bep_0003.html">BEP3</a>的Peer Wire Protocol章节，<a href="http://www.bittorrent.org/beps/bep_0010.html">BEP10</a>，以及<a href="http://www.bittorrent.org/beps/bep_0009.html">BEP9</a>讲述了如何从Peers获取metadata。</p>
<p>客户端与一个Peer建立tcp连接，然后开始进行对话。</p>
<ol>
<li>(发送) 首先 客户端 发送一个68字节的 握手请求，该握手请求表示使用扩展协议。
这个握手请求里，包含了info_hash值。</li>
</ol>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">handshake<span class="hljs-operator">=</span>b&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">13</span>BitTorrent protocol\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">10</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">01</span>\xe<span class="hljs-number">8</span>B\<span class="hljs-keyword">x</span><span class="hljs-number">13</span>\xa<span class="hljs-number">7</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\xf<span class="hljs-number">3</span>\xcc\xd<span class="hljs-number">8</span>\<span class="hljs-keyword">x</span><span class="hljs-number">908</span>*T\xa<span class="hljs-number">6</span>L\xa<span class="hljs-number">6</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b~\<span class="hljs-keyword">x</span><span class="hljs-number">92</span>T<span class="hljs-number">3</span>ym<span class="hljs-number">111111111111111111</span>&#x27;<br></code></pre></td></tr></table></figure>

<ol>
<li>(接收) 然后，客户端 接收一个68字节的 握手应答。</li>
</ol>
<figure class="highlight wren"><table><tr><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">recv</span><span class="hljs-operator">=</span><span class="hljs-variable">b</span><span class="hljs-string">&quot;<span class="hljs-char escape_">\x13</span>BitTorrent protocol<span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x10</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x05</span>\xe8B<span class="hljs-char escape_">\x13</span>\xa7<span class="hljs-char escape_">\x94</span>\xf3\xcc\xd8<span class="hljs-char escape_">\x90</span>8*T\xa6L\xa6\x8b~<span class="hljs-char escape_">\x92</span>T3-UM1870-<span class="hljs-char escape_">\x14</span>\xab\x8b&#x27;\x1f\xb4^\xfe\x9a\xe8V<span class="hljs-char escape_">\n</span>&quot;</span><br></code></pre></td></tr></table></figure>

<p>解码之后，如下。</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">Handshake(fixed_num<span class="hljs-operator">=</span><span class="hljs-number">19</span><span class="hljs-punctuation">,</span> bt_head<span class="hljs-operator">=</span>b&#x27;BitTorrent protocol&#x27;<span class="hljs-punctuation">,</span> reserved<span class="hljs-operator">=</span>b&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">10</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">05</span>&#x27;<span class="hljs-punctuation">,</span> info_hash<span class="hljs-operator">=</span>b&#x27;\xe<span class="hljs-number">8</span>B\<span class="hljs-keyword">x</span><span class="hljs-number">13</span>\xa<span class="hljs-number">7</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\xf<span class="hljs-number">3</span>\xcc\xd<span class="hljs-number">8</span>\<span class="hljs-keyword">x</span><span class="hljs-number">908</span>*T\xa<span class="hljs-number">6</span>L\xa<span class="hljs-number">6</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>b~\<span class="hljs-keyword">x</span><span class="hljs-number">92</span>T<span class="hljs-number">3</span>&#x27;<span class="hljs-punctuation">,</span> peer_id<span class="hljs-operator">=</span>b<span class="hljs-string">&quot;-UM1870-\x14\xab\x8b&#x27;\x1f\xb4^\xfe\x9a\xe8V\n&quot;</span>)<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>(发送) 客户端发送一个 扩展协议的握手消息。其中 ‘\x00\x00\x00\x1a’是消息体 ‘\x14\x00d1:md11:ut_metadatai1eee’
的长度。’\x14’表示扩展协议id&#x3D;20， ‘\x00’表示握手消息。’d1:md11:ut_metadatai1ee’表示<code>&#123;ut_metadata:1&#125;</code>，这个值
可以任意选择，也可以是2。总之我们根据自己定义的值解析。</li>
</ol>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">ext_handshake<span class="hljs-operator">=</span>b&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">1</span>a\<span class="hljs-keyword">x</span><span class="hljs-number">14</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>d<span class="hljs-number">1</span>:md<span class="hljs-number">11</span>:ut_metadatai<span class="hljs-number">1</span>eee&#x27;<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>(接收) 客户端就收一个 扩展协议的握手消息。头四个字节是消息体的长度。第五个字节是’\x14’,第六个字节是’\00x’.
剩余的字节可以解码为一个字典。其中 ut_metadata:2 ，而metadata_size为74620</li>
</ol>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">dic</span>=&#123;<span class="hljs-string">&#x27;e&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;ipv4&#x27;</span>: <span class="hljs-string">&#x27;&#123;pG˜&#x27;</span>, <span class="hljs-string">&#x27;complete_ago&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;m&#x27;</span>: &#123;<span class="hljs-string">&#x27;upload_only&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;ut_holepunch&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;ut_metadata&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;ut_pex&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ut_recommend&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;ut_comment&#x27;</span>: <span class="hljs-number">6</span>&#125;, <span class="hljs-string">&#x27;metadata_size&#x27;</span>: <span class="hljs-number">74620</span>, <span class="hljs-string">&#x27;p&#x27;</span>: <span class="hljs-number">40959</span>, <span class="hljs-string">&#x27;reqq&#x27;</span>: <span class="hljs-number">255</span>, <span class="hljs-string">&#x27;v&#x27;</span>: <span class="hljs-string">&#x27;ÂµTorrent Mac 1.8.7&#x27;</span>, <span class="hljs-string">&#x27;yourip&#x27;</span>: <span class="hljs-string">&#x27;À¨+R&#x27;</span>&#125;<br></code></pre></td></tr></table></figure>

<ol start="3">
<li>(发送)客户端发送 metadata的请求消息。
头四个字节’\x00\x00\x00\x1b’表示消息体的长度；’\x14’表示扩展协议id，&#x3D;20；而’\x02’表示扩展消息id，ut_metadata对应的2；
‘d8:msg_typei0e5:piecei0ee’是一个B编码，表示请求metadata第一个piece。</li>
</ol>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">ext_data<span class="hljs-operator">=</span>b&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">1</span>b\<span class="hljs-keyword">x</span><span class="hljs-number">14</span>\<span class="hljs-keyword">x</span><span class="hljs-number">02</span>d<span class="hljs-number">8</span>:msg_typei<span class="hljs-number">0e5</span>:piecei<span class="hljs-number">0</span>ee&#x27;<br></code></pre></td></tr></table></figure>

<ol start="3">
<li>(接收)客户端接收 到一系列消息。</li>
</ol>
<p>所有消息的结构都是 <msg_len><msg_id><ext_id><xxx>，但是我们只关心msg_id为20的消息。也即是扩展协议部分。
其他的进行忽略(但是这部分msg_id是4和5的消息是有意义的，只是对获取metadata没有用处)。</p>
<p>直到接收到头部为 <msg_len>‘\x14\x01’的消息。接着是一个字典是</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">&#x27;d8:msg_typei1e5:piecei0e10:total_sizei<span class="hljs-number">7462</span>0ee&#x27;<br></code></pre></td></tr></table></figure>

<p>后边是metadata的数据。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">&#x27;d6:lengthi<span class="hljs-number">1953349632</span>e4:name32:ubuntu-18.04.1-desktop-amd64.iso12:piece lengthi<span class="hljs-number">524288</span>e...&#x27;<br></code></pre></td></tr></table></figure>

<p>这部分的数据的长度是 16KiB &#x3D; 16384 byte。如果这部分的数据长度小于16KiB，则说明是metadata的最后一个片。</p>
<p>然后把多个片进行拼接，然后求sha1的hash值，与info hash进行比较。如果一样则说明成功获取到了metadata</p>
<h2 id="代码验证"><a href="#代码验证" class="headerlink" title="代码验证"></a>代码验证</h2><p>验证的方法就是打开uTorrent软件，然后打开一个磁力链接。当磁力链接获取到metadata之后，我们就可以对该软件
的打开的peer端口进行测试。</p>
<p>例如，通过查看端口</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">uTorrent</span>   <span class="hljs-number">9281</span>             ym    <span class="hljs-number">6</span>u  IPv4 <span class="hljs-number">0</span>xcd2fefb400ca5d03      <span class="hljs-number">0</span>t0    UDP <span class="hljs-number">127.0.0.1:62517</span><br><span class="hljs-attribute">uTorrent</span>   <span class="hljs-number">9281</span>             ym    <span class="hljs-number">8</span>u  IPv4 <span class="hljs-number">0</span>xcd2fefb4134a4333      <span class="hljs-number">0</span>t0    TCP *:<span class="hljs-number">40959</span> (LISTEN)<br><span class="hljs-attribute">uTorrent</span>   <span class="hljs-number">9281</span>             ym    <span class="hljs-number">9</span>u  IPv6 <span class="hljs-number">0</span>xcd2fefb40ecafc33      <span class="hljs-number">0</span>t0    TCP *:<span class="hljs-number">40959</span> (LISTEN)<br><span class="hljs-attribute">uTorrent</span>   <span class="hljs-number">9281</span>             ym   <span class="hljs-number">10</span>u  IPv4 <span class="hljs-number">0</span>xcd2fefb41196a633      <span class="hljs-number">0</span>t0    TCP <span class="hljs-number">127.0.0.1:10000</span> (LISTEN)<br><span class="hljs-attribute">uTorrent</span>   <span class="hljs-number">9281</span>             ym   <span class="hljs-number">12</span>u  IPv4 <span class="hljs-number">0</span>xcd2fefb400caa923      <span class="hljs-number">0</span>t0    UDP *:<span class="hljs-number">40959</span><br><span class="hljs-attribute">uTorrent</span>   <span class="hljs-number">9281</span>             ym   <span class="hljs-number">13</span>u  IPv6 <span class="hljs-number">0</span>xcd2fefb400ca7aeb      <span class="hljs-number">0</span>t0    UDP *:<span class="hljs-number">40959</span><br></code></pre></td></tr></table></figure>

<p>可以看到端口号。因此我们就可以把 ‘本地ip ：40959’ 作为 peer 进行 metadata获取。以下为代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> traceback<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> namedtuple<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> logging<br><br>log = logging.getLogger()<br><br>Handshake = namedtuple(<span class="hljs-string">&quot;Handshake&quot;</span>, (<span class="hljs-string">&quot;fixed_num&quot;</span>, <span class="hljs-string">&quot;bt_head&quot;</span>, <span class="hljs-string">&quot;reserved&quot;</span>, <span class="hljs-string">&quot;info_hash&quot;</span>, <span class="hljs-string">&quot;peer_id&quot;</span>))<br>Block = <span class="hljs-number">16</span> * <span class="hljs-number">1024</span>  <span class="hljs-comment"># 16KiB</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sha1</span>(<span class="hljs-params">info</span>):<br>    <span class="hljs-keyword">import</span> hashlib<br>    p = hashlib.sha1()<br>    p.update(info)<br>    <span class="hljs-keyword">return</span> p.hexdigest()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">sock: socket.socket, n: <span class="hljs-built_in">int</span>, time_out: <span class="hljs-built_in">int</span> = <span class="hljs-number">1</span></span>):<br>    data = <span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-keyword">try</span>:<br>        start = time()<br>        sock.settimeout(time_out)<br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(data) &lt; n:<br>            <span class="hljs-keyword">if</span> time() - start &gt; time_out:<br>                <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;time out&quot;</span>)<br>            tmp = sock.recv(n - <span class="hljs-built_in">len</span>(data))<br>            data += tmp<br>        <span class="hljs-keyword">return</span> data<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;already recv:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(data))<br>        log.exception(e)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sendall</span>(<span class="hljs-params">sock: socket.socket, data, time_out: <span class="hljs-built_in">int</span> = <span class="hljs-number">1</span></span>):<br>    <span class="hljs-keyword">try</span>:<br>        sock.settimeout(time_out)<br>        sock.sendall(data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logging.exception(e)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pack_handshake</span>(<span class="hljs-params">info_hash=<span class="hljs-string">&quot;1aa4c13830b822c1375686d685a9fce23405f6ba&quot;</span></span>):<br>    n = <span class="hljs-number">19</span><br>    head = <span class="hljs-string">b&quot;BitTorrent protocol&quot;</span><br>    reserved = <span class="hljs-string">b&quot;\x00\x00\x00\x00\x00\x10\x00\x01&quot;</span><br>    peer_id = <span class="hljs-string">b&quot;ym&quot;</span> + <span class="hljs-string">b&quot;1&quot;</span> * <span class="hljs-number">18</span><br>    data = struct.pack(<span class="hljs-string">&quot;&gt;B 19s 8s 20s 20s&quot;</span>, n, head, reserved, <span class="hljs-built_in">bytearray</span>.fromhex(info_hash), peer_id)<br>    <span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">request_metadata</span>():<br>    <span class="hljs-keyword">from</span> ym.bt.parse_torrent <span class="hljs-keyword">import</span> BDecode<br>    <span class="hljs-keyword">from</span> ym.bt.udp_announce <span class="hljs-keyword">import</span> ip_me<br>    ip, port = ip_me(), <span class="hljs-number">40959</span><br>    info_hash = <span class="hljs-string">&quot;e84213a794f3ccd890382a54a64ca68b7e925433&quot;</span>  <span class="hljs-comment"># &#x27;ubuntu-18.04.1-desktop-amd64.iso&#x27;</span><br>    metadata_size = <span class="hljs-literal">None</span><br>    metadata = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">try</span>:<br>        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>        sock.settimeout(<span class="hljs-number">1</span>)<br>        sock.connect((ip, port))<br>        handshake = pack_handshake(info_hash)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;handshake=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(handshake))<br>        sock.sendall(handshake)<br>        data = recv(sock, <span class="hljs-number">68</span>)<br>        <span class="hljs-keyword">if</span> data <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;recv=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(data))<br>        tup = unpack_handshake(data)<br>        <span class="hljs-keyword">if</span> tup <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-built_in">print</span>(tup)<br><br>        UT_METADATA_ID = <span class="hljs-number">1</span>  <span class="hljs-comment"># 这里可以自己定义</span><br>        dic = &#123;<span class="hljs-string">&#x27;m&#x27;</span>: &#123;<span class="hljs-string">&#x27;ut_metadata&#x27;</span>: UT_METADATA_ID&#125;&#125;<br>        ext_handshake = pack_extend(dic, <span class="hljs-built_in">id</span>=<span class="hljs-number">20</span>, ext_id=<span class="hljs-number">0</span>)  <span class="hljs-comment"># 扩展协议的握手消息</span><br>        sock.sendall(ext_handshake)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sent|ext_handshake=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(ext_handshake))<br><br>        pieces = []<br>        piece = <span class="hljs-number">0</span><br>        tmp = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            tmp = recv(sock, <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">if</span> tmp <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;recv error&quot;</span>)<br>            msg_len, = struct.unpack(<span class="hljs-string">&quot;&gt;i&quot;</span>, tmp)<br>            tmp = recv(sock, <span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">id</span>, = struct.unpack(<span class="hljs-string">&quot;&gt;B&quot;</span>, tmp)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;msg_len=&#123;&#125;, id=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(msg_len, <span class="hljs-built_in">id</span>))<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">id</span> == <span class="hljs-number">20</span>:<br>                <span class="hljs-comment"># extention msg</span><br>                tmp = recv(sock, <span class="hljs-number">1</span>)<br>                ext_id, = struct.unpack(<span class="hljs-string">&quot;&gt;B&quot;</span>, tmp)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ext_id=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(ext_id))<br><br>                data = recv(sock, msg_len - <span class="hljs-number">2</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;recv=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(data))<br>                <span class="hljs-keyword">if</span> ext_id == <span class="hljs-number">0</span>:<br>                    <span class="hljs-comment"># extend handshake</span><br>                    dic, i, n = BDecode(data).parse()<br>                    metadata_size = dic[<span class="hljs-string">&#x27;metadata_size&#x27;</span>]<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;i=&#123;&#125;, n=&#123;&#125;, dic=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i, n, dic))<br>                    m = &#123;<span class="hljs-string">&#x27;msg_type&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;piece&#x27;</span>: piece&#125;<br>                    ext_data = pack_extend(m)<br>                    rt = sendall(sock, ext_data)<br>                    <span class="hljs-keyword">if</span> rt <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;send fail.&quot;</span>)<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sent ext_data=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(ext_data))<br>                <span class="hljs-keyword">elif</span> ext_id == UT_METADATA_ID:<br>                    <span class="hljs-comment"># ut_metadata</span><br>                    dic, i, n = BDecode(data).parse()<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;i=&#123;&#125;, n=&#123;&#125;, dic=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i, n, dic))<br>                    piece_len = msg_len - <span class="hljs-number">2</span> - i<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;piece_len=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(piece_len))<br>                    <span class="hljs-keyword">if</span> dic[<span class="hljs-string">&#x27;msg_type&#x27;</span>] == <span class="hljs-number">1</span> :<br>                        pieces.append(data[i:n])<br>                    <span class="hljs-keyword">elif</span> dic[<span class="hljs-string">&#x27;msg_type&#x27;</span>] == <span class="hljs-number">2</span>:<br>                        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;rejected&quot;</span>)<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;unknown&quot;</span>)<br><br>                    <span class="hljs-keyword">if</span> piece_len &lt; Block:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;recv end&quot;</span>)<br>                        <span class="hljs-keyword">break</span><br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-comment"># request next piece</span><br>                        piece += <span class="hljs-number">1</span><br>                        m = &#123;<span class="hljs-string">&#x27;msg_type&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;piece&#x27;</span>: piece&#125;<br>                        ext_data = pack_extend(m)<br>                        rt = sendall(sock, ext_data)<br>                        <span class="hljs-keyword">if</span> rt <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;send fail.&quot;</span>)<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sent ext_data=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(ext_data))<br><br>            <span class="hljs-keyword">else</span>:<br>                recv(sock, msg_len - <span class="hljs-number">1</span>)<br><br>        metadata = <span class="hljs-string">b&#x27;&#x27;</span>.join(pieces)<br>        <span class="hljs-keyword">if</span> metadata_size != <span class="hljs-built_in">len</span>(metadata):<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;metadata size error&quot;</span>)<br><br>        <span class="hljs-keyword">if</span> sha1(metadata) != info_hash:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;info hash error&quot;</span>)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;info_hash=&#123;&#125;, metadata_size=&#123;&#125;, metadata=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(info_hash, metadata_size, metadata))<br>        <span class="hljs-built_in">print</span>(BDecode(metadata).parse()[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        log.exception(e)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pack_extend</span>(<span class="hljs-params">dic, <span class="hljs-built_in">id</span>=<span class="hljs-number">20</span>, ext_id=<span class="hljs-number">2</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(dic, <span class="hljs-built_in">dict</span>):<br>        <span class="hljs-keyword">from</span> ym.bt.bencoding <span class="hljs-keyword">import</span> BEncode<br>        dic = BEncode(dic).encode()<br>        dic = <span class="hljs-built_in">bytes</span>(dic, encoding=<span class="hljs-string">&quot;utf8&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(dic, <span class="hljs-built_in">bytes</span>):<br>        msg_len = <span class="hljs-built_in">len</span>(dic) + <span class="hljs-number">2</span><br>        fmt = <span class="hljs-string">&quot;&gt;i B B &#123;&#125;s&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(dic))<br>        <span class="hljs-keyword">return</span> struct.pack(fmt, msg_len, <span class="hljs-built_in">id</span>, ext_id, dic)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">unpack_handshake</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span></span>):<br>    <span class="hljs-keyword">if</span> data <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(data) != <span class="hljs-number">68</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">try</span>:<br>        fixed_num, bt_head, reserved, info_hash, peer_id = struct.unpack(<span class="hljs-string">&quot;&gt;B 19s 8s 20s 20s&quot;</span>, data)<br>        <span class="hljs-keyword">return</span> Handshake(fixed_num, bt_head, reserved, info_hash, peer_id)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        log.exception(e)<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    request_metadata()<br><br><br></code></pre></td></tr></table></figure>

<h2 id="运行日志"><a href="#运行日志" class="headerlink" title="运行日志"></a>运行日志</h2><p>结尾可以看到，已经获得了<code>ubuntu-18.04.1-desktop-amd64.iso</code>的metadata.</p>
<pre><code class="hljs">/usr/local/bin/python3.7 /Users/ym/charm/pytest/ym/bt/peer_protocol.py
handshake=b&#39;\x13BitTorrent protocol\x00\x00\x00\x00\x00\x10\x00\x01\xe8B\x13\xa7\x94\xf3\xcc\xd8\x908*T\xa6L\xa6\x8b~\x92T3ym111111111111111111&#39;
recv=b&quot;\x13BitTorrent protocol\x00\x00\x00\x00\x00\x10\x00\x05\xe8B\x13\xa7\x94\xf3\xcc\xd8\x908*T\xa6L\xa6\x8b~\x92T3-UM1870-\x14\xab\x8b&#39;\x1f\xb4^\xfe\x9a\xe8V\n&quot;
Handshake(fixed_num=19, bt_head=b&#39;BitTorrent protocol&#39;, reserved=b&#39;\x00\x00\x00\x00\x00\x10\x00\x05&#39;, info_hash=b&#39;\xe8B\x13\xa7\x94\xf3\xcc\xd8\x908*T\xa6L\xa6\x8b~\x92T3&#39;, peer_id=b&quot;-UM1870-\x14\xab\x8b&#39;\x1f\xb4^\xfe\x9a\xe8V\n&quot;)
sent|ext_handshake=b&#39;\x00\x00\x00\x1a\x14\x00d1:md11:ut_metadatai1eee&#39;
msg_len=225, id=20
ext_id=0
recv=b&#39;d1:ei0e4:ipv44:&#123;pG\x9812:complete_agoi0e1:md11:upload_onlyi3e12:ut_holepunchi4e11:ut_metadatai2e6:ut_pexi1e12:ut_recommendi5e10:ut_commenti6ee13:metadata_sizei74620e1:pi40959e4:reqqi255e1:v19:\xc2\xb5Torrent Mac 1.8.76:yourip4:\xc0\xa8+Re&#39;
i=223, n=223, dic=&#123;&#39;e&#39;: 0, &#39;ipv4&#39;: &#39;&#123;pG˜&#39;, &#39;complete_ago&#39;: 0, &#39;m&#39;: &#123;&#39;upload_only&#39;: 3, &#39;ut_holepunch&#39;: 4, &#39;ut_metadata&#39;: 2, &#39;ut_pex&#39;: 1, &#39;ut_recommend&#39;: 5, &#39;ut_comment&#39;: 6&#125;, &#39;metadata_size&#39;: 74620, &#39;p&#39;: 40959, &#39;reqq&#39;: 255, &#39;v&#39;: &#39;ÂµTorrent Mac 1.8.7&#39;, &#39;yourip&#39;: &#39;À¨+R&#39;&#125;
sent ext_data=b&#39;\x00\x00\x00\x1b\x14\x02d8:msg_typei0e5:piecei0ee&#39;
msg_len=467, id=5
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=5, id=4
msg_len=3, id=9
msg_len=16431, id=20
ext_id=1
recv=b&#39;d8:msg_typei1e5:piecei0e10:total_sizei74620eed6:lengthi1953349632e4:name32:ubuntu-18.04.1-desktop-amd64.iso12:piece lengthi524288e6:pieces74520:\xba \xb5\xa7-0%\xbb\xc7\xab\xb4Xyvc\xbe\x82_RL\x8b\x1b\xd4\xc4X\xbf\x92\xf0\xebU\xb8&gt;\x89\xe3\xd9\xc5l\xbd\xc5$\xb4\x02\xc3\xcc\xa9\x9f\xf7\xad`\xf8\xe8\xe7\x81\xbe\x8c\x8f\xad\xba\x15~)\x88\x91\xd6v\xf7\x85\&#39;\x82\xb8\x05\xb4&gt;fhk\xb6\xad\x12\x07\xd9dd\x1c\x05\xcf\x1ax\xb2P\xc6he\xde)\xb0dsY\x10\xc0\xbe-\xd7\xf1\x1f\xbc\xbb\x14\x07\xe3\xb1\x14n\xbc\xfc\xc3)#Yj\x19\xebR\xf1\xd0\x13\x90W,\x93\xf7\xf4G+\x00T\x0c\xe4\x90\x13\xc8&#123;-m4\x94\xfd\xb2vvl\x95\xdf\xc1\xb9\x17w\xb6\xf1\xc1\x89\n\xdc\x11\x9c\x96r\x80yS\xa5^\xeb\xdau\xe3\xa4\xbf\xcb\x00\xb5\xcex\xe2\rxejk\xa4\xbdp\x16\xd0C\x97\xd7\xe1\x80\x01 \xce.y^\x02\xcc\xbfa\xa4\xb5&lt;\x83j\xb9\xa7\x16\xd8Q\r\xdc\xcaCc \xc6\xcc\x8c\x04\xf4b\x94%c\xbc\xb4Y\x8f_\x02\xb4\xb45\xdb&gt;z\&#39;\xe3=K\xa1\xfa. x\xef\x83W6I\x08\xfeI\xaf\xf3\xfcg-\x83ay\xfa\x85S\xd8\xa6(\xdc&#123;\xf8\xda\&#39;\xd2\xb4\x19&gt;\xa2jF\xd8\xf8|\x9c\xe8\xcb\xe3\xf3\xfcF]\x98-\xb7\xd2\x9f&#125;A\x14\x9c\xeaRw@\xe8\xbdn\x86*\xc0KC\x83\x9b\x15\xe3\x86\xfc!\\\x1b\xc4J\x90\x1dq\x85F\xdd\x0e`\x02)\xadQ\x9e=\xb4e\x88\xf1\xd9\xc2\x9c&amp;%\x11\x10\xa3\xb1aI\x1f\xd7\x92\xa9\xf2\x1d]J\xcd\xe7i\xdd7A\xd5\x12\x0f\xd2\x1bd\xe4\xf7%\xe2\x1d\x84\xb6M\xa6\x1d\xe5D\x9f\x98\x88\x98m\xa3\xef\xb4\xc6\xe2-\xc4\xa7\x97&lt;\xa6X\xf5\xb1\xa2yOE\xb5\xfe._p\xd7\xb5_\xf9\x89\xc1\xcd\x8b+\x97v\&#39;wk;I\nG\x11$6\x8e1\x1da\xcd&lt;k\xfd1\xd6\xf4%\xc561\x89$i4\xc2\xcb\x85\x87Bs\xec7rm\xf5\xb4!F\xb6\xc3r\x8a\x9e\xfd?y\x88\x00\x05\x03_\xf8\xa7SY\xf6\x88I\xf4\x8e\x9cPU3\xc3\xf1cZ\x8d\xed\xa3\x94 \xea\xc0+\xeb\xbc\xf2Y\xdf\x14\xc8\x05\x92\xbf\xd0&quot;p\xae\x9d\x1bA\xd4\x97c\x9b\x18\xb1\xd2\x0b\x8d\xd4\xc0\xf4\x03\xda\xf3^\xf3/\x12\rFV\xd0N\x80\xb4\xbd\x11\x92E#\xf0\xd4cq\\[\xfb6&amp;\xd0\x15\xcc&#123;gg\x87H&#125;&quot;\xfa\x9dW\x07y\xe6\x1dx!\xf1\xdb\xac\xbb\x84\xfbC\xcfjg\x035\xb7\xfbwu\x96i\x84i\xbdO\xc0\nhDb\xde\x08=\xcf\xbbzW&quot;\xa6\x08TWb\xb9H5e\x7f\xbdD\xfc\x91\xe7\xf1x6\xf94\xed\x02k\xbf\xe9\x1f\xcc-\xbd\x10&lt;\xf6\x93\x18\xb1\x15\x82\x05A&lt;\xdf\xb9\x96P\xca[U|Iy\xbd!_\x8c\x99q\x87\xa4\x01\xa3\x89\x95|t\x07[2\x0fT\xec\x83\xe9&#125;\x9d51\xc2\xb7\xdd\xb4\xe4\x10\xa8\xcc\xea\xb8\xfe\xa0\xac+\x9f\xafxR\xc4\xfc\x9d^\x0e\x9d\x0eK\rI\xc4\xdb\xd6a\x1c\xab8\xd2\\\xb3[\x04\xc2\xa3\x02fP\x8d\x90\xb1\xbb\x83E\xab\xd1\x8dt\x13d\x90\xb8\xce\x94\xb1\x80\xa9\x18\x95\x97\xb8;\x0bO\xce\x92\xc3dqw\x9dS\xcevO\xd9\x128\x13?\x0cp\x8b\x1b\x883\\0*\xbf\x1e\x87IB\x05\xa0~u-\xbdY\xbd\x03|y&quot;\xfc/[fP\x14&#125;\x13\xa4\x7f\xc8elz\xa1B\xe9N\xa22\xdc\xc8i\x1af_-\xa2\x81\xc3\x9e\x05a\x88\xd3[*x\x85Jy\xaa\x8e\xe7\xbe\x92\xa0\xb7\&#39;\x88\xb0\xff\xa1\xe0\xe8R9\xc0\x8a\x13\x0e\x0c,\x9c\xaf\xf4\x1bj\xac\x8aP\xb1\x11\xf78o\x02\x9b\xbcU\x1c9k=\x08\x8d\x05a\&#39;\x96u\xe9g\xd3\x1et\xc4N%9\n\xb7\xea\xd0\xea\xa1+\x19\x12\x1c=8\r\x8f\xdfu\x80x\x1b\xb1L+Q\x1f\xa0\xaem\x13\xb6\xee\x7f\x19#\xf9\xd7\xa5s\x10\xe3\xc1\xcaZ\xd5&gt;\xceN\xc2\x993P\x9fSq\xb6\x82\x1b\xd7\x9b$\xb4\xf5\x8f\xfe\x033\xd8j[\x9cO9J\x1e\x9fr\x15\x8a\x00\xea\x08\xe3\xeaG\xaaq\xfb\x19\xc4gn\x9a\x10\x91\xa9\xbf\x9d\x07V\xa6K\xb7\x02\xdazWQ\x82\x06p\x01\xd9\xd8Z\x14+7x\xc3?\xd6\xeb\x0f\xb7\xab\xa4\x99\\VG\x00\x16\xd3\x0b\xb3OFN\xfc\xe24a\xa770@\xa7AD\xab&amp;S\x19C\xf6\x9e\xb5\x05\xac\xb5=\xe3~\x82q\x1f\x0f\xbes\xc9X\xca83h\x15&quot;\xeb\xe6\xbe\xa3\xf9~U\xdc\x9d\x8a\x9fF\xa8\xe0\xecJ\xdd\xf7\&#39;\x1f\xd2\xb3\xf9\x0bYB\xb3\xcd\xc3V&amp;\x7f\xbc\xfbWl\xee\x86\xfc b\x85da?\xd0t&amp;\x7f\xedc\xc8,UN?\xd0\xf8\xd9\xea.\x1e\xc8\xc7\xc3mkme\xe3z\xb4\x9bi\xbd\x18\x9f\xf6\x83\xaa\xc4]?m\x1b&#125;\xa9X:\x9f\xd6\xc70\xb4X[\xed\xa3\x9bFL\x7fwo\x06\xdf\xaf\xbd&lt;\xe0Y\xfc&quot;\xf1\xe8\x19(\x06 \xa4\x9a\xb4k[\xb9\xc9\xbc\xbe\xa5\x86\xf0\x93\x06!@\xd5\xd3&#123;\xc5\xa7\x92rf&gt;K\xc6jI\xe0?\xf7&quot;\xce\xe0&quot;\x92E\xe1m\xbd&lt;]j\x0f2\xa5\xad\xf5\xef\x19\xa3c\xd7d\xcfi\xa4\x11\xfb\xc9\xff\x88\xdf\xf2\xee4a\xb1/\xe0\x03\xe0qMK\xdf\xc5\xa3\xaf\x90\x1d@\xdaQ\xc1.,\x8d\xd2\x07n\xcb\xef\x03\x94\x9f\xdaB^P\x89\xc6\xee\x9a\xcfc#au\x96x\x17\x06%\xdf;\xbaT\xa2\x8b\xcf\xdd\x8e\xc4w,\n\x9a8H]\xdc(\x88\x82[&quot;\x87y&gt;ft%lw\x80 \xbb\x93\xa5\xf4\xea\x17\xee\xbd\n\x0cW\xcdM\xb2\xff\xb9mQg\xa8\xb0\xaa\x8ff\xae\xce|1c@\x90\xa9v\x13W\x8d\xcb\x143\xe6\xcd\xd3Y\xf8\xafg3\xfcE\x81hl\xd4\x9e[&lt;\r[\x06\xad\xa8\x12+\xf5\x9d\x06+\xa9\xbc\xef\xe5\xf0_\xac)\t\x959\xeb\x89\x0bN&#125;\xf2\xbao\xf1\x84\xafx3\t\xa1!\x1b,Ik3yi]\xa4\xe5\t\xab\xd8\x0f6\x81\&#39;\xd4OE7\xc9\xad\x8dgr\xa1\xbe\xdd\x8d7\xb5\x1a\xb6)U&lt;\xa9C\x1aX\x1e\xf3Qf\xfa*#\x00\xc5\xea\x10\r\xd5\x18\xc4L\t\xa9\xd8\xbd\x18\xddo[\xf7P\x9c\x1b\xc3\xe6\xf7\x18W\xb1_s\x01\xffR\x82e4\xac\x9fx\xdb\t\x855\x90\x9f\xfc\x83\xf4r\xeeM\x1f\xdc\xd6\xf7rlv\xad\xf7\x9c\xe0q@;lL\x1a\x83!D\xa6\xb9\xdd\xd5@+L\xdcnp=\xe67/\xb3az\xb1&lt;\x0b\x94&gt;0\\&gt;\x91A0\xca\x96\x9dUeh\xd0\x1a\x97\xe6\xcb\x19\x8d\x81\xaa\x05\xa7\x94\xb9V~\xb3\xe0\x9c\xe1(\xff\xecGbnl\x81S\x03\x854\xf4:n\x14\xaa\x8eL\xfd\xf9\x9a\xbe\xb33\xf9\xb4\xc0\xed\x07!\x0f\x01\x90#\x8d\xf1\xc1O\x12\x8bUV\xa0\x14\x1bf\xde\\\xf9\xb0\xc9\xb1\x8b\x9d\xca\xe8\xa9\xa7\xcb/\xf37\x92\xa6\xca,\xbd\xa5\x1b\xbe&quot;\x83\x1c\xd0\xd8g&quot;\xbb\xf5\x96\x82\x0c\x05\xc6N\xe4\xcb\x05\x9c\x86\xe8&quot;-\xae\xa1\xa9\x17\xb1L\x1a~\xdd\xe4\x99Q\\\xb7\xa8\xc4\xc4\x0c2M\x87\x02\xbd\n))\x8c\xe26\xb0C\x1c\x04\x0e\xf3\xdb\xb4\xd4Ng\xc9\xdd\x08\xe0&#125;\\\xe7\x9b\x15\x08d7WO\xe4\xadw\xe0P\xa9\xec\x1f\x95\x1e7t3\xda\x06\xe3\xa3S\t\x18\xf4X\x8b\xb8\t\xe0\x86\xad\x95\x0c\xafr\x02 \xa717x\&#39;t\t\xe6f\xcc\xd4\xa1\x84\xc3g\xa7X\x96\xb1&#125;\xe1\x13B\x92\xd9Y\xe3\x90?\xa1\xea]\xe1\xae\x1d-\xf6y\xa4\xb9\x18\xdd\xe1\x02\xf0\x90C\xb50\xc0\x81_1\xa9\xc5\xf2\xc7\x90\xe2\xcd(\x9d\x00\xcc\xb4k\xaf\x13\x0bF\x00|.\xb1\x8e0&amp;6\xa0\x90x\xec\xde\\\xb4(\xee\xfd\xd5\&#39;\xa0[\xee\xeb\xf1\x95\xfc\x93\x1b\xa2r\xfd\x95\xacE\xe3\xcb*\xd4fJ\\\xc9sbV\xddn\xc4K\x9bg\x1b\xda\xadi\xa9Y$b\x88;\x03\xa7s\x05Wr\xa3!t\xc4\x84f\x981jZ\x9bE\xe3\xb5\xe9u\x92\xdb\x13\xadd~B\x8a\x00\xfd\xcf0&gt;Bt\x9c\xfc[\xb49\x92XY\x9d\xfav\x98\x1b\xa2Ej4\xf1)\xba\x86&#125;&lt;\xa2.\xd0\xc0\xd9\xdb\x0eZ9\x16\x8c\x9b\xea\xfb\xf2\x97\x92\xfb\x80\xc6\xfd\xa8&#125;\xee@i\x01\xe5.\xb7(W\xa6C\xba\xddZ4r\xba]\xf4\xbf\xc8\xa1\x95X\xeb\x9f\xc0\x11\xcaA\xc86\xe5D\x05\x84\x93\x85A\xbf\xcc\x89\x99\x1bCZ\xa5t\xadC\xa2Rm\x07j\nI\xf3\x890\xaf\x90\x95w\xd3\xf9\xdb\xa8J\xfdk_\n?\xba\xae\xdfHD!\x85\xe6\xb9\xff\xd3-\xd3\xc8\x14\xf6\xa3@\xf3\&#39;\x10kS\xc3\xb5\xdbQ\xb1\xc8\\\xb0\xc0\xa8\xf2\x14\xf6)9\xe3I\x16\x82\xa8\x14\xd0\xf6\x96\x0bdY\xffi2\x85#X\xbd\x07\xdc\xc9a\xbax\x8e#\xd2\x07\x93l\x0e\xd4\x0c-\xf2xZ\x1f0S\x8e\xac\x92\xbca\x16\xba[&lt;Z:N@\xdd\xee\nr\x7f\xe1\x94\x15\xa6\x01\xf7\xf3\xe9\x9f\x93\xb5\xc2\xc3\xe3\xe7&lt;\xe5y\xa0\xe7&#123;Gz\x1b\xd7\xf0uR\xde\x9d\xc6\xc1\xd2\x11Z*\xee\xabh\x95\xd8\xa3%yko\x1c&#125;\x00&amp;5P\x00e U\x9a\xd8\xff\x83IO\xfa\x8aM\xa6\xf0\r\x8d\x8bS\xd4\x90\x8e|\x86\x00\xf8\xa8\x0fPt3\xd7\x13xUB\xe1\xb0v(F\x8b\xb8\xf3\xdd\x19\xd1\x97[\xb4q\x84\xe9\xa6\xa07\xe8\x0b\x97\xber(\x88\xe6|\xab\xf2\xe9\x13\x08\xbb\x1d\xa4+\xa6\xf4KW\xcb\x93\xdf[\xd6D\xb7\xaf\xd1\x84o\xd7\xfae\x8a\x0f\xa3,m;7\xfc\xde\xba\xdc\x025\xd5\x90\x01;\xe0\xe5\&#39;\x92\xaa\xd9\x81\xd9\x11\x97%\xc4\xf2\xac\x0c\xb9\xd0\xee\xd51\xae\xdf\x1b8=\xd0\x7f\xb7\xa5\xaf\x1fP\xa4\xae\xc5\x8b\xaf\x04e\xc4\xc2\xff&lt;\xf8\xb1w\x9dJ\x98p\x8c8\xd2Yu\rA\xcb\xd7\xc3\xce%yYz\xff\xde\xdd\xba\xe1\xc6\x02\x9bZ\xc8\xae\xa4\xf6\xe0\x84\xf2:\x0c\x9cUf\xa2\xdb2Hp\x8f\xd0\xede\x0eA\x037\xae\x04Z\xdd^\xbb.&lt;\xa2\x8a.\n\x9f\xb6\x0c\xf6\x9a\xb2\xcf\xbd\xd4R\xe2PJv8\xd4\xeco&amp;\xd1\xde\xdc4\xe7\xb5\x80\x9a9N\xd1\x9d\xaf\xdc\x0bJ2\x9f\x05\x87\xad\xaf\xff\x11m\xf6\x99\x08Q\x8f\x93\x1d\xd1\xc5\xaa\x81+$S\x8c\x1e\x88G\xdeP\xab&gt;h;\x87,5\x19\xdc^\xbf\xf7u\xba\xa0\xc7gf\xdc\x90\xb8\xa4\x17\x16\xafsY\xb1\xbd\xbbm:\x18\xd5\xea\xabS)\&#39;\xc5\xce(\x9bN\xd4\x0e\n\xd3l\xb8]\xb1/\xd8\x8f\x82\x86Qe$\x84\xa8F\x03\x17\xd5\x88q\xcdqJJ\xf5\x93\x83Q\xd8\xc1)\xab\x90U\xef_\xc6:\x8e\xb9\xa7\x16\xbc\x1b\xac\x8d\xe1\xc8\x87\xc8l\xb3\x99\x02\xb2\xb0\x89\xc1\xf1\xf5\xe4\n\xd5?\\\x95\xb2\xb33\xf4\x8f\xd0\x89D\xec\x88\x089\x02\xa8b\xbd\xe0\x19#k\x91\x0cg\xc9I\x8e\x8bH\&#39;M8X\x1d\xe1\x7f\xf2\n\xa46m\xb4hm\xba\xc4\xac(W\x06\xdc\x93\xfdI&#123;Cdh\x9b\xc9\xe5\xc3\x08Xq\xedb\x9bX\x84[\x95 r&amp;\x1eY\xee\xa7\xd7\xb4\xad\x04\\&quot;\xd3\x16\xb1&amp;\xdf\x0bF\x8d\xf1\xb3V\xab\x895a\xf5z*\xfe4j\\\xb9%\xean\x9aP(H\xb7\xc4\x9e\xc3f4\xaf\x8fp\x03\xb1\x1ap\xd2~&#125;\x8d\x9a\x84\x86\x82\x0e\xfe\xe7:V \xa5\xbdC\x82\xee\xf0\xa1\xaa5i\xc7\x8b\xab\x92\x9e%!.\xd5J\xad\xf4\xe5\x1d\xae\x94U)G\xc7-\xb6\xc7\x81\x16\x8a&amp;0$\xaf,*\x16\xc6&gt;\x82\xb3H\xd2!\xc6\xab^h\xb0\x1c\xcb\xf3:\xf6\xcb\xd3\xf7\xc0Pa\x81\x1e\xa0\x90\x98k\xbc\xb6\x82\xdb;\xf7&quot;\x02\xfdb\xae\xe0\r\xb2\xd4\xe3\xd92\xa9\xb6\xff^&gt;\xce!zd\xd7,\x87\x1b,\xeb5\xf6\xec\xce\xb8\x1a\x9f(\xe5v\x95\x88\xbc+zrZ\xd3(\xe3\x9bw&amp;\xaf(wr+R\x89\xa3\xea\x03r\xc4\xce\x9a\xe3\xe0\xca\xacD&#123;l\x1c\x0f\x9fQ\xdeS;\xb61f#\xb2\x16\xc2\x0c\xe4\x03\xa8\xe2\x08^Q\xf0l-\xa1\x8a&gt; d\xc6U\xb0\xfbA;\xac\xf2\xd7\xc4\xec\x99x\xef\xf5\xf0|\x90f?mF#R\x9f\xd2\x9b\xfd\x18\x16\xc6\xde\x105\x7f\xc5\xbb\x9b)\xa3\xfb\xee\x80I\x07&#125;\xbe\xb2q1\xf1\xb5\xa7\xae\x0c\x18\xd3\x19w\x14e\xcc&amp;\x9b\x86~L\xc5yW8&lt;\x12D\x85K\x9a\xb6,\xe8\xb7\xa3\x8a\xf90\x1ci\x00\x81A\xd9\x80\x14\x98\xa6\x83\xf9\xc5\x9b\xa5%\x0c\xfd\nH\xc0\xc9\x8f\x02\xbe\xb9\xc6\r\x19$\xf5X\x1b\xe7\xfaP BEf\xe0\xecV\xcbi\x9b\x19\xc4\x13\xd0\x9f\xf63\r\xd4\xdc\xd1\xc9\x91C+\xbf&amp;wr\x0c\xc0&quot;h\x1d9\xde\x02\x89\xba\xdc\xa7i\xe5&#125;ib\x83o4&gt;\xf86\xeeJ\xb5\xef\xea\xa0\xd0O4\x89\x86\x16T\xa1\xee\xd3\xcb\xef\r\xf2\x0c\xfc\x046Qek\xf0\x9c\xd1[92z\xc2\x99\xa2U9\xafm\xc1]\x8dS&gt;&amp;\xf6\xfeK\xe3t\x03\x9f\x83\xa9\xc6m\xcbT\xb6_\n\xec\x83\xf2\x97H\xba\x14\xa7yO\x87\x86N\x9c\x81\xa47\xe8b\xef-M(I\x07\xda\x93\xbec\x10\n\x01\xb1\x06&lt;\xcc\x96\xbb\x05\n\xf6\xc0Xr\x8f&#125;\x0b-\xee\xaf\xd1J\r\xc7m*\xa8\x1cu\x95&amp;\xce\n\xf0\xbb\xa4\xa8-!\xa3\x11\x9ft\xa8l\x8a\xd3&quot;\xb3\x04O\xa4\xcd\x81\x1bu \&#39;\xae5\xf2\xcc\x02\xbc\xd7\xe3\xd4\xe7,\x9a\x85\x9f.Vu?y\x00W&#123;\xcb\x0cf\x8c\x82q\x03\x9e\xbb4\x0e&quot;\x1e\xe0x\xa6\xfb\xc3\xd7\xbf\xdd\xd9\x9ci\x12u\xf7\xa7\x7f\xb6\x11\xaf\x1e\x97\xf7\xcd\xc1\xea3\xae\x05\xe0\x94\xe0\x8b;\xf5\xa3hN\xe5\xce\xbe\xb2\x97\xcc\x08\xe4\x98\xbb\x9cq|\x8dP\x87m\xfb&lt;\xf1\x11\xd6\x8fB\x86\xeevT&lt;\xb1\xef\xa8\xc56\r\xb33B5\t\xd1\x0e&gt;Jh\xec\n8\x87\x8dS\x17\xe6h&amp;\x9b\x83\xc8X\xbf\xeb\xf4=9\x1f3P\xfdF&#123;)\xb5\x92\xeb\x0c\x8f\x156Jl\xd2q\xd2R\x13cj\x94\xd9t\xb2\xcfw\x0c\xf3\x1d\x97t\xe5R\x18\xbe&gt;\xc8\xf0\xeb\xd51\x08\x9b\r.E,9\x03\x96+/\xd0\x009\xb3\xaaWK\x9d\x14\xab\x04\x0eW7%\xd7\xd7\x1a3\\\x18C\xc5`\xbf\x7fB5T\xbc\xd3\xeb`\xa7\xb7\&#39;\xd6\xa1\xe2q\xbb\x96&#123;\xad\x92\xd0\x8c\xcd\x01\xcb\x92M\xa7O1h\x15\xc8\x8e\x99#6\x97\xa8\xa7\xcdG\xa1\x90\xaf@\xe5|\x94\xad7\x8c\xe8P\xe1O`\xd7\xdb\x98\xcb\x08\xb0\xde\xfb\x13:\x06L\xc2\xfb\x850\xf3\x1c\xd8\xfb\xb3\xa1^\xcfP\x96\x8e\x0bn\xcfk\x83\xa8p\xb2k_\xe7L.x\xdf\xd15\xe5&#123;9\xe3\x06\xec\xf2\xb6^\xa8r\xb4q\xdc\xa5\x18Fa\xf0\x8d\x86#\xbd_J\xdf\xb2\x80Q\x1a\x90\xa6\r\xbd\xc27\x96\x02\xc76\x0f\xaaOn\xec\xf7PY\xe7\xea\xf5\xa0\xc3\x10&#123;\xddx\x1a\x05#\x12\r\x94~DkN%\xd6Q\xa8VB\xac\x07\xae\x8a\x16\x07?\x10\x1e\xe3\xee\xe7y \xb0&quot;cj\x86\x0e\x1b\xa3\xbc\xab\xdf\xbb\x89\xc7*M\x93t\x9d\xa1)\xec\xb5\xfd9\x85\x00\xd0_~\xd1\no\x8c&gt;~7\xf4\x07\xab\x9c\xe8\x8dFh\xd4+\x9e\xe1a\xd7h\x98b\x17\xcdN]DS\x9aK1\xd7D\xbcw\xbb\xd3\xba0;oJg[\x98\x174p@\xc3qKB\xbf\xc3\xe5\xe0\x01X/\x83\x94pgk\x94\x05\xf8L\xb2q\x13\x01\x8f\x98.Q\x87&gt;\xe6\xce\x14 \xb2\x0f?\x08\xb5\&#39;\x15f\xff.\x89\xae\xc1t\x93\xc2\xfc\x9b\x89qz#y&amp;&#125;\xc06\xa7Ms\xdeB\xf7\x81B\xb5?\x16t\x04\x9a$\xd4o\x83&#125;%\xd7\xf0\x03\x9f\x90\xad\xd2C\xc2\xcb?\xa9F[A\x0b\xd6\x01\xc9\x93\xc0.\xfe\xc1\xf7\xa33\xb2\xf2\x8a_P*\x04\xe1\xf3\xa0\x1f/\x15\xcf2\x9b`b\x1d\xed@\x96h4\xf3w\xe4\x86@\xac\x13\xa1aWq\xa9oh\xc1\xc1e\x8c\x90\x17\xb6\xf1\xa7\xa9\xd2\x9er\x84\x96\xe7\x02;`f\x18\xe4\xc2AG\xb2\xc5\x92*&#123;\xfa\xb1Z\x06\xc9\x7f\xfc\x02+\xdb\xf22\xcd\xb9Xkn\x99\xa0\x99.\xe4F\x9f&#125;\x1a\xa0y]\x9d\x88\xaa\xa0\x80y\xc6\xcd\xec\xd6:\x95\x84\x99\xc9\xcf\xb7\x11\x0e\xf3t\x83\x04i\n(\x90Q\x1a\xb0\x11M\x82\xbc\xfb6%|&lt;=\n\xdd\xf2o\xc8\x1a\xe4\xe1$\xb0\x8ey/\xf4n\xc2J\x04\x03\xbe7\x04\xd0\x1b\r\xd8\xc4Q\x13y\xd5\x0eH^\xcfbVBs\xcf(cH\xbc\x02\xfbV\xb0\xbd\xb0\xa6l\xc7\xc1wP&gt;|&#125;x\xce\xbf\x18\xf3K;\xf6\x1a\xa7k\xed\xf8\xfa,\xab\xd2&amp;cI2\xef\xfd\x9f\xe2\x15?\xed\x07\xd5\xb0,\x8e\xc1Nl\xbe\x87\x1c\xfeo\x87\xc0\xe2\x88C\xad\xd0\xea%; aL\x0f&lt;\x8f\x1ec\xae\x03\xcf\xa7\x98\x8c\x82`\x88\x05\xcb\xc5\x90\xd7`\xfdZ\x83\x02oO\xe5&gt;\xb7\xffQ\x90\xadT\x83&quot;\xa0\xa8\x9a\xe0\xc2\xed\xf9YAx\x19+\x95\x19\x9br\xf4f0\x15\xf7\x96\xc3\xdad\xfdP\xe85(8w\xa7\x9b8\x90\xd4%\x84\x1e\xfc&quot;O\x9d]gZ*1X\xf7\x85`(\xd5^\x95\xe0\x1fxAf\xfaa\x1d\xbdG-\xcf\x94R-m\xce(B\xd8\xf5\xeb\&#39;\xa55\xbd\xcc\xc4=y&lt;\x14\xa8\xc4\xc9\xbf#\xee$\xdaO~\x91??\x80H\xe4\xd7\xaf\xb1\x8f\xb5\x8b]\xc5\x1d\xa8\xb6\xe2\xee\xc6@N7\x0b\x0c\xa3\x9b\xee\x8e\x14\xcb\xe8\xfd\xf0\xb6N\xf0b=(&#125;\x7fi\xae\xb4F\xe4\xe6\x02Z:\xe0\xbc\xe2\xcd &quot;\x80d\xf9\xb4\xe8\xe1\xd1\xd0G\xf5*\xe4\x14gV\x0e4\xebc\xba\xf7\xfd\xee\xb3\xc0\xa2\xffK\&#39;\x15\xcaf\xe8&quot;\xaf\x1c\xa9\xd4:\&#39;\x85\x81M&lt;^\x96m\xd0I\x1e %\xc8\x9a\xb2\xdf\xb2.\xd3\xfd\xff@)\xc9\x18\xa3\xac\xc1\x14$\xbc\xdd\xe6\xa4\x8d]2F\x88\xf6c\xa8\xd7_O\xc9\xce\xee\&#39;\x8aH\x99\x85&quot;n\xc2\xee\x91$\xea\x80\xdc\xc7lq\xc9yQ\x86l\x91\x80E~P\rT\xfd&gt;\xff\x93\xe4\xa4\t\x9a\xbb\xab%cz\xb1\xb5\xf3\x81\n\xd6\xf5rK\xa5\xbd\xb9\xd7-\x93$\xd2\xeb3n|\xbc\xc2[u\x8d\x05\xe7\x0f#mw\x9e\xbd\xeb\xe4B\x810\xee\xf6\xebQ\x82\xb7:^\xd1k:\xd0Y\x13\xc9\xae\xa9\xb0f\xcc\xba\xc8\\\x81\xc5.F\xa5\x1a\xac\xa0\x8eT\xd4fR\xba\xc8\x91\xb4g\xc0v\x12\xda\x08I\xf5\x7f\x9f\xefY%\xe7\x07\xfe\x98\x9a\xe7g\xab\xac\x88\xe6\x12\xc2&gt;\xd6&lt;\xa7\xfe\xd0\x1e\xe75\x87.\x1c+\x9ex\x94\&#39;\x07\xd2[\xbf\x9f\x83\xb8\xaa\xfe+\x94Ic\x9f\x1d\x9cgL\xb6@6\x88(K\x940\xe2\xc0 \xd5$?\t-q\x1f\x9b\x93Jm\xfd\x12\xbf%E\x17|\ti\x070El\xac\xe4;6z9\xdb\xbf\\\x11)\xa3&amp;\xa0`#=\xea\xe0\xa3\x1dJ|\xd7\xef\xa54%\xcc\x12B\xeds&#123;G\xfe:i~n\xc1\x16\xd5\xd5\xfeoT\&#39;\xd0\xbf5\x8b\x97C/)T\xe8g^\xa5\xb6\x13ElU\x7f\xc8\x1cMT\xbd\xa4\xd3\xb05\xc2s\x16u\x93N\x13\x88\x0f\x83\xc4\xb6s\x90\x0b\xdb?o\xf7\xb8\xcb\xaa\xfc\t\xc2jS\xd6O\x83Nw\xf6\x96I\xe7\xa4\xb9p\nu\x1a1]\xe3\xa4\xae\xfa+\xba\xb4\xb7e\xd9\x94\xaa\nk\x90x\xb1\xe0%\x19E1\xaf\x8d\xe3\x99&quot;~&quot;\x1a\xf6\x88\xa7Kz\x8e\xc1\xf5\xe0\xcc\xee\xa2\xf4\x82\x07S\xa2+Z\xe6\xce\xdb\x8eX\x881\xd0(J\xe3\xb7O~\xcd\x84\x9b\x83_\xf5\xf5p\xeb&#123;\xfcU\x18\x9d\xa6\xd4|\xcd\xc7\x99a\xee\xce\xf0i\x1ab\xa1\x04\xe0\x00Z%3t\xa9\xe1V\x12\x84\xb8\x14\x92\xf6\x82\x94\xcd\x91M\x07\x1b\xbb\x869n\xcey\x01\x8e\x9b_\x04\x8c&#125;\xf2I\x93\xe7\xa1&quot;\x90\xee\xf1\xbew\xa0l\xf1\x1f\x1f\x1c\xb9\x91\x8c\x00ns\xa00\xdb&#125;\xe9\xc8\xe8\xec|\xacU7\xf3d\x1c\xcd\rQ\x97\xc4\xd7\r)\xc9\xffy\xb5:J\xa2\x80\x82\x800\xf9\xfar\xf1\t\x93\x02\xe0I&amp;\x9c\xafA\x15\x16\x94\x0f\x7fm\x8a\x04\x87\x92\r\xc7U\x10M\xf6\xec!V\x90\xfc\xdd\xf5\x96\xe4\x11Q\x8b\xe6]\x04z=\xeb\xc7M\x00\xc8zwn\xaa\x02\&#39;J\xe4\x86\xf1\xcd\xf8&gt;5e\xb8%\x90q\x8e\x00\xb4\xd8&#125;ky\xfcV\xd6\xd7\x82\xd5\x99\xc8\xa00z\x83\xd0\x9a\x9b\x8fK\x9e\xf8:pV\xa0\xccn\x80\xccZ\x89\xd8Y:s\xae\xf7\x93\x85x\xf5\xc8\x07d\xa0R\xd6\xeb\xde\xa7\x97\x1b\x10C\xb9CM#\xc5:\xc3R\x16-h\x95\xb26\xff\x97\xd9\x04]6\xea%\x90\x13\xec?\x1a\xf3\xd4L&lt;\xbcF\xf5\xa2m\xbe\x82O\x91\xda\x84\x0ce\xd4\xaex\x9cbPv=C\xfa\x1b\xbf\x87E\xb1\x15\xd6+\x8ai\x99&lt;ZfV\xc75m\x06\x03\x91\x8fI\xcdn\x15re\xc4\x9a\xd3\xceHl\xe1\x9b\xd5\xb3\xed\\J\xd2\x05~\xca\xb9$\x1f\xd3\xd9\xff3L,\xcfwx\xc4\xc8\x1c$\x1f\x92\xd6\xc3\x04WX\xe2\x10&amp;\xf40r\xd2\x1f\x8a&#123;\xb5&#125;\xed\x88\xcd\xa1&lt;\xb4\x1b\&#39;\x1c\xa3\xf1\x9c\xc9\xec\x80\x81\xa6\xb2\x9dW-y\xa2l=\xca\xcc\xabNvv\x07\xbc\x80\xadT;\xb9\x185A\xc6\xa9\xe3\xeb,K+w\xfb&#125;]8d(\x1e\x85\xe2\x93/\x94\xdb\xb6\x8b\x15\x8f#pq\xa1\xf9\x8a\xb9\xcb\x89=\xad\xf3\xf6\xdd\x00\xb9R\xf3\x9d\x89e)\xaf\xc0K\x948\x05\xcc\xbbK\x8aG\xe2\xef\xb0l\xcap\xb5\xfa\x8d\xbfd\xa9 SO-&lt;\&#39;\x93\xf7(\xf8B\xaap6f\xc8Y\xa6\x98H\xb9X\xcb\x08\xec\xeb\x01p\xb1\xe7\xb6\xa8\xff\x9a\xa5c\x9f\xf0\xd1\xbf\x89\xfd \xa34\x12\x8fQO2\x8a\x14\rqI\xea\x19[u\x06\xe6\xfc\xa7\xfb\xa4;\xb6\xda\xc1\xc1\x8e\x9b\xdf\x01\x8b\xc7\xc8u\x8a\xd8s\xaeERx\xb7\x91u\x1e\x89e\xdb\x85L\xebFT\x97/:Odp\xf0h&lt;R`\xb9)\xf1\xab\x1b\xed\xce\xf3s\n\xee\xfd@\xcaV~P\xd9\xcd\xec\xc7\xf0KS\xbe\xf6\x01a\xf4\xf8\x95&amp;\xca=\&#39;\x88\xcb\x04\x16N\xe2\x98E\xc2~-\xbft5&lt;n\x9e\x15\xf7\xf5\xc9\xd6\r\xa2\xf2\xbc\x9a\xa1\xa1\xb5(] t\ts\x12\x13l\x8a9\x15\xaa\xfc\x19\xfd\x84\rht\xa7\xef|W8U\x87\x95\xf5\x08U\x97\xb5\x87\xbf-\xe5\xb7\xbav\xf4s\x01\x0c\xbfN\r\xcf\x8d\xcd\x05\xa1M\x9d\xfe[\x86\xb2\xc9\xa8\xbd\x90\x81\xa7N\xd5e\x0e\xbc`\x86\xfbghJ\x1c\xac9\x97\x19\xaf\xac\x7ft|\xbc\xbb\xfe\\\x9f\xba~R\xdb\x97\x0e2\xab;\xa4Rp\x97.\x04\x13\xf3\xd9[\x8e\x12&amp;\x0e\x97\\\xdek\x8bA\x11\x17\x9c\xdb\xdcgX\x81\xc3&amp;M\x08\x9fu\x02!\xb6\xd6V\xb6\xb1H\xb0|\xed\xd4\xe8\xc6\xfdw\xf0\xb4/\xf7i\xafJ\x85r&quot;\xf7q\&#39;\xc2\x04\x9c\x06\xfeR~\xea\xb3\xe5\x9e\x08\xf69\xc9\xf1O\x92\x89\xd3\xe6_)\xd5\x94\xabe\xd5K\xde\x8b!\xa3\x92\x8d\xc2\x11[zX!+\xb6|\xcf\xfd\x06!Q\x88C\xfb6\xda\xb0\x99g\xa0\x02\xa6\xdd\xf7n\x08\xafN\xf5\x87\x04\xc1\xa0\xed\x19\xb2L\xb9L`\x91W\xdd\xc6\xabL\xa75\xe5\xe1\x00\xac\xf9*\x94q\xb98\x1eHDP\xebf\xb0v\x93S\x1b\xaaI7\xb8&gt;B\x08\xe3h\x93@\xfaJ\x9b\xf3\xf6\xbf\x1d.&amp;\xf8\xe7\x90\xc8\xa8 \xf18\xd0\xcf\xa6\xa5\xd1e\x03\xf04\x9c\xdbs\x03,\xf8P\xca\x97\x8c\x04\xe2R\xec\x90\x1aztc\x12x\xee\xfe\x97\x02\xcbS\x07\x0c)x\xc4J\xeb8\xee\xb7\xd4\xba\xadu\xd7\xfa&#125;\x10\x0f8U8\xe6f\x96(\&#39;^\xabC\xe3F\xd0\xc4\x8b2\x16&gt;\xd7\xca\xd9&#123;\x85\xa4=\xe9\x1e\x81n\xaf\xd7\&#39;\xa3&#123;\xb3\x82P\xd4\xd9\x1c\xf3Z&#125;%\xfb\x06&lt;\xe9/b\xcd\xd9\x0fV\xc2\xdf\xb2\xfa\xd1\xa4\x900U\n\xe3\xca\xa6=b\x91\xc8e\xff=6\xea\x81\xb5\xc9_\x97\xea\xc1\xc2\x9c5z=^S`\xa3\r\xda.\xf1\x1b\xd1\xbbW\x86\xb0\rAU\x1as\xc4\xa5\x93\xed\xa46\x04\xc8Q\xa6\xc6\xd3o\xa8\xf2\xc1\xdb\x0fSp\xe8\xa5Z45@)\xff\n\xa4\x95\xbd\x8c\xcc\x93nj\x85\x83?\xe7\x04\x7f4`\xfdEJ\xe77\xc1\xa3\xc7\x83JO\xea]v\xf85g\x125\xd3V\xfbm\x84\xed-\x1b\x1f/B\xd9pd\xebs\xa6`\xecs\xf2\xb5\xd3\x827\x1ar\x06\xa3\xf3L%xA\xa5\xf4\x95\xf7\x8d4`1\x9c\xd1p7YL\xe7\x8eJz\xa0\xf0NFb\x0cu\xda1\r\x1b\xb0\xe8br3\r\xeb\xa0\x89dl@\x1a@e\x9a\x12\x03K\xd2\xf3\x9e\x158iD\xd8^x\x80X9:\xde\xed\xf4n\xea\xec\xa8\x16^\xb9]\xde\x95\x1a&amp;\xd8\x84=\xc6\xf1\x8b\x8d\x1c\x99\xa7\x88\xbb\xfb\xd88C\x80\xea%\xb3\xb1\xcf\xf1@\xe5\xb5\xdd\xdau\xea\xe1\x94\x93r\xa0\xd3Cl\xd7\xe9Y\x01\x1e\xbbZ\xcf\x0e\x0ej\xf24X\xc8\x1c\xe7\x86)\xa8\x8d\xd9\x08\xbe\xb0q\x03\xf1\xd4\x91\x15&amp;\xec(\xb6\xda4\x95o\x1cHxi\x15\xd7(g\xc8\xe4\xd9\x10\xa8)D\x9fJ\x86\x8c\xa4\x8b\x7f7`R\xb2\xdb\x9e\x90\xae\x85\xba\xd7X&#123;1\xae\x8f\x12-\xab\x8ai\xd7B\xb1\xee\xa1O\xb14\x19\xd2\xe2\x04\xed\xed\xa1\x93\x00\xe0h\x1b\xff\x8a\x85`9/\xa3\xdf\x12\x9e\x9c\xf0\x1d\xedB\xa9J\x1a\xf3\x9e\t^\xc3\x15&gt;.\x07%\xd1\xa17\xf9\xd0X\xdd\xe2Z6\xfe\x96\xc63*\xf7TM@\xaa\x9f\x86\xaf\xa3Gn\x9f~\xa9hs\x03\xbd&quot;\xd9\xfe\xec\x89\\\x06yY\xfc\xc7\x9eR\x83\xe8\xa00\xb2\xf0(r\xa4(\xe9\x90\x8a\xd5\xfd!\xd6\x15\x83\xb9\xd1ttQ\xd9\xcf\x85\x1a\xc1J\xd4\x881*\xa7\x85\xa6&gt;\xbc\x92\x17\x99\xa6\x02G\x82\t[I?u\xe6\xe0\x1e^t\xc7m\x1f\xe5\x18[\xf7pWV\xd5\x92\x89\n\xebT\x10*A\x91DF&lt;\xd4\xc4\xbb\xc9\xedU\xb8\x86\xcd\xe6.H\xc4\xb4\xb0\x9d\x83\xe7,x\xc05^\xfd\xa0\x8bXN\xd5a\xf7\x8e\x0b\x9fX\xb3=\x15B^\x95j\xfc\n\x81d\x93i/\x1bx\xa6\xde\xe5\xf7\x0f&amp;p\x01L\xa1WY&#123;\xe6\xd7\x02\xf2\x0b\x8f\x0b\xb4|~\xb8\xbe\xd5\xbc\xc4\xcd\xe0\xf6h5\x00\xb0t5a`\x7f\xe4S\xdd\x05k\xac\xce\x80\xccT\x95\xda\xa5\xe4?&lt;&gt;yP\xbbR^\x81F\xf0\xf2\\\xd0B\t&#125;W\xdd@\x7fk\xbe.\x089\xe0J9`\x96\x1d\xd8\xc4P\xdd\xa8\x17\xc3x\x82\xc2\xec&amp;\x86\x8f\xa4\xf9\x0c\xc5\xc2dW\xdc\x8d\x93\x0f,\xd0\xe5c\x82\x18\xa1\x06c4\x9a\x90\xa3-F@\x81\xe0k\xc2\xbf\xa1\xaaJ&quot;\x11\x1f\xa6)\xb4\xb0\x0ba\xd9\x11\xb1\x98\xd8~\xf1\xde~\x85&#125;\xd4\xacVc=m\x9c\xff&amp;O\xec&lt;\xa7DH~G\xe9\x9b\xc5\xb4+\x05iq\x04\xd7\xa9B\xb0PG\x92\xe1\xf8\x19\x00~LT\x81\xaa\xbb2\xad$\xff&quot;\xf8\xc2\xb6\xa1\x98\x8a\xa1\x8b\xb2\x06\x1e\x94\xa8(8r\x9e\xdfV\xa5\xb3\xc1\xd4\x90\xda)\xed\x9f\xfd\xd95\xc6\x87\xea\xa3\xf3\xacy\xcd\x9e5\\\x01K\xf3H\x99\x8f\x1b\x06\xea6\xeesL\xda\xf9\xa0\x05B&lt;\x96\xe1\xba\xd8\x83\xc2+)C\xd2\xb8\x86\x05\\\xac\x98\xa0\xcb\x99\x98a\xd9\xb5\xfa\x94\x9b4zX$t\x18\xa0\x04\xef\x95~&#123;\xe0\xd6\xa8\x11Q\xbe\xd9E\xd5\x87jf\x98\x9b\x1b\xe8(in\x8c\x1d&quot;\xd57&#125;\x88\x7fAG\xb0\t\x8ee9\x8c\x8a\xb9\x05O\xdd\x04c\x11\xe8\xbe&gt;k\xc5\x98q\x82=\xa0=l\xbf\xd4?\xc5!\xc0O\x18\xc78\xae\x06\xe2\xc0\x8b\x1e\xb9\&#39;T&#123;\x86%6\x9d\xf3\x12G\xe6b\xd53%A\x9dP\xb0\x8a\x86(ucp\x02\x1f\xb2\x98*Mr\xc5D\x18LV[\xc5\x81\xcb\x89\xdb\xb9\xc2~\xe6\xa1&#123;\xaaH\x95\x19i%\xa3pX|M\xc6O\xdb\xd9\xd9\x12\xcc|\x1d\xc1\xdc\xbc\xb6\n\x98\xd1\x1a&lt;\xba\x05\x00hq\xac\xf0\xcf(\x1c\xd5\xc3\xaf\xc0\xb4\xaeTx&amp;\xce!1\xbch\x8a\xd9^\xe8C\xf6\xdb/BaA\x0c\xf7`&quot;X\n\xd3\xbf5\xe1\x8b\xdb\x8c7#\x04O&gt;3^Z\xfa\xd5\x1a\xd3\xaf\x827\x97\x8a\xbe\xaa\xce\xa0?Y\xe9\xf9E\x96\xd5\xd6f\x03n\xa7p\x1f\xab\\\xbf\xd0T\x98\xebck\xfc\x8d\xca\xb89q\x016\x10\xdc\xb2\xff\xd5\xb1\xb5&#123;\x14\xa9\x1d7b\&#39;\xa8\xc4\x99\xdb\xb0(\x8d&quot;j\xfb\xbc\xda 6\xc9\xb7bQ(gM|\xf2\xe9\xc6X\x0f\xac\x82\xec\x95\x18\x99\xc0\x1ex\xc4\x12\xfe\x96\xa5*\xdb\xe8\x94\x02\xf0W\xae\xec\xc3\x19Ys\xcas\xa2\x1e\\w(&quot;\xa5\xa0\x1b\xfe\xb9\x91\xdcN\xfen\xd5\xde&gt;&#123;\xdf\\\xac\xed\x85\xabI:\xe6\x9f\x11\\I\x03\x9b\xe20\xcf\x85Ja_\xd5\x84\x8e\xc3o\x92\x02\xdf&quot;x/\xe9\x85\xde \xf6#\x17\x96\x12\xd0\x80\x97\xa0\xe7\x8de\xca\x87y\xd8\x06[P%Z\xb8o\xfe\xfe\xf5[XkR3|\x01\x89\xc7\xd8&#123;\x81\x93\x8d\x1f$&lt;\xeb;\xd5\xcb\xd2\xc9&#125;H\xb7\x89\xd05|s\xa3ih\x1ds\x03\xa6\xa3\xf5It\x95|\xda6\xdb\xed\x11\xa5\x1e\xf3z\xf6\xb0m!\x87\xad\xc9`\x8c\xa8\xa49Q\x9bH\xc2\xad*,uU\x18\xc2\x1d*\xb4y\xf6\xa4oO\xfaJ\xe9+&#125;\xeeF\x86&#123;\x9f\x1e\x8fJ)c\x81\x98\xc3uxVvT\xe8\xc8\xc9\x1cf\x9c\xd03\xe7\xdc\xeedi\xfa;qk\xb9`\x9f\x1d\xceYj\\\x1a\x03KaO8]p\x83\xdb\x04-\xbaWh\xca\x15\x1eK&#125;\xb6\xfd$IkuA\x01\xe7\xc8\xd3\xber\x0f\xber\xce\x9e\xe10\xc4\x991\x83X\xef\xac\x98\x01\x80\x99u&amp;V\x06|\xb3\xe5\x1a\xbd\x1c\xcc\xb5!\xc2U(\x89\xd4\xd6c\xd4\xe6\xb4\x10x[|\xa9\x04\x90Y\x08\xd6P\xff\xd5\xfe|\xe8\xbbs\x89Z0rffZ^U\x9e\xc2ED\xabl:\xde\xecv&amp;\xdd\x0f\xee\x16uv%\x0c\x15\xd2\xc4\x8c\x11\xec\x0c\xb2\x1b\x01\xfa\xd6DNb3\x08\xdd\x12\x05\x90Z&amp;\xc6^\x85\x1b\x0bA\xb5\xc9\xe3x&lt;\xd1\x90+\xf2\x97\xb4\r\xe7\xc4\xc0\xfcGqW\xd2|\xbab \xa2\x17\x88\xbb5)P`\xde,\x85\xe5\xc0mO\x10tL)X\xbb\x94\x9f6\xb2\x88\xc9&lt;B\xcd2\xd58\xa2l\xf8\xef\xeeCD!F$@\xd8\x0f\x9c9E\xaa5\xf9\xabGl\x9cp\xc2\xdf\xfcZ\xc3s\r\xfdX\x97\xb2I.\x7f\xb2\xd6\x01\x001\x984m\xd9NA\xe7\x13\xdd,YJ\xbeg\x14\x01b~\xb9_\xde\x93\x8d\x85\x84\xb9\xcf\xc1\x8e\xba\xb0=\xbb\x08s\xa3^\xed\xd3\x0e\xd8N\xad\xa3\xab\xa4r\x90KK\x15_\xcc\x1b\xb7K\xb7\xef\x9e?\x9e\x99\xe4\xa53.\xc0\x04\x91q\xbb\x89J\x1a\x1c7[\xe05\x1d\xe2\xf9?x\x9c\xe4\xb5%\x9e\xe4d \xc9E@\xbb\xc4\x0f\xc3+\xe3\x95a\xe0\x9d\xde\xb8u\x1e\xf0q\xc3X\x1f\xc9F\x89z\xc5,&quot;\x85e\x86\x91\xf91_l\x85j\x99f[e\x8c\xa0&gt;\xd5)0 \x9d\x9a7\xbf\x8b\xedh\n\xa8\xa6\x83\x8b\xdf\x98\xf5\x9dS\x1cL\x18\x15\x17\x01\x17\xf9\x1b\x02\xb2,\xbc\xaf\x03n\xd1|\x84\xb8V\xab\xec\xa2\xce\xba\n\x03\xea\xd4\xdf\x91a\x1e.\xe1\x8c&#125;7\xa8\xafl\xd4\x81\xd42\x92f\xb3A&lt;\xb4\x08iB:\xa4 \xd8J\xb1\x81\x85v*\xe8\xe2\xd6\x84b16&gt;Y\x9bj\x00:M\xd7D\xb5\xcf\xe8\x7f;\x83&#125;\xe2\xe9\x199\xc4\xc5\xbe\x1a;\xdb+\xcfG\xaa$\xe8\x9e\xbbV 4\xf11\xcc\xd2\x03Zr\xa2\xb4\xd5\x12t\x0c1&lt;Pv;_,\xe1\x96\xd5m\xdc\x05\xb0\x81\xe0o\x8b\x19\xddZ\xa6\x86\x16\x7f$\x07AA&gt;\xeck:\xa9\x00B:\xdfO\x81\x11\xac\x13~\xf2]\xe3\xec\xbf\x1d\xa4\xf7_\xa04]\xd8\xa8\xf5?\xdd\x8b\x0e\xc3\n\x83\xdbQN\xfe\x86\xd7!B&gt;\xc2\x90_^\n\xe4\xbbx\x9f%CU\x80\x88\xd9\xb6\xeb&amp;`\x8fg\xd6\x87\xb6n\x13\x87\xdb\x9f\xd5\xcdCR\xa19p\x10\x82\xb034\xe5\x9b\xcd\xeac\xb4\x05\xd3\xa1\xc4\x01\xbd\xc7\xc7\x97M\\.\xc1\x934\xf6\xf5Ft8O#\xa2L\xf2\x11\xa4p\xf8\x064D\xe1\x06\x9f~\xcc\xc2\x89\xc3\xd1\xcc+eKG\xa0\x85g\x12\x15\xb7\x87\x11\xe7oe9\xe0\x99z7\x8a8$\xd6\xe2\xac\xf0\xbc\x05\x9e\xf9\xea&amp;\xbc\xb4\xcd\xce\x86z;\xe2\xa56\xd6&amp;\xfe1\x1dK&#125;7\xc7Q\xa9\x10\xdf\xe8\xe5a\x0b~\x1f\x99\xef&gt;)\x84\xd9\x16(\xd7\&#39;T\xeeK\x06\xee&#125;\xdbj\xcb@s\x1a%\xfe\xc3C\x9c\x1c\x9b\xf0\x8b\xa8\xfd\x118$\xcaZ\xf8e_\x1a4\x9b\x94:r\xb0\xdb\xbb\x12J\xde\xc2\xedg\x9a\xb52CMm\x8e\x00\x81\xae\x8d\x16\xca\n\xe1\x85&#125;&amp;\x10WZ\x8cM8c\xeb\xcegA\xe0!*k\xdc9\xe5vZ\xba\x88\x01\xc2\xbc\xadW\xcfs\xcdj\xf6MN\xb1 i6&#125;8\xb6\xc43\xb3\xbe\xf0\xb6&quot;\xe8E\xf4n\x917\xc6\xbb\xd79\xbc\xc0)\xea\x94\xbc\xde\xc3\xc9\xc20\xbb\xde\xd7S\xde\xdc\xf8\xb1\xd6\xdf\xf2\x04g`\xd2\xdd7\xf4\x14\x14\xb0\x9d\x9a.\xc8\x19zM\xbe\x84\xa8Aw\x06&#125;_zR\xb7h\xdd\x12\x08g\x96\x1a\xf1\xb0\x8f\x8b$&#123;\x9aL~\xce\xa4\x02\xeb2G\xbc\x00\xect\xd2T\xa7Q\x88\x88\xa9s&quot;\xf4\xeb\x9e\xfb\xe7D\&#39;\x1c\x95\xbfE\xd3&lt;u@KA\xcfK1D\x82\x08b?\x89\xd6\x90:\x9f\x16\xa4h\xc4i\x8e\x81\xb9 \xba\xf60\xf2\&#39;tJ\xb2&amp;B\x82\xf0\xa7\xab\xc2\x02\x98\xb9\x18\x83|1\x7f\r\x8e\x16\xa4\x1c\x00\x06\xa2\xcc4\xa1\xd9\xad\x98\xcbEA_Ciu\x98\x0c\xb6I\xc5\x8b\xe9h\xfc\xcb\xc3#\x95 \xec\xd4\x0e\xc4\x03\xe14V\xfa\xb1\xfd\x10H\xe7\x95ScX\xe7\xce\xa4\xe8%\x02\xbd/\xdcX\x03\x81\xd1f\x14\xab/\xe1\xcd\xe9\xc7\xa6P\xf4\xc6~V\xf9\x8fB\xb5k\x07\x86\x01\x8e\xcf\xc1\x1e\xb2yP/\xa2\x9e\x8e\xa5$0:E\x13I\xa8\xbaE\xc7\xa9\xf0\x0c\x91\x7f5B\x91\xf2#\x19\xda\xe0\xb1m#z\x1b\x8f\x80[\xa1\xc0C\xcf\xc1o\xe5\xefRhAt\x1eL\x88v\xf8\xfc&quot;O\x8e\xb6\x089\xcd\xe0\xde\xa5\xd5v\xa8~\xccR\xdc\xa2\xefk\xd5++)\xf3jJk\xa4K\xcf\x07\x90\n\x1e\xf8\xe6\x92B\x88\x86\xe7\xe2\xdf&amp;\x0b\xa0\xfeY\x8a\x00g\xe7\x81\x17\xf62\xa9?\x0f\xe6\x19\xf3\xcb\x06\x9c\xef\xc8B\x87\xe1\xffex\xedg\xde\xcb\xa7Wy\x05\x02\xe4a\xe3\xb6\xa4\xe3\x8a\x9a\xe5iL,\xa1\xf6\x0fU\x0e\x9d\xa5\xfb\x9b\x81o\xc1%q\xc5`=\x9f\xd2\x07\x1d\xd0\xf6W\x10\xc6\x11\xb6\xf9\xea)Q\xfb\x80;\x8e\r\x12C\x92 P*-&gt;\xc9b\xb6\xe1\x86\xcf|\x981Kv?T\xea\xea\n\x91\x7f\xc8f-\x07\xf0ec)\x91\xb2\x82%H\xb5\x0e\x12\xa1*\x13\x92\xf2\x17\xe7\x8d\x17L\x1dnxi\xd4\xd9\xdb\x9b\xfc%mg&lt;\xdfT\xa7B\xec7\xf1\x01\xa2\x8aU\x05\xf8\x0e\x19\xaf\xb9f\xe0\xa7\xfc\xa7K\xe1\x82(\xa5vW\x9cj\xbd\xa0\xf7\x02\xdf\xa6\x12\xf8\xd5\x80\xd0\xa8f\xf0\x89iI\x92\x82\xd7\xc2`j\x14\xa3\xaa\xfd?/\xf4|%l\x99~\x95\xaf\xb2\xe9\x12\xdb7\x80\n\x92\x9ft\x889,\xeaK\x82b\x0b\xff\xd4;\xed\x11\x195\xa9R&#123;\xad\xc27I\x0b=\x96F\x99\x91Z\xa0\xdd\xe6\xa6\xad\x80\x1f\xbc\x9fC\xe1\x98\xaf\xa1G\x98\xc5\xdaf\xe1m\\bO+\xb1\x03\xd1b\x1b6\xb2\x06\\\x9a\x9ez%X\x803\x0c\r\xdc\t\xf3\x08\xab\xe8\xa4\xc3\x9e\&#39;\x1f\xac\xef\xed\x02gmWlG/\x94\x99\x80\x99\xa10f\xd4u\x9f\xd3\xa3\xfcG\x94\xa9|^x?\xb3\xfc\x98\xa2\xf9\xe1q\xa1%\nG\xdd6\xd8\x97\xc8\x99XzHbK\xd8\x00/\x07\x0b\xdf.AVs\xa6\xc5\xe9\xd6\x81\xbbvN6\x13\xd6\xb0n\xbb\x00\xff\xf6\x82\xb0\x8e[P\xc5\x9c.6\x0e\xad&#125;\x9f\x11\x98\x89O_\x1a\x02\xc1\x8c-\x90\x99\xa0\xed\xa4L\x1b\xdd\xf8\x90\xc6,\xf6&#123;\x94\x82`b\xc3:0\x8a\x17\xf4\x89\x18\xe4\xdf\xa1-\xcf\xe9[\x13\xec\&#39;\xf3\xc9@\xe0\x89\x8c:&#125;\xdd\r\xa5\xaf\xbf\xb1j\xed\xb5\x1ep\xc4z\x03P\xb8\xd4\xf4M\xcd\xb9C\x8d\x18J\x03O\xfabk\xe6e\x0egO2]\xf8K\x9dC\xc2\xc2\xebs\x19\xa1\xe6\x01\t&#123;\x10\xcf#\x1d\x12\xbdk\x17e\xed\x1e\xb5\xa2\xf2^t\xf8\x18gqvj+\x19\x17\xbe\xf0\x9f\x8d\x80/\xd3\xc2|\xcf I\xce_\x8a\xc8\xf9zj\xd8RH\xa0\x93b\x14\x8f0\x03\xdd\xa7\xfd\x8d\xf7\xa6\xf0\xc6\xdd\xe9N\xff\xc9\x05\xd0\xe8-\xa6\xccB\xca&#123;\x18)Fmxg\xa2$Z*\x00\x0f\x85\xac\xa0\x0by&amp;e\xb1hq|\x838M\xd0\xcf\\\xa8\xf2+X\xc0\x83m3\x19\x8e\xec\xb4\xc5\xa0\x9dJ\xfa\xf7\xcb\xb1&lt;^\xa7\xe3\xc7&quot;\x0e\x1f\xe3g \x8c\x18L\x85\xb9c\xee\x9b\x1f\xf5\xcd\xbd\x18\x8d~\xa2\xb9\xab\xd3\x0f\xb3H[p\xee\nD\xd5Y\xf3\x80\xf8\x0cI\xcf\x0e`\x868\x19*\xc3\xc7a\xebs8\xeb\xf1\x15l\x8dZ\xebr\x8f\xa6\x0f\xcd\xf4\&#39;\x8b\x13\x8e6&#125;\x0c\xd7\x195\xd5\x19\x8f\xb4O\x08\x99o&quot;ykA\xe1\xd1\x8ea*\xcdI\x0c\x8dW\xe3Y\xaa\xa6\x80I\x81\xedC\x1b(\x92g\xc2\xa8\x8fQb\xba~\xa7\x86&#123;\x98l\xb9H\xec\xe1\rU\xaf\x80\x0ei!\xae\xceaa3x\xb1\xd9\xffi\xd9v\xa9/\xe8\x18\xaeX\xd5\x10\x90\&#39;\x1c:\xae=\xd0\xe0\x849\x89\r:j\xa7\xd6\x96\x08\xc9F6\x1d\xad\xb5\x8a\xaf\x1b\xe7\xb3.\x94\x7f\x0f\x9a\xb2\xb3(\x8a2 \x06\x959\xe2\xfd)(\x9foC\x8c]t\xa8x@\x9a\xd21+\x84q\xbf\xf44\x98\xb2B&#123;;F@&gt;\xb8\x16\xe9d\xd4\xae\xf0\x11k\x10F\xd31t\x16\x19\x1b\xe5\x0f\xe8\xe5\xecw/n\xbc\x01~2\xea\xbf\xa7\xfb\xe1&quot;S.\xc2\x06o3\xd3-n-\xacZ#\xcfK\xf5V\t\xaa\xc1\x8a)D\xcb\xba#\xdb\xb7\xcc\xe6w\xe6U\xef\x1c\xca\xd8&amp;\xb7\x8f-+\x1f&amp;&#125;\x1c1rZ\x8e%Iu\x05R\xc6\xbe\xe6\xa4j\xc0\x11\xdc\xc6\xff\t\x85R\xab\xdfA\xaaG\xdf\x8e\xe7\xba\xba\xa3\xb4i\xf5b9\xfa\xa6\xfe\xff\xf0,\xbb\x10A&quot;tt2S\xe8\xc7\xaf\xf5\xee\x97&quot;\xec\x0c\xe2z\xedbEMR\x80\x13\x97\x00\xf8\xd6CC\x86D\xbd\xf0\xde\xa8\xf4\xe5\x84\xa4\xcdG\x8e\xdcb`l\xcd\x19\xab\xf9\x05\x1c\x1fO\x86TV+\r[[\xee\xc5\xab\xec\x1a\xbf\x13\x02P,\xb0B\x9f\xd8eL\xd3UO\xc7\xb5\x12\xdd\x84\n\xc9x\x1a\xcd\xb3V \xa6\x1d\xda\xa1\xdc\xdb\\P\xa4O\xfbW\xa0\x19\xf5\xac\xc4\x94\xe6\x9f\x8d\x891\xad\x90\xa0\x1e\x19Mn\x00\xc7\xac\xb9\xcf&lt;\xfbrp\xd1]\xe1\x86\xbbvN\xb4\xab\x8c\x89g\x9b\xca\xb7\xdb\xe8\x1fU\x9d\xca&quot;%3\x1b\xafH\xd0\xe2\x12\xbf\xb5\x85At\x8b\x02\xdaaoZ\xf8]\xd0\xe3\x83\xec\xca\x02s\xda\x1e\x87\x08$ \xea\x14\xaf\x05\xaf\xd8qCd(&quot;\&#39;s\xbe+?+\x9e\xa66\xd4\x8cd?\x8d\xc0\xc7\x174R\\\xc4d5\xcaC\x8c\x80\xa8X\x93t\xee\x0b\xb3L\x969\xb8)/4\xdfL\xf9&quot;RQ&lt;\x9a\x9d|\xf6u\xbfD\x13\xb0\xf8H\xf8\x05\xc5\xa6\x13p\xb0\xc6r0\x1aO\xad\x9a\xd9\xfe\xeb\xbd\xb4CO|\x8d2\x89\xd2\x1b\xf0&#125;R\x12U\x1e\xea\xaf\xf5\x03\x99\x8bK\x9c\xeb\xd8\xfa0\xe7]\xae\xdcc8A\x9f\xa0\xff\xe5\x80\xae\xc4d2F\x9e&gt;o\x99[\xe1\xfb\xe4\xa8\xd7\xf6\xb8 \xe2\xfe\x1a@\x85\x82 cV\x8d\xfe\x97\x9d&gt;jV\xb8\x84\xef\xad\xcf\xec\x87\xb6\xfb.Fky/_\xd1\xf7\xd5\xb3\x8bu\xeb\xdd\x02\x14\xe1\x17\x1d\xb7Z\x84g\xd3$s\xc0\x10\x9aP\x10\&#39;\xd7\xcf\xd5ug\x9e`\xcc\xf3\xc4\xb9\xb3Jw\xa9I\x96\xcfsZ\xfb\x10\x85J\xedR\xc6&lt;Y\x93\xa1\xfb\xc0&lt;\xe6\x9f\x9bb\x98\xdd\xc3\xbbt5\x10\xa1\x80p\&#39;\xd3\xca\xd3\rR\x13\x13jS\xe5\xaa\xc5\xbe\x14\xa8c\xa7\xec\xb00\xe0D@\x1fE\xa7\xaf\x03`Fo\x8b0f\xbe\x1dIK\x08\xf8\xb7I\x0c\xcd\xb1\xee\x1d\xaf\xc6\x1a\x9fQ\x03\x07\xb9j\xba\xd9\x93\xf5\x90?\xe1\x9ec\x9c@o\xb0\xc8:\x9d\x959v\x87j\xe6\xfc\x19\x8bY\xe8\xcfHeLjQ\x14\xe5@h\xfbY\xbc*\xb4$\xcf\xec@\x9e\xf97nC\xfe\x1c9\x18\x8f \x1a\x80f\x1b\x05\xb3^R\x85\xdd\xa8\xe2\x19Q\x03\xc9\xff\xe1\xeev\x917\x1a\x8c\xd5\x9f\x98p\x02W\x99\x8c#\xe5\x83J\x84\xa4\xd2\xe2\xfa_\xc2\x15/\xee!CF\x83U\xb6d\xda\xe6\xb7J\xa2\x05\x7f\xfc\xb4C\xfa\xae\xe3\xe9\xd94\xdd\xd9&lt;6\xe2c\xe5\xa7\xe0\xc4\xff&gt;Y\xfc\r\x84\\\x1c\x0b\r\xf1\&#39;\\Q\xd2\x04\xf0\xe0\x15\x07\xcf\xf6?\x07\x1b\x16&gt;\xae?\x99\xe7\x7fN\x93B`\xfe&#125;\x88\x12\x1fy\x18\x00w\x15U\xb0\xb8\xb6\x91A\xbd\xcc\x1fT*\xb5F\xa9\x01\xf1L\xb3N;\x87S#\xc4/a2\\\xe6G\xa6\xee0Br\xc8-\xbb9 \xd7R\tB\xa9\xads\xf9\x1a\x85\xf4\xc7pv\x96\xdc#\x10sp\xdb\xba\xa2\xf4l\xfd\xcd\x0c\xa58\xb3\xb0\xf7\th\xe38\xaaF\xfd\xda\x8f\xc2\xb5\xdc\x942F\xea\xdbY\xd8\x94\xbe\x0bP\xe8\x0e\x7f\xed\x1aq\xaa\x19\x8cR\t\xd0\xaa\x17\xee\x82\&#39;\xab\xb4\xfc\xda\x16h0\xb6\xb7\xb9&quot;\xd6\xaa\xfc\x0esQ7\xe9S\x11\x90P&#123;\xaf\xbbO\x13JL\xa0\x1f\x87\n\xc5\x8d\xfd\xe8\xb8!\xae\x87\xe0\xc2\x1d\x9dD\xaa\xe4\x13\xd7\x03\r\x86\xa0@\x04\xefl&#125;\x8d\xbdC\x80\x00\x0c\n\xea5~\xea\xf5\x94\xed\xc0\x12\x16\x1d\xacl&amp;\x97:i\xee\xbdz\x9a\xe8\xd5\x95mY\x0e\xd8^=U\xec\x14\x86\xfaQA~\x99\x87R\xdcI58\x19\xa6\xa3\xe4\x903\\\x95i\xb8\x04ggm\xa9\xfd\xff\xea&amp;B\xdf\x18V&lt;\xbfL\xfec\xc2\x06&quot;da\xbf\xfel\rX\xa6\x8fqO\xdb\xb8|\xebH\xb91\xf3n\x13\xb4\x05\xad\xcf\x9b\x8a\xee\xfc\xdb\xbc2\xda_%\xae\xf0p\xbe\xbc\xc2)\xc8\x0e\xe6M\xef\xcf\x11\xf8CN\xbe\x8a\xa8\x83X5\xe2Htqm*]%\xc7\x05T\xc64\x03\xf71G\xc1m\xe5\xcb\xa9#\x19\x05\x9dI\xa5\xaf\xd5&quot;[\\\xe6\xc4\xe3\xce\xc9&#123;\xb8\x8c\xdf\xc4\x7fZXdB-G\xe4\xa3;\xac\xc2_\xde\\\x9b\xa5p\x96&#125;5\xae-\tA\x11M\xa9a\x08g\xac\&#39;^\x05\xcbE\x17\xaeZ\x17N\xd1I\x84\xf0z\x91\xe5\xbb6\xb5\xda\xce\xf7\x97\x06\xd8g\xb2=\xcfo\xf0&quot;c&#123;s\xf4&lt;\xb0\xde^\x9c\xaf\xa4\xaf,x\xf1T\xba\xe6\xac\\\x8b\xa6\x878V~\n\x8a\x80\x8bus\xc9\xaam\x87v1^D\x0f\n\x01\xd9 \x99W)\xe7\x18\x9f\xbd\xd6R\xa8\xd92\x07I\xae\x1f3)I\x9d\xe1d\x8b\x01\x1b\x0e\xac\xa5\x12\x9c\x1b\xa4\xd2\xd6(\xc4\x9f\x80\xb4\x8a+\xe1@\xa6\x1eBEy0ALp\x14\xae\x93\x13Lc\x9a\xb3a\x9c\xb3Bi\xf1\xfdp,b\xff\x0b\x06&amp;\xfeOY\t\xd1\xc3t\x1a\x07\x14\xe9\xed\x87\xa7x\x1f\xd3\x7fx\xe2J\xcaBG\x9d\x03f\x9b\x07?\xd1\xa7\xb4^l2\xf4\xee\xb0\xbf\xdb\x0e\xe1\x90\xd8\xd92\xa8\xad\xaa\xa1EM\x9c\xb1\x15L\xe7T+oJc#5O\xc4\xae\x02X\x8b\xb8@\x8e\xfa\x14&quot;$\xe2-\x0c$\x92\x91@dV\x83Sc;vP\xd4\xbd\x07\x91\xc3\x9cw\x00\x13\x01q\x899\x13F\xe4\x1c[\x0f\xa9\x9c0\x7f\xedr\xf3\x89\x7f\xa9^\x1c\x00\xe9\x9e\xa8`\xe4S\xce\xf5\nm\xa0\xff\xb2\xf6\xac\x1cZ\x1a:?\x9b\x99\xf5k\xd1&#125;\xcf\xf9\xb1\xce\xe9\x93\xbf\x87`\x08\xc7&#125;\x82istT\xb3\x01\xfc\x9aO#\x0c\xcc\xf9C\xa8\x04\xe5\xf6\x81;,Jp\xba\x16K-\x11P\xdet\x90\xef\xff_\x892S\x90\xc9BT\xb4\x9e\\\x07\xc6\xb2\xa6/S\xfd\xa9\xf0(\x98\xf3\xbf\x17\x1e\x9d[p \xb7&#123; \xd3\xf1\xc3\xc0\xf6\xd9K\xa8\xd6\xc7-q\xf7r\xac\x1fR\xe4J\x9e2l\x1e\xeb\x81y!\x99C\x02vs9\x96\x11\x80\x92,\x13&#123;\x1f\xe8e0\x80Q\xcb\xefJ\xc0Ztqm~\xcf\x9e,\x9dR&amp;\xc4\xee_|J\xe8ce~\xa0\xd2\x05\xc3\x15dxo\xee\x11\xa7\x8aH\x93\xc5s\x1eXV\x9d\xf5\r\x95#\xe1Y\x04 ^\xec1\xbd\xd3\x97\x9d\x06\x99&amp;Vy\xf1\xa2\x85\xa6\xa7\x83\x06c\xc7\xa9\xf9\xdb#\x91\x93\xd0\xde\xd5\x9f\xdaiq\x9f\xe2\x12\xc2KO\xe5\xf7\xc9]L\x00\x838yk\x19\xe8\xb6\xf2\xcc\x82\xb9*9\xd2\xf1\x89\xad\xeb\x03\xe46\x0e\x9f\x8f\x03C\xa8\x9b\x04:\xb2\x83\xa5\x17\x80\x07\x99$\x80\x0e1\xdf5Kh\xa9\xc9!C\xcb\x99\x17\xea\xdeC\xe2e\xf9\xd9*\xae`C\xcb\xe6K\x8a\xc0\x90\x83/\xfd\x90\x1f0\xff\xbb2\xc7\x89\xa2@\x11e1a\xfdw\x95\xa8qm\xc9l\x96zq#\xb9\xea\x1e\xf8\x1d\x93l\x8dB\x82\x84\xd2\xe7=\xc4\xebD7CBC\xda\xe8\xe5\xc6\x08\xfe\xc4e\xdb5\xb3\x8e\xd3\xf2\x8b\x0b\r\xc9p;|\x1e\x19F\xc5.\x85\x84\&#39;\x83\x7f\xa2\x15\xb3\x19g\xbbge\x99\x17J\xca\x08\xf6,7\xd2\x01\x7fa\xf8\x81\xdc\xb7E\x06\x96\x85_\x0f\x19.9\x99\x10n\n\x01\x86\xfc\x157\xc0\xa3X\xb7\xf2\xef\xbb\xc3n\x92p\x04\xc6\xe3)\x1bwe\x8d#r\x83\x1a=\x92\x8e\x80&amp;\x07\xaa.\xf0\x88\xda[\x0c7w\xf7\xe3\x9a\xad\xc5\xa5f\xfd\xe4\xcf\xb7\xb8\x0f\xba\x1f\x05\xa7\xc2\xbb\x8f\x19\xbeh\\\xbd\xc4\xb9\x16\x05\t\xa8\xf76S6\xb7\xd2\xa4\x86\x8d0\xa0\xa1\xba|\x11i%\xd1\x82\x0e@\x9f\xd9~\x85k\x81\xb5\xfcr0\xb7\x8bd\x13\x1bO\x15\xdc\x7f\xc9\xd8\x8dp\xf6Mh\xe5\xe6\xa7\x16Q\xa1b4\xa8\xb06e\xd9\xa2f\xa2\x0e5\xf7\x8d\xb2\x11YH\x9f:\xa1)\xa5n\x1e\x97\x89\xba\x17\x84\xe2\xdc.\xd4\xcb\xfd\x8e\x1foh\x85\xde\xd1\x941\xe9\x9b\x97\x9a@\x8b\x93JEIb\xc9\xee\xf6\x9e*\xfb\x18S\x82j\x9ag\x1c\x1a\xb9\x98X[\x85\xa3\x94\x12\xb7\xc3\xa83\&#39;\xda\x02\xa3*EQ\xe1h\xe1[\x8e\xe2\xc6&quot;\xf7Eb\xbav\xab\x87\xc0\x98\xd7 \xa8\xbe\x1c^\x02\x96\xd4P\xd00\x13\xd5\xd5\x96=\x95\xbe\x8c\xdbd&lt;wTn\xc0[\x16~\xd53T4\xffJwJ\xc9K\x18\\PT^\xabE\xabI\xf7v\xdf\xfe\x88\xc6\xb7\x9a\xaab\x81mj\x05\xd8\x0f\x03\xab-C\x1c\xfbS\xb2I=\xbd*\xa9&#123;\xf2\x16\xccq8\xc2$&amp;\xec\xa5 \xbe\x85,\xd0R\n\xa8R\xa5\xa5_(\xb0\x8f\xe1\xa5\x8bE\xb4#\xc0\x8b\x97\xf0\xa0\xdc\xc5!\xae\x15\x0c|\xcc\x191\xdb\x02U\xe6\xed\xb4\xbf\xed\r&#123;\xe57\x88J\xc6\xbd\xe5\x90\x9b\x99Jk\xf3\xbeX\xbe\xe7e\xd7W\xea\x9bzg&amp;\xb5\xdf\x00\x90\xbf\xb0]\xbd\xe9!\xde\x8ak\xf2\no\x91\xa8y\xdc\x0e\x0ci\xb4py`\xcc\x85(\x0b\xa5\x085\xb3w\x1c\xbfW\xe9\xd9\xd0\xc1\xfb1\xfet\x17\xad\x8c\x91\xbd\xd7m&quot;\xf8\xdc\xf2\xfb\x00\xa9\xd7\xf2nT\xb3\xa1\xc2g\x14C\x9aa)d`U\xc4\x11\xdf\xcf,\x16\t\xe1p\xd6\xb5K\xbaE\xe5%\r]\xa6\x1d\xc5y\x94\xcf1\xaf\xd8W\xe4\xec\xf1\x81\x18\xa0\x8b\xa7=\x1d\xe4dB\xf2s\x9d\xd9\xd6\xc2\xcf#&amp;\x1e\xf0\xcf@\x91\x92\xc0\xba%\xba\xe9\xb2&gt;V\xb9\x04\xd1\xbe\xbf4\x07R\xe1R1\xcb\x85\xaf\xa5 \xb5\x18\xe7\xb44\xeb\x95\x95\xb1\xa1\xcfI\xe9\xe9\xe8\x97\xc6\xec\x1ce\x8e\x8fYQqY\xbec$IU\x00AINp\x18\xbbl*\x0ei\xf10\x19\x1f^\x98M\x91\xfaC\xbf\xea\xad8\xa1P\x10\x8b\xcf\x90\x18\xb3\xbd\x0e@\x08+\xe1\xfc\xac\x16\xdc\xb6\xe3\xc3vW\xf0\r\xfb\xfa1\xef:yp\xdd+\x1a\xf7\xb4VZ,\xfa\xb5\x19\xc3-\xb4p\x1a\x18/\x14a$!\xc6\xea\x91\x13b-M\x9et\x86\x00\xc4\xf1\x9eO\xd9\xdc\xa0u\x0c\xe9I\xf3\x1d\xef%k\xb8\x95~ ,B\x97\xc1/\xaf\x84^\x1f)\xfb\xb9&#123;\x9e\&#39;L\x9c\x17&quot;\xf4\xa56K\x9d\xbc\xe3\x01[ \x17\xb5\xd83`\x85&gt; B%\xe3\xfa\xfe\xd5koU\x16\xf1\xa4\xfa\xc4\x81\xbd\xdd\xbaqF\x14\xed\xa0JR\xbe\xcf_9\xf1TV\x152\xdb\x98\xc3A\x0bM\x9f\x8cl\xc9iE\x03\xa0.\x9e\xc3W\xa4\xa7*\xf9\x00\x7f\xea\x16t?;\xa7\xcc\x17\xcads\xec\xe1\xa4\xfc\xc8\x84\xf5-\xa7\xca\xfa\x8b\xc9\x07\x87\xfa\xce\xaeU\x0c\xab\xb4Q#\xdd\xb1\x91:F\x19\xb5\xe3\xaf\xcf\x02\xa2\x08\xc6\x85\x9a\xfa\xb3]\x9ck\x81&lt;\xea\xe5\x15\x17\xad\xc7+.\xe1\xcd]\xe5=\x90\xf0K\x0f\xa8\xe3\xca\xf7\xe7c\xb6\xd8x\x8d\xdb,\xba!O\x94\xa0\x0e\x0f~\xde~\xf2\xf6\xe0U=\x81\x91dq\x8a\&#39;\xd6\x92\xe6~1\tt\x9e\xa5\xaeh!\xcdJ\xb1\xb3q\x96\xf0&#123;\xfa\x0b\x10]*\xce&quot;\xff\xd4rk\xe9\xf7\x1dK \xb8\xd6\x89\xfcj\xa0\xf8\xd8\x82\xa2\xed\x97\xbeom\x9c\xd6\xd6\xea\xf6\x1dN\x1c\x01\x1d\xa1\xae\t\xd7\xd1O\xd8\x13\xcf,\x9a\x17\xbf\xfe\xdfuB\x13\xe3\xa8d:RuV\x98aAM|\xa59&#125;F\xa2[]\x05\xfeef\xe3\x92h\xf1\xc2\x97a\xcc\xa3Z&quot;*\xb6_\xff\xdeu\xadR\xf0\x0e\x0e\x89\x17\x18 \xf0\xe8&#125;B,\xa0&#123;\xd6\xbd\x11\xfdi\xe2K\xde\xb7&lt;\xa4(\x1a\xc6Z\x96\n\xdc\xe9\x82)!\xf4\&#39;`Qs_\xec\xe8\x18#\xcbHo!Tx\xce\x1a\x7f`v)\x15D\xc9\xfdE\xe5sy\x85\x87`\xf8\xa8[\x1d\xd9\xcee\x0e\x87\xd1\x1a\xfa\xcfA\xf9\xe6\x0fS\xec\xfc#\xd7\xd73\x1c=\xcb\xcb\x9dC\xba\xcb\x03\x8a\xbb\xb5\x1c\xf1PS\xbe\x14[\xc3`\xbd\x87\&#39;o\xef\xddN\x89\x10\xfd\xc3\xc4\xafq\x17e\x0f`U\x8e5\x19\x0f[\xa2)\r\x0c\xa9\xc2q\xbcS\x9ap\\\x92\xe9\x16+\n\x98w\xf7)MS\xec\xb1\xa9\\\xecR\xc1\x03\x13\xe7\x80\xe6\xf8\xe1nz=Q\x10\xb2\x1c\x12\xa7\xed\xe0\x9e\xa7C\x89\xa8\xd4N\x1f\xe4\xc1\xf2\xdd\xbeJ\x9e\xd3\x1c\xa7EE~\x1a$\xea\\\x98\xb8\xe8/\x05\xc0\x96\xd96\x02luFB5g\x83D\xea^1d%\x91\xe1\x01\xe8\xd39\x7f\x027\xc6X\x1at\xccES\xb9)s\xb7r\xfa\x0c\xf6WDR\n7 c&#123;\x8b\xef\xb0\xb2u\xbd\xca1vq$\xa1\xb7\xa9\xa4x)\xac\x11:[:\xdee\xc1JL\x7f\x0b&#125;\xd4\xd8\xe7?\xca+\x86\x85\xd1\xbc\x82\x98\xadfG\xaa#\x18\x18W\x8f\x91\xd3p&quot;wV\xc9\xfc\x92M\x16P~y\xf2`v6\xe4\xce \xc8\xd31\xbbR\x9bV+\xa1\xd9\xc4\x16\xef\xb8F\xf1\xd5\xf2c\xfb\xe9\xa2S\xb8\x87\x9c\x90\xff\x8b\x19p\x876\x04\xe2\xf9&gt;\x86\xe3\xb8r\x9e\&#39;\\\x89\xca]z|1\xe8l\xa0\xec\xbd\xc5\xf9\xd7a\x82\xe8\x11\xf6\xf4\x84)\xdb\xde\xb6t%\xfe\xa2y\xc7zf\x8d\xf8\xae\x87\x91\xa6W \xe2\x93\x9f\x85\x8cg\xc53%\xb3\x1b\nt\xce\xdc_\xcf\x8c\xfdI\xe93\x92\xb8\xe7\x8f@\xfe\xb8\nZ\xe6\x82\x10Q\xb7\x91P\xc4\xd3o\x97*\x11T\xffe\xc1\x84S*\xef\x85\x8evW8y\xfe5#9\xca\xac\x8d\x92;\xe4\xa8\xd5\xdd\x01g\xf9J\xe2P\x9f\xf7\x8d8&amp;\xed\x13\xfd\xfc\xb8\x1b\xe1H\x9bs\x9d\xbd2\x16!\rd\x8dS)\x9d&quot; \xef\x86\xf0\&#39;\xd6\xeb&lt;\xe4\xc6\x12\x06*\xdf\xb6e4_d\xc5\xc9\xa20\xdc\x85a\x98z\xe7E\xcd\xd6Z\xc3_u=\xad&lt;]\xe5\xbf\x15\x88\x97\xfbalz)\xda\x18\xbd\x9e&lt;5Tdr2 \xf0\xfd\xcb\xa7\xde\xea\xaf\x1b\xc3\xf2@\x99\x95\x81?\xbc\xe4\x9f\x0b\xe1\x08Q\xdc\xba\xe6\xa1\x1c(\r1\xf6\xef\x95\xb3\xc6\xb9i9\xc5\xaa[g\xf5\x14d&gt;D;o\xd7\x8cVj\x8e\xc4)\x95\x96\x8cyX\xf0\xe5\xe0\xb5/:\x9eR\xbdO\xcd\xb2pn\x17B\xdaR\x07\x15\x1bq\xef5pB1\xf5\x8c\x17av\x8d\xb6t\xe1\n\xacZ\xc3\x90\xed\xc2[\xc6\x7f\x83\x84q\xe9ep\xd3\xe3\xa6\x16\r\x94r\x89\xf0\xb2%qx\xefe\x02\x96vf\xe2\xacq$P\xd0\xee\xb7s7\x9d\x93$\xce&#125;\x00=\x8b\xcb\xcb\x86K\xb6\x136\xbc\xac\xccS\xff\x9e5\x0fO\xc2\xe0Qa\t(\x15\xd2\xf2q\xec\xc4k0\xd0\xe9\xaf\x10z\xbb\xd4\xc5\x0b\xedP\x90\x16\xad\x81\xe7\x08\xf9\x85\x83\xe3bNP\xff;\x1d\xdf\x88\x99&lt;\x02\xbb\x1e\xd5\xbe\x7f\xbce\xc6\xea!2\xb5\x0bk\xc5\x1e\xe3\xa0\xc2Z\xf9\x1a\x00\x812\xf0\x00t\x88B\xb5\x87\xd6c\xa4W\x06 /\xe2[3\xd5\x91\xec\xdb\xb7X\x9a\xc4\xd4\xc6\x1a\x05R\x87\xf9\x90L\xe8\x04\xce\x02\xbd\xbd\xe7=\x95\x93\x88pIPBF\x95Iq[\x97\xfbl\xaa\x9fF#\x0f 12\xady#\x13\xbc\x0ex\x1f\x85f\xd9\x9ez\\&#123;ec?\xb8#\xebL\xe0*\x8bL\xff\x98az\xdbxV[\x80%vk\x1b^\x92\xac\x98P\x8f\xbf\xc7x\xf5\xc7\xa0C\xaeY,\x1b_\xa34\xd9\x8e\xcf\xd1\xe2\xfb\x99Q|\xb2\xb0\x17\x019\x96-\xadV8\xa5\x96\xb7\x19V\xb1\x92\xa7\xb3\x9aad\x9a\xb5w1\xb0\x1e8$8\tn\x0c\xb2\xd3h\xaf\xc3\x06\x8d\xe9\x9b\xfa\t\x1fw\x85\xa2\x15\x90\x17\xc9\x00\r`\xc4\xd3\x8b\xf9\x08\xeb\xa30\x85\xb2\xbff\xde&#125;\xbf\x99\xa6\xd0j\xb3\xb5QmR\x00\x1ei&gt;\xdc\x04\xd4\x9eix\xccoD\x91\xa7\xb7s\ro\x18\xdc\xaf\x84\x98\x17d\xc5\x99E[\xef\x889\xc7\xb8H\x12o\xdc\xbe\xdaL\xe9\xdc%\xfa\xc6\x8ac\xcd\xcb\xce\xdca\x86\x19\xe1\x9dc\x82\x08\x11\xadu\x9c\x9f2\xfe\xc1$\xbc\x98\xb8\xe4\xfb\xdc\xd5\xd1\x1d\xd0|p\x92\x1f\xef\xc6\x99\x94\xe2\x18\xae\x7f\xf0\xf4\xa2\x14#\xaeM @)\x14N5C\xcey\x89m\xa1%%\xe1\x11H\xb7\xc0\x8e\xb4\xef!qr\x8e+\xff\x91\x06\xf9\xdeC\x82l~\x8f\xe1\t\x82\x18\ts\x7f\xf6\xd0\xbe8u\xdaG\xd7\x85o\x86\xb1?\x1b\x98\xd2\xa7\x8f\xa0\xb1n\xed!\xe5b\xf0(\xd5\x07\xb0\xbd\nJ\xa7\xb5-\x14w\x0f\xb5n\xf3\x80\x85\xa7\xf6\x84\x9a\xb3\xfd\x017$\xd6\xfbb3\x1dl$\xff\x05\xe4^\xc4A\x0e\x12\xc3(\xd5\xdf\x81\x89y\x1awF\x94\xaf&lt;\xa9B\xf9f\xe2\xcby\xaa0\x7f\x10g\xde\x1fx;\x11\xdb#\xe1\xa8\xe9\x7f\xeb\xdb\xbb\xfb\xa2(\x9c\xd2g\xa4\x84)W_G\xe4\xc2\xd1\x88*\x81\x04\xf9\x1bn\xe6J]\xb3Q\x8e0\x82\xd6\x9eN\xb3&gt;\x1f+\xebUf\xe4HK\x9e\xb1\x90\x7f\x9c\xeaM\x9c\x12\x88\xc4L\xb0\xbe\x9f+\xadX\x06\xddd\xb8\x13\x89.q\xdb:\x81VT\n\xa2\x14\xa3@A\x86\xb0\xd5\xaa\xb5\x92\x07X\xf8&gt;\xd9[\xd7\xad%U\x8a\xbd\xf4\xb8c\x94\xf0S-\xbdn^\x84\xd0/2HP\xd7\xf84\x05Z\xc6p0\x0eR\xa2p\x83\xb5P\x87\x94\x97\xa0\t\x10\xc7\xca\xa4N\x08\xb0\x99\x8f\xd2\x08Fm\xc0w\x91\xec\xdb\x1c\xff\xe2\x98V\xa7\xa4\xdcH&amp;\xfe\x18X\xe3/\xfd\xdch\xe8\xe9\xd9iv\x15\xcd\xf0g\xad\x02\xd8\x9e\xb5\xf0\x169\x85\xd7~\xb1\x99\xae\x19\xf1\xefS\x18w\xe0\xc8\xfa\xcfG\x8d\xabM\x82\x94\x97\xe7\xec\xd7\x9eD-\xd4\xc3\x06$\x8fx,I\xb7\xb5\xf0\xfa\xdc\xd2\x88D\xa2\xd5\x9d\t\x1e\xe1\xe2\xf5eo\x81\x82\xc5&lt;p\xb0\xe2,\x1a\xbbU\xff@\xd2\x1a\x03P\x06\x90a\xec\xdeT\xf0@#\xec\x137\x18Z\xec&#123;\xafd?!\xddV\xc7\x17\x8a\x88&gt;\xc3f\xb0\xca\xb6N4K\xe7\xc9\xea\xcd&#123;k$\x16=\xf4?d\xeeR\x1eQp\x13\x0b\xf7\xb8\xeb\xdb\xd5\xa6\x96\xff6\x14f&gt;\x96b\xc6\xa9$)$m\x9e\xac\x12\xda\xa4\xc3W%\xc7\xd3,\x15\xc2F\x83\xcb\x8bu\xb1\xdc\xd0\x08%\xbb\x05\x88\x1d\x16\xce\x95\xfcS\x1a\xef\xebi\xa7d\x7f\xf18\xaa\xe0c\x99\x7f\x04#n^\xec\xeb/\x8c\xdezI\x9db\xaa\x98\xd9/\xbd\xda\xb7\xd2\x15\xe8M\t\x80\xf9\xa4\xd8\xbc\xb2\xc2\x99&quot;\xca\xe3\xcd\xd6?\x84Hx\xcc\xa57\xc7\xd3V\xffm\&#39;X\x81g\xd2\x1a)f\x81\xba\xa6:e9\xba \xb0\x1f\x19g\xa4\x81\xdb3wh. \x18BH\xca\x83&quot;/*\x04\xc9\xcc\x15\xddKH\x030\xf0\x1a\xb8h\x02Z\x10J3\x99T\x91\xd1iC\x85s\xb8&quot;SJf(\xce\xa1o\x91Z&amp;s\xc9\xc0\xdf\x86\xb4\xa0\xaf\x13\xac\xc9SS\x1a\x896\xfc\x1a\x0fu\x0b\xda\x82\xfa\xc9\x8a\x86/\xe7o!\xf9nE\xb9d\x911\xfb\x8a45\xb7\xda\x00\x9f_\xe0\t%,\xd7\xa8\xad\xe1\x93Aj%\xb5\xdf\xf9\xad\xab\x88\xfa\x13\x02q HN\x9b\xde\x04\xd8p-\xd5\xc7!\xf98\\(\xc9)&gt;\xa2\xecA\xb0S7\xa8|\xff=\x81,\x895$\xc2\xed\xb6A\x89&#125;\xaf\xdc1\xae9\xaf&#125;E\x07w\xca\xeb\xe5\xd1m\xdca\x0f\xe7AS\x93\xbc&#123;\xd1\x82HM\xfc;\xa6w)&gt;\xd0\xb6\x0f\xcd\xe1+Y\xdeW\xeb\xae\&#39;\x7f\x90e9B9Y\xadE\xf8\x9d\xac\x92/M3\xcb\xbd]|,\r&#125;\x13\xc4\t\x95\x13\\\xc2 &#125;\xeb@\xa0\x06\xbc\xe0\xb0\xa6\xa5A\xd1\x00:p\x0f!=wXW\x19\xee\xb0bZe\xdd\xa5\x8b*\x0cZ\x88\x1e\x93chb\xe6s*%\x9c&#125;g\xd2\x93(\x05\x83\x96H\xb1/^j*\xa8\xdc\xa2\x1f.yS)\xb4\x10\x89\xc8\xd1j\x08\x8a\xcf\xf2\xa6\xc3\x04#a\xd4\xaeP\xdcg\n0\xe6\x0bPQD(\x8f\x8b\xa6y&lt;&#125;j\x19Gz\xcfd\x88\xc2\xb3\xaaKq\x16\xd9&amp;#\x9fJ\xbc\xf1\x1e\xb8\xed\xed_\x00(5\x07K\x97\t`\xf6J\xa9\xde\x02\xf9LE\x05t\xdb\x15\x7fI\xd8y\x10\x18\x92\x98m\xe2C|\x12\x02\xea\x1fj\x05\x9d4i\x88\x8ffJ1&#125;\x93\xd7q\xcdk\x1a\x93\\\xf5|\xac\xe4\xb2\x9a\x0f\xd3k\x7f\xcaLB\xdf\x06\xd6\xff*\xb7\xee\xc9\xed\x7f\x0c\x97\xf3\x9e.\xc02uI+\x1f\xf2\xae\xd6\xb7\xfb\xb3\x07\x1a^)\x0b&lt;/*U\xe2\n\xd4\xe2\xd6$N(S\xa6!\xa9%\xf3\xae~\x927m\xe8\t\x08\x95\xb7\xc0\xe2\xb2\xc2\xd95\xdd\t\x0ex\xbe!\xc6\xe1\xdf\xad\x81&gt;\xd6\x99\x1e\xe8\xa7YK\xf4\xa0\xd3\xedf\xf4%\x84b\x12\xe9\xa2\xf3Y#\x1f\x17?\x8b\xa7\x15\x16\x97\xa2\xbd\x7f5JAT\x9a&amp;\xa1z\x87\xc5=\x92\x0b\xac\xc1\xfd\x1b6\xbc\x85\x0f\x94\x0fG\xca\x02\xec0\x17\x95\x91\x99\x18\x8b\xe5x\x11o\x7fK\xa5Q\xa1\x86\x0e\x8c\x9c\x8eA\xb5\xa1\xaa\x8b\xd0\x076\xa0\x03\xa6\x8e1\x92\x9a\xb4dD&#125;P\x98H\x03\xac\xb5\xa6\xf6\xf9\xdb|\xe0m\xf3\xb0\xbb\xb1\x0bMAd\xcc\xaa\xd4\x05\xf8\x7f\xc5B\xd0\xd2\xf0\xf0\xd1I\xffn\xbeE\xad\xf2]?\xdef\x1dx\xc8(\xc1\x07bZ&amp;\x18\xa6\xca\xda\x83Pz\xa4\xf3\x15\xd0(\xe4\x9f\xf0\xfbC\x01&gt;RR\x9c\xd5\x1f\x06\xf6U+\x00f\x97\xe1\xd6\xd2\x8cO\xa4H\x0b\xbf\x9c\xfe\xd7\xa5=\x0b\xc7\xech\x19\xaf\x1d\xb8\xbeNB\xb1\xdc\xbby\x14\xf51S\x15\r/\xf0\xce\x14K\xe3\xd6\x95\x9d]\xae\x04\xe9\x00|V\xcc\xfa=o\xe7\x11\x98W\xa5\x1aSk\xdc\xaa\xc6\x19 &#125;\xb9\xdfi\xa9&amp;\xd4\xb8\xa1&#125;\xb2\x95\xa3\xa9\x83\xdf\x9d\xfa\xa9|VW]\x0c\xc7\x8a\xbf\x98\x87$\xa4\xb7\xca.m\xaf\x0f\xa1q\xbcu\xc3\x7f\\/\xba\xde m\xb8\&#39;\x88\x95\xd1 v?%\x88&#125;\xe15\xc6\x94\xd9\xefE3\xcb#\xbc\x11JhA`,\xad\xf1\x84\xad\xd8\xa1\xb9l\xce\x02K\xf1\xfbI%\x86\xcf\x9a\xc1\x18p#\x1b\xaf\x91S\xfb\xc0\x00\xf7\xd7$!\xed\xcf$\xfb&#123;\x9b(|\xeb&#123;D\x8c\x92\x04\xed\x84\xed\xc4\xaf,\x86\x15\xb5\xc4\xb2d[c\xd5\x13&lt;\x94\x15h\xe4\x94q\xd8k&#123;&gt;\xd3n\xd1\xa9?\r\xe5!\x12\xb4\xa2\x12g[\x84\x04ng\xc7=|\x89T\xcc(\xb8\xac\r\xc8~\x1a\x952\xb6~\xa1EfX\x03\xe7Q\x87\xba%\r\x00\x18\x89\xcc\x14\xb9\xabd\xe0\x00H\xec\xa0-\xd0\&#39;h\x14\xef3\xd1s-;\x83\xbep\xb9\xeam\x94\x8c\x08\x1d\xe7\xa9Ce\xcf\xe3\xaaeh,\x13g\xe8\xad&quot;s0\x8d\xf3\xc7m\xf2X\xae^\x1a\x0c\x80\xf8\x9be\xa5$\x11\xe8B\xcf\x88\xceyK\xe1\x05\x0c\x9f\xef\xb3\xf3\x9bdp\t\xb2\x95?f$\xa6Xurn\xf1\x02\xd5\x87\xb0n\x1d\xe3\x9e\xe0^\xcb\x9f\xdd\xab\xfb\x14\xe5\xb4afl6us!\x16\xe3\xcaQ\xf3\xff\x13\xac&#123;\xafT\xd9y^\x12#l\x14O\xaf\x1e\xc5\xc2b\x10!\xc5OdL\xb8\xb4D\x8a\xa8\xc9Q\xc6\xdc\x97m.:mI\xd1J\xd9\x924cl\xa2\xd1\x9c\x87O\xc9\xca\xf2\xa4\xca\xed\xca\x1c||\xbf\x1b\x80M\xcb\xc7|\x16\xa1O\xb6\xfe\x9bpr\x02\x02LGi\x152&gt;sq\xee\x18Z\ngz\x15\xf9\xbc\x95\xf5\xd0\xefZ7\xcdH4\x83\x98\x05r\x88K~\xed\x05\xa0Ys\xb3\x1bF\xd6\x82\x8f\xa0#\xb6\x8cwt\xff04\xa5\xd7\xff\x89\xe86\xd9\x83(O`\xa5d\x9cgx\xc8\xe7\x91#\xfe\x1f\xa0\x1e\x85\xba\x01%\x16U?\xce\x8aZ\xf1oz: \x00\x9fU\x92\x84\xd7\xb3d\xfev\x98\xd4db\xe9D\xfc~Jw\x8d\xfd1O\x0b\xaa\xd0&lt;\x18\xd4#\x96$\xf5\xde\x0e\xc2\x11\xdf\x07\x9a\x8f\xa1\xd6\xd7\rq\xa3\x93\x1bJ\xcd;AD\xc8\xb0)\xb2\xa9`\xa8mg-\xda\xcc\xf0\xb9\x82b[|s\x8a\x11K\\\xe30le\x9a\x99\x93\xdf\xc6\xcd\x9b\xa1\x96\x9b\x96\x8b\xab\xfe\x10n\x95\x8d\xe9\x9e3\x8ex\x98\xcaA\xb0A\x7f/f\xe40\xdb!\xd3yS\x1d*\xd6EDY\x99\xf8\xc9\x0e(=\x1f\xce\x9f\x05Z\xf2L\xca\xe82\xf0\x91\x05\x8e=\xc2\xb6\x8d\xa7\x1a\x9eT\x19l\xf3%r\xc1PD\x94\x9bG%\x8bQm\x0f\xed3\x92\x06+\x93a\x83\x80\xf0 \x1cd\xa9&amp;b\xa3\xdf\xbeY\xf9\xdf\x8f\xa6\x8bG\xb2\xa0Y\x85\xbb\x8e\xedV\x9c\xac\xcd9n7\xa1\x86\x90\xba\xde\xe5\x86\xdf\n\xac-\x10\xf6\xa6(F+\xab\x94\xd3\xe4\xf5\xf5\x94Z\x05o\x126\x9a\xf1\xc1r%\xeb:\xeeM\xfb\xc7A\xde\x94B\xec\xe8\x17\xb3qD\xd20\xba\xfaNF3%\xb3\xc9\x94\xd8\x7f\xea\xb8k\x1f\xe67T$\x87\xbb!\xe4\xacd\xcf\xa9\xb3\x0b2\xdf\x1d\xb57\x11\x12\xd40Z\x7f\x97\x18X\xa2\xa4\xd9P\xc7j4\x9fwS\xd3\xc9\x1d\x90*m\xae\x00(\xe6\x03\xde-\x13l\xc2\xc1\xfb\x90X\xd7Jr!\xb5v\xc6e\x0c\xa2\xf9\x17\xc2!\x84\xc4\xf9e\xb8\n\xfbb\xcbB\x87\x86%(\x1b\x0b\xb7\xd3Y&#123;\xddR&gt;\xbc;/\x05lm\xdc\x10\x05?W\x1bF\xa9\xd6\xa3(\x95\xbf\x82\x1a\xcaw\xef\xdd\x8a\xcf\x1e\x11\xe2\x07\xba\xd4W\x87l\xba:\xda9\x8f6\xdf\xe3$m\xe55\xa2\xe38I&#125;\xde*\&#39;\xc2!u\x86\x02\xfb??/&#125;\x91\\\xefX4\xd9\x1a\x80\x12S@\xc8\xa1R\xc5\x90\x87\x163\t~eO\xee&#125;-j\x90,\xeb\xf29\x92`d\xcc\x9d\xe7\x10e\xd6:\xa7\rG\xe9v\xd6Y\x08\x93&quot;\xe6\xb7)@0s\x16U\t\x83\xe8\x9d/-\x10\xe7!\x7f^\x89K^\x00\xb8\x7f\x90%\x81\xe9\xadU\xc3y\x9d\xa8\x10!&lt;*\xd8\xc3O\x87\x0c\x9d5\xea1\xc2R+\xc0\x13\xada\xd3\xfej\x0f\xcdXJ\xfc\x825\x8a\xb9\n\xce\xc6\xa0\xdc\xfa\xd3\x94\x1b/\xc6\x05\xf7\x10M\xd9\xc3(\x17\x0c\x1d\x97C5#\x0b\x1b\xa7\x84\xb4\xc3\xaf\x0b\xf2`\xfd\xcbr?=\x9fd\xd8\x18\x1e\x11\xb6\xbb\x8b\x9a\xe3\x96\x82\xa3\x99\xedF\x19\xcc)\x1d\x01\xc7\xc7\x97\x89\xdd\r\x0c:&amp;\r\xef\x8d\x8fa\xadZ\xceN\xd5i\x88\xd5\xdb\xce\xe7\xec\xc1\xf8\xda\x13\xf6,zH\xdf\x0fR\x8b\xb1\x15\x8e\xc7$\xb5t1\x01\xf4\xa1\x96T8\xd4S\n2&lt;&#123;\x19\xcfe\xac+\xc9\xf1\xf9\xa7\x85\x8d/|\x89\x83`\x1e\x15\x15_\x19\x14,\xaeXr\xec\xf9\xab\x8c\xd9|\xe7LH\x19\xb7\xf2|\x9c\r\x96p\x10\xb8X\x83\x05\xc6\xc4\x02ZN\\\xad\x1a]&quot;\xb0,L\xd8\xfa\x85~\xa2\xd3K%f\x85\xd3\t\xf5x$`\x8c\xde[aU\x15\xcaJg\x03\xb3&lt;\x85\xeb\x1bi\x99)\xce\xf9\x90\xcf\x9f\xa9O~w%r\xc5\xa1\xea\x05~\xee\xb0\xf7\xdb2\x14\xbd\x81#w\x80\x0b3\x15\xb5?\xc43\x96:\xa2\x84rS\xeaWw\xfd\x0e\x7fB\xb8\xdd\x06J]V?\xd5\x85U[?Fh\x87\x01\x1b\xbf\xfd\x8crL\x19\xc1I\xa7t/\xdf\x99%\x9d\x10,N\xd0)\xd7\x85\xdcw\x97\x80\x14\xc8W\xd4\x1d\x0e\xd4\x87\xf4\x9d\xdf\xcd|\x96\xba\xdb\xb670&amp;\x08\x95\xc0+\x8d\x0b^\x88\x19m\xd1c\xe3\xa5\xe2KL\xe0\x9bCF\xdb\x82\xdb\xbc\x90L\x9a\xc3o\xaa\x0b&amp;EYX&gt;\xb8\xca\x1dk^\xbbH\xd8\&#39;\x81FuSgG\xc3\x90\xe0\x0b\xde\xba\xad\xfd\xecN\xa70/\xc4PD\xd5C\xe0\xcc\xe7\xaa_Q\xcc\xc6\x97r\x917\x81\xf0\xba\x9d\x07\xdd\x116\xd2/\xe87y\xd2A&#39;
i=45, n=16429, dic=&#123;&#39;msg_type&#39;: 1, &#39;piece&#39;: 0, &#39;total_size&#39;: 74620&#125;
piece_len=16384
sent ext_data=b&#39;\x00\x00\x00\x1b\x14\x02d8:msg_typei0e5:piecei1ee&#39;
msg_len=16431, id=20
ext_id=1
recv=b&#39;d8:msg_typei1e5:piecei1e10:total_sizei74620eeO\x9e\xa6 dE\xbb\x8e\xa2~\x9am\xb5\x1fV\xf3A\xf2I\xaa1\x8eGL.\x07\xffK\xa6\x16\\\x81\&#39;!= K\xcb \xf6O\xd9\xb7A&#125;\xb4#\xb9\xbf\xf91\xe0&amp;\xf7\xab\r1!\&#39;\xc0\x9a\xbb\x7f\xd0\x15\xeb\x91_\x0f\x97\x94&#125;\xdbg\xaaU\xe0\xfa\xa9\x9e&amp;\x01\xf1`9\xf7RP3\x80\x8b\x88\xb2\x83\xc1\x93\xd2\n\xc47\x8fFE\xc1\x84\xddb\x03;\xbf\xba\x9b1?I\tZ\x97m\xe0\x8f\xc2\xab)\x8f\t\xbc\xa6I&gt;\x8f\xcb\xdf\xb0\xdaa\xa9]\x05\xb3\x19\xfe\x8b@.f&lt;\x80\x15\xb6\xa7\xa3\x13\x13\xbd\xe0&lt;[\xe3?\xad\t/\xacD2\x80\x13\x17\xddx\xfe\xa2\x93\x1c\xc7\xc5u\x01Y\n\xe6\xd8\xb49\x1d\x14\xc2\xf9Em\xde\xa2\xa5\xf3\x82\x1a\xae\xe2\x04!\xa0\x8c\xc5\x038sP#\x9d\x8c\x8c\xe3\x86\x00\t\xffeF\xb1\x94\x82I\x95\xa7\xf8?\xa1\x1a:jp\x06\xe4\xd3/\xa3\xbc&#125;]\xd1M\xe7\xcfe\xac\xefT\xcd-\x11\xa5#\xb9\x97\xd5\x91\x8eL\xe2\xf6\x17\xfa\x96e\x95\x9c\x95\xfd\xb7\xec\xdd\xe9\xa1\xb668\x186\xaek(\x9cg\x91sWb=&#123;\x93\x12\xce\x83\x81~X3-r?k\x11\xc2\xf8\x01\xe3\xa8\x87\xff;\x0c\xbb\x9a\xe26\r\xe6\xd7\xc3\xf4\x12yE\xa16\xc9\xbf\xe7s_&#123;d\x1a\x87\x92\x0bC\x1f\xb3\xdd9\xbc\x9c\xe5t\x050\xa3\x94\xa95\x9e\\\x08\xa5\x0c[\xf4\xb7M\xc8\x11~-\xbf\xee0\xb8\x89\&#39;\xffy\x02\xa6;!\xf2\x8c\x03\xeb\xa1+\xa4[~\x9e\xd3Au[\t%\xdd\x98\x01\xa8n-\x1f\x91\x8e7Uj\xe5\xe8\xe6|\x91\x9c5!Wr\x90\x04\xd8\xfbM=oU\r&amp;P\xc9;e_\xae@\x82\x10\xd8\x86\xef\xa7b\xd5\x1bxes\x15f\xfe\x9b\xf7\xcbk0\x95\x7f\x03\xbb\xe4&amp;\xc7\xb9\xac6\xba\xe8B\xa3a\xf1\xae\r\xfe\x14\x07\xd4\xed\xa2V&lt;:\xb5\xfd\xe3\x92eO\xeb\x9eg\x11)\xf1\x89hap\xe0\xf5\xf1\xfe\x913\x96\xa2\x01\x07\x88h\xc7&#125;\xc1\xf1\xb7.\xc1\xd87\&#39;ak\xd8o5k\xd5\xe9f\x9ab\xe7\xc39P0aD7\xf6\xf7\xa3E\x00\xd8\x88\xd5\x04\xc6\x98`\xf3\x85\xd1q\x0f&quot;\xb3&gt;\xe8w\x0c/\xd8G\xd8\x881axf&lt;\xe1%\xb2xt\xfa\xd7\xe2\t%b\xb5|e\x80\x05\xfb\xd9\xfe@W\xfayu\x14\x01\x84nz\x02\x17\xc8Fk\xd5\x85\x96\x18\xe6\xa9\x8cC]\xcf\xaeh\xb0@tN\x80\x12\xbeg\xce`\x87\xb1\x028\x99c`s-^\xe1\x8c\x80\x19\xe0*\xebH!p\xa9\xd5h\n\x13:Z\xd7P\t.\x81\x1b\xa2\xcf?T\xe9 \xb3_L\xbaC\xe7\x9dJ\xf1\xd6\xec\xbb\x00n\x97@F\xca\x0e\x17!?\xeec[\xce\x7f\xe3\xe4v\xdb\xa8\xb7W8\x9e\x1cf\xa7\xe0\xa8\xab\xbb&lt;\xaf.\xf1\xe30\\2\t\xd1U)A\&#39;\xde\xd68\x91\xc3t\xd1\x90q\x06r\xcb6\xba\xc4\x14d\xf1?&amp;\xfc\xaa==\xcb\x82#\xfc&#123;\xd5\x0e\xf2\x90\xb1\xa1nM\xe0\x83\xb2\xcf\xe6,\x81E\xba\xdd\x8c\x9e\xb9^\xbc\xf2^\xbf\xd9p\x0bo\x9fD`\x06\xcd\x0f\x08\xc5yi\xd6\xf4pIOK\xa5\xe2W\x95Y\x10\xbd\x83&gt;\xdc\xee\xa0&#123;Q\x1c\xed\x94H\xad\xdcHM\\\xeax\xf4\xd3K5\xa9\x03&amp;7p\xc0\x9cB\x98\xce\x98(\xe0dE\xcd\n\x1a\xaf\x08\x9bj\x87\xef\x8f\npM\x8f\xd5\x1e[\xdc:\xbc\xf5\x19\xb6~l\xbaD\&#39;\x18\x97\xf3\xb0]\xbd\xb3\xd4sn4\xc6;\x9d\x0f\x0e\xa1\xb7a\x17\x99(\xbf\xf6lg\xe9\x9b:\x0b\xe2K\x03\x01\x98\xadb\xd09\xb4O\xa6H\x96\x19H\xfa?_\xee1J\xd9\xb3\xae\xe3\x80\xcb\x07\x83\x92%\xcc\x1e\x16\xc7\x87*\x877s\xc4\xf3\xa8\x80]\x10\xdc\x91\x91i\x10l\x7f]\x03\xc4&lt;\xebM\xe3_H\xa45b\xfb\x1d49tR\xa0\x1c\x05\x8d\x8e\xfe\n\x06XM\xc9\xdf\x96\x1f\xae\xd8\xd5\xb4\x0e.\xbc\x07\xd9\xaf\xecn+\xf8\x87&lt;\xcf\x8e\x85B\xb2 &lt;\xee\xa5\xcb\xd7\x01\x8d\x9c\x80?mU\n\xb6!\xaf\xbf\xcb`Y\x18G\xa44\xb7\x17,\xa4\t\x00\xeb)\xbfJ\xee\x91&amp;\x02;\x99S\xb02\xdfux\x99\x1d\xe1\x04R\x9cQ\x14q\xe6_\x84\x8c\xdd\xfd=\xe6\x12\xae\xd6\x8a\xeb?\xccu\x01\xb9\x03=\xf9\t\xc3Iz\xbeK\xb0\x0c\x12\xb4I\x1e\x07\x1e\x04\xd2c2\xc1\xfc\x80\x05\x97\x86\xca\x82\x9e&amp;\x84\xd1\x13dhn]\x1fy/\x15\xe7\x10\x95MH|\n\x1d\xb0\xd80~u\xe5A\xaf\xf4\xe8\xe6T\xb6\xb1S\xef\xb3\x83\x8d4\xe4\nK\xb8\x0c\xfd\x89\x1cfK&gt;\x15\x7f\xa5=,\x06\xc6V\xc2\xef\x99\xc3O\x99\xcc\x91J\\\x9e\xc0.VD\xb1\xc1\x84\xb7/\xcb\x11S\xda\xaa\x92\xbc\x89\x82\xc9\xe8\x9bY\xf7\x0c\x1f\x1a\xfdxY\t\xef\xb0\x18\xe9\x80\xd8\xc5)+E\x1a\xa8~\xefJ\xbf\xcd\x82d\xe0&gt;\x1dx&#123;?\x8c\xc3\xe7a7\xc5\x16\xae\xd8\xf8+\x06\xfa\x92t|\xcf\x06-[\xd8\x9a.\x04\xe3\x99\x0fB\xaa\xdf8\xba?\xebUz\x02T\xaa\xe5\xd1C!\xb2\xcd\xc7\x1d\x97\x97\xa4\xf9&amp;8P?\xa7\x82\xef\xc8&quot;\x0f&amp;\x96\&#39;\xaf\xaeP\xed&#123;\xf4\xcd\xc5\x1e\xdbr\xa6\xadVgz\x8ah\xee\xcey\xcb\x85Mi&quot;\xe29\xf2\xd0I?\xb3%\x85\xa05\xdc\xadv&#123;\x1d\xc4:\x9d\xdc\xc47\&#39;t\xaf\x13\xc3\x12\xcc\x85Vzh\\&quot;\xcb\x0b\x96J\x02\x16\xb6&#123;\x1e\x84\xbfe\xc5\xa4\xed\xc8\x9c\x08\x0b\x1a\t\t\x02d\x04\x13\xc0\xbc\xa5~\x1b\xb7\x1a\x81\xff3\x0ek\xe2\x00\xd6:=&#123;=~\t\xe8U`\xcc\xac\xc7\xc0(-\xe1\r\x19o\xd4|K\x16Y$\x99\xf8\x00\x8dY\x8e\xf9j\xed\x15_\xaa\xf1\xaa\xaep\x8e\xe5\x90\x07\n0\x99d,\x8e;\xc3d\x0c1\xa0\xa7\xb3\xc5\xd8\xb9\x0bB\x96\x96(\xfd\xccz\xdfX\xae\x15\xa2\xaa3\x9fK\x84\x1c%\xc3\xb2\xa38L\xaf\x12\x896\x7f\xf8\xa2|V\xb5\xad\xd2_\xd1T\xb7\xeb\xad\xb0\x9a\x1a\xad\r\xd2\rM\x81\xcb\xc5w\x88\xba\xae\xc9E;\x92\xdc\xa5xq\x9a\xd8o\xb2\x14?\xdc\xb1\xdc\xe3\&#39;-\x05\xa9\rz\xed\x86\xed\x81\xb4\xba\x86\xac\x88&lt;5(#\x9a\xff\x01*\x9c\xdd\x16\xa0.7$\x1e\x00e\xcd\xd8\xfe7U\x0eL,\xe2f=\xccC\xca\xf6\x8d\x81\x18\x172\xb2\t\\v\x04\x8f\xfb\xe8\xdb\x0f\x99?\xf6j\x1b\x9e\xda)\x1d\xb6j\xf3\x12\xb7\xbe\x83P4\xcf\x0f2\xe7C#\xa3\x90\xd9\x7f*$\\\x8di\xa8\&#39;\xc2\x8a\x13\xda\xc8\n\x99x\x02^\xd7\xb4\xa6[\xe36\xcbk\xe9\xc5e\xf6\xdeZb\x04k\x9b\xbb\xc4gF\x8bRr\x96U5\x95\xecL\xca\xe7S\xf4 \xb6\xb3bD\x19\xd2f\x1b\x05P\x85\xddq\x90&lt;\xb0R\xa1$89\xdd\xafk\xf5Xdz\x19$\xf8\x01eu\xfeQ\x1d\xaeIm\xae6/AL\xf4\x1b[\xfd\xa7\x99g\x87\xf5I\x109\x83n\xde\x84\x19eS\xe1V\xed\xaal\xd9X\xfc\x8aa1aU\xe5[\xe3\x0f\xcd\xe9\x8f\xfd\x06\xad\x8c\x9f\x11\xeek\x1b\x0eP\x1eaW\xbbK\xeb\xa48\xc5r\x90\xf4nP\x92Q\xabN\xdb\xde\xb5V\x0e\xeai&lt;\xaen\xf6%K\n\xcd\x9eoXrZ\xd3\xdd\xb3&#125;\x07\x94\x07T\xc3\xfa\xc5\xd5\x98\&#39;/!\xd9G\x17\xb1\xe7I\x86\x8c\x1cyr;\xa4\r\x7f\x8c\xcc|*rn\xe8\xc0\xa6pt\x97h\xdf$\x1a:\x96\xdd1?\x8doRe\x15\xc3\x80\xc8\xdb\t2\xd4V:U&lt;\xe8\x91\x84\xa4Y\x90h\xc4\x9e1\xd6\x93\x9b\x93\xe6\xa7q@\xcc\t\x15\xf9\xa0i\xaa\x1b\xd1\xf6\x86\xfb\r\x1dD\xda\x8d\x984\xf2,\xe7\xac\xe7oo\xda\xc4,9\x7f\x0e&amp;M\x08\r\&#39;yF\xb7&#125;\xab\xaf\xac4\xe8\xb6\x7f\xb8\xf1C[!B\xa9\x94*\x91\x87\xad% \x99\xf9\x9f\x85\xe6#\x12j\x04\x0c\xd5z\x86\xe8@\x9c?\x0bdB?\xb3.V\xb3\xb6\xe0\xea\xb5\xb0^\xa70R\xd9(\xa4d.\xe36&quot;\xbd-\xc0\xce\x94\x05oFQ\x8e\x054\xe0\x90\t\xe2\xe2\xe7\xdam\x1f\xef\x038+\xcc&lt;\xfeg\x91\xa6I\xe5\x92\x18\x98\x19\xca`\xa1\xab\xd5#\xde\xce\x0e_$\x88\x18\xcb&amp;q\xfa)02\x178\xb0\x8f\x0e\xe4Hjl\xf1\xcdC\xee4\xd4:\x94\xac\x9bh\xe5B\x98\xa3\xc8\x1d\x9f\&#39;|\xa5\xa2\x10\xce#\x990\xa5\x96\x8a\xd3\xf7\xd3\xbb\x9c\x01A\xd3rjd7\x84H\xb3\xc7\xc0R\x8a\x1d\xdf\xd0$P4\xe4`\x8e:&amp;\x7f\x86\x9a\x12\xaa\xf4&gt;\xc9UM\xc2\xee\xf2I\x8d\x0e\xe2&amp;\xf7@&amp;\xa6\x83e\x81\x04FRK\xee\xdf&quot;\xfc\x19\xd5\xcf\x8b\xc0\x1d\x92\xc7\x9dw&lt;Z]\xa9\xbe&quot;\xd2W\xdb\x83$\xb0\xc7~2\xb9\xdb\xbe\xc2\x97qtKe\x8c\xb2gD|\xeb\xf3j:\xc0\x08\xa0\xa6f\xf8\xc12\xb5\xb6\x0c\xa5\xde\xbcz\x06\x02\xee\x08\x8ev\xf6\xa4\r\x9f!\x14\xf0\xb1\xf2\xde\xde~\xa1\xa0(O\xe9\xb2\xd4\x00\x96\xe35)+~\xff[\xe4\n^D\x05\xcd\xf8|\xfb\xe3\x03a4g&quot;\xf4\xc9\x02\xce\xb9/\xefw[\xa9\xa28WQ\x89\x83\x06\xb4\x1b\xd9\xa5\x8fX.&lt;\xa4\x18*\x92&amp;\x06\x83\xe8L\x90\r\xd3-m\xafu\xd3\xc2/&gt;\xec\xcaO\xeb\xd8\xe3E\xd5\x9e\xa5\t\xbc\x9f\xb7b\x98\xdcE\xb4eM\xd8\xea\x87\x13\xb7?\x15\x0f:x\x93\xb5~\x1a\xde\xe0\xae\x9c\xfe\xd6\xca\xda\xf1\xfe0\xe1s\xeb\xc4U\xe2+\xbcN&#123;\xed\xc9\xd3\xee\xfa\xb0\xaa\xcf&lt;\xd5\xdb\xdem\xc7\xd2\xaaN\x7f\xdd\x1b\x89\xf3N\xbe~YK\xa9\xa1\xdb\x1c[cwP\xfb\x81l\x8cx\xd3h\xca&amp;p\xf8\xf3qw\x97p&gt;\&#39;c\xfaH\x1b\x85\xb8\x84\x12\x1e\x85ud:#\xde\x04\xa7m\xcd@*\x88\xb56\xc7\x05\x83n_9\x94\xbdY\x85\x87&amp;&amp;\x898rU\x7f\xa1\x11\xa0&quot;\x03\x95\x98\xc2\x0c\xc5&amp;$\x12\xc1\xa1UZ\xef\xa0\xeez5\x1e\x84\xf7vKV\xfb\xa5y~\xac\&#39;\xab.\x01S\x18\xfb\xdb\xb6\xc6\xa7\xe4\xac5\x166FJN\xa8\xf7Lz\xca\x00\x9c\x1c\xe9:\x84\xd2\xe0X\x1b\x8f!\xbb\xcd\xe7\xff\x87\xc47\x1a;_z\n_\x16\x8b\x93\x14X\xa4,\xa8&quot;\xd0\xbb\xee/mTLq\xa9\x06\xe0F*Qz\x88\x92b\x8f\xbb&#125;\x13\xd1KN\x16.\xe6\xd1\x02\x0b_g\x92&amp;\xa2\xc6K\x08\x93ZP\xe0\xa6\xa7\xe9\xc8\xfd\xac\xa4\xd6\x83\xb55\xc1\x7f\xcb\xad\x98\xafiR\xa9\xcbme\xbd3\xd9\rW\xda\xe9Zx\xdb\xa51V\xb7#;\xcb?[tT\xc4\xdeX\x95\x1c\x06U\xdc\xcbQ\xa4\x98R\xa0\xdb\xad)\xf4Q\xc7\x16k\xe5a\x05p4ko&#123;\xa5\xc6\xeb\x86\x1dI\x11\x98\xde\xfe\x9az\x0c\x04\x00\x86\xf8$\x14_\xe7\x9c \x8fh$\xc4\xe9e\x9b\x96\xb7\&#39;\xfb\xfc\xae&#123;\x8bQDr\x9a\x0c\x8b]\x86\x08\xccy@\x11\xb5\xfe\xd1&#125;q\xb0\xc2\xa9\xcf \x0b\xd8bq\xc9&#123;@n\xcb\xb2\xe2v\xdb9\xaev\x83E\xdd\xbc\xd9K\x0c\xde\xaf&amp;b1D&#125;\x89\\\xa1\xdex\xe2L\xb9\x8b\xf9W\x1c\x90\x97\x00\xd4\x08\x87\xc5/\xf0\x8c\xa8\x17\xe9&gt;[a6\xb2v\x9d\xd4\x87[e\x91D\xae\\\xd8\x1f\x19q&amp;\xdd\xe5\xd8R\x85\x03Q\&#39;\x88F)\xceMk\xe7\xa4n:\x9b\xec&gt;Q\ne\n\xda\xf1y\x87\xa5\x15y\xce\x05l\x06\xa9Hkj]&quot;\x84\&#39;\xfag\x12\xe8\xd7(\x03\xd1\xdb\x19\x99\x01\xf4\xee\x19\x19#F\xc5\xdf/Z\xce\x84\x08\xd0M\xb6\xf34&#125;\rN\xf2K\xee\x86\x1b\xb3E\xc7u\xac\xc5\xab\x98\x16%\xc5\xb7j\x80\xa6|#\xfa\xb3T\xb0\x87\xe0-a\xde=~\xe8V9\xbb\x91\xa1\x1a\xd2\xe7h\xb8\x08\xf4&lt;l\xbf0\x0c[\xf2\x8d\t\x95~\xc0\xe8J\x9e\x95Q\xafK\xf9\x8b\xa5\xdcyZ\xc3\xd5\xb8#Uw\x96\xcc(\xfa1\xc0C\x1f\xd0?\x11\xf3\x1e\x8dW\xfc\x8bz&#125;\x9b\x04\xca9i\xde\xb0GX\x9e\&#39;\xc7\x1f\xeb\xa6\xc2\&#39;\xd3u\xcb&quot;l\xebE\xb5\xd8;S\x81\xcaz*\x07\xeb\x9c\x0b\xd4pb\xaf\r\xa1-6m=nB+0\x9b\x97\xe3p\xc20d\xfc\x8d\xb8nB\xd5\xcd\xefx\xf1mga\x132_o\x1d)\x87\xd3L\xac\xd8\x1f=b\xc0\t\xf0;W\x1c\xbaf\xb1\xcd\x1e\xe8%&gt;\x85\x9f|mp4@\xdaY\xa3z\x82\xe3\xba\xb4\x05\xa2\x08\xa3\n)\xd2D\xfd\x97\x10\xba\x00vSl\x16\r\x7f\xfe\x97jE\x9f\xd7\nZ@~\xbd1\xf2\x04\xf4\xff)x&quot;\x08\x80\xacq\x01\x88\x97\xb3\x1f\x8e\xc5\x00\xd3k\x8cWp\x8fm\xa8\xd8\x86\x9a?\xc2\x03\x99h\xb6\x9d\xfc\x91\x00\x14\xe2\x8b&#123;\xca0\xd8&#123;M\x0fB\xafG\xa9\xbe\x1e\x13z\x1b\xa4\xaa\xd7\xbf\xbf\xear\x9f\xe2\x95\xe7\xb1\xee4\xd2To\x1f\r\xf2\xc6\x0b\x0cZF\x13\n\xd3\x81\x84\x88;\xe5\xb1\x19\x83\xbe\xc2*\x8a\xedNg\x01x\x14Yb\xf3\x98\xcb\x0e\xc7d(\xa9\xa9wU\&#39;R\xd8\xda&#123;\xd0\x8ci\xec\xabGI\xfa\xe2\xfc:^b\xc6\x86oi|\x86\xc4\xd8\xe8\xe9\xea\xc7Q\xd1q\xa2\xb3+\xe1\xef\t\x0c\xeb\xb3\xa4g\x90\x17U\xf9\x1fA\x91\x80\xa2p\x1c\xa1\xb4\x97\xab.\xf5\x91H\x8fB\xbd\xcf\xc1\x9ahus\xad\xa81X2[f\x01\xa9i\x1d\xa0\x1e\x14\x0fw\x8b\xb6\x8cl\xe7\xc2\xe98w\xfc\xb8\xf8\x95\x08d\x80\r\x1a\xd8\x9e _\x99\xb9\x86\x88\x90\x99;\xc5\x0e&#125;\xcd\x8a\x9a$\x8cY\xc5\xb0P\x9a\xb5z\x88\x04\x17\x02T\x93\xef\x88\x13\xad\x96\\\x1c\xed\xae\xdf\xf2Z\x10r\xdb\xcfqa\xdf\x81\x85\x844\xbb\xed\xae\xc0J\xe2\x99(\xab:0\xe2@\xd5\xa3H\\\x16\xe2\x0e\xc0-\x1a5H\xd4^\xa6\xff\x11\xa3\xd7\xd2\x05\x86~D\x1a\xe3\x7fL\xc5R\x87\xef\xbeG&lt;\x1b\x86\xb6\xc5\xf2\xff\xa7CH\xd4\x8c\xe3\x1a9\xd3\x16`)\xbb\x1d\xf9\x8e\x7f\xe1W\xd0\xd7i2\x1f~\x90/=\x18\xa6\x1c\xc4\x88\xd5\x9f?D\nV:\xb1\x0e\x82\xa4\xfb\xf2\xe3S)\xdb8N\x15\x81\x8c&#125;\r\xbb:\xf4\xda\xe1lm.\x02t\xb0\xb3\x89\x96\xb8 \xcd\xf3\xd9\x87\x06\xe3\xee\xbe\xe5\x8c\xcb\x83AJ.P\xa2E(r\xdd\xbf\x88%A\xc8\xc7!\xfa\xbeN\xdc\x14+\x18\xe3\x84\xeb\xc3\xb7a\xf2^\xcb\x94\x99\x14\x9daIl&quot;\xcbR\xe8\x8an\xb4\xac\xad\xa9\xfdv\xc3\xebS\xceF\xa0\xb4\x0eN\xeboW\x85\xac\\nrx\xc0*@f=\xbdR\xd7\xf5\x1b\xb6\xaf\xfa\x7f\x00*V\x9fC\xb9\x94\xc8A*$g3\x81u\x969U\xc9\xa5\xda\xec\x8c\x83FYS\xf7\xacE\xda4\xde\x03\x04\x19\xd9].\xd7\x03g\x1dj\x0ex\x98A\&#39;\x81\xfd\xd8\x9bl\xf0\xa6\xf0\x87d\x85\xcc\xf7\xdf\x04\xb4\x14F\x8f\x02\xa6\xfce\x7f\xe0\x1b\xba\xbe\x85\x06\xc6\xc7\xec/IP\x1b\x14\xd0\xc3^\xf4z\xbe\x0fs\x817\xe2\x16$&gt;\x8e\xdf\x9b\x06] \x18\xf0|\xe8\xb8\xfb\xa3\xbe\x86\xafB\x8a\xeeP\x91^\x01J\x04\xdc\xfc%\x87\x1ff\x11\x1e\xd5b^\x8d\x04SGV\xc3\xbf_o4\x85e\xa7;\x0cFQ\xb39\xa6tL\xc8\xed\x8f\x83\xd4Hu\xfc_\xf8f\xba\x84UBo\xd0\xed`\xe6\x0f\x8dt\xff&#125;\xc355\x0b&#125;\xa8&quot;\xf6X\xbaT=\x8e4\x08\xff\x7f\x80Y\x9bm\xc2iE\xcd\xdbC\x89S&lt;\x8c\x0e\xbbD\x03\xbdS\xf0Dx\x0e8\xba\xa4N\x0f\xce\x12\x1a)\x17n@\x01\xba\x14\xd5\xcf\xfa\x04\x992\xa2\xc0\xed7\rg)\xc7\xa3\x87\xf2ITP\xc6\xcd]J0\x94\xc6?\x1eb7\xfd\xe4\xf2\xb1b_K&#123;\xb0\x93\xf3\xfbD\x05\xfc\x92\x00DG]TSu\x1808\x99l|\x82\xc0M\xc2N\xfeIU\xda@d\xe2\x1e\x15\xf8\xd5\xbf/-f\x91G\x0e\xc9\x1a\xcb\xbf\xfdH\xffT\x80\x91(4\xd0c\xf2L\xb0\xb7d\x8b\x97\xe3\xe1q\xa9\xdd8\xbf\xce\x9bWw\xa3]n\x0b\xe8\xb9\xc5uF\xf7\xdc\xf5\xecH\x07\xe6\xc8H\xba\x05\x833Q\x97z\xeci\x07H\&#39;\x8e\x15\x10\x84\x91\xbfJeLQz\xc5\x8fG\xdd\xbf\xae\xbe\xad\x85\xbfj\x0c\xba\x91\x0c\x84agJ7\x1e\xd7.\xd42h\x92\xb3\x7f\x939B\xc2\xb3\x9a\xe2\xec\xd1\x03\x94&quot;\xf2\x8c\xce\x95\xa9c\x8a\x82\x11B\xbe\xb3\xdf=2,&quot;\xdc\xad\x97M\xbe\xb2\xe2@\x1fX\xd6\xcar-\xad&lt;\xab\xb6\x9d\xd6\xafd\x9c\t\xfb\xb5\xfbi\xe8\xa2\xe1\xc6\xa0\xdb\xb0\x94L\xb4\x8bh*yL\xe5\xc1\xc7\xc4&#125;\xe0P\x96/oi\xc2\x18\xcc\x8e\x98yc\x87~wbc\x1b93\xf4\xff\x8bc[KQ\xdbTqk\x81\xfc\x88\x9c\xa3\xb4\x04\xe3\x88\x83jG\xba\xbd\xa2\xeb\xd9\x8d\x9f\x8co\x99\x13\xb7\x1e\x9d\x13+\xba\&#39;\xb8\x1e\x96\xcdTl\x966\xa0\xb6\xed\x80\x86\x13\xcbq\xbd?\xaft\x913\xe3\xb5\xac\xd3\xb8=\xc0\x14\xecY\xe3$~\xf7@\x82]\xd3\xaeK\xfe\x0c\xbau\xda\x9c\xa9\xbd\xae\xd8\xb5\x8b\&#39;\x1c\xa9\xde\xe8\x0c\x80\xd3x\xf4\xa0\xa0\xbd\xf7\xc8\xc3\x84\x99\xecqv\xa7\x86\x1e\x07\xdb_O\x01\xdf\xd5\xd8~\x7f\x1b\xebX\x82\xfc\x8d\xe2\xdc\xd3p\x95\x12\xc0o\xc4\xdb\xdd*&quot;\xa1\x95\xe1D\x83\xa0\xa9\x81\xe8&amp;\x16\xfaq&#123;A\xbf`\xa0-&#125;K@\x94Lh~\x19\x8f\xab\xa8\xf6\xfbL\xd0s\xa5&gt;\x8b\xf1\x8d\xe1\x8cp\xc1Vs\xc9\xd7\xc0D-\xe5\xb3&lt;\xb2\x85\xe2\x02)]\xa9?\xaa#\xd9\x07\xa1\x0f\xa8K|\x9f\n\x12$0&lt;\xdb\xaeF\xd51\xb88\xa49?\\&gt;\x94\x14\&#39;\xbe\x0f\x90\x12\x19\xb6\xbf\xea\xce;B.\xe1\x12\xff\xc6\x0f\xff\xff\xb2J\xfb(I\x00e\xdc\xaf7\xd3SUC\xe6sy\x86&amp;\xf8\x7f\xfd\xf3J\xcb\xb5,\xd6\x8ey\x91\xed\xc4\x81\xba\x08\xd8xe\x921\xa8\x00W\xde]\x8a\xd4\xb41i\xb24\x04\xd09\x8a5 \xaf\xc9\x19\xa4\x88\xacn\xd0\x15\xea8\x1d$l\x8e\xf1:\xea\x80:\xf5\x15\x0c\x97\xd9e\x97\xfcx_ :\xf3]\xa7\xb8\xff\xf4@\x19\x15(t\x04\x19\xdf\xc8\x06\xfdw\xc7R\xe1\xd4\xfb\x84R\xff\xa6:\x87\\\xd8E\xa8\xaf\xb8 \xd4\x87=\x809~\xc3\&#39;\x95\xeaS\xb3]\x12\xdc\xcc\x9d.Z\x0f\x00\xd6\xd5\xf8\xdf\xf75\xb9\x03\xfb\x0bwM\t\xa5|\xe7\x91\xc9\xa1\x1fg\xf9s5\x85o$\xe0F\x18\xa4\xb3\x14\x80\xc8\xaf\x07`YPiL1\x01\xde\x8c)\x8d\xb7\xda\xb4\xcd\xb4\xd0\xd3\x9f\x9c\x8eg\x85\x85.!\xd2\x82\xaf\x86q\xb6\xa0Yl1[\xd4%\x13\xc0\xb9fE\x15M\x16:5V;\x19\xbd5k\x94H7o\x0c\xe2\xf7\x0fs\x9f\xd3\xf7\x9f\xeb\xe91X]\xe0\x10\t\xd5\xfc\xf3g\xac\x9e/\xd2\x17\xa4@\x12\xa6\xca\xd1F\x08r\x05\x14\x11\xfa\x98\xf2\xef\x05\xa9\x8dr\xdc\x97\xfa\xbaQp\x1e\xbb\xef\xb0\xcd\x07\x80\x99\x03\xba\xb62W\xf9\xd0?\xeb\xac\xb1 7CqU\xf0\xf03k\xc505\xe2\x03*]\xfc\x13\x11\x89\x041\xb9\x95\xe5\x11U&#123;\x14\x1e\xac\xa9\xf9%~\x03c\xe6\t\xc8\x86\t\x8a\x1f:\x97H!7\x11B\xa9`Q\xc3(md,\xf1\x82\xf5\xdb\xaa[/\xcc\xbfe\x08[P\x8d\x1f\xab\xe0\x97\xdcbe\x03\x9en?3\xce\xf3\x1eaD:\xac\xb2\x9e7\x93+\xe0\x12\x0c\xb9\x1c~4&#123;d\xd06\xc7\x02\x15\t\x18:eDf8\xd5Fe\xa3xV\xa0\xf9\xa4\x05\x80&#123;B\xc4\xdd)\xb3\xec&amp;f\xa1\xf6\xad\xfb\x1f-\xf9\xe9\x11\xafR7\xfd\xc2\x9a\xde\xec\x1b\x15&amp;4?H\xcf\x16&#123;\xc9\x15M=\x1d(\x91.m\xebL;h0k\xf5\x0ce_i\x18\x06\xd4\x83\xb4\x82\xd2u\xf5i\xad:\xf9\xa6\x08\xb2\xddSun&#123;\x1f\xc6\x1f\rD\xb4\xec\xed\xae\x84\xfa\x85\xd6\x18\x03pF\x89Rz*3\xa0\xcf\xc0\xf2h\xda\x14\xca\xe6\xec/r\xeaZ\xec\xdd\x03\xd3e\x85\xaa#\xc0\x8c\x98\xcf\xf9\xd4\xc5\xe4\xfb\xc7\xa3\xb4\x17\x9f\xb8&#123;\xf1\xca&lt;\xbe\xc5&quot;\xb4%\x9d\x81\xa0\x9f+\xdbMi\xdf\xfc\xf7\xa8\x93\x06\xd7\x0e\x14\xeaj\xb6\xa4\xa1\xe2r\x04K+\xb3\xec\x02\xfa\xcf\xf1?\x97I\r=\xff\xado\xf0[\xed\x07.E*\xac\x9b\xb5\xda\x06L\x08:\xd6\xb5\xb5\xd9vs\x91\\\xd9\xe6\x92j-\xda\x7f\x99\xf7(\xe1\x1f\xbd\xf1\xaaE52\x85o\x0c\xe89l \x9b\xabh\x11\x03&quot;3\x1c\xcd\xffQ\xda\x10.\x11\xec\xafwQ96\xc5\x93S\x834\x8d\xb3\x1fm\xfb\xcb)\xeb\x87g\t\x12\xad85guB\x00\x0c*\x0byL\xfdX\x96&quot;\xfc\x83&lt;)\xdd[9\xf0\xf1U\xabk9\xab\x90,\xff\xe9g\x16\xd1\xda\x84Q0\x08]\x1a\xd59\xc5\xa0\xb1.G\xd5\x07\x06\xa1F\xfc\xcf\x16@\xbeE2t\x16\x88\xda~\x95$\x97L \xd4\xae\xa2\xceh\xd2~4\xa4\x861\xa9\xaeQ&gt;%V.Xf\xe0\xbf^\x97]\xb1+D\x192\xc7\xacq\x11g\xf1\x16\xc8\x1f1J\x85F\x9a\x81\x97\xcb\x18\xd9\xddX\xa3\xad\x95g\x99\x07&#123;h\x1fdA\xc8\xbc\xe8\xf7\x92\xfb\x0c\x1a\xd2&#125;\xd1\x97W\x93vz\x11\xc9\xb0\xf0\xff\xd5\xee\x96\xac&#125;9p\xe6\x15O\x84\xba\xdaP\xfe%1Z\xabKR\xf2b\&#39;_\x8a\xa4C eV&#123;\xd6\xf2\x01\xa1\xc3\xff\x99\xb5\xf13\xe8\x08n9\x0f\xc0W\xfcZ\xb3\xcd0K\xe4\xf1\xc8#\x8a\t\xfd\xf1\xd5\xb5T=\xf0\x08\xc0\x89\xe3\x1a\&#39;|\x96\x1d\x96\x85\x86\xd5\xb2\x17\xc9\x1a\xc1\x1d\xbd/\x11\x0f\x7f&#123;\x8d~Q\xc0W\xb3\x8d=\r\xc7\xd0\xbd\xa8U`\xbb\x84\xe8lS\xa0-Y\xaa\xfc\x00\x8e\x13\xfen\xb4\xa1\x17\xea\x86\x80\x0b\xe9y\xcc\xa4/\t\n\xd88u\xc0\x06n\xf5\x87C\xf4?:\x10\x1d\x06LS\xa3\x05\x00\xa0\xc5y(\x83\x1bc;/\xab\x0bM\x97P\xf9\x1c\x8f\xb4\x99\x118&gt;&amp;P\x96\xdf\xc8\xae\x97E\x13\xf8\xd6\xa2u\xf4\xf3|M\xdb\xb1\x13n\xa7\xc3\x15:\x0e\x07\xe9\x99\x0b5f\xbc\xad\\/o\xb6\xb1k\x9e\&#39;I\xc1\x94H\x19\xbf%UZ\xd3^I6\xaa\xac\xa9\x84\x83%B\x0f\xf0o\xf3|P\xcey\xa8&gt;7^l6?\xd9\x08A\x1f\x17\x08to\x02\xe2i\xd2\x91\xd1\xe4\xd1g\xfe\x80\xf7\x88\xff\xe4r\xd02\xb0!\xb8\xc4\x92\x86\xeb\xbf\xe6\x81p\x13\x11\x11\x95\xc0\n\x01\xbd\xcdB\x98rN\x1e\xa4|\x0e&lt;\xaboh\xce\x91 \x8b\nu\x02\x84\xa0\xb7b\xeb\x17\xac\x0e\xa0\x8b&quot;\xfb\x91!\x1e\x17L\xa7\xa2\xa02?M&quot;c\xa8\x9dwG~\x08.\xcd\xf0\x04pE8\xee\xbd\x0cP:\xf4\x0c\xa2\xcd\xe9_\x00&lt;\xe7\x08\x90\x01\xd5\xda\xe0h\x02\x95&quot;\t\x82\x16Y\xd3q\x90&#123;\xb1\xcd\xdd\x15G\xae\xd1\xa9\xec\xeb\xf2\x0c\xdb\x80\x12\xc1\xff\xe5\xe0\xd8\x04\x13\xa8\xd7\t\x06fcS8@4\x14\x00NE\xdd\xdeA\x1b\xa8\x12\x1a\xc1K@\xc4\x9c*_\x18\xb7a-\xc5\xe5\xd2Y\&#39;\x16\xa2l\x9ep\xec\xcd\xdc\xeb\xfb\xf82\xf7b\xfe\xab\xb9&#125;\xdas\xffh\xb1\xf7\\\xec?\xff\x80\nd,\xca\xa0\x92n\xb4\xd0\x8b\xb1\x93\xf3\xe0S\x91\x89\x17&quot;\x03O(F\xba=\x0ct\x8a\xd9\xb4\xac\xe4\xfa$\xd9\xfb\xa2\xf4%w\xbcM\xdd*\xc6\xd9\xc5\x08ue\x90$y\xa5\xf3\x9dk\xa0\xaf\xb9\x9d\xc5\xf4\xf8\x06\xe8\x81\x10\x0c\x7f\xd2\x95\x1d\xa0`\xc4\xb0\x81\xf8TFj|\x9a+\xd0\xeb,\x0bG\xf5\x89\xbe\x1cm?\x83j8GH\x8e\x8f\xf6D\xf6&lt;\x91\x80\x85\x95$M\x8c\x8cn\x16$EJ\xa1=-\xb0t2S\x1f\nO&quot;\xc6t&gt;8\x00*S\xddB\xd628\xa5#\xf1/\xf8\xd5e\xb64\xa0B;\x02\xc7\r\x11\xaa\x07\x0c\xb0-J&quot;\x14n_\xae\xc5\x95\xadO\xbfA\xbd\x13\xc7\x9f\x8d&#125;\x106\x87\x0c\x7f\x9bb\xe2_\x1d\xb9\x87\x07\xe0\x95p\x9c\x0b\xd0\x853\xfa\xcd\xd8\x96]d\xbb) 2\xe0\rL(\x0f&#123;\xa6I09\x9e(4\xe1\xe5\x8ba\xa9\xfc\x87x\xbf\x14\xa87\x03\x82\xde\xd5\x8f\r\xe2\x81a\xd6\xbc%\xb4\x13Si\x13s\x12\xaa\xe6%\x00k74\xdd\x18\x91\xed\x1c/\xd2\xba\xf4X\x07&amp;-%\x01fML\xda\x80\xc9\xb7/\x80\xe0\x96\x98\xc2\xe9\x1d\x8a\x9a\x14\xc2&#123;e\x00&#123;|\xf2*\xc0\xaa.-\xfaP\x1cA\x873\xf1\xe0\x9b\x08fb\xd2U\xc6\n]\x12O1q%\xd2\x97\xa2F+m\x82|gy\x93\x91\xf5F\x94ik\xc3\xd6#l7\x1e?_\xee46\xd3\xd43\xf06\x86\x0c+q\xecO\xda\xfd\xc8\x93&#125;P&lt;|j\xb6\xb1\xc21\xd0\x99\xac5\xe7\xa3\xe3\xa1i\xd9\xbbPw\xfb\xe7\xb1\xd8\xf1\xb0\xc9\x9b\xd9#\xd4?\xbb\x94\xd5\xbfi0\xa1\xd2DA\xbd\xd9y\xb6\xcc\xb1p[\xc8\x06\x84\xfd\x1d\x00\x16\xc6\x8c\xa7\x01s\x11&gt;\x91.-\x9e\x0f&gt;V\xcbUgEiUv:\xd9\xe7\xd7O\xa1\xac\x06&#125;\x02\xcb\x816\xce\xaa\x81\xe1\x03x\x03U\x15f1\t\xcc[\xa3\xa9\x1e\x98~c\xe3:\xea\xc9\x97\xa2\x9e\xd2(\xe4\\&lt;\xcc[F?j\xf7\xa4\xe3D\x87&#125;\xe5x\xc71\x0cw\xdcpo\xd6\x14B6\x84\xf6\xebJ\xdf6\x9e&gt;\x17\xb4\xe3\xbd\x12\x86\xf6`\x05\xa6f\x1d\x84z\x8b\xfd\xb4\x1b\t\xc1f\x13\xceU)\xfa\x81eN\xff\xaeW_\x05\x8b\xe8\x85\xec\x1b\xbb\x05\xc6\x8f)\xb4\x1f\xbdl\xb1\xb1\x08\xea\xce\xd72\xa42\xbblR\xa7A2\x04&amp;g\xd5\x9fC\x7f\xb82u\xee\xd36;$^m\xc3\xd3\xbe\x95\x87\xb6\xc0\x80qo\n#\xc6\x0c\x17\x085r\xa2\x1c!\xfa\xe5\xd4z1ZP\xe9NAYv\x14\x00\xf3\xc4\xea\x7f\xb8\xeb\xeb\xc4SkZ\x1f\x1a\xc6$\xc8\xe1\x1f\xd7\xb6l\x1b\x90\x17\xe66\x93v\x1b1\x86\x936\xee\x92\xe2\xb1\xa6\xb0\xdd\x82\xc4\x96f\xce\xce\xdep=\x1fA\x10\xd7\xbe?K\xb8\xa7\xc1\xc2\xff\&#39;N\xc4\x9c\x7f6\r\xba)\xfd\xac\x0cl\x02\x0cuJ\xf5\xf3B\xeb\x94x^V\xe2\xbc\xd9\xc3\xb5\x9b\xe2\xb6\x8b\xaa\xee\xf2|x\x85\x0b\xa3\xb7_2\xd689\xfa\x91\xec\r\xf5\x0c\xb0\x86\x99\xafz\x94N#Fc\x8d|u.\xeb)p\x8a\x11m\xeeOzx\x93&#123;F\xd3y\xe7`\xe7\xe3\xea\xd5\x18gd\xe1\x08\xb2+\x82\xa4)\x82\xe25[G\xef|Q\x04\x8dc\xb9\xcb\x1b\x97\xa6\xcb\xea\xcfKm\x8a=\\\x13\xe6\xc4=*L)fU\x02\xd9\xdb\xfdEz\xd7\xdd\xfeA\xf7\xe1S\x13\x0fDB8\x17q\x1b\xd5\xfc9\x97+$\x02\x89\x9b&#125;O&quot;V\xb8\xe5\xfc\xa8pj3Da\x95\xbe\xf7\xf4\xc2#\xd6\x9f&quot;\x11hu\xd5\xadqZJ\xcd*\xc4\xc8\xc5t\r\xcb )\xc6\x19\xcc\xcb\xb5\xabw\xb8\xcc\xa0i\x03QS\xa8\x1f\xde\x8dx\xa13l\xd6\xa2\x0f\xc7\xb4$H+X&quot;\xaa\xe0\x83\xe8\x94D\xc1W\x9f\xd2\x1f!\xa5k\xf9\x8c\x80\xf4\xff\xea\xd1Ue\xde\xb1\x1c\xc94M&gt;\x97R\x1e\x83U\xb9bF\xd4\xec\xfd\r\xe0\xb6\xc5\xb6Rwi\x9c&quot;\xc8,\x07\xcc\xbc\xf9x\x95\x9d\xacy\x9b&#125;:\x03\xcd\x17_-\xad\x99\x80\xe8~\xf1r\xf4\x81\x92P%2`\x90\x158riHk&quot;Z\x92\&#39;\x1d\xa2\x17l\xb2\x93\x9b\t\x18\xc21\xe2t\x96\xf44\xd9\xc4-\x0b\xb4\x99\xca\xdf\xa4\xa0ee\x08\x9c^7\xe9+\xb5\xdb\x1a\xeb\xe28Z\x03\x15o\xf7\xff&lt;\xc9\x02wZ\xe2M\xbf\x82:\xa3\xd9\xef\x0c\xb4]Fo\xefy\x90e\xc5N\xb8\xe5\x92CH\xef\x14\x82\xc03\xf3@\xff\x81\xd9\xf9\xd51O\xbf\r\xe1ex\ri:\xddN\x06)\x9c\x86\x92\xe8\x19\xa9\xbbB\x88\x84\x0f\xd5\x1dpn*@\xade-\x88a]\xe4\x87\xbb\xbf\x8f+\x85\x1etg)\\\x11\x03\x03e\x1c\xea\xe1\x9d\xf6\x08@\x18Y\xb7\xa2B\xb1\xa0Y&lt;\xbf\x9b\x07\n\x8dH\x9a8\x08\x04\x97:\xb8\xad\xb0s.\xfe3\xe31o\x97\x0c\xcb\xdf\x8a\x05P\x17\x01D\xd0\x1b@\x88\x92\n\xb8i?\xb6\x8f\xa6\xca\xb9%\x01G\x15\xd2\xc7\xe9&lt;98\x86\xaa\x9c\xe7\x80\x803\x8b\x81U\x10c\xd8I\xc4\x87\xe4))!\xd7\xc9\t\x88&#123;:\xe2\xbco\x1eZ\xab\xd1\xa4CO\x9bDt#\xc3\x1f\xa5e\xb9\x8a\x1cFs\x14\x11\xc7\x95\x86\xc9P\x07\xa3\x94LJE\x1aff\x9e)c\xe9TTB\xaf\x07\xf0+\xc8l\x1b\xc7\x07Y\xf8\x85H;\tP\xee\x15\xe0\xb9H\xc1\xc7K%\xb0&#125;\x82\xb6\\\x88\x9e\xf8\x15\xc6O\xf5\t\x99\x0b\xf4e\x8a\xb3 \xfc\x12~\x15M\xd9\xc3\xabL\xf7\x84Z\xbe\xd4\xf8\x12c\x8b\xf8\x01&lt;\xf0T\xbe2,\xab\x0c\xc2\x85\xa6Xn\xe0\x0eJ\xef\xb4\xf1\xaa\xf3\x83\xec\xbe\xb7\x8bo=2\x90\x11\&#39;\xe4\x10UE\x04\x8d\x01\xa4B\x1b\x1b\x88T \xc232\xa9\xb9\x81v\x10$h\x8e\x7f\xc3g\xd6\xb5+fs\xd7\x02\xf0\x17Pom\t\x97\x95\x9bM\xf7g\xf2:;?\xc5\x87\xb2\xf4\x9c\xe4@`L-\xad\x9eT\xbc\xbb\xa3_(\xa6\xb3Z\x8feF$\xa7\xb9\xde1\xeb\xe2\x0c\xb8_\xc8\x83\xb9\xd8\xe2\x112\xe5\xaf\xaa_@U\xf5&lt;\xab$k\x04\xc8!:\xdc\x1aG\t\xcdl\x1d2\xe2\xe7NI\x10\xe6\xac\xf9\xf7m\xc9`8\xb1&#123;\xaa\r\xa6\xff\xe7\xaf\xdd\xf8\xd29\x01\xdb\xf0\xd2CL\x8b\xb1\x82\xb2|\x04\xd9\xab\xdb\x1er4EDS\xc5\x92\x1eh\x8d%6\x00\xba\xac\xcc\x7f\x94\xe68\x02\xb8]\xc1 ,\xc8\xd0I#\xa3\xbc\xc1\x87\xad\x1d\x1df\x9d\x05\xf0\x06\\p~\xa1\x82)\xcc&#123;\x01\x1d\nB|\xb6\x82A\x8c\x8e\xf61\xb5\x14H\x9d\xeb\xbf\xb8\x05\xcb\xc3\xd9\xbd\x9e\xf3\x11\x9a0\xed\xbe@&lt;\x0f v\xde\x91\x1e\xba\xce7_\x1dO\xf20\x98de\x05\&#39;2\x96\xb6\xf7\x13\xc8\x11\x07\xc9\xae\x8c\x86\x9a.\xf5u]&#125;\x83G\xc5.m,\xfcH\xfc\xf0\xbd\x8d\x00\x1eC\xa5\xe3A|\xf4&quot;\x83\xe8\x12i\xab\xe8|\x82J+,\xb3\xee&amp;\x84\x88F\x19B\xe6\xde\x03\xa9\xb2\xeeg\xc7g2\x8a==b\x86\xc3\xdcuh\xb8wE\x89\x88#\xde\xcc D:.\x8f\xa0#@\xde\x8b\xf8\x189\xed\x1f7@\xccU\x1d\x02z\xd9W\x16\xd5\x81\rc4\xa2\xc4j\xe6\xd4?l\xfd\xb62Wv\xc0X\x8d\n\x9a\x003\x9f!#\xd0\xba\x0b(v\t\xb7~\x05j\x00\tM*s-\xce\xa7\xdb\x82\xe8\xccS\xd9\xdaj\x92$\x08\x14\x85\xd1\xceh\xfaj\x10\xc2\xa0\&#39;\x89\xb6k\xd6f\xb6\xee\x9daj\xe5k\x97\xd4\xd6\xe4\xe3vk\xadC]\x1e\xbc\x8fo\x96ok\xd5\xe4\x02~-\x1e\xd4-8\x83\xfd\x12\xcc\xde\xb0\xb6&amp;+B\xe1m&amp;[T\xdfrll\xe8|\xe9\xbdk\x82\x94s5p\xf8\xf8\xd3\xd46\xcez\x85/]\x90\x9f\xc3q.\xac&amp;\xadjQ!\x10\xcd\xeb\x10\xa4&amp;\xe0\&#39;\xc6\x05$\xb4 \xf4Zr\xd5vz\xa1P\xc6\xfb(\x0ct\x14\xb9\xef\x11\x9bN\x16T\xef\x19f\x16\x1b\xc3i\xa3x\xc01\x01\xb2J?\x1c\x1e-\x9aN\xa9]\xd0\x87\x94\xaf\xb8_i\xad\x11\xf4\xf5\x08%\xd1\x1e\x9dr\xd7\x0c\xa4\\\xba@\x90\x01\xf95\xfe\x0b\xf2 \xdfD\x03\xc5%kst\x0co\x8e\xd2\xe0\xe1M\xe7%\xe1\x0b\x15\xfeMS\xe3&#125;\xf9\xeb\x97\xe8\x94\xbea|\x00\xc8\x00\xd2:\x12\xc8\x00\xad\xd0_Sj\xbf8\x98\x80\xedy\x8f\x9a\xc9\x90\xa0\x12\xfe\x94D_l\xdaC\x07NO\xb5M\xcd\xb3\xb4\x0f\x0c\x19\x02\xf4k\x8eL\x89\xb9\xc0[\x0c#\xf7\x07\xfa\xff\xe56\x80\xf1\xd3\x01\x998\xf9\xa0\xfa(\x11q\&#39;_q\xe0\x9a7\x92\xe3\xdc\xeb\xcd\x14hs%&#123;\r\xef\x1aO\x9aRU\x17\xc8\x8f\xdf\xd3\xc9\x01[\xf32\x81MY_@eO9\x06#\xed\x17\xeaV\x14;\xd7\xeayr\xbc\xe1\xd7\xbc\xa9\xed*\xfdV\x8e]\xb1UI\x85\xb5\xeal\xad\x0ei\x0c\xbe\x83\x87\x0f\xfa\x1d\xe4bo\xfdO&amp;\xe7O\x92\xe7\x93\xb8\x1e1\xe4\xc7\x19\xa0\xf9\xddsm\xe3+\x06\x88\xe1N\xb9\xbbZ\xf1x\xac\x02\xc8&lt;\x0b\x8f\nW\x83:\xc5T\xc5*\x1cO~\x15M\xf3&#123;\xe7\xc2\xe6[\xc1\x8b\xbb)\x1a\x84\xe1\x03b\x97\xae\xf5S\xbd\xb3\xdc\x15s\x0b\xec\xb5u0\x10\x91\x82\x83\x014\x93\xa4\xb1i\xe3\xfd\xf9\xf4]Be)\x8b~\xd5\x1d\xb6\xdd\x81\x0c\xb3\x93U\xd6\x9a&#125;\xc0\xf8.5\xb1Y|\x02\xdd\x8c\x88&quot;\xadJ\xaaYq\xb4&#125;\xac4\xb4\x941\xa4\xa2!\x1d\xe8\xe1_HAO\xacO\x85Q_\x03\x1e\xcb&quot;rB~\x13\x1c\xa7^\xac\xd1\x03H\xff\x8bk\xefK\xc3\x97\xdf\xc5q\xbe!\xe6u\xceY\x8a&amp;\xdd\x81\xe5x\xccA\xdb~\x85&#123;\xd2%\x86\xf7$\x8a\x86(5!\xa3\xf6E\xbfS\x9bc\xfe.g(\x0b\xd7\xb2E\x8b$-(\xe1\xd4z\xa0\xcd9|\xf3\xdcf\xb7Wp\xc0\x8dG-\xacg\xfa;*\xb3\xd2\xe9t\xf8\x0c\xe5\x14W1\xf8\xef\x9f[\x84\x0f.0\xda\x15\xd4rI\x93\x1b\xe6p\x96+\xed=N\xf6Y\x1a#\x0f\xc9\xf82\x98\x85\xee\xb6\x925.\xf95\xc4\n\x18\n\xd2@\xb2\xb5\x02\r\xce\x15a\xac\xb01&#123;\xdf\xfb\xfe\xd9mB\x7f\xf8s6\xae&#123;U\xf8UM~Q$6\x14\xbf\xdb\xb5\xc4s\xdc1O\xc85\x9c\xf4h&#125;\xaer\xdf\xce\x1c\xca\x83\x1c\x83\n\xa5p\xd0\xea\xfb\x80\xef&quot;\x1a\xe4\xba\x0fW\xd2B\x9dcK9\xcbF\xdb\xd5\xf6\x83\x14]\xb6,\x1b\xc9\xb7\x0e\xb6\xf4r\x12P\xe5\xf9e\xfd1\x80\xc8\x9e=7S\xaf\xf3\xf41\xf1\xa4\x16\xb5\xef\xfd\xd6n\x0b\xa4X\x81\x8fm:\x97\xe6\xa7\xa3\xa6\xffUN\xac\xb87\x89.\xfa\xdf\xe5\x9b\t\xb9\t\x98\x82\x1e\xf0\xdfP\x00!b&#125;\x04i\x95\x07+\xffs\xb8\xd9\xcd\xcaB^\xff\\\x8eO\x84K3\x8a,&#123;^t2\x80qW\xdc\x8d&#123;Nj*\xd15\x98\xd1\n!\xe6|\xe7K\xf3\xab\xb8\xae\xca\xc4#s.\xc4\xdb\x82\xbc\xdf\x86\xe8-\xee\xa6\r\xa8\xda\xc7\x80dKW\x8cF&lt;f\xce\xbe\xc7\x0f@h&#125;:Y\x17\xf7\xe3\xfc\xfd\xd4\x9f\xa6%\x92|\xa1\x0f\xb0c\x83@\x88\xb7\x08G\x9ck:\x1ai\xe1\xfe\xfa\x11*\rK_z\x806\xb2\x9a\x88\xe8\x08\xb3\x14\x8ba\x7f&amp;\x07\xec\xbeR\xcd\xf2R\xa1 =\x8du\xa8_c\xa0\xff\x1f\x040\x1fLs.gp\x96\x95I\xc0\xedn\xd5O\x02,\xafxb\xf6\xeb&amp;X/q%\xe5*l@\xc1K\xdf,5^\x8c\xbf\xecM\x7f\xbaV\xfb\x92@\n\xec/\x16\x06x \xb4d;\xb2\xd0\xf8:]0PGj|~\xc4\x1a2\x9c\x8a#\x83`\xeb\xb8\xff&amp;\xa5\xd4\xde\xe1\xb4\xa2];\xff\xd7\x10od\xa8\x86\x02\xde\xa9YWu\x8e\x9c\x8e\xb8\x04gsH\\p\x9e8R,\xde\x8b\x1c\xe6Ra\x1fN\\\xab\xc7cM\x9a\x02@\xafhC\x19\xdbT\xd08\xccv7-\x8fz\x8e\x97\xf1\xe8\x17Z\xfd\xe4~\xe4\xd1m\xd0\xfb\xb2\xde&#125;\x0c,\x83K\xf1\x11\x0f\xe4\t\xcd\x87\xbe\xab&#125;A\x87\x8b\x1a\x0f=\xecB&quot;\x1d\xcd\xab\xda\x8bp\x7f&amp;H\x9e\x15=G!\xcb\xa6W\x1f\xb0\xee\&#39;\\\x88:\x92UlIwr\xd5\x0e=\xcf\x12\xae\x8c\x83l\x00*\&#39;$0\x81\xeb9\x19\x18\x0b\x0c\x8eh\xdfNc\xc3:\x07\xe9\xa4\xe6ke~\xc90\xc3\xbdRf\x87\x97\x1c\x8a9\xfeM\x15\xa1\x1a\xd2\xcb\xb4\xc7x\xdc\x055\xc1r\xe3\xd7\xf2\x1e\xb3\x91:Z\x05\xc2\xfcg\xe8\xf5\x00R0kbp\x9a\xc5\xfc\x04o\xc8C\x81v\xc2[\x8b\xeb$\xf5\xd4@\xf0\xec\x82\xb6\xd0\x0b(\xd0\xecF\xd9\xec=K&quot;\x02\x16K\xa7\xe7\xec\x03\x12=[2gk&#125;\xbdp\x9c\xeb\xde\xf5\xf6\xaa\xee\xbf\x86\x14\x1atPI\xc3s\xd0\x99\xeb\xfeN\x8a\\\x11\x10\x8d\x92\xbeA\x92!r[\xc6\xac\xcb\xad*\x089\x05\xa1h6&#123;_\x83\xffR\xaav\x92A\x1d\xf3\x12\xed\xd7\rV\xa7-\n\x80&quot;v\xabx\xc0\x9b\xa1\xef\x97z\xbb\x11O\xffB\xc3\x92\xba\xe8.\x10.\xd6\n\xdd\xea\xfa\xe1\xb9GT\xa2\xa6\xbe\xda\xe7\x84\xcbD\xbb\&#39;\xf5\xf6\x95Ux?&gt;\xcf\xd1\xa9\x14b\xbd\xc8\xb1&gt;\x0c(\xcb\xcatB!\xbawEpf\xfe\xe5_\xd3\x00\xa2\xdfH\xac@_\x17\xb1b\x92\xdfv^F\xd2\x87\xd6\xef\x90&gt;\xce5\xe1\xd0\xee\xe5\xbew\x12\xf6\x97\&#39;\x19\xee\xf5\x975\x1fU._\x84q\xf5&amp;\xf7\xd5K\xf1\x0b\x7f\xd8\xf4\xa9\x1fO\xd4u\xd3_c\x89\xde\xd5\xc5qz\xc3\xf3\xaeq\xa4\xeb\xaf\xc5\x83\x87\xf2\xd2w\x88\xe9\xb1\xcdk\x1e\x14\x1b \xeb\xfc\x03B#\x1b\xe73\x82\x0f\xc7ar\x9d\xaf\xe4\x7f\xe5X\xd3\x93\xcf\xf2\x10J\xa5N\xd4J\xc2y\x12\xb4D\xfb\xb5\xa6\x0f\xa2%\x13\xd1\x9a\xffE7\xeb\x8e\x126A\xfd\xc6\xc2\x8b\xb2\xb0l\x15L\xcb\x0c\xdf\x19\xf9[\x8e;\x94\xd2\xea\x0f\xdc\xf2\xc7\x01W\x08\x9fNa\x8b\xcf\x1d\x8b\x86\xe0\xd6\xecG\xeb\xb6\x17R&amp; \xfc\x1b\xce|\x07\xb8\xf6\xd2*\x18\xcd1\x89\xc9\xee\xe9\xda3\x02\x93w\xe5\x04\xb9\xd8\xb6\x83\xd9\xee\xecp\xd5f\x04Y\x08\x0cR[\x87\xca&#125;\xf2\x8d#jO?h?\x8b\xcb[1=\xf18\x80\xbbk\xd2\xcb\xc3\x1f\xef1\xa1C&gt;\xcd\xad(\xb7:\x9b\x19pP\x8e\xf4z\xb0\x853\xb1\x13\x04\xcf\xc5\xd1=\xe9\x99\x8c\xa7\xde\xd6\x1a[Xi/\x8c\xbd\x9d)\xc1\xd1t&quot;a\x9c\xc2\x92Y\x9c\x17t0vH\x06\xd4U\x0ebV\xaa&#123;`\xfduX]\x80\xad+\xa7\x7f\x98y\xbak\xe2r\xd0\xa9^\xacB\t\x1b8\xdb\x12\x9ay\xcaQ\r\xa4(\xa7\x11\x0b\xbf\x07!c\&#39;1\xb1t\x8f\xbd\x88\xc0S=2\xe8\xf7\xe5\x98\xf8\xa4\xe4H\xa1\\\x1d\xe3\xf4\xb2\xaf&quot;/w\xc7Q^\x9e;AI\xfcxgfS_\x92\xd2\xab\xe2\xd8\xc4=&quot;\xda:\xc0B\x9d7u&#125;:\xa6\xa9\x1fn\xf22G&#123;O\x91%\xfe\xde\xbay\xd2oD0*\xc4Qx)\xd6P\xe4\x18TZ\xe4AX\xe8\xfaj\xa8\xdce\xd9k\x10\x8e\xa9$\x84/\x02Jw\x08\x93\xdfFp\r\xc4\x97)3\xe2&amp;\xc0&gt;\xbfk\xe2O/\xa1~\x8a;\xee\x06\xcfbA\x0e\xd8\x94g\xa2\xd8\xfb\xfa_\xd6\xf5\xcd\xa3\x98\x86\x19\xf0\x06\x1f\xb0\xd3\x05\x0e\xfe\x89\n,\xb72\xc8\x81\x95F\xf0!G\xfa\x00\xdd\xcdk\x95\xf3\xd6i+\xcd\xe4\x16\t0\xd6\x95$p(h\xc2\xe6*\x94t\xd1h\xce\x18\xd4\x1c/\x94\\\xa4\xf5\xe9uw\xc8\xb9\x91H\xfe$&#125;X\x92\xa0B\xdd&lt;X\n\xa7&gt;\xfe\x8a\xd3\xc5\xfd\x10\x0e\xd3bat\x17U\xc0\xd9\xdf:z\t\xdc\x9a\xe8\x89f\xe1\xb6t\xe3\xb5x\xd9\xf4\xc1\x01\xda\xec\xe5\xef\xa1~\xea\xa29\xd3\x03PLC\xc1*\xcd\xd2\xbf\xb6\x9b+A]\xfc\x88\x17\xd23\x8d\x04\xd0\xe2\x93\x98\x0e\xf6\x93~\x89m\xb8\xad\xbc\xc4\xea\xdf\xa1^\x98RK\x04\xd1q\xa1\xb14\xbe6h^r\xe1u\xa1|e\xf4\xcd\xcd\x81\x92S\xfdx\xdc\x86\x18\xa0\xf4\x04\xa3\x1b\x95\x81L=\xcd\xe4\x06\xd3\xf02Af\x90\x13\xd4Y\x15/\xff\xf0\xb0\xa2F\xe00uP\xccq\x81.\xe1~I\xb5\x85SR+\x97\xa4\xb6\xca&amp;A\x01P\xcbyN\xb5\x90E\x02\x91#\xc0\xa2\x8a[*\x1b\x8cS\x1a\x85\xd2)\xd8\xd4Z\xbfd\xae\x11\x889\x8d.`&quot;8+\x9d\xb3\x17\xd0F\x9d\xe4\xf2\xc760\x9a\r\xb36\x00k\xa0,\xdfA\xe7\xa8\xf3\x03\xd6\x8a\xacp~\xd6\xebz\xf2\xe7\xf7\xca\xb2q\x1dS\xd9y\x9aP\xf6;\\\xaa\xe3\xca\x08\xcfp\xa1\x0f\x89F+\xbcb\x0f\xb2\xea(=#\x9ew\xfbS(\xd7\xe8W\xd0\xbe+\xc3\x81\xae,G\xdeR,i\x89n\xe6\n\xd0\x07\xd8\x90PR\xc9\x88\&#39;i\xd1\xbc&quot;\xea\xb1Z\xbb\xb2\x95M\n\xfeJS\xfcd&#125;\x7f\xf3\x05\&#39;\xd3\x95\x02\xc8!a\xe6l\x1e\xbf\xa8&gt;L4\x9b\xf6XG\x96\xc7d\x15\xe6\xbbutL\xdc\xbfr@^\x86P&amp;\x8eP\xe6&lt;&#123;B3\x80\xca\xe6\xb4p[\xd1x\xdf\x16\x12\xe1JWd\xc7]\xa1^\x16s,\xd9\xf1A\xd5E\x92\x93\xe8\xd2\x1f\xca\xc7\xae\xccB\xe2a\xe9A\x10\x0f0\xbf\xc5h \x08]\xfb\x1b1-\xdb8\xad\t\xf6\xecH\&#39;m-B\xe4\xc9]\x8c\x1cz\x88\n\xb6\xb1\xed\x85V%\xdf\xfe\xf9\xa5\x857\x02\xef\xf08\xc6\x15\xf0\xc9\x1a\xc0\x97\x94-\xb5r\x93\x87\x07\xe2\xadB\xda\xef&amp;\xfe\x8cj\x89\xd2\x14K\r\x83\xdab \xcd\xd8uO\xc3c\xb0:\xc6\xa80s\x88\xfev9\x05C$\x8eb\x99n\x98\xec\x1a\xb6\xbd\x10\x1e!\x0e\xf9\xe3\xc5T\x95\xdf\x95\x9b\xaf\xd8a\xc5+\xf6\xfe\x84g\xfbk\xc5\x1b\x01\x00\xe9_\xcb\xee\xdb\x88\xad\xdf\x0490\x07mr\xf3\xa8\xd6t\xb1W@_\xf8\xda~9b\x96\n\xb1\x03PI\x10\x8a\x1c\x9b\xc7I\x1eNr`\xb3Q\x1e\xdfbGC&amp;\x06Ff\x9a\xdc\x8a\x10\xb3?\x85J\x1e\xe5z\xcf\x81n\xf4\xaapE\xc4\x0c(%\x87\xa9\xc0\x98\xf0\x1d\xf1e\x88M\x98\xc2\xd4u2\xc2\x8b\xd5\xac\x0c\xf8)\xd4U\x95\xd1\x02X]\xec\xe2\xf6\xdd\xc6\xcd\x9b$o5H\xfem\xaa\xbc\x8cVh\xbe1wL\xa8\xb0w\xe9nd2\x96\x1d\x824P\x97g\xce\xa1m+\x02\xad&#125;\xbbH\x95\xe4\x128b\xb30k\xa7\xa9\xc3\xcc\x15h\xb3z,\x95/8SA\x83\xda8S@\xfa\x96P\x8a\xe9\x07\xda\x8dw\xa0:(\xb8BI\xac\n&gt;\&#39;\x9dc\xbc\x7f\xc4\x18$4\xf7cg\xe3\x8e\xddIO\x05\xf8\x19\x1a\x0f\xb3\xc6\xf8#W\xc3\xceM-\x8f\x90\x0f\x92\x9b\\f\xc4\x84c\x06\x93\x10\xe7\xf6\xb0y\x15 \x80/3\x00A\xc3\x1cX\xf5UU%\x94&gt;\xf4\xfa\x07\x8cE\x941v\x01$\xcfO&lt;\xc1\xf0\x9f\x14\xf1o \xf3\x93\x9c\xe1E\x9bb\xdd\xe6\xbc*\x03\x05\xd7\x9e\xb9N\xc7\xe3\xdc\x08\xd8\xc5\xa2\x8fh\x03\xfa\xe2ZY:7\xc7\x0e\x0e\xeaI+ke(7\xd0\xf4V\nT\xe0\xbe\x96\xfb\x070\r\x7f\&#39;n\x94`\xf1w\xe8\xf181\xe7[\x06\x9cg\x90\xc4\x01\x82\xf2F\xad\x1c\xc3l5&amp;9\xde\xcd)\x1bM\x92\x15\xbeU\xb5\x95\xf9\xf0t\x1f\xdd\x19g]e\x9d&#123;\xbb\xc9\xd7.Rv\x98\xf6S\xb4X\xb2\n\xd3C\xa6\xef\x05_\x17\xb8\xc2\x13\x08\xd4\xdbWV\xa3g\x00\x9cr\xfdIVWo\x00\xa8\xdc&lt;\xc2\x89\x8ds\x92\xedd\xf8\xd6\x9b*\xa39\xffa\x06\x83\xbf\xa9j\tBm\xc9\x06\xf9n\xcd\xff\t\x1a!\x8e\x0e\xcd\x12:\xd4\xf2\xfaC\x14&gt;\x13\xc8a\x93\x01\x8b&gt;\x1c\xad\xe8(\x84\x07\x10\x84Oo^\xe7L&gt;\xcb\&#39;\xcf\x08\xff\x90\x9b\x01\xb5\rq\xad\xb1\xec+F.\x92$\x82\x9d\x85\x1aV-%\x12Z|\x18\x1dt\x82\xed\tK\x97\xc2\xf2\xf5\x9c\xbc8\xc62\xb9\xe2\xaexIj\x84\x856\xce&lt;\xf6\xb8\xca\xe0)&gt;\xd5\xa5\xf5 \xce\xd6( \xe6\xe4\xbc:\xe88\xa2\xfb\xe2\xaf;\x1do\&#39;\xa7\xfe\xb0o5\xdc\xa50\x04\xc53\xf6C\xa6wV\rR\xf44\xe3\xf32D\xff\x8c2\x00-\x8a)\xdcH&lt;\x81(\x01\x9f\xc4\x95\xc7\x8d\r\xedw\x1fi]\xd8\xdf\xaf6\x12%\xef\xf9\xcb2-\x8a\xe0\x7fC6\x12\xc5\x9a\xe8\x9d\xa8\xa7\xb8H\xba\x91\x8b\xdb\xc4V\x8c\x1e,ez#\xb7\xe1\xfeY\x7f\xd4D2\x82\xf3B\xe7\xbak\xd0\xec.\x0f\x9a &amp;\rf\x98\xf9$\xfa&lt;\xe2\xbc&gt;\\i\x8f\x19\x87K\xba\\\x80Y\xce\xe8\x86\xbb:\xf1\xefw\x98\x82\xad\x9b\xff\xa2\xf3\xd0(2\x8c\xcd^\x82b\xf0rtE\xe6\x17\x81\x80!:\x95\x89g&gt;\x11\x0b\x02\xd9\t\xe8\xdf\xbd\x06\xb2-h\x07Iu6b\xd6.\x9b\xd00\xd9\xc4Xq\x9f\x06\x1f\xab\x19\x8a\xd1#\x84\x93&amp;\x02\x82\xce\x9a\xe1\x14M\xb5\xf0&gt;a\xe424\xe5\xcf\xc5&amp;\x80@Y\xea\x0e\xde\x1aM~\xf2|p/\xe0\xc2\xbb\xce\xdaTv\x8aM\xfd\x06*\xd6\xdd@&quot;\xfe\x082\xf5sK\x04\x12\xa2\xcf\xe0\n\xf7\xa3\x1eg\x96nq\x85j\x98\x83\x13\x90\xca\xc0\xd9\xe5&lt;\xee\x15%y+\xc5`\xbc\xb0L\x1f\xb6\x15R\xf9\xed\xd5\xd6\xc6\x891W\xf1\x94\x80.L\x82\xe9&amp;\xff*\x01A*\xe9\xa0\xd7\x14.\x07\xc6n5\xa4\xa0*\x93\t\xff\xbb\x02\x0f\xc2\x93CQL^\xe9\x06!\xcaBB\xe6\x11!\x07\x92\x8cV\xbas2\xda\xe2y\xa2\x97\x83-\xb7\x10~\xfb\x94\xfaZ\xd2\xdb\xd6\xec\xa1\xd8f+Ce\x1b\x06\x82\x12\x95e\xb54\x93\x02\x972p|\xe4\x922&quot;\x08#\xbf\xce\xa0&#125;\xe9\x91v\xf8\xd4\xd7$\xb6\x1dmQR\xa8\xc2L\xef\x93\xcd\x1c\xc0\xe1\x19Vy\xad2\xe1\x9d;\xdb\x1dS?\xaa\x9a\xdf\xe3\xa4\x8aZ\xd2)\xcf\\\x8f\x83\xdd-m]\x12P\xc9y+\x8a\xf6\xb6\xb1\xb2\x16\xd0\xa6!q;\x01y\xfc\x18\x81C\xb4\xf80\x17\x8e\xf5\x98\x89\x1c\x04\xfdwe\xc77y\xbf\xffG\xdd\x97\xcb\xaf\xf7&#125;A\xf6=d\xaf\x83uH\x07\xcb\x9e\xf0=\xfa\x06\xee\x8c$\xda\x9d\x7f[\xd7\x81?\x0c.\x810\x05\xb6\xf8.\x03\xc0\xce@\xa1\xbei\xe23\xd4\x1f\xd6\x9d;\xc0\x18[\xb5d#\x05V\xbf\x11\x05\x08\x80\xa7|^%\xfa\xd6\xb8\x13~\xf6&gt;\x15`\xf7a\xaaJgB\xedi3\xe5\x1a\x13 x\xd1\x01\x00\xc7O\xa1\x0c\xa2\x1fY\xe3D\x92\x9bxR,\xed\xba\x87\xad\x0bhA\xad\xa1\xa1\xe9t\xe8C\x96bl\x12+\xb6\x8b\x9b\x06\xc8\x1c\xae\xc9\xb6\x98H\n\xcc\xd9\x89\xd7\r\n\x8c\xd7\xbbv\xfa\x0f\x0c\x00\x08\x19N\xe3$\x97\xc4\xd5\x89\xf7\xab]1q#N\xdbE\xc6h\xf3\xa5/\xc2\x1a\xff\x1a9\x06df\xbf@ VO\x84!&#123;KE\xf0\xa1S\xfe5\xc9U\x93\xbdk\x1e\xb5C\x84\x96\x8e&amp;\xcb\xa2\x1cQ\xd0\x99\x98\xfcs\x03\x0b\x02\xf1\x9b\xeb\xac\xd2\x16\xaa\xdeW\xdd/\x15\x92W\xf8\x03XT\r\xe5\xb1i\xf0\x90l\x19\xfe\x89\x17=\xb5\x91\xf4\x7f\x80U\x1eG0\x10bYmJ52\x18Q\x9b-\xb0\xb0\&#39;&quot;.\xd3(\x8c\xeb\xfd\xb4\xd7\xd2\xf7\xaf\xffZO%i0\x90&lt;&amp;\\1\xa1\xd1\x96\x13\xf1\x1b\x8b\x1b\n\x8b\xcf=j*\xae\x1c\xb2\x9ao/\x93\xf1\t(\xf2`\xa9F\x04\xc9\xd3\xab\xa7\xf3\x03\xc2\x04\x83\x85\xdfc[0\xdd\xe6\xbc6\xe92\xafL\xf6\x1d\x02\x8b\x1ab\xb0\xce\xe6\xa7N\xba\xa6\xc3S\xf7X\xb3\xc1\xd7\xb0\xa2\x85\xa0\xcb\x01s\xb3\xbd\xa9q\x9f)\xab\x11\x1ey\xaaMA\x84:\x9b\xef\xe9z\xbeL\\d\x9f\xcf\\0*\xdf\xe1&gt;\x83\xd4Z\x062\x8e\x8c&amp;Y&gt;\xa0Q \x8fs\xd5\nG\xec\x87\xa0&#123;\xfd\x15\x98@:q\x1cwC\xa6\x8e\xf3\xfdoF\x95U\xd4\x00I\xccXT\xea\xa6\x1f\xce*^A\xd7\xe9\x1dI\xdd\xe6\xed\xe6\x83\xc9\xe7\xfd\xeb\xd0\xf2[G\x85G(\x9c\xc5\xc2\xcek*\xcf*\xa8\xc6%\xf3\xe8\xc9\xcd\xba\xc7\r\x1f2G\xb5\xfd#\x1f)\xf4\xc50\x8aL\xc2WH\xb9*e\xc3\xa1\xdc\x17to\xf6H1T\x17\xad\xb5]w,\xf7\xa9d\xae\xad\x9c\xab~&quot;\x1a\xc1nO\xd3\xff\xcbB\x8d\xa0\x03\xff\xdaQb\x8e\x0b\xf6\x1a\xda\xbc,\xbcT\xe4\xcf\xc1z&quot;&#123;\x13)\xb3pRXm\xdc\xe2,\xda\&#39;\xbc\xd8gL\xcf\xcd&lt;M\x1e\xaba\xb57\xcb\xe4&gt;x\x02\xd4\x87\xb8*\xa5\xb4\x8d\xfc\x16\x1e\xb0c\xff\x93/P\xa0/W /\xdc\x80]\xc0U\xaa^\x11\xb3L\xd7;\xc6\xcb\xd6\xfe\xf5)\x8ep\x86A\x90\x07\x07\xc2\xd8\xf0\xd2a\xd7\xb9\x87\xa6\x9d\x1e\x80\xf2\x91\xdd\x04\xa7\x1ce8pm\xa8\xe1\xce\xd6\x8b\x0f\x12\xf7\x98H\xd4~+DO3!\xdbW\x84\x1aD\x8d\x1d\x0e\x88G\xd2_L+\t\xf2\xb6\xd1\xb0\x19\x02\x91\xbb\x13\xe7\xf2\xf2\xe3\x88x\r\x0b\xde]\xbc+A&#125;\xc4\xd3U\xd7\x9e\x1b6|\x94\x83N\x0f^D\xc6N\xe2\x07\x06gs\xd0\xae=J\x82\xd7\x06\xbfS\xaeE\x9a&amp;+\xa9\xe5\xda\xeb \n,\xd9\t\xa8\xb4\x8a|\x88U\xba\xc5\xafo9\xcfKOm\xbe\xfb\xfc\xebI\xcb\x1b\xfc\xac\x92\x91\x06\xaep\xb5Vn\x9ae\xf8M`\x8b!G\x16\r\xfe\x1e\x0fP\xed\xfb\x1a\x99\xd1\xde\xc2\x91\xa0\x03gN\xb5\xaa\xc9\x80&#123;\xabU\xa8H!(\xb1\xfcJ\x86\xa54\xb8)L\xa9@\x94&#125;\xae\x1c=\xde^!A\xb7x\x19\xac\x99\xff\xbf\x9e\xb3\xe1Jo/\x8cz\x95\xabY\xfc\x15\x05v\x93T\xff\x15\x98\xf3O\x92\xff\x03\xefX9\xed.\xc2\xabqf2\xd2&#125;\xf2\xb2_\x90\x9d#\xc2\xf4\x07\xe0\xf3Vp\xf4\xdc\x87\x0c\xb7\xc0\xfb\xc3\xa0\x18\xff\xfd\xc9W\xb7Wy=y\rPLp\xfd\x81\x95\xffI\x82\xbb\x17\x97\x03\x97\xfb\xf9\t\xa8l\xd6\x03\xf1\xce\xf8\xb6\x07\xfd\x87\x061K\x06\xfc\xc4-\xb5\x00\xcb&amp;\xef\xb1\x0b6\x1b\xdd\x80[6\x0c\x10\xe1\x96\x85\xbc[\xf2\xb1\xc7\xedUx\x15rI\x0c\xa8\x93~\xac\nj\xf2\xedn\xdeY\x13\xdb\xdc\xe6XC\x93e\x0eG\x00\xc5\xcd^\xe3hC\xf3\xcc\xe2?\xf7\nP\xc0\xdf\xe9lE\xb2\xd3\x9d\xf5\&#39;\xc1\x83v\xe1\xbc\xb1\xaa\xe9p\x16\x02\xb72\x82(\x87\xf0\xbamO\t\xff#\x17;\xaa\x1b\xbcF\x0e\xaaK\xbe%gS\xbe\xd5Z\xf7H\xc8\xef\xb0\x10\x18\xa5j#\x85\xab\xe0\xaf&lt;\xbd\x82\x94F\xb6\xbc\xa1\xceo\xb6~\x02\xdd\x92p\xc8l\x18\xc3\xff]\xce\xebB\xfd\xb3-1\xd8\xf63\x91=\xc7n\x88\xb6G\xce\x03\x96\x81A2\x0e\xd5\xb9:N\xbdL\xe1HzT\xe7\x9a-\xe3\x97\x84\xb5\xf2\x88mo\xb4&#123;\x95\x81I\xc0.\x93M\xc2\x9b\xe5\xb8\x86\xda\xd9\x82\xbe\xcb\xe6\x1a \x98iF\x9aN\xeb\xd6\xb6\xca\xa7\x1c\xfc\xb6Gci\xe7.\x9c\xca\xae/l\xb3\xdd\x16\xc1h\xfd\x98\xa1zt\xfd\xd5\xe6A\x8do`\xde\xcf\x1d\xa8,G\x92AU\xa3\xf9#QW\xc1\xab\xe6\xae\x97\xe7\xcd\x93V\xb6\xe68%\xe4&#125;\x94Wlr\xe5\xf6\xc8\x85\xd2VR)\xc5h\xf9\xbe\x17J\x15\x9a\xc8c\x87\xb9\xd2\xa7.\xde\x08&quot;\xfa\x99\x8aEqxp\xc5|\x17\xad\x184@s6\xe4\x19H\x9a\x9c\x0bG=k\xf8\xe5\xbb~\xadw\xe9\x9e\x8d?\xb4\xf5\xaa&amp;\xf3\xf3\xec\x18U\x08d\nAk\x11\xb0\n\xbd\x9e\x01\xa8\x92\x89\xec\x8c/\xe5b\xaab\xc4\x0b\xd7\xe8S\xd2\x17\xe1\xfe\xfcl(&#125;B\xc9\x1d\xa4\xd5-\xe69\x95\x8a\x89i\x1b\x87\x92Q\x11\xc9u\xda\xcb;\xe5\xa8\xa1~\xa8\xf0Tg\x8d\xbaS\xcb\x80A\xadF\xd6\xf54 \xf0N\xd1\xc1\r\x86\xde\x9d\xf0-\xae\x9dH)\x0fA\x9e\xdbT__\x94\xca4Lw\xab\x0b&#123;/Eg\x9e.\xf6\xcf,\xca7\x1a\xb4*f\x19\xd3z\xf7g\xd3\x98\x8f*k\x12u\xf3\x85\x9d\x1d\x15rn~]\\\xd3\x13Rz\xda~[\x0e\xd6\xb5\x17\xd0\xc2\xba]\x18\xdf\xd8\x87\x0c\x84\x14\xfc\xb0o\xc4l\xcb37\xb0\xf2.\x895:bWTX\xf7\x94\xd2\xb5?\xf7g\x084\x8a\xd8\x1ei\x81=\nq(r\x88\xd3\x1f\xf9\xeb\xe7\xf2\x9c\x966\xe4\xd8\xbc\xf4\x92U\x8cG\xb0\x02\xb0z\x07\xd7Jv\x91\xfa8Z3\x8f\x9f\xe4S\x05\xd5\x98\xb1\xa5\xb3\x04\xbe\xa8\xe1R\x1d\xb8X\xc7\xeb\xd6\x85\xa3&#125;\xfa\x15V+\xce\x82\xf0\x9a\x1cN\xc4\xee\xf7\x0cf\xfc\xaa\xc2m\x8a\x99E,~Z!\xd1\xbc\x0c~@ \x91\x17\xf33\xc2DwD\x1d\x88\xeb\xe9;\xe3\x0e\x87\x86\x11G\xc5L\xbe\xfeP\xc7\x16\xdd\xb9#\&#39;\x04\xcc\xcc\x08yT\xb0R\xe7\xe4z\xd95\xae\x1e\xdd\x01g\xf8\x99\x87\xd0\x8c\xfe\xfd\xab\xe7\x82\xd7&amp;\x98\xca\xbc\xe6\xea\xfa\xf8\x10|Y\xccms\x8f\x1b\xfe\x0b\xbf\x15Q*\xa6\xb6\x9d\x9b\x89H\x87\xbfn_\x8dM\xdbS\xaa\xa7\xcfB\x858\xbbf\xddTa&lt;\x0e\x8f\x92\xca\xa3I\xd9\xe2C\\\xf2~\xe6\x1a\xd5\tU\x19\x82\xc0\xc0\x8f\xcdc\xefa\xe1\xacbmB\xf2\x14\xfcpM\x1f\x95I\xc8\xef=\xb80\xba\xf1\xc6\xcb\x025\x8b\xa4mI\x89Y\xf9\xc1\x1b\xfdt\xb6\x1cn\xb8\xa6\x8el\x895\x14\xdc.\xd5S\xf7\xfd\x88\xd6\xe2\x84\x8d\xce\x88\xb8\xe89\xc4.\xcc\t+|\x1dB\xc3Z\xe6\x84\xc8\xcb\xb2\xe0\xaa5b\xd5z\x81&amp;\x8e\x03=\xf0\xb2\xc5i\xca\xbf\xfe\xf2\x117\xf5\xd0\xa0\xf89l\x9c\xe0\x07\xd9\xbdy\xbb1\n\xe0.\xf4B\x99(\x08 \xfaE\xfd\xda\xa6\xce\xbf\xdf\xa6\x19\x85\xca\xa8\xa2\x9b\r\xc3\xac&quot;+\n(\x1e\xb5z&#125;G\xe2\xd7\x18\x96y&amp;\x0c\xb7\xb0\xa3\xd4n\xad&#123;\x88G+\x95\x05\xc2Ro\x9d\xd7\xf7\xd99\xff\xce\x8f5\t\xbcc\x8d\xdb\xbb\xdc3U\xcb\x1c\x03\x7f2K\xac\x7f\xf5\xf8\xb7Y\x1a\x94\xac\x01\xb4l0\xb7\x19\xef\xbf\x19d\xe8\x82\xde^\xf3\xb6A\xb0\x89\x91\x9c\x0f\xf5\xd4\xde&#125;\x14\xe1\&#39;\x9a\x8f\xeah\xa6zBs%ED\xf1\x00x\xb3&gt;\xf3\xd5\xc4\xb7\x15&lt;+G\xe3\xe9W\xc0\x1d;\xcc\xcf\xae\x0c\xe1\xc8Q9Y\xc2\xfd\x93\xda\xb5\x0fFmHZgJ\xed\x91k\xd6\x90 \xda\xd6,I\xfe\x90?\xc0?\n\x01JG*\x98\rf\&#39;?\xa9\xbe\xae\xb4&quot;\xdfm\xe5Q\xd3N\xfa\xdc\x9e\x01\xbf\xa2\xbd\x88\x7f\x85\xceM\xed\xa7\xea\xc8\x9e\x80\xb1\xeci\xb5Jm+\xdf\xcc\xbd\xe0\xd3\xddJj\xcatL-\xfb8&#123;\xf7\x06T^l\x94H\x87\xf8\x19&#123;\xa1o\xadB\xb0\xc6)\xc87\x06&gt;\xb3\x07\xcf\x05\xd1\xb3u&#125;\xd76\xef4w\xfd\xf9$\x84Q\x18\xbe\xbc\x13&quot;\x8dP`n1\xd6\x83\x08\x84:\x8d\xce\x06_\xcf8j\x1bto\xd9\x93\x8d]\xd9\x1c\xc1gyr\xadK,\x81R\xb0\xa2\x92\x8e\x9c\x0c\xb5Q\xd3\x1d\xa9\xcfk_\x97\xfbH\x19k\xd8\xccrB\xe9\x0b\xa6\xd1\xcd\xfb\x1f\x0c1\xf1\x00/cGh3\x8c1\x8f\x931\x90\xa9\x0b\xaf\xec\xfc\xf8\xf5\&#39;\x8b\x9b\x04N\xe6\xf7r\x89h\xc7&lt;G\xa3\xd0\xaa\xc0\x94_\xc8I\x1d\r=\x87\xaa\xfd\x01\xb9\xff\xa8q\xc3cg\x94\xaa\xb0\xbc\x1f\x86\xce$\x88Q\xeb\xad\x1c\x82\xbf\x19\x14&#125;tI$\xf7$\r\x9c\x9b\x90\x15u\xc5u\xaca:q&quot;Xf\x1a\xa04\xe6&#125;\xebhCH\xa95\x04\x8f\x82%\xe9\xc4\x1bL\xb9-\xa5s\xc6\nCf\xbb\x1f\xf8\xcb\n\xc45\xb5\xff\x9d\xfc\x8c\x0e\xa1\x89)\xfb\xbf \x1a\xf2\xc3\x99@\xae4\xa6q\xc7\xc9\xa3S\x14\x8a\xec\xefs\xd2\xe9\x9c\xa5\xc2\x87\xaf\xe1\xe3\xdf\x93^\x1f4\x9ec\xc5\xba[O\x1e\xe0\x83\x13\xa1\xda\xa7\x0eO\xcb\xcc\x97B\x18\x82\x80T\xbd%\xb7\xe7oPh;\xce\xec\xd5\x9a\xe9\x0b\x14\xc4j\xab\xe5k\x16#\x7f\x1dL\x9ed\xee\xa9d~\xefR*l\x1a\xb0\x839\x1f\x0c\x1e7\x8e\xe5\xffE2\xecD\xee\x91q\x0e\xc7\x11\x93T\xdao8\x06\x87\xb0\x08\xc9\xb2\xf7\xf6\x91\xc6\xc3\x02\xd2\xd2\xf5\xbc\xdae\xd1\xa8W\x15\xb8\xb6\x83$~A\xd8\xf9b\xff^\xdcDV\xcd\x91\x0e\xc8fbQ\xb9\xc5\xf6\x85.\xc9\xb1\xfab\t\xb2:\xe5\x94\x87\x17ZB?_\x1d[z/\x9e\xff\x99\xc5\xc3\xf4Q\xa3Q\x8d\xaa\x0e\x8f\xc7`,\x8c\xa6\\l#\x90\xd0\xac\xf8\xc8\xdf\x1aY\x18\xf16\xcb\xf0\xbeO\x9b\x94\x13)\x81\x96\x1f\x8a[\xd0\xc6\xed0t&#125;\xf1\x9fD\x80\x87U\xe9L\x05\xa9\xd2\xe8gd_\x13Bi\x8e\x92|2\x92krd\xc8\xc6\x950^\xe5k@\x9dE\xc7s\xf0%\x01R@Hcf\xa1\xee\xebI3K\xa1\xe7\x03\x90\x8ePA$b\xf5\xe8\x03\xf5~_1\x023&gt;\x1f\x9epOA\xa9\xc6\x1d&gt;\xa0T\xf1\xec\x1f,\xe2.\n\x952U\x9c]\xed6\x8bI\xd8j\xb2:\xfb\x9a,\x9b&lt;\xd5s\\\xfbrH\xfbg\xcex\xc1\xbc\x18\x04[6S\xb5y/\xc3\x0fHq\x9c\xbf\x05\x14\xa8\xdc\x92\xf9\x8b\x874\xd1\x0e.\x93\xea\x82\xc5j&#123;N\x05\xa4\xba\x11\xd4\x7f*\xa2\xed\xdda\xac\x0eA\xd3\xfe\x8eYS\xe4\xd3\x13dn\x1b\x9f\xcd\xfe\x05\xbc\x0fq\x91\xe6v\xc9_\xfa\x1f%\xc1\xf8-\xcd\x1a\xc2\x03\x8e\x1b\x7f#p\xaa\x94\xf9\x82\xf3e&quot;k\x88\xf0\xefid\xd2\xe9\x1ed\x8aI$\xa1=\x8c\x1d\xa2\xbbY|I\n\xc9\x04zC\x12\xab\xd4\\\xa8\xf1\xbd\xb4\xc7(\x86t\x0e\x1b&gt;\x85\xf1\xf2\xc9\xe6y\x14G\xb8\x97\xa0\x11\xaeq8\x1bX\xad\x88\x03\xeb:\x8f\xc5o\xf1\x9e\x90:\xad9\x9b\xf4\xd9\x87=\x16\xe4\x19\xa5!\x8cx\x16\x11O\x9by`\xfc\xeb\xcb\xb62\x1f$\xdd\xc8&gt;\xdd\x8d\x8c\xc6\xf7\xc4f\x9b$[_\xf3\x14\xfc.&gt;EU\xd6\xa7l6\xdfD\xa3\xb2w\x80A\xf7zg;\xc8[\x933\x15(\x12\xb7\x19@\xdc\x7f\x8e\x97c\xba\xab\xd8\xdc\xda\xb9\xc0\xbfl\xa5\x11\xbb\x8e4^\x03\xef\xf47\xbf&#125;\xf7\xf5\x0c\xb2\xe7\xfb\xf3_\xf9\ni$\xa9\x86\x95\x12\xa9RC\xa3\xd2\xca\xca\xec!\x86\xb4,`\xda\x9b8\x9bS\xa6\x0f\x9e/&lt;\x8e\x8c\xde&quot;\xf7|w\xbc\xd2\x00\xabz\x94\xb6\xd0\xd4)\xb5\xf3\xe0\r\xbfx\xa0\xdf\xda\xa3x$\xe2\xfb\x98\xdc\x89\xe2\x81A\xb7-\xb7:c\xe2\xb6\xf0\xb1\x02\xf0\xab\xbeB\xcf\x9f\xc7\x10\x0f\x1aN\xffi\xa9\x86\xdc\xb0\x0f\x92\tv\xcf\x7fE\xf6U\xbb\x11Wy\xdbY*b\\8\x02\x00\x93\xda\x9d1*y\xc8\xc9\x0eM&quot;\xf7\xce\x9bFW\x0fkA\xa9\xacT\xb6\xfbB\xde3\xf54\xf3\x99zr\x95PB+\xbd4V\xfc2\xf1\tF\tR-\xec\xe5-\x10\x87\x9f\x1aX\xa2,\x7f.$\xcc\x9b\xdb\xe6\x18\xd9\xfb+\x00\x1cT\xcesV\x8d \x1d\xc1\xd7S\xeb\xeb\xec\x90A\x9cW\x93B(R\xf4\x1f\x90qW\xb8\x9f\xc5\x19q&lt;\xd2\x9f\x82B\xfb\xab\xb8xC\x8a,\xc6\xf8S\xaf\x8a \xd8g\xabEw\xa8\xd3\xa9\x95\x12\x86\x11\xc6f\xc6\x9e\xfdo6\x82&lt;\x98\x82\xc7\xee\x93\xecN\x8dC\xc0\xbb\x85\xea\x0e \xc7\xf4\x1e\xb4\xde\xa8\xff\x16\xa5R\x83l\x12t\x84\xc4xt\xe9+F\xa1\xd3\x9f\xfa\xa5\xb7rL\xbc\x12\xbe\xdf\xe2\x11\xd2\xee!?\xff\xab\x9b\x01\xbcn[\xe8fLS\xbf\x8f\x0e9\x92\xf0?\x1fx`\x0c@\xb3\x07b\xa4\xe0\xf8Np\xe5H\xb7!nb\x8e\x16-~\x89\xc0\xfd\xc3\xbb\xd0i\xb5\\\xd6\xbe&amp;\xc0J\x07j\x11\x1cJM\x06\xc0\xe8Lv\xed\x11\xf6X\xc6\xcfW\x0ep\t%O\x03\xf8\x94\x88\x8eJE\xfb\xd4Z\xec\x04\x8c\xf2\xa0qbu\xb8\xf6\xf9E\x8e\xa9d\x04\x0e\xfb\xd1\xe1\x11W\x18\xf2\xd0\x1d\xd8&lt;\x04\xb0\xc4\xcbU\x86\xa8\xd5\xc8\x02I\xaa\xd4&#123;\xca\xe53o\xb7\x0e\x94@\x88S\xed\x97\xee\xed\x17\x8cM\xa3X\x86Z\xecK\xa9\xe5o&#123;\xec\xbe\x08\x9d\x85\xe4\xcd\&#39;!\x1f\x93\xf6V&#123;h~\xb6\x86\xbaM\x07\x9e\xc7\xc0\xc6\xc8\xf3i#\xe1\xf9\xa0\xd0z\x0c\x880\x88\x9au\xb1PE\xcd\x10\xa3a\xa1\xbfd#j\xc2*&#125;&amp;\x85\xc5\xb0b\x94\x8a(\x81\xda\x12\xf0\xd0\xb2\x82\xccT\xa9\rv3\xa8\xc2\xf6\xf95\xf3\xe3[\x1cc\xb3\xedyN\xfb\x8e\&#39;\xc4\x19\x82\xe4\xec$\x13D\xd6,K\x01\x10g&lt;\xf1_\xf2M\xf0\x84\xb8\xf0m\x0c\x08\xb5e\xb9\xb6\x8bMM\x8e1j\x82\xe2\xcb\xd5\xd1\x04\xa7\xaa\xbf\x98\x85\x833v\xd7\x16\x13&amp;\x99:0\x08\x8d;u\x7f\xc2V\xd0\xa51&amp;\x94)\x0b\x08\xf2\xc1\x12\xd5K\xeb\x0ff@\x14!\x08\xad\x04&gt;\x11\x00&gt;\xca\x18\xdd\x00\xf2\xd5\x85\x8f0\xf7\x80\xba\x0e]\xdauT\xedOn\x171\xa9\x86yQ\xebTa\xdd\xfc],\xaf\x16\x7fJ1\xfc\x7f]&amp;\xd0y\xef\xd2&#125;[\xfc\xc7+\x9d\x18\x11(\xdbT\x18\x18d\xe2\x020aQ\xc2V\xe0;\xae\xf1\x8d\x88\x96i\x01\xf2G\xa0C\x96\xccz\xad\x0fr )\xff\xb9\xd2\x01m\xf5i\xf7\x82\xc3\xb2\x83\xd3 \xb3\x0f\xc3\x06\x198T*\xaa\xa3\xfe\xdc&quot;*\x19\x03\x0e\x19S\xa1\xb0j\xe0\xe8\x14\xea\xab|d\x02\x08z;N\x13 \xf9\xd3\x99DZ\xa6u\x94@\x08\xf1\xc6w\x03\xf2\xd01 .b\x85U\xad\xbb\x96\xe0\xe4\xfbzp\x83FH\x83\x067\xb6\x11`\xba\x99Z]\xc2/x~\x86r\x1d&#123;\x14\x8d\xb2D\xc58Fy\xaa\x11X\xc0:\xe6\xe5\x06\xc22g\x84\xff\xc8\xd6\x97\x0e!\xd8@$\xdbg\x0e\xc0\xbf\x94\xf85$\xce\x8d\x03\xfa\\\x16\x92\xa6\x93\xd5\xfa\xda\xdf\xe4\x830\x1cv#3\n\xac\xd3\x08WmV\x06\xdf \xa7^\xc6\xe7\xdbm!\xf5\x9f6\x05\xac\xc2BJ\xabt\xb7c\x02Q\x96:\x83\xa7\x11\x0c:I\xd41\xc5\x8d3\x94\x88\xac\x8e\x0f\\\x84\x15\xe7\x98v\xf7\x11\x98w\xfbUGLT\x05Y+\xc7\xc3C\xc0Fn#\xd5\x8d\xc5\xb6\x88\xd8\xa0\xc7\xe9b\xeb\xc5\x15u\x90\x95F\xa9\xdaF\xd7S\x96\xf0\x08\x11\x1eBsYs\x99P\xcf\xa4,\xbe\xc1\x1e=\x97\xfd;],\x99\xbc\xe3\xee\x97z\x98\x00\xa7\&#39;W\xdd_i\x7fI\x95\x83\xb1\xf6dWq1\xefQn\xe5\xc7\x96\x90\x92\x8bW4!.y\xab\x08&gt;\xe0(&lt;@=\xc1\x81\xb8\xfc\xdb`\x0b\xa5\xed\x0b\xaf\x1dq\x8b\xe1~&quot;\x9f)\x827\x8aO\xab\x918p\xba\xe7[(\xaa\x14\x0e\xa9\x90\x8a\xec\xd2\x0fYK\xde\x1e\xca)i\xb0L\xac\x12\x00\x8a/x\x1b\x9d9=7\x06\xc9\xb8\xb8&lt;\x99\xef\x80\x9a\x93&#123;\x87\xa6\x91\x86\xbb\xebW\x0b\x0c\xfa\x9c\x9c&#125;L\xbc\xf5oj\x0e&amp;\xddy.3\xf4e\xc2\x8a\xc1&#123;\xea\xc9s\xd6\x0e\xec\xbe\x1a,4\xb7/\x97\x80\xea\x85\x9bP\x88\x8d\xa2\xd1\xb1\xdd\x12=\xd22\xb6%s\xba\xb8\xc0\xcb\x85\x12\x1d\xe2H\x9e\xe6\xa2v&#123;\xbaQ&quot;(j\xb9\xab\xcd\xb2\xd7\x88\x05\x83ix\x8d_k\xe6V\x0f&gt;\xd2\xfa\n\xccv\xe7w\xf7FE\xcbMt\xbaw\xddt\xe5\xddK\xd9R\xeaV.p-\x9eB:\x0b\xcdY\x0b\xd9\xf3\r\x1e\x13\r|\x01\xe4\n\xc0\xbb\xfdv\x94\xf7\xe1=\xe8\n\xdc2g\xcf&amp;\xc2\xff\xb6\xd4\x91\xa2\xc7\xec\xd3L\x07I\x11\x18\xaf:\xb5)^\x1cNO\x8e\x04\x01nW\xfac\xbe\x00\xc0\xd7\xc4U\xbf\xa4\xf6\xb2\xb4\x07\x1dW\xedjO\xa8\xb6L\xa6\xa9\x156\x8b\x14\xb6\x83\xb9h\xcf\x06\x8f\x00\x0e$4\x88\x94\xbd\xaa\t\xab!\xd5\xff\x94\xef\x1c\xefY\xb0`_\x95\xc2\xf1\xc4\xf2\x83O1\xb8)\xde\x89\x06\xdam\xc8\xd4\xf8\xd9\x13j\xbdT\x04\x07\xb1y&#125;\x9a\x98F\xbe@\xb1\xfe8\x19\x0c?]\xbeA\xea\t7\xb1A\xb6P\xf7T\xa4V\xa9\x14\xd36\xa1\x95\t\x81\xae\x7f9\x8a\rV\xc3\xaf\x0c/C\xac\xd7\x9fe\xedm\xf3\r\x8a\xa5\x0b$\xe3\xd5(\xec\x81\xe1\xae:\xd6\xf4\x9cXY\x9e\xe5\x81\x0c\x1c\x0b\xd5\xe2\x91\xb84\x03[&quot;\xfda&amp;\xd6G\x85b\xf0\xe6.\x91\x96\x90\xb9\xd9\xd9\xa0\xd6\x98+&#123; \x91\x0e\x88\xfcH\xf7Y \xe8\x8fZu1\xba\x10DKt\x02p^\xaa!W\xdc\x9a\xf67[J.&lt;\x9b\xcb\xd2\xc0\x9e\x97|Y\x9cS\x03\x87\xb2\xca\xa0\xf2\xc33q\n`\x83x\x96H\xd5\xdc\x82\xbe\x98\x1bC)&quot;\xc0C\xfb\xb7\x07k\x8c\xfd\x18f\xcf\xf2\x88\xe5\x10\x16_\x84\x13E\x0b\x92\x80W\xcf\x97\xb92\x122\xbf\x11\x19\xf9)\xa4\xc8\x87a\x14\xc0c=N\xe0\x8eu,\xbc\xd3\xf2\xfa\x85\x1e\x15b\xe2\xef\xa0\xa8&#125;\x8d\x9e\xa2\xfcZD\tI$\xac\xeeA\x12@\x9c\xfa\xf2J\xf8\\\xd7/\xcc\x84\xbb|K)\xbb\x9cv\x15\xf3\x9f\xed|\x97A1\x11-\xd0\x9a[\x05\x85\xc5d&quot;\x05\x8c\xef\xea8\xea1\x80E\xf5\xc29\&#39;\xfcJ\xff\&#39;\x03H\xa6\xc0\xe1\xb4O\xc8\xa9\xf6\xe2,H\x1bou\xcc\xbeR-\x13\n[\xfc\x04m\x14r\\\xf3*\x1d\xfc\xbeq\xaf\xaf\x0c\xf6V\x05A\xa7\x92\x15\xb5f\xcf\xcd\xe6\x8c\xfa\x05\x11\xf3\xfeO\xe1$ \x84\xd2\x80\xbbQ:\x07i`M\xeex\x0e\x0bV\xb6\x0c\xf8&quot;\xc6F^\x94\xdc\xbc\xe4\x19_&gt;&gt;\x07\x97\x0f+6\x01\xfe\x0b\x824&#125;\xb4ka\xb9\x03]g\x1d\xd5\xe4mqGx;\xca\xddiC#4\xa5H\xd1:\x06\xc6]\x8f\&#39;4\xd5\x8fN\x86\xbe\xdf\xeb\x9f\x98 \xbcr\xe1v\xf9\xa6`\x1d\xae\xf9&gt;\xb6|\x82B\xee\x86\xd4\xae\xee\xe9\x93HS\x87\xc1\xc6@;\xdfT*\xf1\xd2\x1f\x0fA\x01\xb5\xa6S\x08v\x10\x07\xb0\xces\x895%\t\x9bh&amp;\xa2\xd4a\xf8\xde_\t\x0bb\xbb\xa7\xed\xd7|\xc795t]\xb7\xd3\x87u\xfc\xfa\x03\x86\xdbFg\x11\xaa\xfa\xca\xf8\xe1\x05\x04\xd9j\xce\xcfqb(\x92\x7f\n\x17CG;\xc6\xaaD&#123;\xb8\xbc\xb7\xec\xd8\x0e\xe42R&#123;\x8f\x861\xcb\ti\xfb\xf7\x89n\xbd\x02\xce\xef\x1b\x1e?C\xe2X\x9e!o\x1d\xfe\x9f\x91N\x9db^l\xeeX\x93do\x0e\xc9\x0b\xfa\x05\xa5ZoU\x86\xbd\xfc]\xdb^\xd1)\xbe\xb5\x04\xf0\xf3\x87\xb9\x8e\x8a-=&lt;\x9f\x0f\xa3\x1c?n4\x8d\xa8\xd2)W\x80l\\\xef-%\x9f\x86k\x8d\xfd\xca\xac\xa6\xf9\xf6$#S\xf9S\x9f\x1f*\x8be\x9cU\xbdi\x837At#\x02\x85n\x92\xd0\xdb*\xdf(\x10\x18\xc4\x8c\xd1\xc8\x07w\xce\xae\x95F\xba\x9b\x1e\xd8O\xff\xbd=.H+\x82\xc5\x17\x0c\x1b\xc2r\x04$\x07\x8f~\xe0j\x10,\x96\x0fW#|0\x0b\xdb\x9aE\x817\xc2Z\xc5\xc0T\xef-\xa9b\x1b$&#39;
i=45, n=16429, dic=&#123;&#39;msg_type&#39;: 1, &#39;piece&#39;: 1, &#39;total_size&#39;: 74620&#125;
piece_len=16384
sent ext_data=b&#39;\x00\x00\x00\x1b\x14\x02d8:msg_typei0e5:piecei2ee&#39;
msg_len=16431, id=20
ext_id=1
recv=b&#39;d8:msg_typei1e5:piecei2e10:total_sizei74620ee\xa4\xe7\x97\xd8\n\x85\xf4L\xe3\x83\xa1\xc8 \xa0Y\x1f\xf9FE\xb8\xa9.\x02\xc7\xdf\xd2\xd8f\xdf@\x10-\xd7\x83\xb1\xdeV\x1b\xd2\x16\x1a\xf6F\x1fP;\xd3M\xcfs@N\xa7\xe9w\xac)\x85\xd4\xd2\xcf8`\x82Ev,\x05\xd1\xe6X\x85sU\x91:\x0c\xab\xf5\xea4PTQ\xe88O|\xaa\xc7\x91\xb2\xc2\xe5!\xfdz9\xe0GZ\xd6\x15\xb1O\xca&#125;\xaf;\x18&amp;\xe6\x8f\xd3*w\xbc\xe7\xb9E,P\xe8\xc4N_\xc7\x92_0\xa3\x98\xd2\x8c\x07\xe5?\xdc\x12\x85\xc7\r\xc0\xb6:\x06\r\xfd\xe0\x02\x9b2\xf4\x8cH&#125;\x86\x9c\x01[\xc1F?\xb6\rT\x81\x15\xc8\x802rKJM-\xb8\x12\x9d\x92\x15S\x8f\xe3\x92\xfa\x1e\xc6\xfc\x8b\t\xb0&#123;W\xbd\xf3\xd4\x0f\x0c\xe0O[A\x8e\xa91~\t\\|\xda\x18.\x0c\xeb\xbd\x06\xc3O\x1b_\x04\xe9i\xb84\x94&amp;\xd91r\xfd\x12rHB^\xbf\x02&lt;\x93\xf9\x11\xf2N\xa8\rfv\xaa(2\xe5\xa5\x97\x0cD\xef&lt;\xc7\x08\x1a\xfe\xee\x1e\xae.D\xde\xdd\x8b\xb2\ru\xcb\x16\xd7i:\x0bk]\xdey\xf8&lt;.\xf5\xbf\xee\xd7\xe6@[\x97&#125;\xb5-CQ\xe8\xbaA !?tj&gt;E\x95Y\xc9\xb85]d\xd1 \xef\xa7\x9e\xd1\xd2AQ\x9co`\x0b\x13m\xc8C\xfa&quot;\xa3\x7f\x07\xc0D\xa5\x97\x85\x1aX4\xe9\x91\x05BZh\xde \xd7\x05\xab+\x85\xdd`\xf2\x07\xfd&amp;\xa3\x1fV4\xfb~\x91q\xff\xccO\x9a`\x0b\x82\xfb\xef\xfb-x\xbe\x96\xa5F&quot;\x0e\xc0\xcf\x84&#125;\x81\xd3v\xf3\xedQ&#123;\x82\x82\xad\xb5\x9b\xd8zZ\x83\xb4L\x03\xca\xa0D`Z\x12\xd4M\xa6\x17\xd4\xac_\xbd\x1b\x9c\xd4b\xfc\xdf~\x9c\t0Q\x82\xd60z\x13\xac\xd2?\xdf`\xd4\xca\xad&quot;\x01\x87\xee\xc1\xb7\xd8p\x8a\xcd(\r\xb3\xb0\xbcl\x00\x80-\xb5ey\x8d\x99\xafs\xa5\xb2\x15\x11s\x11yk\xbf\xceji\x18\xe4\xb7um\xe2\x19~yl\xac\xdb\x1e\x99\xc4Ul\xf9B\xc2\x07\xfc\x0e\x04\xa5\xed8@\x01\xdf_\x1c\xaf\x84R+\xab\xbc\n\xb9\xf4\xc10\xe9&gt;\&#39;Z\xb7G3Y4\x802k\xb0Z\x15\x96T\xfa\xae_50ze\x03\x01\x9d\x0b\xb4d\x14$\xe0\xc1\x1f\x05$\xb0\xc1T\xac\x05\xcb\xea\x95\x99\xa5\xc9\x10\xbf\xc6\xbf\x93\xa9\xb3\xc7\xf2\xf4\xa5X\xbf,\xf5\xf2\xf3f2\xe3RL\x85\x01\xea\x94j\xfe.9\xf7\x8d$\xea\x80\xb2*w\xeb\xcf\x05@\xbe\x94\xcb\xc7\xef@`\xc3\x90:q\x14\xe6\x95\xfdJ\xb92\x8a\xb6\x880\x1c-\xe2\x8b\xf3\x10s\xc2 2\x01\xa4/\xc4+:\x8cZE(n\xafB\xe2\xed\xb6\xde\xa2m\xa5\xee\xeb\xa8\xdd\xad\n,/(s\xf0\xef\xc5\x1fl\x04b\xfaZ\xcd\x8b\xf7\x85\x8c+\x1d\xac\x8fBI%/^&gt;f\x18\xdfO\xb35\x90\x8b%\x01\x19\x8bz\x96\x14\xf8&#123;\xc5\xd2qC\xa9\xd7\x9d\x81_)u\xb7\xa2\xb4_\xb3\xbe\xd2\xa9.\x96Fvv\x95\xe1\x9b\x1eq+\x16p\xb3\x16k\xa1\xe4V~Yr?y\x9d\x08\xd2\xb9i\xd2\xab\t3\xf7/P\xe4\x17\x9d\x97\x8a\xf7\t\x98R\xee\x16V0;\xc9\xb8\nh\xb6tdn\x14\xc0\x83\x04\xf2e\xb5!a;@\x03\xae2\xf33\x86s\x9c\x93\n /\xdb\x18\xca\t\xf4\xbdZ\x15F\x900\x12&lt;\xd3&#125;\xb5\xe9\xad\x17\xf2\xb9\xed?\x1bM\xd3\xa0\xc2mPG\x1a\xc0Mj\x94&lt;b@O\x03=\xde/o*\x97J\x90\x94\xb7\xc5\x98@(\xd2x\x8b\&#39;\xe1\xb5\x88\x08\x83\xa0e\xa8\rh\xc5\x01(\n\xf4eq\xb1\x049^\x14\xf3&lt;Z\xf5\xed\xa5\x9b\x9b\x82\x95\x8ddh\xcb\n\x94\x08\xc7\x92\x15\xf9\xaa\x8b\xef\xf3Jp\xb3\x90#\x0e\xbc\xed\x7f\x95\xfa?vA8f\xcc\xc7M\x98\x8b8\x1es)\xcf\xc6\xc0\xffi\x96TOcF\x1a\x16\x8d\x84\xbe0\x97\xd0\xbd\xa4\xe0\xa3&lt;\x969\xe9\xfc\x0b\xaa\xb8\x841n\x13\xd11\x95\x04Q\xce\xbaF`&gt;\x1aK\xfaM\xcd\x04&amp;\x9c\xb3(\xf0\xbd\xf02\x8a\xec&gt;Y\x9c\xa0\x03\xc9\x0cu\xc4\xc1\xc8\x1a\x1f\x95\xf8\xda4\xf7\xcb\xe7\xe7\x97\\\xd5\x9c\xd8\xf9\\\xcf\xcc\x93\x83\xb6O\xbfH_\x81\x8b\x90&amp;,\xf4\x10\xe0F\xb7Q\x19\x02\xbbG?\xca\xa0mQ\xf8\xb32\xaa&quot;\xe5\x0f\xf8\x00\tJ\x95\xaak8\xf0t\x06\x9f \x13\x9a\x06\xba\xfdp\&#39;]m L\xac\xfc\x9d\x035.^\xfa\xc3\xad&lt;\xf8\xeb\xa0\xd3\xc5\x02v\x02\x8aW\x12c\xd2\x85\xc7\xcb\x83\xc2\x86g\xfc\x11\x979\x87p\xde\xec\xfb\x0b\x1c&lt;\x04\xe2!\xe7\xed\xb9\xbf/*\xdb\xfe*\xb1\x9a\x9e\xa7\x00q\xf6qm\t\x8d\xeb\x11DQJ\x0e\xfa\xa7yW\xacz\x0f\x9d\x8b\xa0\xaaH\x08&lt;\x82\x18\xd7\xd4\xd1\x88\xc5\x14\xa2\xb0\xf6\xd4\xb1&#123;\xe2\xdf\xc1\xc2\xec\xa9\\=f\&#39;\xd4\x92s\xcd-c\xe9\xc1\xad\x8d\x1b%\x88\xa2\xfa\x9a?gb\xb8x\x9b\xcc\xf9I\xcc3&amp;\xb57\x86\xaf\xd2p]0\xbdP&lt;*\x02\xed\xf4\xed\x9dV\xeb\xf3\xe5\x81O/\xc3\xac&#123;\xfc\x80D\xa4\x820z\xd4\xca\xb4\x95\xa01-\xe7#\xbb\xf4\xed\x91\xde\x17-\xe0\xbf\x17\x7f|\n\xed\xce(\xfa:\x19g\x96\xc1z\xd8Bpm\xaa\xfa\xc4\x8df\xab\xc7\&#39;\xc3\xf3\xf7az\xb8EXIMGN\x19\x1f\x82[\x8b\xadY\xd43\xce\xe5\xabf\xb5\xfe\xd7\xf0\xec\xb1\x07\xb3\x1fZ\x87\xf8o\xc5\x8cJQ\x90E\xcd\xd7\x86\x80\xf3\xf8\xab\x9c\xddeh\x87B\xce\x9b\xf2\xe7\xed\xf1`\xb4z8\xe7\xe4\xc9\x8b\x8d\xaf\x11\xa4-78\xc0\xdce\xb3\xfa\x11i\xbd\x900\xd8x5M-\x0c\x07\x06\x07\x9f~\xc4\x05O:\xe0\xf0\xfe\xd4\x03\x17\x98\xb3.\xd4\x8e\xf3\xc1z\xe5\xe2%\xfc \xd4\xf7\x10R,\x92\xa5\xb2\xbdUn_I\xbc\xf1\xd3\xdd\x14\xb4\xe8\xc2\x8f\xc6\x1aH\xd5\xa2\x1f\xfd^\xac\x05=\x0b\xe6z&gt;\x98\xbd\xc8\xd3\xc7\xfa\xd5\xa3%\xce\x00\xc0?\xb8\xe6\xfc\xa7\x16\xf2\xa8?\xf9Q\x80\xb63qFc\x8a\xabR\xb3\xc8J\xd4\x19\xa25\xdb\xf5O\x14\xe7\x1d\xf4\x07\xebN\xc7\xad\xfc\x96\xc8\xc0xd\xea\xaa\xa7\xd2(Gu\xea\x93:\xfe^\xd2\x0f\x82j\xf7\xd4&amp;\xb7\x9c\x8a\x1f\xb3\x81\xd2Xp\xf2\x10\x9f\xddmt\xe4\xe1\xf9H\xc2&quot;s&#125;NC\x91|\x8aI\x0e\xd5\xb0\x14\xef\xda\xfe\x195&quot;\x97\x95\xc6WO\xbe\xcf\x86\x8dk\xf1O\xaf&quot;\xb1\xee\xef\xb1\xe0\xa4&lt;\xd1k\xf3\x17\x82\x136\xcc\x01\xf2\xc8N&amp;fv\xf0b\xaac].\xe2\r\xa7~wu\xce\xdb\xce\x13\xebM\xf9Fm\xb5(\x8b\xc0\x8bM\xea\xe6\xa6tL]\xcb,o\x06L\xe8\x1a\xfa\x7f.\xb8\n\xe1\x90\xac\x9b8\xc5\xd6\xd1\xa6\x191\xe6H\x08\x02c%\xa1\xee^;\xa5\x80cw\xf1\xd6\x8et\x94\xa7\xaf\x1e\x8cF\x8a\xdc\x1bHYK/\xac\xb2\x97\x92\xe9\x07\xb4\x80\xda\xd2\xdd\xb4\xee\xf6\xf3\xbb\xbfa\xa0\x06\xf2\xc2\x97\xe3\x1c\x15\xe9\xd0\x10$M&#125;\x9f\xd9\xae\xc3)W\xc2z\xb2\xd9L\xcf\xafy\xf4\xe8\xd6n\x8aIh\xe6\xb8\xe7[%\x04\x89\x81\x1c\xea\x94\xb0&amp;)\xffz#\x9e\xa7\xb8O\nh\x18\xca\x1a\xdd\xe1*b\xc9\xb6^qRqW\xcf\xe3-h\t\xfa\x15\x84K\xb3H\xe3\xf9%\xd5\x1d\xe6\\\x92\x10F8\xb9\x165\x90\x8aFc\xa3\xbc\x91\xae\xd3\x06\x93 \x90\x8b\x1ch/g\x99\x91\x87\x8a\xafv\xecn\xa4\xb0\x02[\xc4n\x0e\x0e\xc06f\x0b\xc3r\x99&gt;\xa1\x12:\xca\xa1l\xd7\xbadm\x84\xb4\xc6\xf3m\xb3E\xa0\x95u\xf1h\x8b\\\x96H\xf4\xffr&#125;\x17\xf0\xd2\x0f\x94\xcf\xbe\xd0\xa7\xc09\xd3\xacA\xb2&amp;r\x19H\x8ce\xcd\x9e\xae\x8c+\x00;\xa3f\x8f\x92\xe1x \xa3\x10\xe6\xda\xccw\xfa\xd5Bq\xa0\xadejN\x8a\xb4\x00\x06\x85|u\x86\xf9\xdc\xb7\xb0\xce\x04q\x99=\xba\x1b2m!z\x12J\xddD\x10X0(\xc8\x9e\xe3\xa4\xd8\xf8\xb4\xb58\xa8\xdc\xec\x96\xe0w%\xd6U(]\xb1\x88\xd0\xadf\xc5xgK\xda\x1d\xe1\xa4\x85\xd9;N\x19m\x81&lt;s\xb8\xdc\xa7t\x80\x16\xb7o\x94\xc3\xd4\x06\xf8\xf2\x19\x03TVG\xb3\xe6\x98\x96rQwuh8\x8d&quot;\xf2X\x05\x11\x8e\n\xbd\xaaK\xab\xff&lt;\xe7\x0e`\x9f \xfa&quot;?H\x8e\x9c\xd0\xd7\xf1\x9c\x97W\x8dE\xd1^\xc8\xe2*g\xd0I\xed\xe7\xe6^\xb6\x85KH\x9a\xc7\xac\xef\\\x1e\xab9+tMC\xd2m-\x96NI\xa2\xd3:l[\xe3\xc5\x03Z\xcb\xac\x00Gk\xc8\xe5s\xbdF\x9a\xcd\xa2\xa5\xf2#+H\xed\x86D\x13;\xa7\x9dYk\n@\x8c\xb3\xbe\x91(a\x99&#125;c\xac\x18Ok\xfd8\x83M\xe4\xf4\xde\x9cP\x1c\xdb\xcc\xa4b=\x87\t\x83W\xf5\x9c\x87\xea!\x8a`q\xd2 M7\x12\x13\xe3\x13\x14/@\x8b\x01\x04\xa8SS!\x9b)\xf9\x91c\xe2?s\x92\x034ad\x9c\xb9 g&#125;/\xc3\xee\xe0\xb4\x8bi\xa3&gt;\x93W\x11\xc2\x9c\xbeuVl6\x89\x8e\x98\xdf1\xe5\xf8(_%k\xcd\xd2\xfa\xf9jS\x83\xba\xeb\x89\x8b\xf26\xe8\xe7o\xb4\xbd\x13\xe3\xac\xb0\xb3=D\x18\xac~O2G\x82\xe1\xea\xe1\xd9\xb0\xb4\x1f\xc5\xdfC\xf4\x9b5Q;\xbc\xf9\xa0\xba\x7f\xe7\xcbE0\x93v\xe8\x8a\xc7\x84\xe1&amp;\xcf9pk\xb9|\xc1Rk?\xbdx\xed\x8c_C\x01\xae3\xc1i&gt;\xc5\xd9k6\xb7X\x01\xfcU\x93n\xa9\xa9\x14\xfa6\xde\xcc\x95\xf1\x01\x07l\xe9rK\xb4x\xdd&gt;QJrj\xa7\x1d.B\xed\xdaLU\&#39;\xe3\x88\x96&amp;O\x8cc\xee\x7f\x08R\x10\xdf^\xbe\xcf\xbcI(#~\xa6&gt;VX5\x0eD\x83\&#39;\xe4\x80\xefK\xcb\xb5\x1f#S\xcf\xac\xb1\xa6\x91\xaa\xc5\x074x\xa9\x10\xc9\xea\xa9\xc4\xf4|\xdc\xb9|$\xc18\x04z\xa1I,6t\x04e\x07\xfb-\xeeiM\xf2`\xe1V\x01\x07\x02\x13\xadyJmH\r\xbch&#123;LO\x1f\xcd\x16x\xf1\xb7\xdf\xc0\xb9\xa2B\x92\x0f&#123;\xf8U^\xaaT\x94\xb8\xed\x15\xd5\x1a\xde\xdf8Mj\xef;\xd1\xd7\x08\xad\x1b[&lt;\xa5A\x80\xac\xee]\xb3\xe5~;\xe0\xf2\x072\xe4\xb4\x9b\xff\xf12\x96\x1f\xa2^\x0b\xaf\xb5U\xc8!\xb9_\xe4\xb4\xe7vn\x82\x98\xfa\x8f\xdbwa0\x8dK\x0c\x902\xd2\x1e+\xe0\xf4\x93\x88T\x8d\xad&gt;\x8d\x7f\x92\x1c\x80Q\x0f\xf6\x8c\x87\x80\x87\xe0\xb91q\x80 &#125;\x05\xc0[\xa6\x07g\x8e\xe3q1\xdcF&#125;hRs\xfc7L\x86u\xe4\xc7\x12\x9d\x0f\x07\xdd\xd1\xe5\xc5\&#39;:&gt;\xef\x9bWu\xa9\xf3\xaa8\xbb\xc0\x9a\xfa0&#125;J\x9c(\xec\xcd\xc3oB\x8e\xe13\x02\xfbYn\xffw\xc8\xc4\x7fh\x19_\xc2\x97\xf0\xa1\x98+\xf7\x03~C\x8b\x8c!\xaf\x82\x92\xa3\x04\xd7D\xc2\xe0\x0b\x0bI\xc7\x02\xcb7`5*\x1c\x19\xe5.\xd8&amp;\xdd\xc7w\x1a\x8e4\xdc\xe1\x90B|\xbfwq\xa4&gt;\xb9c\x9e\xaf\xa1\x83\xea\x92\x98\x19\xac\x8f\x8cF\xa0\x9d&#125;\x9f2b=\x94\x97\xacr+\xce\xd8g\x88d\xcd\x87/\x90\xf0\xdd\x9d\xde\xf8\xee]c\xafE\xb3\x86O\xce\x05Y\x90\xc8P\xaf\xe3\xafm\x82\xfeg\x10p\x9bG38E\x8d\xaf\xe8a_\x99 \t\xa3\x18\x1es\xdc\xccN\xa0a\xed\xe6\xe6\xb4T9\xdc3rK\x13&#123;\x0c\xfd\xdd\x90\xee\x14\xea\xb9E\xd5\xada2\xe0\xf5o\xcf\xdf6\x8a\xcb\xf6\xa9`\xfb\x02%\x89\x1aCc\xde\xdb\xc0\xf6q\xd0\xd6\xe43D\x1a@\xf7\xd5\xae\x17/\xb9!\xd3\x9dSF\xb7=\xfb;\xee&#123;C\xa8:\x16\x04\x05\x9fox\xd8\x15\x8f\xcd\xd2x\x19\xa8\xfcB\xb6DBu\xb0EXP\x80B\x97:k\xfe\t\x13$j\xde1D\xacY\x0fl\xe4\xc1X\x8e%\xb4\x91\xb4\x9e\xb7\x1b\xa6\x8e\xcauWY\xcd\xc1\x8d\xd3\x16])\xb2r\x85\xdcUs\x9e\xdc\xb50\xb1\xb7/\xba\x1f\xa4\xd0\x010=\xb7\x1d\xe4R\xce\xa2%\x02\xd2\xd2\x19=\xdd\x8f\xe7\xe1\xb4\xb9\xad\x92\x8f\x95iD?j,m&lt;\xbb\x90p?\x97\xb3\x11\xa2\xcb7\xa2\xdb\xd1\x9c\x10\xbf\xa1\xc0\xba@]\xa9\xb7\xa4@^\x8e\xdc\xd4\x98\x9e\xb0\x8c./\xf9F\x98oo\x92\x91\x1a\x12-\tU\r\xcc\x04j\x9a\xcbS\xfe\xee\xa1q\xfd\xf0\xc5m\xb7%L\xb1%L\xdc|\xfaPn\xd8pH7|\xb2&#123;I\x17\xe6\xdc\xba\x1f\xd8\xa5\x07=\xf3\x0b\x14\x97Y.\xaf%n\x7f\xb0\x19\x0e1u\xcal\nRV2\x85u\xb5\xa2\xb7\xa2J\xab?\x89\xe0^N\xb32\x9c\xc1Z\x13\x84J\xb63 \xe1\xd1\x85\xd6\xcf\xbb\t/\xcb\xbb\xc0\x8b\x9f\xda\xf6\xf2#0\xbe\x9f\xcf\x1dB\xd3\r\xe6Qs\xaf\x97\x16&amp;\xe5\xc1a\x1f\xe2L#Sh?\x9f1\x8fi\xc9T\x82\x8b\x9d\x8b\x83w\xdbz\x8f\xb1 ?K\xfd\xc9\x16\x96\x9e\x06\xa8\xaa\xec\xd3\x07\xd4\xea\x90\x11\xae\x1f\x0f\x13w=e\x95m\xdf\xfa\x1dc\xe4\xcf0+\xa3\x00=[dAc\x92T@\xc0\x04D\xb9\x7f\xaa\xb5m\x81A\xcf\x98F\xeb\xe7\xd9W\x84g\xa3\x8b\x80\x9a\\\x0eZ\x94e\x10\x94\xb0\xb5\x15\x1f\xa7\xa8\xf0\xfe\xd3\x03O\xbc\xacU\xa3\xc3\xfd]\xa7\xae\xce\xd3\xad\x14\x80\xc5*\r\xb7\xddX\xef\xc1\xac\xd6C~\xe0&quot;\x8e\rC\xf7\xa0\x92\x1c\xc0rb*|\xd7\x83\xaf&quot;\xec\xa3\xab\xc6G26D\xcbe\xdb]\x90\xea\x92\xa1\x01F&quot;OL\x9c\&#39;\xa2\xb4\xfbg0\xb42\xc4\xb5\x12\xe9\xe9\xa3\x84\xc7\x05\x03\x14\x0cUA\x92\xdf\x05\x9d\xff\xb8\x8e\x80\x12\xceL\xfb\x03jW\xe0\x90\x15\x14\x82S\xaf\x10l\&#39;\x02\xc3\xa0\tK\x13\x80\x7fQ=~\xca&gt;\x08\xd0\xcf\xd4\xbeNW\x06\xb1\xd82\xe5V[\x96?Xbs%L\x82\xce\x05\xcb\xb3\xf2\x82\xb6\x9d\xb0?\xd7\xf6H5\xc9\xbd+H\x91\x7f\xc7\xac\x9d\xeb\xb0\xa0iL$\x93\xe9j\xda\xfbV\r\xc8Y\xaa\xfd\x99\x03$G\x86\x89G\xea\t\xf0\xbd\xe8p\xc3y\x96zr855]L,\x9e\x00~P\xfax\x8d\&#39;5:\xed\x840\x9dwP\x17\xc4~G\x81\x86\x89\xa0=\xcaw\x08\xbeA\xdb\xc6a\xcc\xce\x90Ey\x16i\x9d\x12\xde/\xf9\xa6\x11S\xbb\xf6\x90\xdal\xe2\xb0\xf7.EW]Le\xd0:R\x10Y\x07\x84~f\x8c\x8f\xe3\x1d\xeb\xd1\xebqOcWV\xc6\x7f\xd2\xa0\xfa\xd1\xf4\x9c\xf6\xee\&#39;w\xa4f\xac\xe1\xe9\x97\x86!\x97\xce\x7f\x02^\xda\xd1\xda\xd2f\x86\xff\x9f\xa3\xa8!\x96O\x9f)\x83\x98_\xf8y&#123;S\xc8lr\t8\x0b5\xc2\x06\x1e\xd5A\xd8\t\x83\x1b\x8bQ0\x05\xa8\xbf.\xdbFQ\x9d\xc5\xa5\xf0\xc1\x81\xb5J\r\x12\x00L\xb0\xf1\xeb7\xb4r\x16&gt;X\t\x9b0s-\xd1RC\xa9a\x9d#Wg\x15\x9c\xb3N\xfbS\xc2[&#123;\x13\x8fx-e\xdf8\xa1\x96\xab\x0e\xc7\xfd|\x96x\x97\xd1&amp;\x1b\xa5\x95\x08\x95G\xfdJ\xa0\xfb\x90ejB&#123;z\\ZOH\xb21\x05w$\xc5\xae= 5\x88!\xcd\x86\x14N\xad\x92\xf3tR\xad\xee\xf5\x90]\xf5P\xee\xa3\xab\xb8\x16g1w*\xee\x13\xf1\xac\x89\x9b\xcb&#125;(Jv\xf2\xb5JSF\xb2\x9c\xac\xe6?\&#39;`\xde\xc9\x02\xc1\x0fr\xf4\x8e\xd5\x87w\x14\xab\x07\xd0\xeff(\x8e\xbce-\xe0\xed\x9aR\&#39;T\xe1\xf9\xe8\x97x\xfb\xa2\xd8\xdax\xd2q\xbb\xe0L\xf2\xfc@wWD\xa3\xc3:\x02\xb8N\xb8:F\xe7t\x14\x9e39Y\xcd\x1c_~\x17\x89\xcb\xea\xef\x86$\x0fg@&gt;\x95\x05\x024k\xb0\x8b\xabQ\xbb\x1b\xf7\t\xca\x9e\xa6G+\x9b\x03\xebc\xbb\x9b\xae\xac\x81\x0e\xb9\x9d\x97L\xfbg\xff\x86\xea:\xd8b\x98p\x08\xf1\xef]\x7fO\xcf|\x06\xbfR;\x9d\xf6\x8e\xa3\xac\x1d\x18Bj\x12e\xd0X\x7f\xd3\x1cb&gt;P\xff\xc8\xc0\xf9\x90\x85\xe8\x08\xfc\xedxw\xd5\xf9\xfb\x90\xa4\x80H\x8d`-\xac\xa7\xda\xebt\xdd\xac\xf1*\x15\xbd\xcep\xc9\xeb@\xd1\xcd\xef\x1a\xe6\xac\xf2g\x8c\xf0\xaeC@\x01s\x04*\xf1\xa5\x80\xbf\xf7\x11\xcd\xc10Jg\xb4\x10\x9a\xeb \xc3\x950C\x03&amp;\xd2\xc3\x13\xee\xdb\xf8\xdd\xf9\x03\x90\xd5\xb6\x80\xa7\x17|\x80\x08:\xd8\xae\x16\x19\xa4[\xfbs\xc6\xa1rlL\x94\xf4\xf5\x08M\xec\xb7\xc1\xe8,\x7f\x13^\xf0\x18P\x9a6qj\xbd\x96\x9d\xa5\x91\xe3\xf5\x0eD\xf0\x13L\x17\xb5\xcf6\xba\xa4\x0b\xe0\xadZ\xa1\x1eF\x98\xee\x82\xb0V\x7f\xf0|\xd6&#123;E@\xf0\x02\xf5I\x08S_p\xb0X@\x07\x18\x8f\xb3\xc3I%\xfar(\xb6\x81\x8d_\xee\xee\xe4N\xe6\x9c&#125;\x1e\x1f\xa0a\x92\xcalv\xd1]\xe9N\x8b\xeb\xc8\x1d8p\xdf\xc9a\x1a\x0f|aN\x87\x12Ld\x00\xebl=\xfb\xad$D6\x1e\xe9v\xe9\x18=\xce\xe9\x8afd\xa8\xbey\xfe|\x9f-\xa4\xf6\x06\xac\xe4\x95\x0f\xb0\xafO\xb7\&#39;0\x0e\x85\xac6\x98\x1c&#123;b\xf3\xfd\x0c0\x06\xa9&quot;\x18*\x1e0\xef\xa1\xd3\x85D_\xb8\x1d@\x0f\xe3\xef\n\x01\xa26 8\x19\xb5R\xc4T\xb9&amp;\x95\x95\xafr\xf0\xd3;&quot;\x8c\xa2\xfd\xc2V\xf4r\x96\x0b\xbb\xac@\xa4M5e,\xb3\x0b&amp;:\x05+\xc8\x96\xcc&#123;\xa6\xe3\xd4P\\\xa5X\x93\xe3\xb6\&#39;\xf7\x95\xbbA\xe79\x9f\x18\xf4\xaaB\x0c\xdb\xc7Hp\x95\xc7\xf3\x18wyv\xcdg&#123;\x97\x06\x8b\xba\xe3\xd2K\xf4A\xdc\x88n\xd1N\xb5*Fw\xee\x80\xb4\xd7\xf2\x9c!\xf1-1As\x83c\xca\xc2\xe1@\xc7f\x95J&gt;\x00\xdf|\xb5\\\xff\x1coNl\x9fRus?\x9a\x93\\J~0\xf2\x99\xdb07\xf7\x90\xf9;\x06\xb8[|\xc8&amp;(\xa3+\xd7\x87\xef\x90I\xe1[(\xcaQ\xe1~\x84&gt;\x1d\x13\xeet\xfe\x1a\x96\xfc1*D\xda\x01\xd0\x9c\xda\xd6uD\x01\xcaf\xcba\xc5oW\xda\x03\x88\xd5lkFl|q\xccE\xfe\xf1P\xe8\xd4\xb9&#123;N\xf7;&#123;\xce6\xca==R\x00\x85\x0b\xa1\xc7\xfc#j \xb7\xa5\x96:\xc1\xa9\x14\xa5\x90\x10\x88\x86\x81\xe9\x84\xaf\x93*%\x05\x15E&#125;B\xf5\xfb\x03!\xf8`.\x0f\xb0J\xf8\xb5\xd2,t*$y\x1d\xe2\xf5\x04\xc68\xc6\x98\x11\xd0\xe0\x84\xde\x0e\xfc\x89a\x86\xfb\xf4o\xf0A\xfe\xbd\t\x03\x91!H\xb0h\xb6~p\x1c\x9651=G\x90\xf2\xa7|\xf0\x1e$\xad\x05&amp;\xebj\xab\x88\x14&amp;u\xa8Yv\x12S\x12\x97\xdf\xc0T\xf1&quot;T9x\xc2\xb3p\x05\xe8^\xf5Ng\x8e-X\xd3^\xa4\x05\x02G-\xad;\xbc\xe9\x9fj\x0eu\x1coV\xed[\x91\xdc\x94\x7f\xb5)\xf2\xb5v\x96\xf7\xdb\xe3\xa4D\x9bB\x1e\xb1\xb8\xa1ndU*\x01\xc6_T\xe9\xc6\xb3\xb8V,\x15&amp;\xa4X&gt;F\xe4\x93\x04\xb1\xc7_k\xc7eFu\xf7\xa8\xe2\xd05~\xbabw\nD6\xe1\x9fc\x84\xc6\xe2m\x7f\xbf\x92\x04;\xc4\xed\x1fX\xae\x7f\xbd\x1f\x1dn\xd4\x7f\x9395\xdfG\xd5\x10z\xd1dy!v\xc9&#123;\x86\xdd\xb3\xabZ\xce\x82\xd1\xe8\x1c\x03f\xe3K\xcdG\x9ba\xc3\xd8%\x94\x0cz\xdf\x0e\xfdYf\xef\xf7\xa8\t\xa9\x1fuu6\xd3\xea\x0b\xec\xbd\x06AI\xadh^\xa5`\xdd\xc1\xfa&gt;\xd5\x1a\xc1\x8f&#123;J\x1d\x96t\x85~\x87P\xf7&quot;\x03\x02C\x977\x8f:|\x8e\xbe&amp;\xd8j_\xda\xd54\xbbm\xc6\xeb\x87r\xc6\xb1\x0eKqo\xc7\x8e\n\xa6\xd1g&quot;\xd6\x16~\x98\xe0\xd5\xd6Bj\x1f\xa5z\x14@\xa6\xe0\xa5\xa5\xb1\&#39;\xca\xbf\xf8\xe6\xb7\xd9[Q=t\x86\xbc\xa7F\x87\xdfNci\xde\xf2i\x13 \xa9\xb3_?\xa2X*&amp;\xbau\xb5\xcc\xc0\xd4.\x8c\xed^\xed\xbcs\t\x17\&#39;adGkc\x15\xaf\xab+&#125;P\xc3A]\xeaA\x91v\x15\xb4\xea\x82\xa4\xdf\xf0\xdfZ1\xf6\xc7\xd31\x86\x06&quot;\x0b\xbf\x89oB\xa7\xb0\xc6w\xa3\xeb-\x10C&#125;P\xe9\xb9\xe6\x1ec|\xcd$\xffI`=\xcd\xc5O\xe9qs\x0b\x92\xe4\x8fVk]\n!\xc9~\xf3\x16a\x80n+\xdd\xc8&gt;\xc2\xf0\x85\xd0\xf9\xbe\x87@\xe7\xc1\xa8\xb0\x81\xd22\xce@\xc5\xcaBO\xcc,\x9c&quot;\x99:G8\xe0j\xf3\x06\xa6\xed\x0e\xbfl\xd6\xd4\xaf\xff`\xd0\x13\x82\xa4\x93S,\x886\xc9\x18\x8b\xd3\x8c\x13W?\xcd\xe3\x7f~\x9e\xfa\x12\\R\xf1~\xdd5i\xe7\xce\xe8\xd4\xf9\x81Oii\x17JY\xc7\x0f.y\x19\xcd4\x83\xc4w\xed\x00l\xecl\x85\rA\xe9&#125;\x866\xbb\xb3\xad\xee\xf2\x18\xc228n\x8eQs\xf4\xfe\xc8&gt;\x91\xeb\xe7v\xed\xa4\x90\xe0\x18\r\x173\x81\x0e\xc1\x18\xd9\x1e\x06)\xd8z\xa2\x8c\xd4\t4\xc3&#125;\xc1O\xb66\xf8L\xe5k\xa9\x90\x06E\xb7\xa1\xeaG\xbfS\xbc\x86\x08\x1c\xff\x94xc\x0f\xa1o\x0f\xc4%Pe\xfc\x7f\xe1\x8d\xfe\x07os4\xb3 \xc4B\xd9j0n\xfc\x9e\x08\x9c\x8aG_[\x95U&quot;\xf8\xf4ES\xc9\xcbVj\xdf5a\x89\xe9\x05\xa0\x7f\xd2\xbac\xd0\x92\xd2\x0f\xdd\xb8&#125;;\xe8\xa6\x16AbI\x84\xd2\xf4\xad\xf6\x1f\xe2\x83\xe1u\x86=\xe3)\xe6\x8a\xd2B\x90;\xb6ww\xd1\xefL\xf3\x90\x94GF\x97\xfa\xd6\xe7\x90n\xce\xf3\xc4\xdc\xe8\x93\xfc\x04\xc5=\xa4\xc6\xa8\x0b\xee&gt;\x9b/\xdek\x82s&#123;\x0fS\xf4\xcfS\xd2\x9c\x99\x18w\x9b\x9192&amp;J\xb8\xb8D\xaf\x9b\xe7\xde_\xb1\xea:\xdcI\x9c\x80\xd5$\x96\xa5\r\xcbO\xca\x82\xc7\xf2\x176\x99[+\xd6\xb8ss\n#\x8f\x99K\xf1\xe2lM\x8e\xfc\x90\xd9\&#39;W3\xe7\x83\x9e\x1bt\x8es\xe7\x89E\xa2\xbe\xff\xdc$5Ft\xb7Ml\xfff\x07f\x1b\xdf\xb6\x89\x94\x12\x86\x94\xe5N\xcf\x16&gt;V\xeef\xd58\x7f\x94\xc1)l\xb6\xed\xe1\x8f\x06M\xdc\xd7t\x102U\xd8W\x92\xbf\xfa\xfaPO\xe6Z\x13&#125;&#125;\xabA\xc1Y\x9fA\xf6\x11hN\n\xfa\xd6\x99\xd8\x81\x82\xa7\x02W4.dz\x0c\x1a\xed\xbf\&#39;-\xee\xaf\xdc\x182j\x86x\xcb\xa8\xc6Z\x8dz\xbc\x91\x82\xd5\xf2T\xcd\x1e7\x1b\xcd\xc3N\xdf\xf4\xf7O3\x80@d~\xf6\xeb\t\x16\x95ZM\xd4\x0fM\x9aFT/\r\xccJW\xe9\x9ei0\xc7Uy\x80\xfd\xde\x17\xaeH\x0c\xe0\x1c\x95\xaeJb\xd8\xe6i1Eo\xcf\xe7\x95S\x04A\xa0\x8d\xc8\xc0VE/\xb9N\x88n\xc8:8\xc5\xa8\x97\x12\xf3\xb8u(C\xf6\xe5\n\xdf\xa0\xd4\x85\xf7A\xf1\xb3\x03g4&#125;\x17k\xcf\xca\xd573\x984gS\xca\xb4\\\xfe\xe3\xefp\xef\x8f,/q\x027\xdb\xee\xd1-\xce&quot;oz\x9d\xa7u\xd6\xbb\xe3\x80L\xb0\x10\x1c\x1e;P\xfa \x9a\x99\xa8F\x93J\xbd\x89D~\xe1t\xaf\x1e\xd0\xaf\x14b\x1c\xf5Yl\xf2H\x97\x0f\xcf\xc3E\xe09\x9e@\x81\x03\xab\x1e\x06\x87\x9d\x92:\xc4\xdd\xde\x973_\x85\x86&lt;t5&#125;f%$?\xf5 \xc1\xa0\x95\x07\x13\x95\xeb\x0e\x04\xbd\x1c\xd4\x07\xec1;\xb7\xef&amp;\x03\xd8\xe9(wD\xfb\x1bQ`\x84\x85\xc3\xcap\xc4Lw\xac72(\xd9Y\xad\x1d$&#123;\xb84;\&#39;\x94i,\xae7\x95\xf6\xb2\xd7\xecl&quot;\x1aF\xf1\x98\x84I+\xe5\x8f0\xd4\xad\x1f[\xc3\xc6\x97&quot;\xce\xd7\xb7d\x03\xa5\xb5F\x12\xa6\x04\x17\x88;\x84\xe5\x07\xad\x97g\x00\xa9~\xc4\x94\xc6\xa8\xad\xfc\xa8\xcd\xa8\x13R\n\xd8\xdf\xb8\x1e\xfc\x8fC\xe2\x9c\x89\xb12\xa9v\x00(\xfcoYAU\xab\x03\xf7\x8b/\x00\xc9\xa2%\xc1e\x99L\xc4\x03 N\xa2\xd4Y\x86\x14\x13\x93 \xcf@)\x9b\x13uR\xa2\x16J)\xa8/\xa4\xf6=\xa0^\xf2S\xe5\xd0\x93\xb2)\x7f\xaf?\xd8a\xcf!\x8bg\x9a\xd56\x87`\xb3F\x870\x04\xdfI\xf4\xe58u8\xde\xbd\xd7T\x02\&#39;\x04\x8c1\xac&quot;ODB\x98]]\xd3\x01\xe5\x08/\xfe\x99\x87_!+\x15I\x91\xb5\xb1\x020/\x7f\x08L\xb3\xb95+\x83k$o\xe1&#123;\x9f\xa0\xf3xj\xf8/\xf8\x12\xa3\xaf\x157\xec\xb6\xa2\x18\xa8\x83\&#39;\xceS\xfb\x99\xd9\xb9\xde\x1d\xd1\xe3\\\&#39;\n\xec\x9a\xd8\xb0\x06\x1e\xabf6\xb6\x8b~\x98\x94\xfe\x12\xf7\xe8\xeb\x85\xc3\xb9\x07Y\xb93\xf1o!K\x17\xecp\x9f\x83\x1c\xb9\xb7Q\xef\x1fO+\x00[\xc2\xe023\x81t\x19\x14_E\xa2\x95\xb0=0\x19K[\xb4\xdb\xe45\x85\xae\x93\x91\x85#\xdcW\xca=1\xc6&gt;\&#39;\xe35\x94\x1a\x14\xe1\xf7o\x13\x9f\x0ft\xaa\x1e,\x11/\xc4\\\xfa\x97\x84\xbep\x90\xae\x1d\x1c\xe0\nc\x8f\xfd3\xdc\xbf\xbc\xeb-@kj\xa7st\xdb\x1c\x82\xdd\x1ddk|\x8a\x17:Qm1Ss\x1e\x94\xa1\x84\xdeaIob\xf88@=H\xe7\xde\x080\x84ST\xbd\x17\x07\x89]\x9b\xd6\xac\x1fb\x12R\x99\xfen\x99\x8f\x06P\xe2\xb5\x87x]4\xa2&gt;\x1d\x126J\x1b\x03\x8a\x847\xd5\x05Du\xd2\t:\x11\x81\x99\xbbs\xbcK\xe69\xf8\x19\xb4\x08\x83\xbaX)N\x95\xcd\x81\xf8\xf5L\xc7\x10\t3\x91\xca\xccBWO\xadE\x18k\x10\xbe\xce\xe2\xbc\x00\xf1\xc7\x0f\xb9\x89\x93!I\x8fS]5I\xed\xdd\xac\xdf\xcf\xf8\xd5%@\xbb\xd7&#125;\xace&gt;\xac\xfbx\x05;\xed\xe8\xa5\xe4\xef\xb1#\xe8\x1c&amp;\xe0]\xcf\xe2\x96\x04\x7f\xcc&#125;\x0bj\x84\x17D\x84\x18\xe3\xe7&#123;\xe5\xdc\x1c\x0f~\xd4\x13\xbe\xa6\r\x13\x01\x02\xa0\xb1\x87Iz\x836\xf9\xf6\xb9[\xab\xe5\x0c\xed/;\xd3Q\xf1\xef_\x01\xd4c\xa2\xb2`\x87\xa4\x07,\xfcx\xbd\xa5[FX\xbbRu&lt;ODbk\xdat\xa3\xc7\xe5\x19\xd4\xd0\xf6r\x12\xe2\xee\xc0\x90\x94\xafr\x16T7\x82\xbf\x12\x8b&lt;\xf7%%4\xc1\r\x96\xdfx\x9d0\xdcEV@,\xab\xa1\xe8\xccj\xbf%\xbf\xd1a\x1e\xfe\xfc4U\xba9\xf5\x842&#125;]\xc2\x990\xcb\xe40\x82\xbb]\x04G:\x99=]9\xe7\x9f\x18\x98C\x94\x94\x1a\xb4\xfc\xdc\xd9\xa4\x99\xae\x1d\xe5\x06\xa2\xc7^_Vx\xac\xd2\x96\x91\xcbk]S\x89\x18\x19\x15\xcd\x04@\xea\xd1\xefN\x0f\xde&gt;.\xa2M\x02J&#123;\xba6g\x13\x97D3E\rPO]\xf2\x7fv\xb7N\x9a\x85\\C\xe9-9\xd4l\xeb\xfe\xa0\xb2\xd2\xc2b\xf90B\xe0\xcd\xf7R\xb30 D\\\xc4\xdaY\xf1\x82\xfb\x9eD:~\&#39;\x12B\x88\x1b\xc5\x07H@\x9b\x8f \xfe\x03)\x84\\\xc5\x1a\xec\xd0\xcc\xed\xa4\xf7\x1f8\x8b\xedQ\x12N;\x8e\xcb\xb7\x1e\x96&lt;\xd6\n\xf1\xbd`aFC|\x8b\xd0sW\xf4N\x95\x9b\x98sS\xbaEj\xbe?v&amp;\x98\x8c\n),_,H\x0br;\xab=\xd4\xffS\&#39;\xdb\xa5U\xf8\xbf\x87\xbdv\xd4|q;Q\xfe\x91r;\xe8\xee\x00\xb1)\x05\x85&#125;C\xbc\xbe\xb0KXF\xdd\x8f\xdcX\xa4\xca\xb8\xb5\x16\xf0\xf1\\\x7f\xad&#125;\xbel/\xfc\x107\x10\xad\xf4\xea24\xf6\x16\x81\x00\x9a\xc5\xa7\x87\xc9\x92&gt;\x1a\x0c^$m\xbb|\x19Sp\x15\xb1$w\xe0\n\xfd\x97\x96yYR\x9au\xe3\xff\xd0^t\x8e\xe4\xea\xfa\xc1B\x9em\x049\xe1\x9e\xcf\x84i\xdd\x81W5T\xe75E\x06\xc0@q\n\xc7]08\xbc\xc4Dr\xd9\xf6\x9c/w\x19\xca\x03\x9b\xa7\xe6o\xbb\x93j6\xb4\xe7\x93uUO&amp;\xcc\xdbi(\x10\\nC\xde\x19\x96\xd28\xd4v\x84\xbe&amp;\nX$\xd8[\xd4\x14w+\x94zi5\x86\xab\x90\xe4\xf6\xf3r\xa9\xbcF\xb1\xba\x1aT\xa1\xf3\x05\xf8\xaa\x0f\x9f.\xcc\x0b\xe6&quot;\xf2\xb8:\xe6r\xb6&quot;\xb0\x01\x03\x11P\xc3D\x9a\&#39;V\xc2\xc6\xa21\x92&#125;+WAy\xc4\tX\x02\xd8\x01\xa4R\xfe\xca\xd9\xe7R\xc7\x91\xb6o\xa5\xdb*)I&#123;&amp;\xb3w\xce~ha\xa0\xd0/\xe9\x82\xeb\xb0]\xb3\x89)\xf8W\xd0\x91\x14\x1fT;\xbe2\x9fW\x8fj&amp;\xd39\xed2+\x04\xc2\xc87vG\xder\x1d\x86\x81\xfb\xaa\xe2\xe0\x12\x86`\xc8\xae\xc6\xfc\xd3p3\x13\xd1L\xb2\xabU\n\xb7\x99\x14\x0c\xc7\x0e\x7f\x8d\xc2\xeaNV\xb1\xae\xbe\x98\xfd\xe4\x91LN\xb8\xacp\xd6&#123;\x06&quot;\xd9S5\x80\xb8\xda\xdb\xa0\x9d\xfeM\xef\xcf%\xc9\r\xb6\x1cy\xa7\xce\xa5\x8f\x18m\xb8\xd9\xd5c\xad?\xe7\xaaZ\x8e\xc0#\xeb8\xa4S4y&#125;dk\r\xf66KM8NO\x1c\x19\x91q\x03lj\x98\xe7\xdf\x03\xbcL\xce\x8c\x11\xf5qc\xe2onZ\xf2\x8ak3\xbc\xebh\xafS\x82A\xcf[r\xaf\xa7\xafPW\x9dL\xbd\x9d[\x0c\x19\xa7\x1fn\xb0\x06\x16\x91\xa3EDR\x9a7\xd1\x8ek\xd7\xe2P\xcc\xdc\x86\xa3\xd0a\x95\xa6\x1ay\x81\xf4\x8d\xfaA\xb7W\x0b\xae\x9e\xd7\xefZV\xa8\xcf\x8a\xd3\xaa\xbb#\x029!\x89J\x13J)\x88W\x98\x8c\xc0\x8ct\x834\x80\x9bZ\x1e\xe0N\xba\x9c\xe7\xa9f\x98\x02\xf1\xf0\xac\xef\xa6He3\xdcr\xa7\x81\\P\x98\x07^\xe5m\xbf\xd5O\x84\x12\x9au\xb1%AXq\xf2&#125;%[&lt;\xf1\xacha|&gt;\xd0\xd3JLhQ\xa7\&#39;\xd4\xaf7+S\xe6\xc9\x8f@\xfcwJ\x073&gt;\x87\x10\xc0\x9fn\xdb\xe1\xdeW\xae\x90(\x18;\x8d\xc1CK\x8a\x92\x8dU\x03\xbaB\xf2\xd2\x8fj`\x16\x96\xae\x87\xa4_\x1fz\xac\xc6\xb8\x03\xd2\xd3\x1ar\xd2b7\x14\x02\xbfq\xa15\xdf\xce\xe3\x91\x1aU\x16\x01\xef\xea\x04A\x9c\x80\xef)\x81\x89c7\xb9&lt;\xb2\xf6\x00\x92]\xaa\x9b)\x9c\xdc\x19\xef\xea9\xfc\x8e\xfa\xb2\xe4\xff\xd4\x95;\xf6\x88\x89\xa0\xe5\xef&#125;e\xa3;$ \xfd\x93\xa1\x8b\xeb\x94\xee8g(\xec\xb7\x9a\x97\x18F\xd0&amp;l\xcb\x10\xea\xff\xd6\xd6\x1d\xa6\xa1\xb4\xe6| \xae\x8b;\n_\xfc\x8f\x93\xd1\x0c\x98\x82\xf5\x93E\xf9\xc4n\xf4\xd62\xa4\xe4&amp;\xf2Z\xc8X\x81\xee$\x86\x95c\x7f\xb8\xe0\xab\xd80\x87C\x82\x9c\xaa=\x03\x94d\xe5\x0fX\x13\x9dh12&#123;\xa9\x98j\xd1\xa8\x9d\xf2\x9f\x03\xae\x0bw,\xd8y\x05\xf4A\xc3p\xb3\xb1\x82*\xf3\xd2\xbd\xfe\xac\xdc\x92\x0e\xce\xcf4@\xab\x07\x1b\x0c\xeb\x19\xe8\xee\xdf\xbf#D\xab\x88\xf3b\x8d`R\xefG\xe8\x1bd\xb6s\xc4\x11\x98#]\x08\x1a_\x8c\xcb)\x0f|\xd7%\xe6\xd77\xb1\x9d\xcc\x19s\xdc&gt;-\xf0\x1b\xbd)\xde\xdf;\xf6\xfc\xbc\xdd\xc3n(kj2\x9f\xe9\xe1\xd9\xf3\xec\xf7qKt.\x9a\xb3\x8e\xf8&lt;u\x06\xa9\x1b&#123;\xf6#\xceO\xe3\x8aV\xcd\x17I\xa9\x8c\x8bf\xa6\xc0\x01rk\xb1jt\xf6C0T\xb13o\x1d\xf7\x81\x93\xbb\x05\xc8\x9b\xa0`V12Y%&quot;\x8c%\x04\xc6\n\xcc\xe1-\xf4\xaa\xe8\xe7\xc5#W\xce*\n\xb3\xb71\xb4c\x94\x8aq\x18\xa1Y\x1a\xc0#\\\xd8\x92\xa8\xf7\x9b\xabe0\xf1\xb7\xf0\x03\x07\xa9\xab\xeag&#123;\xbe\xd9M\xf0\x80\xe5\xb8\xc2\x84Z\xbfP\xd2\x8f\xebJ.X\x9d\x89\xfb\x90D\x94\xee\xd3U\xc1\\\x10Mj\x81i\x9aF\x18\xdby\xaf\xf9\xf7\x01^\x9a:\x93A\xe7\xe0p\xd1\x04\xc8\x1e\xf4\x12\xc3\xe5\xd0bU\xdd\xdam\xb7\x15\xfb\x15\xab\xa0d*\x86\x11\xe7\x13\xc5\x8aV\xf7\xcf\x00\xb7~\xd5\xd3\t\xbd\x1bm:\x9e\x16\x8f\xf4\x05\x11Z\xb6\x90\xec&#123;\xca\xa0\xc4\x9b\xf7\xa6\x06\x8bx\x82[\x18\xfe\xbc\x81\xd1\x0bC\x18~\xbb\xa0\x8c|:\xd6.d\x8d\xe0F%\xf4\x80\x15]\x01@\xc0Ai\xbc5\xb6S\x93\xaa\xae0\xb8\xc1r$\x13\x85\xd6\xe2\x9eI\x06\xd8R\x96S&amp;\xca\xe7\x83\x02e\x98\xe5\x1a\xd84\xb4\xa6\xbb1\xb7K\xe4H\xb82\\J\x8e\xc7w\xaeX\xf6v\x97\xe3\xc1\xd4\xe8b\xd2\\\xc0[\xcbI\x1d\&#39;\xad\xd5\xf6*\x92\x02\xa1\xa0+\xa7\xc1\xc8\xfa\xb8\x8b1$\xb0&#125;\xc4\xa0cg1\x85\\\x82\xceJ\xadh\\N\x163%\xf4\xd3\xdf\x17Qx\x8cv\x03\xf8Rw\x8c\xb9\x89.P\xa5\xc3U\xfdC\x8bJf\xcc1\xd46\x0b\x00&lt;\xef\x7f\x84\xdf\x84Z\xfe\xc0A\x11\xdc\xf3\xfd\xcf $&quot;;\x19\xc13D\xf7[\x9f\x1b\xb89\xda\t\x93\x11O)\xbe\x00\x86Gc?\xb4\xd7\xf5y\xba\xe5\xefu\x81\xf3\x16x\x9b\x9e7\xf0Sk\x97\x85\x16\x0f\x9a\xb9\x0f\xef\xc9\xe0\xef\x1aAC\x854\xa2\x8f\xdaw=\r\xb6i\x8f\x98\xa9e\xf3\xc3\x15\xd3\xdb\x12Q\r+\xbb\xeft\x0fvG\xfd-&amp;\x8cI\x1b\xabJ\xdc\xbe\xf4\xa4Pn\xedJ,a\xb1\xeb\xaf\x7f\x12\xbe\xda\r0\x95\&#39;FM;1/\x0b\xf9&lt;\xf0\xd2\n\xb7\x01\xdcU\\\xca\xe5\xc9sa\xc9\x9b\xc5\x03\xf3\x00\x13\xacf\xd7\r|u\x97?L\xeaF\xe49\xfb\x89\xbc\xc4\xb4Lmx\x15s\xe6\x07r!\x8e\x011)_\xe5\xa4\x99x1&#123;3S\x81\xf7\xe4\xb5\xdc\xa6%K&#123;J\xe4\xc9\x0c\xafU\xe2\xe2u\xba9r\xd3t\x85-&#123;\xb7\xf7\x9c\x18\xa0$\\\x18\x1d\x018\x8d\x00\x9a\xa1\xb9\x18p\x8a\x0e\xd1\x04\xa3G\x01&gt;y_\xf6\xef~\xe9\xc2x@\xd78[^+\x9c~\xd8\x03\xc7\xddt\xba\xca\xa00(/\xd3\xcd\x8d\x03^y\x1b\x9d\xdd\x80&gt;\xfcC\x81\x8c/\xd0\xc8\xd8\xd8\xfb\xbbw,\x05\x90\xe1\x92O\x08f=\xc7\x05qMK#\xdf\xea\x12s&#125;\n\&#39;\x82\x06\r\xb92\x9e\xf3\t\x94\xdd?\xc0\x8fatUG\x1fu\x0e\xd7\xd6\x93\xd8\xccH\xb0\xf5d\xa3\xc8\x94\x9bO\xd6w\xf6\x19\x82\x1d\xd3L\x12\xbe\xb9\xa0\xb8\xaad\xb8\xfc\xe5\x0eIC\x97\x0e\xa5\x0b\xfe\x9aQb\x87\x87\xc1\x96\xaf\x88\xcc\xa2B;\x19\xd2\xc1_&quot;\xdc\x87=b)\t\xa5m\x84N\xb3 \xb6\xa9&gt;\x9a\xbdPz\xc1SZ\x9b\xc2\xab]\x8b\xce,\xc6\xe1J&amp;\xb3X\xb3\xf5^\x84\x07\x9b\x1c\xff\xb0\xbf\x8c\xd2\x1c\xecIb.(\xcdlU\x9f\xd6i\x9ep$ \x08\xcaf,\xce\xd9\x94\xf2j\xe2-\xb3v\x1cv|V\x0c\x918g\xd8\x12\x8b\xbb\xf4rF6&amp;\xbd\xe8\x1e\xa5\x19\x00F\x95\xb4#6\xbcG\xd6g\xe4:\xc2\xb1\xf0\x0b\xe3\x98\x1a\x199\xdf\xa9Z~\x95kQ\xa0\xf2\x805\xbb`TM\xa7[\xdd\xbfkm\x8d\xb3\xbc\x1cS\xb0f\xc4\xfb c\xc24\xe8\x7f\x0e\xdd\x91p\xf3\xa4\x82\x94\xbe\xa0\xfc\xe4\xad\x92\x85\x14\xfe\xed\x0e\xc4\xbd\xa6\xc7]GF\x02,\x18\x1a&lt;\x91\x01\x93\xc9h\xf3\xdc=/\x11\xcf\x8a\x9b\xa1\x85V\x9de\x94\x0e\&#39;\xc6X\x05\\&#123;ojK\x99\xb9I\x1b\x16\x003\x1c\xd1Y\xdc3\x0b\x9c\xc6\xe6u\xab5F\xfb\x03\x0b\xb0\xbc\xf9\x93\xe9\x8f\xe5,\xeaJr\xae\xf1\x99\xe0F\x162\&#39;\x97\x97\x0c\xb5\x98\xe4DLA\xc0\xf5\x14b\xbf\x93h\xf0m\x15\\ \xc9\xb2a+a\xdd\x98\x99)\x1e\x05\x9d\xa3GU0t\xcd\xaa\xa3\xfa\xad\xc3,\xc6)\x13MQ]\x1bw\x01\&#39;\x14\x9cU8\xd4\xbb\xbdG\xb6N7\xca\xf0\x1a\xcc\x1a\x11q\x06\xb8\x98\x95j\x1ccj\xc84\xc0/\xaeH^\xf6\xe7D\x7f\xae\xfe&#123;\x9d\x10\x1e\x01\xff\xc8\xe8s$\r\xdb\xbc^\xcd\\\xda\x8f\rE\xcf\x94n\xc4\x84\x1a\x07\x81\x9a]\xa8\x1fT\xe2=&gt;\xab\xf4c\x1a\xb7\xc1\x0foC\xa2@\xbfC5n\xc2\xc9\x8c\x1c&lt;(\xc0\xe3\x95A\xf0ty\xd6\xc2G\xc4\xd9\xe8n\xb6\xf0\xcc\xb8\xe7,u\xc3\xbf/SAy&gt;$\x91\x05\xe1\x82\xd4X\x1a\xce\x06\xd5\x86\xf8\xf6\xed\x0f\xe7\xd0\r\xca\xd4\x04\x1an.&quot;\xe7S1Gat\x96\xce\xe9\xdc\xfc\xa4\xb8\xc1&lt;\xb8\x17\x1f\xc6(\xdd\xf8\xb8\xa5\x1f\xe9\xf54^\x12$\\\x0ex\xcf7R\xdc\x1a\xb2\r\x8d\xc6\x1f\xf0cY\x15\xaf\x82T\xd6\xf30\xa9\x0b4o\xf0\xbb\x10\x9f\xe9\x08l\x89\xa6A\xb5J\x7f\xd8:\xd9\xae\xe9Y%f\xf4\xfd\xfa\x8cP\xf0X\x88\xcb\xc0\xf9\x01\xce\xf3\x19\xe3\xceC\xf0\xfe\xeb\xab\xfcW\xfbm\x96f\x9bA\nG\xaaw\xc3\x9fD\xc7\x0e\xbb\n\xbe\xa7\x16\xab\x99\xb5\x05\xf3\n\x07\xeeX\x06^\x10y\x9e\xc1\xe4\xe1\x16\x95\x90\x07:\xfd&lt;\xd8\xa9\xa9\xc6\xe6o\x84\&#39;\xf6H&lt;\x82KS\xc9\x97\xefW\xb1\xb0t~[\x07\xdf\xd7\xf7\xb3q\xd2\xe6\xb3:\xf6\x9b\x81@^\xc2\xf7of\xf0\xdf\x02\x8a\xf2\xb5\x02\xe2\x9e\x1fkqS\x8em\x9d\xcc \rzv\\%k\xe7\xee`\x932\xe6\xca8&#125;d$o\xb8t\xab\xde\x81\x96 \xd2MM\xbeB\xf7C\rbr\x9a\xa3\x93\xbb\xc6d\xcb\x8dd\xda\xa6\x13a\x9c$\x1fm;\xb9\\\xeaM^a\x8e\xcc\xe2\x91\xc8\xf8y\xfc2\xd3s\xb5\xef\x97\x14\xfb_\x1c\x88\xe3\xce|\xd5@\xc0cJ?\xa5\x19\xc7\xe5\xf2\x1d7\xc1\xf2\x0b\x91\xec(\\[x_V\xf1\\\xe3c\xf4\x88\x97\\\x1b\x95\xe3P\xee\x07W\x106\x1bA\x9a\xff\x0cv\xfb\xaaDE\xc5~\x18\xf1\xb8\x04rO\x12\x02\xb7\x1f=Q\xdbA\xb4\xc6\xc7e\xcb\xe9\xc8w\xfe\xdf\xe5\x88J\x9c\x91]p\xf3H\xfb~\x1a\x16\x1e\xf1\xeb\xe2X\x8a\xbd\x80\x170\xf5\xbf\x1e\x1f\xbe\xe0Q\x90\x89\xa97\x93\x99\x96\xa7\xbe\xcd\xce\xfb\x91`\x8a&#125;\xb7\xf6 \xfe(m\xba\xd9\x90\x84LW\x13\x14\xce\xbd\xcf\xc8\xd2\xfc#\xc7\x05+\xb6C\xd1N&lt;sI\xc8\r\xe8\xe5\xa9\x84\xba\x05)$\xbc\x91^\x0f\x1dJj\xcd*N\xf4\xafTH\xbbX\xfd\xf7\xae\x06@\t\xed\xfd\x89\x1f\xf9\x8a\xf1\xec:&amp;u&gt;D\xea\xa86\xd7\xf4\xdbSO\\\xb8\xfa\xb5\xccc\x87\x9f\x1be[\x97\xcf\xaf1\xd6H&lt;m\xe4&quot;\x02I5\xeb\x93\xc7\xda\xefU\&#39;\x99Z\xd7!\xe31\xc7_\x85\xafP\xa7\xb5\x8b\xc64\xd0*\xd0Q\x08\xdck\xfa^\x89:\xd3\xa2\xbd\xa6l&#125;dn\xf1\xbf\x86&gt;\xf4\xf1\xc1[\xfd8^\xcf)\x06eH\x15\xe4\x19\xe1\xa8\x11\x8e\x838(\x9c\x85Aw\\\xa9u7\x12LJ\x7f\x02\&#39;&amp;yk\x9f\x8d\xc1\xfc\x01\x92l\x80\x04\xc8\x16`\xcfz\xca\x03u \x17\xfa\x19J\xd9/\xbf\x95\xb0\x184\x8by%i$J\xba\x1e\x0e\xec\x1c\x90zrq\x85\xce\x9f\xca%\xae\x02\xac\xf0\xc0\xa8\x01I\xc6\xd5_\x97\xf7\xccq8&amp;\xbch\xf6\xca\xe1\xda\x16\xfeL&gt;\x19W\x97&#123;X\x00g\x8d\x8c\xd9q_L\xf3\x87J%[\x14`\x83\xe6\x0c\xfd=\xdb\xd2_\xfa\x05@[\xa3M\x05\x044|--q9;\xb0\n\x94\x98&#125;@\x82\xb8\x9f9\x16\xd8\x1f\xa1m\xc3\xf1\xb2n\x9f\xdb(\x88\xb4&quot;\xd3\x19[\xae\xc5\xb9\xee\xa2\xbd\x1d\&#39;\xec\x10\x1fY\xda\xeei\xaf\xdb\xdd=\x98\xfa0-\xfc\x9a\x85\x7f\xb4!\x01\x1e\x10\xf9\xa72#\xd0\xa9\xef\xa3\xc8\x18S\xfb\xbeem\x9d\xa7\xf00\xcal&amp;\x0cjn\xed\xa4\xf3m\xe4\x964\x83\xcbFj\x03B\x8e\x10|!&amp;\x19\xaf\x92\xd9\x7f\x17\xbd\xc5\xce\x19y.\x9e\t\x8c\xfc\x83\\\x03\xb8\x97&amp;\x98*\x0c@\xd9\xa9\xf5\xee\x83\xb2\x9e\x03\xd5J&gt;n4\xe4[\x0e6\xcb\x07\x11\xc8V\r\x8c#\xe9\n\xe5\xa1,i\x8f\x11st\x0c%\xbe\x04`E\x1a-\xfd*\x0fS7\xa6\xde\x0fh\xc5\xc5\x85\x9e\\B]W\xb6\x85\xf9(H\x91\xc6\x08\xafTF3\x90h\x058\xe92\xfbuAG\xf6\&#39;u\xf5f&#123;p\xe0XJ\x81/\x8f\x96\x119\x81\xf1)\xa8i\xfbV\xa6\xfby5y\xa2\xc9\x8b\xbd`E\x8esTET\xe5\xf0\xa7q\xcd\xbbB\xf1(\xa7[A\xbd:\xc0O\x86\xe43\xb2\x11\r\xd9_y\x86\xe5u\&#39;\xbe\xff5&quot;a\x9f\x00\xee\xf5S\xaf[P\xd0\xe4\x9d7\x9bo\xe5\xeeu\xb1\xb9\x10\x9a\x10\xd8\x98mVb6F\x11\xf7L\xfaa\xac\xb7\xb0\xc1\xdb\x93\xd5\x8f\xa7|,\xb4\x7f\xe2+`I\xf6\x13Y\xa8\xa9\xa5\x93\x03b\xb3\xf4\xb9-\xf8\x8d\r\xf5.\x05\nBt\xcfq\xa9\xe4\xc3\xcf\r!\\Ge&amp;s6zP\xcd2+\x19p\xb8HM\x8d\x91\x1f\xba$\xd5\x1e\xb3w;\xfc8\xaf\xc7\xf2 \xce\xb9\xd5\nn\xe1\x12\xc6\xc6\x1ex\x7f\xb4\x93\xc2@\xce\x99\xb8\xadZ\xaf\xc3\xb8\x13$$\xc8|\x89\xdc\xc0uk\x8f\r\xf1\x8eh1\xc8\x8b\x0e\xc1\x1a\x8d\xa8\xa7\xd8\x10\xa1\x14\xb0|#\xa4]B\x15\x04XX\xd0\x0bf**Kt\x96\&#39;\x12t\xe9\xc4)(\xc6PB\xd6\x87\xf5\xb4i\x1c0G\x8c\xc7\xc0\xea (\x0bA\x1a\xe5\xc1\x92\x88\x06\xd5 A\xaec\x06D_\x84\x92?`\x88s\xae\xb9\xa7\x9ffL3\x8fu^D\xf1\xa8F\x0b|\xec\xff\xffx\x08\xa8K\xfb\&#39;\xee\xf1\xbb!\xf7\x03\x9f\x04\xc4\xd2,\xa2\x1d\x1a]\xe5\x8c\x95wO\x97\xa8i\xa7\xab\xa0\xfb\xdfsy\xb6:\xe3\xa0\t&#125;\x16\xc0=Yt\x96\xb7\x1e\xe5\x9b\xef\xeb\xdc\x0b\x0b\xb0\xc9\x80.U-pShR\r\x9f\x9b\xbdv\xf0\xc8k\xb0\xad\x98\xb5YV\xd7J\xceI\xea\xe7\t\x92\xe3o/y\x13T\x88\xd9-!\x17\x87|y\xf0p\x9e\xc1-\xd3\xcf_\xb1\x80)\x9f\xf6\xed\x03f\xb8U\xaf\xec\x91\x17\xb2@)\x00\xb07.\xba89\xa2\x80\xcb\xcc\xda\x1c\xd61\xd4o\xfc+\xed\xfb\xa5/K\x89\x9f*\x18p\\\xd9y\xd2!\xc0UY\xc8r\x97\x83\xf5NS\\\xd4\x8e\x07\x01\x16P 5&#123;L6\xc3\xb5\xb8\xd4\xaa\xe7\x94(\xed\xf8X\x86\xd2\x19\xdf\xfa\xe0#\x9e\x84\xf2aY(W\xf6c\xf12\x02(\xec\xe2#4c\x96\xc3\xfd\xd0\xe89-\xe6\xab\x83I\xf9xR\xf1X)\xad\x80cW\x0c&#123;!\xc4:y\xce\xb9\xb2+\x86[$\&#39;\xfb3o7\xbf\xf8\xbb/% \x0c8\x9c\x0e\x90\x94&quot;\xd5\t3k\x97\xe7]\xa1\xd2Iqm\xee\xa49\xc5\xe7\xc8\xfa\xdc\xcd\xc4\x93\xf2\tX\xcd\xfc\xfb&lt;\xb5A\xa0\x9d\xb9\xd2\xd5\no\xc6\xba\x96t\xd5\&#39;\xb5E\x0e\xaa\xea\x01,[\xfa\n\xda\x8a\r\x81\x06\r\x82:yR\x08J\t\xe2\xd5S\r\xac\xbf?\xccHJ\xc7\xf5;\xd1\xe0\x11\x9c\xe9\x1d\x87\xce\xe5\x14\x19eM\xebVx\xe9D\xb8&gt;\x9e\xbd\x9f\x9a\xfa\x96\xa8\xc5\xac\xeb\xf9\xe3\xf2S\xd0S\x002L$\x17*\x8fR^W\xecBk\x7f^r]kn\xdd\xdd\xb5\xf9\xba$Uc\x1e\x96_1&amp;\x1cY\xdc,]\xd4;\xe7D\x8d\xf6D\xf9i.WBm\xc1n\x92\x98\x97\x84\xbc9p\x8cX!\xb3\x99\xde\x84\xcd;H\x9e\xc3v#\xf6\x1f\xc2\x1dW\xb2x\\\xa5\xe8\xa0M\xb6\x92&quot;\x1f\x13bt\\Xi$@w=\xeb\xaa1\x848\x06\xef\xa9\x8a\xa3-~\x7fDA\xfa\xa9\x03\x13@p,aDx\xc4\xf5\x0e&gt;40\x1e\xb37\x92\x99\x86\xfefN.\xd6\x9d\xb1\xde\xf7\x14\xa1\\\x91\xe1-\xa7\xc4\x8b\xdf\x1f\x94:\xd2\xef\xd0\xda\x1f\x13L\x19)\xa9\x15\x84\xd5\x8c\xe4\xe6\xdbU\xbab\xe9\xe1\xb9\x8d\x1d\xd0\xaa\x81\xf3\xa0Jj\xbd3,\xca\x0b\xfd\xfe\xf9\x16w\xc8)\x1d0\x0b\xcd%9\xe1\x84%\x9f\xdf\xfd\x95\xe3%\xc5\x8d\xf0\x02\x06\xed\xca\xee&gt;\x94&quot;P\x98\xa3&lt;\xb0\xbd\xef\xf8\xae\xc5\xb5\xa3\xe1\xe5&quot;4\x8d\xe7zJ\xdf\x18\x94\xd3Bd\xc8\xd0\xc2\xa4\xb5\x89\x84 H\xc2\xeb\x87_\xec\xb9\x1a~ui\xf4\xd7\x02\xf1y\x182.\xa3\x91\xa0\x91\xa0\tn\xed\x9b\xb2\x1adV4\xdf\tbW\x83[\xc6=\xcf\xa2\x8a\x0e\x03v=\xbf6\xe3\xf6\xb3\x14\xe7O\xfe\xf0\xedSg\xaa[I\xad&amp;\x17\xab\xc4\xd8\xc6v\xdf\xd5Y\x932\xbf\x97\x91\x9f\x14\xcbKl\x1a\xeb\x81\xfd\xe5j\xbb\x1dl\x82\xc56\xd8\x04\xf0\xb8\xb5\x92\xde\xd0&lt;53^,\xf3eE\xd9&amp;]%\xd4\x8d\xb6/\x14Z\xb8\xb4d8rb\xa27gU\x1b00\n&gt;\x01\x08\xa5\xc5Gr\xfa\xc4s\xcbkT\xa6,&#123;\x05;\xf8\x9b\xd6Ls\x9c\xe6\x84cD\x1c\n\xf70I\xfe\x9f\xd2\xfazJ\xb91\x1a\xf8\x02r:\xee \xe7\\\xce\x9d\xee\x7f\xa0\x98W\xe1!]\x08\x9d\xaf w\xf5\xf5\x8fYB\x90n\xae\x1e&amp;f\x1b\x95\xf4rX\xf5\x02\xfftP\xba2\x1eM$x\xbf&quot;[\x89\x1a\xb9aO\x85\xf4\xb1\x91\xa3q|[\x06Y\xc0p\xaf\xc3\xb5\xbb\x19m3\x95.\xaf6\x02\x1e\xe9\xc9]a\xac\x85\xf5~|\x05U\x87\x92\xd3d\xde\x98N\x98\x8e\xe7\xda\x0f\xbc\x8f42`(W\xb4\x15U\xbb,\xc1\xa4\xd8\x8a\xa9\xb0\xc2T?:\xf9\x88T\x9d\xfa\xe2\xc1\xba\x12\xcd\x92u\xb0m\xc7\x03we\xd6v5\x8a\x13\xdb\x82\x16s\xaa(\xce\xad\xedVQh\xd6#\xb4\xbe\x1f\xb2$/\xc4\x98&gt;\xc0\x88\xc0\x8b\xc1\x97Mb\xa7\xb1\x94\xfe(0\x04#C6,\x8d\ru\x80\x83\t\xb2\x9dw\x1e\xfe=\xa2\x0f\xe9\x83\x05\xf0\x9b\x0f\x0b\x92.\x0fR\x1c5\xfeln\xe8\xddiHe\xea\x87F+\xdc\xcd\x95\xb3`tg6+\t\xf4s\x02\xcd\x93?\xb9\xea0\x0bQ\x1e\x01\x8b~\x97\xcf\x87\&#39;\xf7\x9e\xe5\xc2\x05\x1a\x1b\x08\x1c*\x9d2\xd8\x01\x93P0\x83\xca\xda\x96\n\x8c\x1f\xda\x03\xdc\x05\xfe&lt;\x00^\x1fIL\xabY\xdfo\xa14\xbc\x96\xf5\x87\x85r\xb8\x92[\xc6\xbc\xe1D\x1c\xae\x02J\x01]b\xcf\xf0=\xcf?t\xab\xda4\x94\xf5\xe1;\x91aC\xfb\&#39;\x988\xb0+\x90\xb3\xb6\xc1\x1c\xa3ovq\x10\x07\xac\xcdM\x91\x16\xf8c@\t\xd4\x1b\x95K\xd2\xd4\x1eP\x8b\x12\x89vwd\xf4\xc5\xcd\xe7_\xf7\xba\xb5m)\r\xd7\xb6t6s\x98\xcd\xca?\x18my\x89\x00BBSZ\x96\xb2\x8a+\xd9:\x85\x96\xa8^\x94\x16\x13\x9e\xd2\x96J\x16\xc0\xef\xfc\x8e\xb7f\xfe\xb5D\xc4\xc4\xe4\x80\xc0\x18\x15\x9db\xe0\x10\xc7\xd4\xf1G\xa8\xa9\xd6\x10f\x18_\xd2\x9f\xd5\xa6\xad+\&#39;P\xcax\xb3\x95\x13f\x07\xae!*\x8b\x93*\x80\\\xd3(\x05\xcaL\x9c\xe4\xddP\x08\x0b\xb8\x10\xbdk\x96\x19\xad\x1c\xc9I\xdc\xe0\xc7\xce3&lt;\xaf\xfb?\x99n\xa5\xe0\xbf\x06\xf4\xd6mc\xcc\xa9\x9es\x86\xfc0#\x9e*\xc9\xf8\x15\xb4\xbcI-@\xe7\x10\xaca\x10\x12\xa0\xad\xa7^\x12\x99Q\\:6\x07\xca`\r\x90\xaeu\xe16\x1b\xe6\xbbo\xec\xf7\x95X\xce\x17\x02\xa1V\n\xa9\xa1\xe2\xfd\xf9\xf8\t\xa6\xcawP\xd5N@\xc0\x148\x048\xd8Ll\xb4\xab\x9es2\xba\xca\xd2WO\x9b8\x04\xfc\x85\xefm\x848I\x02\x1b\xb81\r\x8c\xbb\xcf]\xfe\xc6\x14\x9d9\xba\x88#\xe5\x9e&#125;1zTa\xad\xa2\tj\xa2\xc3\xe1\x06\xf0\xd2XG\x13\x1e\xe7\x90`\x92\xb6\x8c5\xa1`\xf6\xf1A#U\xbf\xfa\x83\xb1*\xf5\&#39;C\xe5\xc9\xa6\&#39;\x90\x81\xee\x9f&amp;\x12\x19\x8c\xd3b\x89\xfbu\n\xc2\xab&lt;&#123;\xaav\x8e\xea\x1b\xd6\xc7@\xf5Ym\x199\xe4\xa8\xa5\xd9\x965a\x065z\xf4;t$\x19+sX\xb2\x89\xa04b1\xbc\xcb\x1d\xf4\xc5n\xebh6\x86\xea&amp;\xb9|\x9c\x98\xa86#O\x91\xd5B,%\x9d\x02\xad\x18\xa6\x90\xe28,\xe6\xff\xf86AL)Q~\xa64\x8d&#123;\xca\xee\xc1\xe3O\xc9\x95\x16b\x03\xa8\xfe9\xfd\x97\xbaw\xe1\xd0A\x95\xa0\x8e&lt;+8\xf3b\xb1d\xcf\xd9\xa5\xd9\x05&#123;\x19\x08\x8a/u\xcbM\xf0\x9f9Rr\xa2\x12\x8f\xff*[\xe9\xa0\x00&#123;\xfe \xa7\xc4\x16\x05\xbe\xb3\x8b\x80\x1f\xc8\xb3\xc4\x1e\xeb\x1a=\x1cR\x920\x16\x90\x1f\x83Z\x85$9\&#39;\x8c\xf3W\xb7&lt;\x88Y:J\xa9$\xaav\xf8\&#39;\xa2\x03\x0f\xe2A.\xd9\x82\x8f\xa3\xeb\xf9\xe3\xf7az\xfft\x0f\xe0\xf9\xf9\xa5\x11@\x17\xca%p\xf8H\x17\xc6\x08\x1d\r8\x11\xb0\xaf\xe2?z\xce\x86\x902N\xf1 \x8bL07g\xa2\&#39;\xb3\x16\xf1J\xbc\xc9\x81\xc0bx\xca\x00\xee$-Q\x1cS\xd3\xfd\\\xa2=\x8c\n\x9b\xa0b\xf2Xu\xa1\x13%+\xc0\x8d\xed\xb2\x81\xc7\xfb\x92\x8eJ\xba\xc9\x1e\x01\xf1\xcb|\xd9%\xed\x1c\xca\x812\xf2o\x9f;y\xcaJXRK\x17\xa8\xcc\x01\xe8\x95\xbe\xd9\xde\x83&gt;\x12\xa4\xbeC\x95\x1bYi.\x8d\xb9g`\x0f!\xfd\xe3\x89\xee\xa6\x9eE\x1cv\x1d7Z\x13\x93L\xc0\xc9TE:\xa6M&#125;\xf4?\xb0\xca\xe90\x01xhX\xba\xcf\xeds,\rn~,d\xd6\xd0U&#125;\xb0O\xfau\n\xd3\x8b(\xfc\x89\x97.U\xb2\x95I\xe8\xfb:%\xe2\x07\xdc\xb0&gt;\xb1R\xc7K[K\xd5X\xc8x\x1b\xf3\xb0Z\xcb+\xf4\xe2v\xbf4^\xd7&#125;\x14\x9a\x0f0E\x1f2\x89\xa5\x03\xe8;\xb0\xbb:\xfd\x97V\xb7\xd9\xc5&gt;\x13#\x126\x13\x97\x0fN\xf6\xc3\x92\xc9\xde\xbe\xf5\xfam\xc4\xb1\x84]M\xc0\xb0\xb2\xc0\xf5\x14p\xb0\x87fd\x00\xcb\x9c\x9c\xbd!x\xd3\x9bmT\&#39;\xa1g\xe9\xb6\x93\xd1#(\x81S\xbfT\x05\xa9\xf0\xd0\xc9j6\x89\xec\xbf\xe5q\x07\x8d\x1bmjp\x1b\x10%\xa7\xfa\x98\xdfY\x9d\xa7\x96\x7f\x8c\xb8\xbb\xce\xb0\xf7E\x04P\xca\xc3.\xe8\xf0o\x89\xba\x10T\xaa\x90\xeew+\xe0\x80\x1a\xf5\xa8L\xb5\xcdh\x9b|\xb0\xcf\xbb\xb7\xa9\xdf\xdf\xdd[\xd1\x022q5\x80\xd3+\xd0\x90\x97\x94!P\x12v\&#39;\x90;]%\xbdP\xfe\x97&quot;\x7f9&gt;_\xf9\x96\xd5\x81\xb4\x97\xe5W&#125;\x97\xb2\&#39;\xf0\x08\xa5|\xf6\x1dZ\xe0\xcdx4mV$\x9eB\xbe\x1a\x7fL\xd8\x93\x05\x16K&lt;\xe5\xeeu&#123;\xd9\xb7\xe3&amp;2\x9a\xa4\xf5?\x1dc\x16\x05s\xb0j2M\x18&lt;s\xba;\xe2\xe1A2d\xf4ps\x15\xe3Y\xd8\xa1\x07\xb7\x9f\x1d7\xfdjm\xb6&#123;\x17X\xb4\xce\xb7`\xa2ml\xd5\xc4\xa1l\xfd\x92\x92V\x81\xf2\x9d\xf6\xc2q \x81\xaa\x93\xb5GEd\t\xf5\xc3I\xd6tu?x4\x80\xaa\xc1w\x1d\xab\xa0\x1c\x8cc\xf8\x0fBO[\xf0\xf7\x83cg\xff\x01\xefH\x8b\xe4\x93\x04\xe7@6\xd5\\\x99\x03\xd4\xcf&#123;\x80\xd3\xb1\xf8U,C\xf7P\xef\xab\xf1\xce\xfb\xd5ZnV\xa2&lt;\xec!o`U\xbb\xfco\xfbl\xa8\xe8\x9e\xb0\xd4L\xe9:\x99\xad\xdd\xb2\xea\xb7\xdaC\x1d\x83\xcc]X4y\xd3^\xa4\x81\xc4\\v\x9c\x1a\xe5Y\x94\xae\xbe\x08\xbd\xa1v\xc8\xd5Gd\x1bsx\xdcQ\&#39;.\x9dD?\x15\x08\xc5\xf8\xec\x93\xc5\xcaf\xd1\xf5q\xbd\x1bL\x8b\xa3\xe0\xfd;\xce\xdf\x1e\x92\xb4\x8d\xef\x9cZ\x8e\x98\x1c,\xfd\xbe\x8a\x94\xa2\xbf\xcf\x9e\xef|W\xb2\xa9\xceW\\\xc4O\xe3\x04\x88\xef\xdf\xa6\x13\x16\x1e\xb5x\x98\x90\xa6\x80\xc8\xab\xef\x7fX\x1f[b\x0c?(\xfc\xa7\x04\x1b\xfaQ\xa4\xa8\x99\x7f\xac$`\xefA)\xe3\x90\x89\x08\xd0G7x\xb8\xcd\x02\x9e\x98\xee_\xc3tG\xa0!-^[\xcd\x94\xcc\x02\x8c\xc4\x13\xd4c\x0c&#123;s\xce\xae\x11\xefC\xd8\xb0\x03&lt;F\x8a\x89\xd3\xc9\xd2\x16\xb8\xc7\x15\xe0+\xe1K\x04\xc8J\xe6\xd7\xad)K\xd6\x98\x13\x17\xac\x9b\xdf\xde\xc1\x13\xf9=Q\x84X\x19\xed\x91KE\x93\x96\x81\xb1\x17\xc9\xa7\xf9\x9e\xadz=,\xa0 6\&#39;dcIv)\xea\xc3(*\x95\&#39;\x03\xaeI\x90KCr\x9e5jw\x87_V\xae\xb0\xa6\xb2\x1bs\xfbP\xe0\xdc\xf9\x05\x08&#123;h\xe9\x82v\x1e\x06RK\xa2\xe4\x14\xb0\xe20s\x0b\xa0d\xaff\x17\x08\x9c]X\x8dL2Fj&quot;?\x8a\xc4\xfd\xf7\x1eHb\x01\xd9?t\xbb3\xa1o\x8c\x10mg\xd3\xf3\xec\xa0\xca\x9a=!\x81\x8b\xb0;9\xc5\x14@,&amp;\xa4\x1d\x1d\x92\xb8\xc6\x03k\xa3y!\x9a\x94\x88N\xdd(\xb6\x85\xeb|\xef\xde-+&gt;\xd2\x8d\x82|\xe4\x00\x91\xcf\xef\x9e\xecN\&#39;\xe1\x03\x1c\xef\xed\xb4\xe7.\x1c\x02\x96\x8c\xaaZ`k\xebyP\n\x0b&#123;\xda\xf7\xca\x97\xd0~\xf2\xd7\xf7\xb6\xa3\xfaD6\xf3\x08\xb2\xb4\x9d\x80\x1eK*\xebg\xa1\x1a\xb9W\xc2\x0f\xce\xa9@\xe5f\x13\x06z\x81~S\x98\xed\xa8\xed\x9e\x08h\xb2\xa8\x8d\xf9%\x1f\x8e\xa4s\xe1a\xdbr\xdf\x8d\xcdh\xf3\xd6\xf1\xbfls\x95\n\xebJ\x05\x08O\x0c;\xe2:\&#39;\x99\xe1\n\xa1\xd8\xa8&amp;\x05%b\xfao\x89\xdd_\x9a\t\x04\xcd\xeelN\n\x83\xeb\x1b\x10\xd3\xba\xbf\x1e\x89\xcf|&#123;\xd9\xe6\x9a\xbd\x14-\xa7\x8e\xdf\xa3\xf6`\x95\xe6\xb0\x86w\xa0\x90:\xfa\xaa9\x823\x9d\x08\xa4\xe4\xdf`\xa0NI\xabp\xa9\xbc\xe2\x91\x98\xffB\x81$\x1a\x83\x9dh7\xbe\xd7l\x84\xbd\x1ebQl5\x955E\x14\x93/\x90\xdd\xf3F\xeb\x9d\xd0\xaa\xe5T&#125;%\x82\x93t\x98e&amp;\x96\xdcz\xc6ZE\xdc\xe2\xffM\x95`\xc8\xa0C\xc0\xb9|\xe9\x7f\x02p\x1d&amp;\x8fk6\&#39;\x81U\xfaf\xa3\n\xab\x16\xb7\xca%\x81\x18\x15\xd9\xf4\x7f\x9fX1\\\xc7\xd6\x1bk\x9eoS%\x15\xb8\x87Is\xd4\xc0\xef\x07B;5|\xa7\xf3\xbaJ +\x1a\xcb\xd2\xc8\xd7\xdc\xf5l\\8\xc7\x85\xdb\xa0\xe7S\x02\x9d\xca\xe7\xfd\xfdQ\x97\x81\xb2Z\x8f\x9a\x88\x89\xb7\xcd\xf0\xe2\x01\xe7\xdf\xbf\xe8VS\x03\x19\xfeJ\x97\x94:\xcb,\x0c;\x08(.\x16\xcf9\x18\xc4;pE\xf6;v\x1b/\xaa?\x82Jx\xed\xef\xdc)\x82\xbeplk\x1bw3\xa7\xe1\x7f=\x82\x14.(!*2\xa2J3E\r\xe0\r\x00\xc8\xc0\x9d5\xb4\x93wv\xf5`\xdb\x8cOR\n\x95^U\x10\xc6\xfd2I]\xa1\xdczF\\l\xb0Q\xcc\xb4:\xba\xa3U\x92\xd1\xaa\xda;E\xa1Ui\xef\x10\xba\x866~\xb8c\x9a\x9b&#123;\xe1a\x1d\x0e\xef|\&#39;(D\x8c\xbe&quot;\xf9i\x8e\xe1/%\x00\xb3\xb9\xd5\xfd\xed&gt;\x10\xab\xfb!\xc1*\&#39;Tiq\xcd\x8c\x81\xc1T\xf7\xdd\xeaV\x93\x08w\x18\xd1\xe4\xa9\xa9\x17\xea\x81G:\xa2\xc9\xc6F\xef$\xfa\xce\x13e\xf8l\x16\xeb\xa8\xbd&lt;\xa1\xe53\x1c\xc9c\xa83\x04r.\x94\x85\xe0\xfb8\x118O\x97;\xd6\xc0\x85\\0T\xdf\xf6*L\x86\xd4!&#125;\xee\x91@#\xb4\x800\xe2uT\xf0\xaa[\xfeAV\x93\x0b\xca\x87\xa7\xc5&lt;\x18jyz\xfd\xda\xb7p\x7f\xf1\xfe#\xb9\xbb\xbf\x01\xbd\xbb\x9e\x98\x10\xf3\x02\xfb\xfc_\x85\xdb\xd0=\x055r\xcc&gt;\xed\x9bw?\xc4=\xa7\xa0s\x05N\xbfd\x03\xa2\x0b\x93\x02.\xa5s&#125;\x93\x07\x86k\xd1\xd9\x85$C&amp;\x8d\x8e\x82\xcbQVH\x9f\x1a\xa4\xa5\rn\xcc\x17 \x83p&amp;u\xc5\x87\x829\xf1\x1f\x1e.\xb3\xe5B~\x127\xfd\xb1\xe9\xd8\xfc?\xc5_\\\xc2b\xca\x94\xf7\x82HEEh\xa6&#123;\x9fH\xb5\xf6o\x02\xab\xf2\x8c-\x16\xa2jG&gt;\xaa\x8fSM\xe3\&#39; \xd3\xdc\x82\x948,=V\xcb&#125;:\x97\x9f\x18*:&lt;\xe20\x8a\xae\xac7+\xaf2\xe0U\xd4\xd34\xc9\xb1J\xa3\xe2\x81\x87\x1bY\xcc\xd1\xcf\x7f&gt;M\xde_\xf94&lt;rG\xcb\x81&#125;\xac\xfdb\xd5`\xd2\xe5\x82\xba\xb6\xfa\xdbG\x19A\xea\xcc^U\x83\xf9\xdd\x84Ug\x86\xc8&#125;?\\\xca\xa2\x04-\xc6\x0f9z\xd0\x90\xcf~\tIM\x80f\x1e\x92\x01\x8a/\x19\xa3\xfa\xa5\x15\xe5\x91M\xcbiB\xb5\xaar\x82\x93\xc5\x98\xae\xb9\xab.\xa5\x84V\xbf\xbb\xd0\x8a1\xf74\x01\xf5\x94\xf7\xc3\xbb\x05D\xd2\xa6&quot;\xff\x812\xe2\xde\r\x1c\x08\xc8i\xca\x12\xdd2T\xfc\x1dLTw\x87~\xd1c\xf0DrL\x10\x02c\x94\xd7\xa1Z\xff\x1bQ\xabSp\x885\x91yP\x86e\xf9.\xb1\xef\xf5m\t\x91\xd5\xa8n\xa0I\xd2\x0e\x03E\xc4\x01\xc8\xfc\xc2LZ\xf8\x14\x8a\x90x\xe4F\xdet\x1fSH\xb1\x91\x95\xfb\x9d-q\xcc k\xdf@\x18vb\n\x0c,?\x99G*\xfc \xa3=\xe8(\x99\x06fX\xfa\xc8\xea\x93\xb7\xe7\x1b\xf2\x87m\x97\x82\xbb\x8a(\xf2\xf5\x8e\xdf\xb9\xb7\xc7Y\xca1\xbfB^\xd6\xd8yY\xb2\xd0/`aH\xd3&gt;\xc7\x17\x0c9\x89\xb8BB.\xa2\xbd\xd0\xb1|\xdf\x13\xa0%\x91\xdd\x06\\X+N\x0b:\x840\xbc\xbf\x0e\xf3D\xe5\&#39;`n\xa6=opI+Z\xcc\xc3x\xdb\xd6s\xca\xaf\x8a\xd8l\x1c\xcd\x17\x1d\xbd\xed\x92\x85\xac\xaeZ\xf4-\x12\xf6H\xfe\x11\x98\xfb\xc0\x91%\xd4\x8c\xd2#\xf6m\xef8\x8c\x8b\xc0\xd3\x8f9\xd7$\x10\xe6\xe5\x14\xb9Q$a\x17\xdc,\x0b\xa6\x00W\xa3\x01WP\xb6\x01\x10\xcf\x9b\x1d\xb6\x8ed\x9f\n?z\xae|el\xc7\xf0&#125;I\x1aj\xf5r\xbd\xddg\xb1\xf2\x00L\xc9\x0c\xb0\xae\x04;\x89\xa0\xd7Cd.\x99Q;C!J\n&#125;\xc3\x04\x8b:\x92\xde\xd5v-\xa75qo4\xd4r0Ov\xfe\x86\xd7\xafa\xf9p\xac\xd7\xb7\x01\xf3\xf4\x9d\x0c\xd9`\x0f(\xcfA\xf6\xa8\x90\xff\xa49\xc7\x19\xa3\xcb\xdc3\xd5V\xd5\xcc\xca\xff\x83\xf6\xab\x89\x16\xf9\xfc\xe8\xb4\xd6C`\xe6\xeb$\xd3\xd4\xbf\x81\x83\xa4LL\x10\xb4\x8c\xc7B\xa6:TH\xaa3\xca\xf0%\xd0l&quot;\xa8\xb7\x04\xaa;\x04\xf9\xda\xbe\xaax\xdb\x9cp\xd4\xb9\x90S\xb8\xacW\xbb\xc0\xab\xafso\x1c@\x0cR\xfc\x98|\xa8\x91\xf3\x88\x11\x1fE\xdal\xae|J\x06?\xa7\xfd\xe9\xe0%\xc8,\xc9\x14\xb1\xf0\xc5\x86\xd6\xa2k\xe2\xee\x98\xd3\x08-\xb8x\xf1\xb0\x9a\xe9a\x10\xae\xbc\xc3\xa9m\x0c,a[&#123;\x18&quot;\xb1vbl\xafB\xe9+\xa62\xc0\xca\xbeC4\x12\xbd^u\xc8\xc2\x1eR\x85\xea\x01\x9b\x1f\xc5\xffug\xcd0%\x9f;B\x8b\xa7t\xfd%\xef&gt;\xae\x8c4\x96\x9fi\xaey\xaeg!\x85\xba\x0c\xad8\xce\xc6\xc0&#123;\xb33\x13c\x18\xe3\x02w\xa1\xc7\x90\xba\xf1\x86\x7f\xb2\xa02\x1d\xcf\xc2\xb3\xd6\x8d\xea\xfc\x11K\xe6C\tg\xaaq\xad\xf2M\xae\xc1.\xfe\xff\xb8\xd0\xa1\xae\x02\xa83p\xa2\xeb \xca\xee\xc6\xcc#:G|\x88\x8d\xd6\x8e\x94\x81\\\x85\xa4P\xa7\x80\x9d\xd7F\xf7\xac\xf8\xa7F\xa3L\x1a\xd0\xcc\xe0&quot;q-J\xc8\xdc\x98\xb4\xbe&lt;$C~\xca\xd1\x80\xad\xe9)m\rCM\x9b\xd2c\xeb\x9c\xa60\x08\xdd\x8e\xdb\x7f\xbb\xf7&gt;\xe9\x0e\x9f0g\xf6\xeei&lt;.\xde\x08\x1c#z\x86\x8a\x08\x1f\x973t\xa3\xc7\xc6\x17\x05&#123;\xa9H\xe3\xe1.\x8c%\x1f\xc9(\xaeFz]\xf4\x97\xacY\x91c\xcbC\xa5\x90\xa4_\x86\xb0Q\x81\xf7x\xeb\xce\x8bm\xbbX\x10\x9f\xd9\x01\x90Y\xdb\x08\x0b\xa7M]\xbc\xf6\xbdpG\xc8\xe7\x92\x91\xee[\xd9:-\x8a~\xddI\x8c\xb0U_\x15\x8aO|\x88\x81%\x87\x8b\xdfI\xb4\xe0VS@\x93\xa0#X\x98S\x1f\xb6\xb3\xf5\xa7&lt;\xd0\x87\x02H\x9c^\xc2LM#\xd6\xe7\xa6j\xa4\x16Nd\x02\xc4&gt;\x8b\xe9\x95\x05\xba\xf0\x93\xc4\xf5\x83\xe6\xf1\xf8|\x97*\xc2\x81\xe7\xc0\xc0\x10]\xf7?@UI\xa6A\x06[V]\x1e\xe1\xba\x96\x8e\xcfz\x04=$F\xf4\xdcn\xf2\xde\x93ids\xc2\xae\x11\x9c~p\x9f`M\x86\xb2\x03\xed\x99\xf2\x93y\xb2\xfc\xa8J\xdf\xb5\xe9\xaf2c\xbe\xb7&amp;DK\xcd0\xe9#\xb4K\xfa@\xbe\xffS\xee\xc5i\x8c\x8a\x92&quot;\xb6\x83N\xf0C\xff\x04\x86\xd7\xb7\x10ocfK\x9c\x1de\xa7]S\x9enF\xd2\xb5\x9d\t\xc5\x1e\xfb^\x89\x15\x92\xbe]1\xcd3\x04\x7f\x81t\xb8\xae\x08\x8d\xb7V\xb8\x1d\xb7P7\x7f\x06\x12Jk9\x8e\xfbAg\xd6\xa0`\x9cH\n\x96d\x17G\r\xd4\xe9\xa7\x8an\x8d\\\xb0\x9a\xb8\x9fG\xc4\xb3\x0f\x01\x8d\x86\x10\xe2\xecE\x0fix\xc2\xd6=\xc0\xe3\x0b\xf2h)\xf8\x9c\xfd\xb1\xa4\xcf\xf1\x1d\xa6\xe1\x8d\xf3\t\xe6b\xa2\x02\x16c\xbf\xde\xa0O\xb5\x00!\xbc\x815\x7f_\x0fD\xd0\x14\x99q\xe4n\xed\xbb\xee\xf6\xa9&#125;\xefs\x9bmox3\x01\t\xe8\xeb\x0b\xd3\x96\xa6\xbaA`\xd6*@&#125;\x90\xc7\xd0n\xf6D\xaf\x05\xcf3\xa8\xed\xef/6\xc7\xcd\xb9\x08\nA\x14\xb4\xb0X\x86\xb7\xbf\x8bO\xbe3\xc8%\xeeq-qm\x11=C^W\xc5_9\x98m\x1dg\xd3\xf9\xef\x7f\xc2y\x014DOT\x9e&lt;\nz\xe2\rb\xd5\xf6|\x05\xb3\xe55\xca\x8as\xb1\x18\xfai\xa0\x83\xcb\xb0: (|\x05\x85\xda\x90\x86\x08\xf2\x92%\xeaQ\x1a\xae\x80[\xf7/^\xd0\x80\x11\xc3c&#123;\x83\xc8#\xc7\t$g\xaf\xfcE\x8d&#125;\xdc/u\xff\xed&gt;(\x83\xed\xd3\xeb\xfb\xbc\xa0^\xe5U(\x9b$\xdf\x8f\x9f\xb1\x85\xac\xc1[\xbf\xbf\x8ez/\x80+,\x19\x1b\x91C1\xae\x98\xb1\x13\xcdJ\xcaq\xbd\xb9\xce\xccW\xed \xfe\xf1\x8b\x95Z_\nL\xb4\x9a\x9a\x83\x08\x0bh\xf21\xe7\x83\xdb\xc9\xc9\xfaz\xaa\x9b\xb3p\xdf\x99B\x8b\xff\x059\xef\x82]\xbf\x85\x16;9\x8d%\xd2\xa5nN\x97\x87\x7f\x84\xc76_\x1e2\xc9\xbe\x03\xab\xedB\xbf\x07\xbd\xbb6\x99\x7f\xc6/\x80\x9a\xae&#123;\x98\xd4&amp;\xde\xe6y\xd8b\xd7m\x98\xc67\x04\xe0T\x94f.\x8ch\xec?v*\xab/\x01,\x00.\xf0Z\xfa6\r\x82\xec\x8f+\xd3\x96\x18\x10p%\x1a\xe1\x8d\xda\xb8f\xa7(^F5\xb2N#,\x9fJ&gt;\xdd\xb2\xb3\xd7\xd7D4&amp;\x05-\x80\xbe\xc4\xf0o\xe7\xc0\xd4(\xceo\xb4\xefKw\xa8\xdbO\x96O\xef\x97\xd6c\x03\x8f\x19[H\x03\x1d\xf7\xadI\xedv\&#39;\x99\x86t\xba\x9d\\\xdf\x179P\xf6P\xa3Y\xc5\xd4\x05\x0f9\x9b\x9d9L\xfa\xf2\xfaJ\xde5\x8a\xbe\x8f@\xf6\x15\x9ej\x87\x0f\x90\xc8\x97Z\xdf*\xce\xe5\xfe\xb6\x1a\xee\x9fD\x19O+Ry 5\xad\x82\xbdT\xdc%\xce\x1b\xbf\x01d\xc2\x08\xff\x1a|\xe7?.[\x91\xee4*\xe1!\xb9\xb1\xb5\xfcg\xa8\xeaI\x06e\x01\xd5B\x93\xfdP\xdd\xf6\xefz\xeb=\xdd_b\xd0Ig8\xd0\xf1\xfc\xf8[ms\x83skl+\x9e\x1d\x03\x02&quot;`\x04QW\x93\xc4t\xe9\xd5\x1f\xc6\xae@\xfa\x97F\x0f\x93\x0c2\xc3\x98E\xcd\x1eW\x03\x05S\xec\x8ew\xf6\xd7/\xb3J@\x0ew\xb8P\xe8\xa6\xa3f\x85\x8b!\x80QP\&#39;\xf9\xf9s\x08\x94\xf7\xa3\xbe\x858\x87\x0fT\xf5\xdb\t\x06\x03\xa6h\xc0\xf4o!;\&#39;\xb1\xbb\x90\xd8\xbbH\xbcV*\xa5\xdd\xb7\xe4rC\xe3\x8beh \\\xa61\xd6)\x8e\x1bS\x91w\x17\xce\xbb\x87\x15H\xd7f\x93\x7f\xc5\xb2z\xa7\x8cvn\xdb\xf9P1\x07\xa7\xe2\xafz\xd7\xcb\xbd\xdev&quot;(\x99\xb4\xbe)\xbe\xceW\x15w\xc0\x03&quot; |:\x06\x9di\xe0B\xae\xfb\xb8\xe4\x92&#125;\xc8$\xf2\xd3q*\xf3\x8c!\xb8F\x9d\xb2K\x1c;\xf4\xd7*\xa8\xdc3&amp;\xb0\xccG9\xa7qi\rEPc\x82`\x18\xe7\xf1\x16\xb6\x877z\x12\xb7\x04\x17\x94Y\x82\x91w_\x81\xb4\xe3\xa9\xf38\xe6rw~\xd7\x196\xb1N\x8a\xcf21ZI\nF\xce\xa1\xd2$\xc07\xd9P\xcb\x1a\x12\xff\xd9N9R\xa6\xc2\xf0\x8f\xe5[m0\r\xcf-(\xcc\r\xde\x92\xaaN\x9d\xd5?0\xa6%\xa3\xfbK\xbaD\xf9*\xcaB\xb3\x00L\xa1\xaa\xb9\x15\xac\xee!\x96\x0b\x0b=\xb9g\xe91d\x84\xbcJ/\xa6)d\x84x\x00\x18\xbf\xb7:\x86=\x84\xcf\xf4D\x93\x1b\xf9D*\xd0\xa9\xcf\xf0\x9d\xae\xfa\x06?\xf8\x0f\xb4\xd1H O\x15\xd5\x11$\x88\x19\x03a`\xe0\x90\xda\xa3\xbb\x1c\x9c:\x1c\xa6\xabU\xc6u\xf1\xf4\x04\xd5\x1a\xfc\x8f9\xd4\&#39;\x1dy\xba\xb2\x9d\n\xac\xbe\xf2\xddc\xcbb\xa3\xc8\xe9\xe2\xb2\xe9=H?\xf7$i\xa0\x92\xd5\x83CF\xef\xc3\xccS\xae\xd2s\xdc\xad\xc7\xd7\x904\r&gt;\x0c\x08x\xfev\xf8\x18\xcf\xf7p]3\x1fc\x8b\xd1\x8e\x0e\xc9C[\xd1\xeb\x99L\xccrYW\xc3\x08p\x863\x9e\x13\xff.\xfc\x847b\x15\x9c\xf2\xc2\xaf\xd6\xd2-l\x9d\xe3e\xecO4\xb0\xfeD\xe7\xfc\x80\xa0\xe6\xaa\xa30\x99\x86/\x92\x95\xb0\xe2\xf7w9\xe7&#123;y\xb6\xff\xb9\xfd\x13\xea\xacn\n5B2\x0fW\xf6\x04\xde\xa2\xf2\x7f\x7f\xf8\x95\x80+\xdeD\x10c\xde\x9b\xa5\t\x7f\xd3\xe0\xc0)d\x9dM\xec@\x83O\x02\x18\xb2\xe5\x8b\x1d\xe9;\xaerp\xdd\xf8\xbe\xe6\x14\x12\xcf\xe3\x02\x05\xdf\x1f\xeev\x13.1l\x80Uqk&#123;`\xce\xc8\xf7y=\xe8\xa7\xdex&lt;d~\xd9fh\xce\xa8\xe6zD\x19\xbf\xff\x17\x8dA;\xd2\x8f\xa1\x8c u[h3`\xb0\x86\x17d-\x10\x06\t/*\xf0YIA\xa9zP\xfe\xe7\xc5;\xdb\xa9\x14\x06laA\x831\xc4\xa3\xe0.\x13\xe6L\xc1\xb8ows\x1cY\xfa\xd65\xe6.\xado G\x9c;#6\x01\xb9\xe0\xa2g\xb7c\xdb\x1e\x93~\x1f\x98]Bb\xf9//\xefi\xa4\x1b\xea&#125;F&amp;\xf3\xb9\x9cH2\xe3A\xb6\xd3\xb8\xf1\x9b\x80q\x1d\xbbl\xcf\x80zY\xc7\xe7v\xfc\x96O\xe1\xd0\xbe\x9d\x13\x9e\xb0\xaf\x97\x1eF\xb3\xcb\xa2\x909\xf6u\r\xf5a\xb2@\xe1\x15x:\xff&quot;\x95\x8d$\xe51\x1f\x06\xb0\x8d\x0c\xd11\xe18\xf2\xd7\x89\xae\xc18\t%ukC\x00\xf3\x89q\xf2\x00\xe7?\x1b\xd2e\xf11\x85WO\xb6&#125;cA\xf5\xc9p\xef\xe4\xee\xb5\xed\x10\x9b\x1bLV\x97\xe7\x96\x00i\x0cqX\\.;\x8f,\xa9P\x11P\xd4\x9c\xdb$\xd3\xec\xcd]\x81\xe4\x95\x8f\x16\xa3\x1a\x89\xee\x15D\xf0\xe5\x19&amp;0W\x03\x03\x88\xcb\xa1Z\x8e\x93\xce\x18\xa6\xdc\xc6\xf1G\xa6x\xd4u\xac@9\xb5\rr\x84\xf2\x97\x94\xc4\x93\x83,\x96-5F \xa6G\xb2\x83\xd7&#123;`\xbd\rJ\xbes\xcb\xc7J\xc3\xbb,q\xcd\xbf\xc3vR\xe8`\xfeN\xac\xac&quot;J\xd7\xa6~\x0c\x8dk\xde\x91\x0b\xf1\xae\xaeMq\x0f\xe1\xd0\xd6\xb6\xde^\x17N_\xb9\x83\xfc\xfb\xe8%\xab\x0b\x01IXn\xba\xf9d\x93\xd4\x81JY\x8dn7\xd5C\xdae\xb6\x14*3\x03\x8a\xc3 \xb6\x05\x92\xcde\xdf\xa0\xba\x08\xb2\x1cZ\xe7\xc7\xb7\xcd\xef+L\xe5\x93&#123;\x85F&#39;
i=45, n=16429, dic=&#123;&#39;msg_type&#39;: 1, &#39;piece&#39;: 2, &#39;total_size&#39;: 74620&#125;
piece_len=16384
sent ext_data=b&#39;\x00\x00\x00\x1b\x14\x02d8:msg_typei0e5:piecei3ee&#39;
msg_len=16431, id=20
ext_id=1
recv=b&#39;d8:msg_typei1e5:piecei3e10:total_sizei74620eeN\x9c\xe7\xdd\xf2^\xd7x2`.\xaa\xc7\xb6v\xde\&#39;p$\x1c\xf1 \x0e\xaa\xd2iN\xcd\xe1Q\x01^x\xb9\xc3\xb5\x1e\x84\xd6f7\xf4\xb8f\x13\xa9\xde\xe7M\xd0\x95\x84&gt;\x05\xee&#125;\xe7c&gt;e\xccj\x01\x93\x05\x04*D\xc0U\x00\xcc\xa2\xb7&amp;t\xf5\xde0\xed\xa7J2\xc3n\x1a\x88T`9:\r[\xb0\x8dY\x9fz\xa6z\xb0\xa2\x9b\xd4\xdb\x19\xe7\x89\xd22\x9c\xa1\xb32$\xfa\xb6\xc1\x99P\x8f\xc6=\xf1\x8bu\x97\\\xb7U\xdd/4\xd9\xcb\xed\x06\xb9\xb8p\xb4$(\xa8j\xcf\x8e\xef\xb3\x81\xf8&amp;\xa6.\x10&quot;UL\xdawo\x9d\x15f\xf3\xf3\x03rc\xe4\xfaPL\xea\x83\x18\x1c\x9eA\x80\xea)x&#123;;\xf6\xaa\x81\x84\xc7\x1d\x17\x00K\xa9S\xc1I\x8d\xb2\x1ey\xc0\xe3A%\xc4\xeaC&quot;r\x90[\xb6\xd3&quot;|&#123;UC\xed\x82&lt;x\xf7\xcag\xb1\xbb\xf2L\xb0,o\x85\xa4o\xbe\xfb!c\xfd\x8eG\xfa\x95\x0bs\xca\xef\xd3\x0e\xa1_\xc4vC\xad\xa9\xb99\xff\x9cb\x14\x1d\xaa\x81\x89\xde\xdam\x10\x1f\xf6%u\xac\x0e\xb4\xad\xedlU3\x03b\x9dW\x17\t\xfe&gt;\x05!M\xf8Em\x1e:\x1b#\xbb\xf4\x90$\x16&lt;&amp;\xdaR\xb0\xa1$\x94cw\xa2\x95;(\xed~\xde\xff\x16\xd1\xedx/\xc2\xae\x1e\x8b\xb2\xabr\xf1\xd1B\x80\xd8W\xe0\xef\xef\xc5\xbau\xf4g\&#39;\x85\xb4\t\xfb\x00\xb4\x13\xf2  \xff\x7f/\x9f\xff\xcb\x9a\x9a\xb2Bv\xc8\x8d\x82\xaf\xecp8\xb5\x98f\xbb\xbd^iN\x80\xf6\t\x17vB\x18i\x0f\x11\x9e*=\x89=xi.*X\x7f;\xd1\xa9&#123;\xd7\xd2\xa0\x99\xd7\xddQ\x8d%6\x86\x97\x11\xd3Y\xbans\x01\x94\x9a\xdf\x86`\xaaK\x9e\&#39;\r\x1b\t\x19\x88\xa8N\x1f4\x81\xa2\xcb1\x0f\x02\xda/5[-8\xc5:R\xdf\x98\xd3\x93\x89\xb6\xc2\x00&lt;\xd1yvm\xac;&quot;\x1f\x9c\xab\xb8_0\xde\x0f\x02s\xb1\xdfM\t\xc2\xebb\xcft\x15t\xa8\xcd\x9c\xf5\x0fB\xc0\x8f\xd5\r[\x92\x86\x9b\x9c\x8f\x8bJ!\xdb\xd2P\xf2\xc5\xf2adjo\x82\xb5\xccB\xe4\xf5\xdf\xe7\x8e\x08\x8eQ\xd9B\xb6\xdeLADpyA\x1c\xa5\x90\x94;H\x01F\x8f\xbb\xaa\xf61jL\x81\xb6Ta9&quot;\xb2\xbf\xe22\x90\x1d\xbe6\xbf\x87\xb3mb\xab\ny-g\xa8\xe5\x16\x8fT\xe1\xaf\x13\xd3c\xe7l\x8a\x92\xd2\x1b3\xb3J!\x15&#125;HQ\xf5Ld\xe5\x8d\x9b\xf3$%\xb1\xfb\xf8\xd1\xbeU\xedx\xb7saj\xb7\xadK\xc7\xa9\x7f\xecj\xd5\x92\\\x10\xf7\xd7\xe0\xef\x0f\x9cm\\i\xc7&quot;\xad\xbc\xba%\\\xcb\xa6\xed\xee\xd4\xb8\x9e\x90\x98\xd0\xb8\xc0\\\xe4bG\xf7\xe6\xcc:\xd3\x96\xba\&#39;\x83&lt;\xbd\xe0\xba5=[j\xc4\xdc\x18a\x8d\x163\xba\x86\xf5\xbf\xfbW|\xb1\x14[u-\xa5\xde\xed\x1dM\x10\xdby\xbc\xb5\xa4\xa5\x96\x80a\xb94\x8d\x12b\xe4\x97\xb7\xf6\xac\x8d\x0b\xbe\xfe\xd7\xf7I\x98\xd6\xe7\x1bM~\xa0\x01\xa6\x1cY\xf3w|\xf9-=W&quot;\xb6\x1bl\xa2\xe2=\xcb\x05\x15#&quot;3\xb0%6\n;\x93\x8d\x9er\x94\xb94\x81=v\x14\xd0u\xb6&amp;\xe4=v\x11U\xb7j\xee\x15i|\xe8v\r\x12\x90M\xf6\xff\xda\xcb\xbe&quot;\x87U\x90-7?\x14\xd1S\xb9\xc2\xbad\x89M\x19\x0b\xc9\x03\xe6\xc0&amp;\xe9\xa9s\xfb\x01\x0f\x1c\xd0&quot;\xb7fP\xa2\xe6I[\xa91\xbbf\x04\xf4\xdcB\\\x01`\x08*y#xu\xa2\x7f\x9b\x08r\x9fD\xb2\x9a0+\xb1\xb6c\x85\xb9y\xe5\t\xf2T.|v\xbf\xae\xb6\xc2P%\xbeQ\xc0\x1a\xfe[\x80\x04\xbf\xa8\x04DY=;J\x970mm,\x18\xa8\x98y\\H\xe1/)\xe2L\x8f\x8f\xf1\xa9\x89\xc86\x92\xe0\xf4\x91\x853\xee\xc0&lt;\x83&#125;\xe8\xf1\xe3\x13\x11\x98\x03\xe3\xd3bi\x0f\xb6\x15\x0e\xfde,tm-\xf2q\xd3\x89\xda#O0\xf2\x85\xd2\xb0\xca|@)\xe3\&#39;\x03\xdf\x83\x1c\x7f\x12\xbd\xa0s\xce4\xd0\xae*\xe4\xba\xe4U\x8bc\xf0\xf7\xfb]\xf9\xb4\x15\xf5\x80T\x0b/\xdd\x84(K\xd9m\xc6r\xec?@\r\x18=3aa\x10I\xf5\x9f\x1c\x8c\x10&#123;&gt;\xd1\xd5\xfb\xcc\xc5\xbfUQTZ\x12w\x97\xf9&lt;\x9dr\xba\x91\xe1\xa8[etHxm1\x97kF&lt;\x9dn\xa4Z\xb6\xddO\xac\x81\xbe\xb6|\x9d\xf5\xe7\xfe\xdd\xba\\4&gt;\xa2\xf2S\xc1\xefDe\x86\xc7\xf8\xd3\xa7i\xdeh\xa5\xae\xb8\xaa\xfeH\x90\xfd\xa3]L\xa3,\x0b\xa6-IQ\xd0\xe5\xdd\xc8\xf6\xe3\x89\xdf\xb6\x1c\x16\xa3g[\x96rMQ]\xc5+V\x81\xe8\xd2U&#125;\xf8&#125;\xe6\xbeP\xedfl\xfa\xde\xc5H\x1d\x1d\x8eb\x9a9,-\xdf\xa4\x8cM8\xbf\xa691\xa3g\x99p|&lt;\xc9\xd7\xe7\xe4\x15\xb0\x9aTf\x7f\x99m&gt;.\xd0\x0c\xd1\xa8\x86&amp;P\x86\xb7F\x86\x9a\n\xd0\xce\x86\xf2O\xb1\xcbw\xf3\x00P%\x18\x97H\x88?\xa3\xe9\xed\xc7\xa0k\xe4\x949w\&#39;\x0bk\xf5R\xec:#\xd2\x04\xc7@\x9e\xde.\xf7\x95g/\xbf\x18&quot;\xb5\xe1.\xb8\x1et\xe8\xd9t\x97\xeaWpM\x05\xcdW\x139(\x89~W+\xbd\x96f(\x89_5\x11&quot;.~!\xb4 \xa3\x18\xb09j\xb2\xf3a\xa4Q\x88\x8f\xad\xc6\t(,5\xb8d\xd8a\x0f\xb4\xb0iVp\xf7Z\x91\x19\xc8&lt;\t)\xd4j=\x83xB:\xa0\x08\x99\xad\x9e\xfc\xf8\xb1\t\x93\x8d\xa3\xd1\x1a\x8c\xe1^ve\x99\xd9\xe7\xa8\xedC\xea\xc7\x824\x95)E\xecE\x9f\x08\x0e2\xc6R\xbc\xb2\x9f\x97\xe1\x9ao.W\x07pKg&#123;^\xbf\x98%\xe0f\x18\x1c\x1ep\xf0\xcc\xdd\x97\xb7\xf2\x1b\x97\x87P\r\xc3\xb5zQ\x1dd$0e\x16\xb7\n\xb5\x80\xc4\xc8^\x98w\xd6\xba\x8bvz\xb0\x9a\x9d?N3\xf1\x08\xd5\x0b$\xf3\xe6$\xb3&#125;\xdf&#123;&gt;\x8b\x96my\xf8\x99\x1c\x1b\x9f&gt;\\\xd5p\xc2\xde\xff\xcc\xe4,\xad\x0f\x11\x9c?\xb8,\x8d!\x91\x11\xaf\xc3\x16Z\&#39;KE\xfb\x072\x004\x18\xf5sR[\xa2\xc4l\x9738\x8c\xf6\x9c\x01\xfe\xcd\\\x8b\xc3&lt;\xe6\x1e\x84\x0c@\xd6\x1b\x8f\x1fy!@T|4\xbdy\xac\xd7\x04h\x92\x11H\x02\xa4\xbfz\xe2C\xfca\n\xadX\xc4\x1ac\x1f\x1a\&#39;\x84\xbf&#125;?b\xaa\xedG\xb4\xcd\xd9\x81pgx\xb4\xfa]\xcd\x92O\xbe\xaf\x89`v\x80.\t\x95k\x91v\xe9x\x01\xe2\xe8B\x8d]\xf3&amp;Ah\x0f\x16\xc3\x1fc\xe1\xab\x05\xb5\xd0~c)3\x96\xc1\x1a\x15\xfc\x9c\x08(&#125;\xb3\x14\x174)\x9fX\x1e \xf5\xd3k\x8aOy$\x7f\x80\xd0H\x17\xf4fo\xb2\xad\x84M`\xb5R\xbd\xa8w\x8f\x0fY\xb1\xda+\x9bQ\x9d\xaa\xba\xd8\xbc\xb7A\xee\x15x\xc9\xdf\xcb\x98)2\xb9q\x08N\xea\xbeq\xd85\xd5W3\x0f\xdbk\x80\xdf\xe9\xd7V\xf4\x92I\xbc\xa4\\:\xeb\r\xad\xa61\xac`~\x9d\x87\x0e`\xc1&lt;\x1c\xc9\x1bK\xbf\xc5*\xa5\x1f\x116d\xf0\xf1\x80#)S\xb4a\xca\x87\xfa5N\xb2\xb1Y`\x00\xf4&gt;\x1f\x97\xfc\xb5@\x93vC\x97\x8c\x92\x14\xed3\x15\xaf\x11,\xcdZ\x9d[\xfc\x06\xa7Gej\xed\xb8\n&#125;&amp;LVh3\x9d/\x91\xb4\x9b_\xfc\xf3wWyF\x95\x02\x9c0\xcc\x9bX\xeb\xe0:|2\xf7cR_\x9d\xa6\xc7&lt;\xd4\xf2\xc9\t\xcc\x04~WC\x9a\xe1\xcc\xec\x8b$\xac\x1f\xf4)~\x81@\xf2\xfct\xe2Z^/5\xd7\xea\xf8&quot;x\xbc\xfa\xdf\x11T\x1e\xf5\xb5\x8b\x9d\xe6q\xd6&amp;&quot;h3]\xebd\xf4J\xe2k\x04\xb0\x01\x19&lt;\xb1\xd5(\xd7\x16\xd3\xedD\xb4\x97\xf3\x1eW\xd3\xfd\xdf\xc9\xe1\x1d\xe6\xe9\x1f\x84\x9c\xde\xbf\xe4$U\xb7\xa3\x19D\x82\x03\xdd&amp;\xcc\x05\x8e\xde\xe6t\x10[;\xd4\xeb\xe88\x98\r\x1e\xc5\x83\xf7A_\x10(wH\xb9\xb4\xde\xd0&lt;\xf1F\xae\&#39;\xfak\xd8\x9eG\xf9\x82\xb7\x10s\x9e\x89\xe5NI\xa6\xe7\x81\xe5G\x06\xde0\x17BP\xf0\xa7\xe0\xa5\xea\xb4\xe2\xea\x00,\x10+pV[\x02]\x1c\xf6\&#39;O6?\xb0\xad\xcf\xe34\x02C\xf1)\n\xe1\xcf\x00\xaf\xb0\xc8\xd1\x9c\xd3W\&#39;:\xb24\x1ba\xdc\xf1\xc7\\s)$J\x06Y\x1c\xb4\x9f%\xc6\xc0\x0f$\x90\x94\x9a\xc6\xa1\xda\xea\xe5W8o\xb9\xbd\x10\x19,wP\x17#\x94\xc2\xbfl\xd7=\xd4t2\xe0#6\x10\xdb5bU\xa4\xd2r\xae\x01\x92\xb1\x86\x8d\xe9\xb8\xd53#\xff\xca\xd4S\xb6wa7\x81~\xaa\xf3\xfe\xd8bls\x04DI\xa4\xb5\xa1\x85N3b\xa5\x08\xf9\x02\xd1\xf9ok_y\xad\x04\xae\x86@\xac\x97\x88\xb9]\x9a\xfe\xb6\xda\xfd\x8c\xbaH2\x15\x96\xd7X\x82*\x0f\xf8$\x88\t\x93\xdc\xc1\xfb\xb2.\x85:\&#39;\xb45il\x85\xe1\x87\xcc\x84\xb8\xd8\x8d\xb9&lt;^d\x88\x98\x16(\xe3\xd9\xaf\x9e\xdb%\x86\xca\xe7\x84Uf!\xca\xb8|gT\x95\x8dV\x93\xea\x19\xf08\xde&amp;@\xa2Z\x8ca\x9a\xd7\x02\x92\xb6\n\x00\xd5\xd4j|\x95\xbe\x9a\xcaE\xe8\xcd\x87\xcbX\xa9\xa1\x90\xdc\xc2S\xf3f\x1bN\x9b\xae3\x95\x99i\x14^\xcf^\xafj\x0b\x85\x89\x97=0\xf2\xcbi\xbd(s&lt;\x9c\xdb\xe8\x05,\x07A:T=\x85\xd8`R\xab\xd7\xbaV*\x87Ny\xc1M\xa9\xa3\xcd\xc0s\xf2\xcdw&gt;\x0f\xa6\xc4\xc5\xd8\xbdq|d\xbdYc\x96s\xf3\x95(k\x9e\xb8)M\xc1\xe1\x03\x9an\x89,\xf7e\x19D@\x18\x93\xf8A13\x87\xbc\xc9\xe1\xda0\x0e\t\x1c.\xfb\xd62\xe7u\x14\x0b\x93\xbe\xf9H\x80\xf2\x11\x8b \t\x00\xbd\xb5\xf3\x80\x8e\x8f\x8c\x85\x00r\x14id\x86Y\xa9\xb3Rh\xa9\x99\x83\x94\x02\x95Z\xa5\xd2yY\x84KJ\xf3D&quot;\xf2`$\xc1\xe6\xe4 |\xe6\x00_/\x93\x01\xa0\xbe\xa8Z\xdd#\\W\xa3\x0b\xc4\x86\x94\xe0\x1c\xbb\x87]\x93\xfd1\xa1\xe8\x96\xc5bD\xa6\x1c&amp;B~\xbaQ:\xd8\xb2\x84\xe3\x0b!\xfb&lt;\xb4\xfd\xb4i1\x89\xc9\xc7\xe18a\x88\xd8\xd7\xea\x1a\xbbV\x81\xc0\xe0\x92\x7f\x87\xcfp\xb5\xee/d;\x8f\xa4\xe5\xa9\xbf&#125;\xf4[\xa9+\xb2_&lt;\xa0\xcdw?\x1e\xf2\xff[\xfc^\x1e!\xad\xdb\x11\xf0\xda5\x86\x17\xa8\x142vE`\xb5q\xd9k&gt;\x97\xc8\xb6\xa8\x08a\x00\xbb d\x91~v\xe7\xf9T\x1b\xeb\x97\xea\x12\x8c\xe8&gt;\x8cr^\x1d\xba\xf8Q\xdc\xfa.\x93c\xfbO\x07\x1d&gt;\x84\x9b\x99z,\x17\xd0\x18\xe9\xf1\xb1\xce\xe5\xbf^C\t\r\xa4p\xbe[\xc8-\xbe\xe0\xc2\xa4\xb1\xf4\xa7\xbc8O\xb9g\xd8\x98v\xd4\x06)vI\x84\x95\xbb\xf2E\x13\xb4t\xcd\xf9_\x05/\x03\xc3\x98P\xde\x8d\x9e\xa5TJ\x7f?&lt;-\xc7\xb7\x87%\xd8t\x17\xcc\x1b\x96\x13\x88\x85\xa3\xff\xf8T\xfd\xa9\xdb\x03\x9c7dQ\xb3Q\x1b5\xf3&gt;#\xd6\x7fQ\xbd\x9d\xf6\xb1=\xc9\xba\xed|\xb1\x06\x06\x0fBO\x00\xdcn\xe3~-\xbe\x04c%\\\xb1\xbb\xf8\x84\x90+\xff\xb4\xd7\&#39;iW\xa3\xddk\x7fg\x9dj\xe7z\xc5;(\x97\xef\xe7\x04\x90\xfe&lt;;d\xfc\x8b\xcc\xb8a\x03?\xa2\xfc\x02\x08\x04a*v9\xea\x19\x1d\xe4\x91\xeb\xe6\xa0,$\xf6\xad&#125;\xf2F\xfb\xbd\xe7p\xeb[T\x94\xec\x00\xa1\xc3\x12\x077\x96\x01\x86\x9c\x98\xdfl%\x07\xf4\x11^@sk\x90\xa4R\xa4\x83&#125;J\xac\xb7M\x07z&quot;\&#39;N\xd1\xf3\x1f\x02\x91&quot;o\xa3\xe3\xa7\xbe\x08\xa8n \xd8P\x84z\xf1\x1aqsC\xb3\xb1D\xef\x15\xf8\xf8\xd5\xc8\xc3A\xb6\&#39;\xb4\x8a5]\x0b\xb0\xa9y\x86\xf4\x83\xde\xb3r\x1b8@cM\x96(\xdc\x9a7\xf6\xd4B\x18K-\xa1\xc6\x9e4D\xd9Gj_\xbf\x7f;=5\xf2 \xb3\x895\xdfC\xc3\t\x17\xdenaQ\x8e\x15\xffk\x08U\xceD\xbe\xbaTK\xf6a1\xae\xe7\xcd~\xe1K0\xbf\x1c\xd1Pg&gt;s\xf4\x86U\x89\x82\xb1&#123;\x19P\x95\x99\x8f\x87\xe6\x87\x84Q\x07R\x87&gt;\xdf\x13\xf0\xdax\xe1\xf2&gt;,\xb1\xcf\xbbj\n\x96\xacYM\x9a\xd9\xa8\xd6\xef\x93\xcb\x80\x8b\x08&#125;\x99gI\x96@\xb4\x9fQ\x13%A\x86\x84\xd7\x0f\x03\xca\xcc\t%\xcd@4P\xd3P\x1c\x1ec\x9c\x17\xa8\x1f\x81\x1e\xe23o\x10\r\x18\xea\xc3\x1bJ/\x81\x8d@8\x0c\x0e\t0[y&#123;d\xe9\xc0\xe1\xc9EMZU\xd9\xa9U\xed\xbdE\x080\x1f\x11\x8fp\x00\xbc\xc5XQil\xa7\x00\xe5\x12\xb6G\x0c\xb15Kr\xf6e\xec\x8f\x8c\xbf,+\xd1d\x86\xca\x03\xda\x84\x10\xcf\x18#\x87\xe8\xb1\xee\xaf\x81F\x92\xd1\x86\x18\x05\x07\x05\xb2p\x9c\t\x94\xcac\x7ff\x15\xd7\xa0\xcbo\xfa\xfb\xbf\xb5\x88%\xbf\tr\x87h\x06\xf0\x0f\xe8\xefm*\x90\xdb\x9a\xfcR\x89(\x19\tUt\x91\xa2R\xfe\xf0\xc1\xe4U\xc1l\x07\xad\xa53OIW\xb7N\x1d\xf3\xf2\x8f\xff\xea\xb6\xf0m\xba\xb4\xe2\x99\x93\x9b\xc4\xda\xb5n\x8b\x80\x9f\x96\xa1\xd42\x10\xf4\x9b\x88 \xe3\x10\xf4`m\x1d=\xd0\xa4\xebcfY\xadD\x02\xc0\xe8\xdf\n\x8az4C\xddp&amp;\x02\xdfi\x88 1\xa0\xf7\xb1E\xa8d,r\xa0F4g\xb3\x03\x9bX\x15\x86\xc5)d5\xa2\x89\xe3\xfc\xfc\x0fh\xa9`\xec\x16\x0bW+\xcc\xb0\xc5lI\xf34\x93l\x0b\xe8\xf0DN\x141I\xac\xe8\xf0t\xb5\x8c\xa78m\xedP\x81\x03H\xb2 j\xc7\xe2h\x9c$\xc2Q+\x1aL\x17\x0e\xfc8_HQ\x9d\x1c\xaaM\xa0~\xbcR\xf2\xb5\xedf~bn9|%0\xc2\\\xefP\xc4o-\x05\xdc\xcb\x1f\xa7\xec\xdaq\x95u\x80V\xa4G\xb2`h\xbf\x8e\xb9\xe0\xca\xcc\x81\x97\xc9\xef\xb1K\x1b\x14\x12\xbbP\x07\xb7\xa0\xbe\xda\xf71\x12\xdd\x14\xafP&amp;\xd3\xe0N\xcd\xd7\x97\x0f\xf7,\r\x8d2.\x93t\x13K\x1e&amp;\xb8\xd4\xb7\xa5C\x10\x02\xf5\xba\&#39;jhp\x8a\xd7Y\x9d\xa8\xf8WE\xf5\xddgS\x8c:\xe5OB\xed\xa6\xffs-\xc4\xfa\x8b\xa4\xd9?\x98\xe7\xe8\x87\&#39;\xc2\xf1\xa0q!\xca\x06\xd3\xb8myCG\xd7\xef\x1c~\xd6\xd4\xbf\xeb\x82\xe1\xe5&amp;\xb8e\xee&gt;\x01&lt;\xfe\x00\xba\x8a\xa0\xe1/2P\x14\x91\xccS5k\xf1.D\x99\xbc]\xdc\xa1&lt;\xf5R\xa6\xb9\xc1\x08\xcbLt\xf9m\x99\xf2\x95\xd4:h\xdf_\xd7\x84[\xfb\x84\xcb\r\x96\xd1C4\tl\xcf\xf6\x13l$\x98\xa1&gt;\x84\x1a\x16,\xb8%Ui0aR\x97^-\\\x9f)\x12\xf6\x0e\xd6\x8f\x10\x9e\xab\x8e\xbb\xbcP\xfao\x9d)\x11\xa2\x8evoGv\x88E\xadI\xcd\x84\xe3\xac\xa5q0\xd8\x12\xf1;\x8f\x9e\xfc\xef&gt;\xd2\x9a\xb8\xfb\x90wE\x16F\xd3\xf9\x07\x1bl\xc9D\xf3?\xd4p\xd6\x10K\nxy?\x80(\x19\x87\xa3\xb0\xd8#\x89\xeb$\x8f:\x16\xcchY\x1a\xa5k\x0e\xa0N4B\xf9\xf0\x16|)\xc5\x9a\xfe\xd3.\xc1\xec~\xca\xa3\xe8n\xbf\xef\xe8\xe5\x82\xfc%(\x12\xc8\n\xc6\x82\xec\xe7\x9b\xd0H\x1a\xfc\x16\xad|A\xe0\x9f\xd9T\x89\x15\xe9\xc1\xbe\xca\x89\xf1~&gt;9\x93d\xd4\xa2\xb6m\x86\xb4\x80Y./I\xf9\xcb\xc8\x89\x95wI\x9d\xbd\x8e\xf0\x0b\x81&lt;t\xbc_\x9f\xaa\xd4h\x1d?\n\xab\x01\x80+(u\xc4\x87\xb3n\xcchP\xec\xbe\xb3\xc83\x94\xd3\x004rw\r&amp;\xab\x91\x8a\r\x07y\xc3\xd9\xbb\xa14\xdaX\xca\\\x82%zb\x13\xe4n&quot;\xa5\xeap\xdb\xdc\xdfER\xc3\xa9p\x15k\xd4\xfbg\x8f\xf0\x8b\x08a\xb1)\xda;A\x18\xf0Y\x19\xff\xcd\xe56N &amp;\xe2e\xd6\xdf\xea\xb1l\xeae\xa7\xfd\xf0\x89\xde\xd4\x82\x9fNMQ_\xebP\xae\x9b\xca\xbd\xb5\xea^L\xe2\xb4\x92\xd6g\x88KDj\x91,\x06\xda\xdbK\xc6%\xc5W\&#39;\x91^\x9e]\x91\x85\t7) V\x95\x83^\x93\r\xd15]V\xa3\xb0\x97\x9b4\xf2\x9ez\xbf\r\xb5\x9d\xe0\x8c_\xe9F\x07\xf5\xb6\x8fE:\xe3\xb0\xe3jl\xa7\x07\xf8\x8e\xab\x83\x8e\xb5E$\x82Y\x1d\xa6\xe2\xd9\x05-\xc4\xec-\xb1\x83J\x80jkm*\xbd\x18\xb8\xc5\xb9\xfc\x0e\x91\xe8tq\r\xda*\xaa\x9b\xba\x83\x04\x16\x01\xf3~\x88P_\x88DR\xc6t\x03\x0e&gt;[\xd9\xdfU\xef\x18\x02\xb2v@G\xc4Y\xf4\xf3j\x97t\xcf\r\xcdQ~j\xd1\xcf\x9e\n\x19\xb9AhL_;\x8d\xc9D\x9dg\xc9\x03\xc6\x1c\x8a\xb4\x8c3\xff-?\xe9\x16\x89M\x1cc|j1\x9ai\x8b\x0f\x1f\xee\x1fP\xd4\x05\xe3\xaa\niT\xb6\xa0\x19\x82p5\xbeK\x86o\x87\x0c\x08\x8a\xd9q\x10\x03\xa9[\xa5q\xba\xbd_j\xf11\xa5\xcdU^\xc6\x17\xa3)E\xa3\x8d\xd2\x07\xff\xbd&amp;\xc5&lt;z\xe7\xc6\xa4MT\xeaQ!\xd8\xe1&#123;\xa4;R\x07\xc2\x0bl@\xe7\x87\x05?ec9]\xb6y&amp;\x04\xa3\\\xdfM\x03J\xdafL\xaf\xe8\xe2h\xadt\xe4\x92\xa1\xb38\x06\xeem&amp;\xee\xa7H\x909-\x06a\x8f\xa3\xe3K\xbf\xfe\x86\x1e8\xf3]\xb4\x1b\xb3\xcf\xcc&#125;\xef\xdb3|\x8am\x1e\xe0\xe9\t\xe8\x84BK2\x90\xec\xbbz]@OAb\xe0`\xce\xa9\xd5f3\x9c\xc7\xad?)\xc7_\x9e\x10\xdc\xa8\xac\x04l\x02:u\x08\xa2\xa1\x11# \x08m\xd1\xfd&lt;uu?\&#39;rw6\x8d\xf4]\xea$\xd7\xfc\x04\xedh$\x832\xe8W\xdf\xfd\x99\x01\xab\x96\xa2&quot;,\xba\xe8d\x97)\xc93&quot;\x02\xdb\xac\xa8\x9du\x1a\xec\x04\x01L3r\x91\x06\xd9\xf2U\xd5;\xd7\xfb\x8eFV\x11\x99\x96\xc2\xb2\x0cQ\x0c\xdb\xc6\x18\x08X&#125;\x82\xb2\x1c\xed\t`(\xfe\x7f]\\\xb83HE\xfc\x05\xb8HZ\x03\xba\xde\xd4K~\x95U\x1fd\xa4\x01\xdeeQ\xc7\xba\xae\xd9\x96\xf5s\xb7\xa7t\xd3Vl\xf4\x01?Q\xaaB\xa8\x10rF\\\x02X\xff^j\xd6L\xedx\&#39;\xe9$\xa2\xe1/\xaeo\xf1i\xc7\xd1\x0c\xdb\n\x13;\xce(\xd5C]\x00vAnA\xba\xd1DT\xe9kNt\xcf\x07\xf8\x89\xc6\xd2\x9a\x1f2\xc3VO5\x16\xb4\xde\xe6T\x1c\xb5&lt;\xd4\x9d\xc5T1\xd2\x8bNP\xcd_\xb7\xeb\x1b\x03\x18o\xb4[`c\xb0-k\x91\xf4\xf1\xaa\xe5\xb8e\x80\x00\x1a\x98[L\xc9-\x96\xd8F\xf4\x87\x1azy=oc\xeb\xaa\xae\x1e;N\xbe\x8bV\xdak&amp;\x94\xb4_V\xab\xf1\xeb\x0cB\xdaU\xb2\xa0D!\xc6qG\xc6\x9f\xea\xe2\x90\xde\xe9\x08\xfe\x9a\xfd\xb2\xbd\xd1\xa8BQ\x8b\xb4\x0c\xed$\x11\x90E\xfdBB\x8a\xd5%p\x0e\tr\x8a\xcf\x83\x8b\xb5\x04\x88&lt;\x8a\\[a\xe0\xc5\xefwNN\xce\xf1\xa6\xd9\x17\x06\xe7H\x94F\x97\x1c\x03\x1bR_kr0\xae\xc1Qt\xc59R\tF\xbf-\xe1/V+\x9b\x1c\xc2\xb9\xeb5R!\x8amV==\xc9\x076l\xb4,\xd6\xcb\xa7[^\xfe\xde\x96\x8c\xee\x82\x17\xff\x0c\x18n\xf4$\xa8ap\x8bD\x8a\xe8\xf8\x17\x85a\x80\xee_r\x0bl\xcfw.\xfd\x95H\xb4I1)\x9585\xd0\xa1)\x07K(\xf2?t\xaa\x1e,P\xb2\xbeg\xa5\x08\xe9\x95\x80\xfay&amp;\xd4\x1c\xa4\xfc\x8d\xf9\xbcU\\d\xa4\\\x8b\xc0\x13\xfbo\xce\xa9w\x8a\xb4S\xa4\x00\x80\xeaH\xc6\xd9)\xfbZN ?O\x07*%\xa2wLG\xe0&lt;\xcd\xc4\xee\xc0\xc9\xdb\xb4\x00\x04FPt\xba\x1a\xd2\x149\xdd\x8b\xcft\x07\xe7\xfa\xa4\xc42\x14\xe9\xf5\x99\x1f\x11\xd1\x92S\xc2C\xc3\x81\x8a\xe1\x05\x04z\xb9\xb5.3\xd6\x02\x1b%[M#\x1a\\\xde\x14\xe60\x8e;\x02\xe5;\x9c\xa1oZ\x84J\xfa\x82\x1c&gt;\x0b7k^\x01G\x1b\xb2\x1a\x89\xaf\x0e@&lt;\xbd\x7f\xb1&lt;4\x0ew6\x17\x97\x82M\x15WZ\xd0$\xd6@\x13\x82\xb1\xfa4\xd8\x06&#123;7\x81s\xb0n\xc41\xc6\xec\x9f\x0fCY\x1f\xd9\xd66\x1fu_\n\xb6&quot;\xfa\x0e\xeb9\xb1\xb9\x83\xe4\xfe\xa9\xd5&gt;&quot;G\x0e\xba\xf3\xbc\xe3\x8f^\xb3\x9aX\x9dH4\x85\x93\xaa\xef\x86`\x15&amp;\xf3\x8f \x9dJ&amp;o\x80\xe3\xa6\x92\x9b&#123;\xa0d^0\xbe\xa1\x8dT\xf8oC\xc6=\x0ee\x10\xccj\x82\xc0Y\xb8Z\xda\x90\xe9\x98~\x82bS:\x18\xa4\x14W\x88:\x017\xbb\x8dl\x9c\xb7[I\x9cJ\&#39;2\x94\xffe\x96\xa9\x1bw\xf7\x05`\xa1\xd7\xa5\x10\x82dd\\&lt;@\xb5T\x89y\x8f/\x90\xda\x1d\xd7m\x80G2\x8bN\x99\x08@)j\x1c\x9a\xd5\x01\x08\xb1\x9fs^\xda\x03\xde0\x15\xe7\x84\x1c]\xf7\x1f\xde\xaf&lt;\xde\x7f\xd8\x99\xe7#\x8f\x94\xf6X\xa6\xff\x97\x1bg\x10\x96\xda\x1aS!\xb7)\x14\x0f\xab bg\xde\r\xf9\x07\xe4z\xd7L\xfe\xc2\xe8\xe8h|\xa3\xe2\xbb^7\x16\xc3(\x07\xaa\x01\x7f\xb1\x98Y\nC\xbd\xb5\x9c&lt;e\xed\x1c\xe9+\xa6\x93T@\&#39;pLV\xd9~\xc4&lt;-\xa6\\&#123;\xba\x0f\xab\xff\x03\x02O*\xea\x88\xb2\x7f&#123;H\xaeq\x81s\xca\x1f\xda\xfbp\x00\xca\x17\x8f\xb6B\xcf\x92\x9c\x96&#125;\xdf\xcd\xbd\xa0X\xb4\xa8\xee\x0e&amp;\xd7\x127\xe9~\xeba\xf3\x88+ml)*\xd1\x9a4\xe5\x9b\x0e\x11H,\xc56\xd9-\x93\&#39;\xf6_\x80\xdbE\xecA\x9e\x96\\\xc8\xa6\x9ep\xaea\xda\xd6\xcaY\xaa\x1c\xe8\x82f\x91\x96;?\xff2\x92]\x8c\x8d\xcc0\xaf]1\x7f\x920\x1d%\x11\xb2\x17\xdc#\x04\x94\xd88\x955\xb1\xe4\xce\x1cq-[\xd81\xe1#I\xa89\xef\xe3\xc9\x15\xcf2\xb3Qc\xe0\x1f\xff\x88\x171\x9e\xd8d\xcaU\xd0!D\xe6\x89S2x\xf2n\x97\x16\xa8\xf0\x02\xdeQ\xe4c\t+\xff\xcc\x90\xacv\x15\x96\xd4\x85M\x8c\xe7F\x02\xb6sP\xdb\xf5\xb5\xaf\xa5F\x92\xab\xae\x89]\xb6\x02\xf1\xce\xf3\x90\x9dK\xf0\xfc\r\xdf\xb9\x0c\xaff\xc6\x91\x8d\xc7\xc8U\x1c\x8e\x9bZS\x01\xc4\xbc\xd1J*\xaf\x98\xe6S&amp;\x9f/\x9f*&amp;\xfb\x1a\xc1\xdfFZ*P\xab\xac\x87/\xe3\x1d\xa1\xb9\xf8\xd0S\x94\xa1&#123;\xb6@\xfb\\L\xf0\xc0\xa6\xc8\xec\x15\x8dy4_X\x1dRH,Q\xfe\x88\x8cU\x8a\xab\xb6\xe2\xea\x8f\x94\x0c\x17\xabw\xd4\x11k\&#39;Ya\xf1\xbd\xdb_\xcf\x16\xe3@\xb4\xec\xf0\xa6J\x1a%\xe0NR\x0c:z\&#39;&quot;n\x85\xc4\x17I\x94A\x8e\x19&lt;L\x94\x1a\x1b[\xdd\x1b]&#125;3w\x838\xd6gg\xcc\x1c\xd5\xdb\xc2\xe4\x04\xb8\xf1\xbd\xa2Q\x86\xe4RC\x00j\xcc\x94\xfepK\x02\xd6\xb8\xfeJa\xf3\xa8~\xc9&quot;=\x07\x8c\xc9\xa8(\x88\x88\x156\xa9s\x19n\x15L\x8b\x88\x04\xc3!Ll\x93\xed\x99Xb|]g=\xf8\x9cd\x8b\xf2g&lt;\x81\x1d\xd4\&#39;\xa2\xb9\x81W*\x17\xc0\xc3L\t\x13\xbbJ\&#39;\x06\xfc\x9f\xdeW\x100y\xe6\xed=\xfe\x8a|\xeb\xb2\x17\x7fG\x84\x9fC\xdf\xa4\&#39;\xc9\x80\x9e\xaf\xf8\x9d\xb1\xda\xdc\x9a\xf8Z\xefH~\xc3\x98\xd6\xe6\x1f\xc2\x0f\xa2\x8f9I\x11\xf9\x7f\x93\xaf\x14\x82U\xca\x98\t\xac\x80\xe9\xe2]\x9d&quot;\x1c\x14\ndB;\xd5\xdb34 0\xb2\xed\xb6A9\xf28\xc9\xbf\x1c\xcb\xaf\xe9\xd09\x08V\xf0\x1e\x07\xa4\xe0\xce\x01\x08o3\xe5\xe7\xc3\xcd\t\x83$*\xa1\xcc\xe4\x07\xdc\x11Q\x91\xe92&gt;\xecm\xdf\xe0N\xc5\x03&amp;\xd0\xb5\xb3\x97\xf9\xb1\x9a&lt;\xf8\x12i6\xdb\xaa\xfbgM\xd6\x0c\xa5\xbbn\xbcm\xa1\xa2\xadi\x82\x9f\xc3\xe4\xe0\xeeU?\xdbF\xdc*[\x02\x85\xf1\x94\xb8|\xd2[9 t\xd0\x15\xf6znb\xcd\xd5H\xcdSr\x8d@\xdd\xfbn\x0e\n\x90t5\xba\x00\xd8\x1a\x06\x15\xa6`=\xc8*:\xe5\xf4\xfa4&#125;\xa6\xe7\x122\xce7\rx\xb9#\xab\xb8\x94\x8e[\xd8^\xe5C\x025pVc\xbf\x87\x80\xf0\xd5P\x05\xdd\xbb(\x97\xfb\xb9\xa7\x17\x85\xe4Q&quot;\xc4\xd5%\xb4`\x89\xec\x13\xdai\xb6\x06\xb8a\xb0\xc7\xa5\x8f\x16e\xf1\x1c\xbam\x92\x82]\xa4x\xa0_Cd*\xcb=c\x90\xc0y\x16\xd6\xce\xdf\xa3a3w5\xd5\xf7P\xebw\x8631\xbe\xcb\x91\x9d\xceM?\xa6+\xf1~\xe0g\xca8oJ\x8c&lt;\xe6\xc9\x044\x99\xd6\x9c\t\xdf\xdc\x9fv\xe6Q\xf3\x18l?q]\x81\x7f]\x9f\xbf\xccq\x84\xefehf\xa0\x82\x87\x11*\xf3,\xc4:\xabm\xd9\x95\xdc\xa7\x19P\xa5c\xfa\x94\xbed\xd8\x15\x1f\xa2\x00\xe5?\xb6xw\r\xee\x01`\xfd\x93\xbf\xd2\xc3\x9e\xeb\xfe\xe7\xbb\x17k\x87E\x954q\x14w\x9eH\x98`t\x8fs\xf2\xb6)\xda\x85,qy\x1eS\xac~J!\xdf+\xd1\x8eX\xff\x98\xc5F\x1a&quot;\xca\x8e\xc6\x13\x0bG\xb9\x95*o\xc2_\xdc\xfc\xc6\xe2\xb5\x83\xf4\x9a\xec\xf7=&#123;\x97\xee&gt;\x96\x872zR\xf6\x89\xff\xb6\x87\xbc\xa3\x9a2\xe5\xf5\x17\x1a\&#39;\xd6+\x86Z\xbf\xbc\xcf3\x8e\x1b\r\x81\x9b3\xc5i\x96\xb0Vs\x82\x0ew`\x94\xfa5\x90V\x1d\xf4\xad\x02\xf3\x89\xdb\x00QC\xfa\xb3\x8a(\xdd\xac\xd5\x18\xe4\xf11\x87\xd7\\\x841O\xbfw\xde#\xd4\t\xb7w\xf0\x197f\xf7\xab`\xb2\x02&#123;\x19&gt;\x1f/v\x87=Q=\xa3\x1bkL\x0e\x92\xa6\x92\xa7\xbcJ\x0c\x8f\xd9To\xf6c\x92\xe5\xb8\xd1\xcev\tUa)\x91\xba\x05k\xb0\xbd\xfep\xb0g\x88oZ\xaex\t!mo\x91c\xde\xb6g\x04e\xc7u\xebZ&lt;\xd9D\xf85A\x1fN\x10T\xe3:\xa2tg\xf7T\xc87\x7f\xd1\x05\xf3\x11&quot;\xc7a\xab\x89\xeb\xc8v\xa4 \xf9\x04\x07v`\xc1R\x93\xc7\xc8f?\xd8\xf9\x044\x84\x95\x83#\xcbG$\xb5\xc9n\xad\x85(\x0b~o\x0c9\xddd-P\x05X.\x91\x82[L\x95\xf6\xbf\xbb\xd5oA\xcaM\x92\x0b\xa2\xf0\x17&lt;P\x04\x03!\xb0\x10p#\x80\xc2\xbe\xf3\xe4\x03\xe3\x8cE&quot;\xd8R\x12\x98j\xee\xab\x05\xcd\xdaSx\x11i\x83\xcd\xa7K\x02\x91\xfe\x0cz\xca\xad\xc3\x90/\xa6S\xc3\x8eV\xea\x80\xfa\xa6\x15Q\xb4\x84\xbe\x12\xcc\xe3\xa7\x82!\x8a\xff\xd8I\x7f\xcdk\\3\xf4\x06\xb1\x0c\x15Z\xb0\xcd\x00\x04\xc5\xf3\xf4C\x9d\x02\x1d\xf8p\xf6\x14V\xfd\xfd\x1a\x9d\xef\xb0\xc5\xc3\xea\x95\xa7:3\x86%uO\xf6\xdc\xaf*\xe66\x84QmY\x1e\xf0\x82wX\x1c\xfa\xfb\x16r\xadz\xdb\xc9-\t\xda\xee,\xfd\x1bv\xa8\x1c\x00\xe1\x98H\x0f\x85\xf8\n]\xc6\x07\xad4\xfb\x88,A\xf0\xfeeH\xd2w\xe65\xe9\x94\xb5\&#39;\xbb`[\x96\xbc\x7f\xf7\x8bLqh\&#39;\xb6\x0184j]\x0e\xb4\xeb\xc2\x99\x86\x922\x9c\xabJ\xa7\x87\xe1\x8c\xdb\xea[\xefM\x18\t@\xb0\x03\xd2R\x15os\x8d(G1E\xef\xf6z#\xb6\xea\xc9\xbc\x91\x1e\x142\x19\xb39&quot;\xab\x02\\\x80\xd1\x87\x8c0\xeb\xd0\xfa\xc5\xd0kTQK\xe5\xd6\xe0\xff\x8d@&#125;\xec\xaa0\x13\x0f$\xd5r=\x87d\xe8\xbdJ\xd8\x17\xa2&quot;\x15\x82\xa8f7gK\x00\xa6\xa1&quot;\x82bo\xa6\xb9\xbdZ\x86\x85X\xb0\xc0\xf6\x12W^\x19]W\x89 s%\xf9\xc0M\x90\xdc\xb2\x9f.\xb2\x06\x17\x80\x99~\x0f\x18\xeaQt\xfb\x9fH\x9d\xdcaSF1\xe3Y\n\x9b\xf5\xe7\xd7C\xc8\x1dp\x88L\xd5I\xb2\xac\xfb\xafN\x97+?\n\x0c\xc1\x88\xfd\xdc\xdb\x1c\xba\xd3\xbf\xbbMj7\xab\x92WZK)\xaa\x0c?Y\\O\xc7\xaa\x1b\xaf\xf9\xae\xb8\xecU\xd6\xa7\x10\x1dt\x1byAG\x1d\xf6\x16\xca\xf7\xe2CCmh\xc3\x14*\xef]\x0fj_\x12\xbe\x15ry\xbd\xf5\xad\xce\x17\xa2^\xc7=\xfc\x8b]\xc7\x8a?\xef.\xa7\xea\xc4iG\xbc\x9e\xe7\x1e\x04\x06uX\xfe\xf0\xdb\xc7\x83;\x1e\\\x06\xf5~\xd0\xeaA(\xb8\x9b\xd7\x04\x86\xdb\x92j\xdc\xdb\xae\x89\x02\x03\xf0\xa7w\x17\x07\xbd!/6\x90\r%%\x1f\xe2\x1b&amp;\x7f&#123;\xed\xac\x1d&quot;\x98@(\x84\xe7\xaa\x8f\x05\xbd\xaa\x8azV&gt;X\x80\x0f56\x9a\xbd\x17\xf6\x8a\x10R\x05\xca\xe1aIR]\xad\xd2\x11)+t\x84\xe8\x90\x83Z\x85$\xb3\x89\x8f\x9e\x16\x05\&#39;\x86\xa7\x086\xfe\xacE\xd8\x85\xe0\xf7r\xa8\x07i\x07\xb1\x94\xfb\xb4\xeb\xbbt&#125;\xf2\xdaT\xdbA\xa2\x9a\x13\xa6\xb8\x05G\x83[\xde\xd9Ak\x08G8\x99\xdd\xb7\x95\xca|\x0c\xd8h\xa7\x9cV\xe4\x97p\xd4/\xd8\xaa\x0b\xdd\xee\xf2\x14\xd2\xe2s\x11\xe9K!\x197\x94\x1a\xda\xf9\x8d_\xa1\x16\xde\xbcg&#125;\xd4\x95\xbd+\xae\x83c\x07/~\xcc\xf1\xaa\xb6\x12\xcc\xa1=gI/\xe7\xdb\n4\xbe\xfa\xdb\xbd(\x92\x92\x0b\xaa/\x1b\xe7\xf7\xac\xf6tH\x01t|\xfdh\x18\xfcY6\x05+A]\xe9\xfb\xb9\xb98\xfb\xc4\xf5p\n\x1f\x9eS\x11c\xb8O\xf2\x92\xe2\xe4\xba\xfbWd\xfc\xa6\xee\xbe\xc2l\xd7\x93*\x0b\x12D\x82`\xf5\x8f\xa6\x8dV\xd5\xa9\xe6\x08\xa9\xeb\xdf\x9c\xac\x83\xbf\x91\x8f~\xd8\x9e\xde!6\xe2\xaeTh\x0b\xe7\xe8\xa3\x8d\x17XZIRi\xd7\x1e\xa5\x02\x1e!\xd9\x81\xfcu\x1b\xbd5\xbb[\x98\x16\x94\xae\xcb\x08?q\x8e\xb9!\x08\xce\xa7\xd2\xf8nn\xc0t\x16\x12$]&quot;.k\xd4\xc5x\xcci\x8dbw\x1c\x9a\x1d\x8d\xe3\x13\xa2H$\xdaS\xd3\xd6\xadn\xfd\xc4\xe4\x8e\xcf5\xe8Y5,B5\xb9Z\x7fjM\xd5K\xd8\xa4\xe8\x19/\xd7\xc3&quot;\xe3\xc9\xdd\xb9\x98\xbca\x8a\xc7\xc1\xae[a\x05*\xf7d\xed\xdc\r\xccN&lt;\xbaw\xd4~&#125;\xadd\x1d1 \xf9\x12\x1b\xe6\x02[+l94\xa5\xa8\xcc\xfd\x19\x04\xd0\x0c\x1bv\x94\xe9\xc9&amp;\x9e\xc1@\x96\xa5\tZoI-\x97\x98=\x95\xfb\xee\xbf$v\xcb\xb1\xecQ\xe8\xafx,A%t\x8aA\x19&#125;N\xbe\xcbF;1\x14A\x1anS\x0b\x01@\xd8\x12\\\x00\x92\x07\xea\xfd\x9b&amp;\t\xb9!o\xf2\x00[\xf0\xc0\x8d+\x0b\xb3JZ\xde\x05\x02\xcbN!\xb8\x1d\n\xe4alkF\xd86Yip\xc63\x02=\x0f\xe9\x1c\x8e\xba\xa3&quot;\xc6\r\x9a\xaf\x8c\x99\x1bT\xf9\xb2\xe6\x86\x97\xe2%\x96\x93\x94\x9b\xfc3\xcc\xbb&#123;\x17\xcc9\xae\xa0\xc9y\xc2\xd4\xb0\x11\xc5\x9b\xc9%\x8b5Z\xa2S(a-\xe4\x984f\xca^\xd4\xf9_VjQ\xa6]\xd4\x18\xfb$&lt;\x1e\x19\x95l\xe7\x07\xd5&#123;\xfe\x82\x9a\xc2\xa2\x0f5\xc2\xd8.\x1d\x10\x02\x83\xa0\x90\xb4\x1a\xb0X\xdb8\xd3&lt;\xca\xc6^$7\x85\xa4\x1a\xb7\xb8d\xd7;\x07\xf0\xf1e\xc8\x96\xd5&#125;\x05\xfeiB\xe29\xb8&lt;\x1a+\xa5\xfb\x95&#125;\x82\x93Y\xc9\xc4\xe4\x93\r\xc3H;0.\xcd\xfe%\xa2+R\xfasf\xf0\x1d \xfb\x18\xdcN\x17$\x9d\x04\xd8\xdd+\xc0!U\xf1\xd2\xd1\x16\xe3I\x1bU&#123;\xec\xe9\xb8\xceVL\x9b\x9fi\x9d\x92\xebb\x05\x13J\x95\x16e\x08\xa34\xa8\x1f\xd3\xd2\xfcS`\x17F&amp;\xc3\xa3\x0e\xf3hT\xe8\xbbC\x9d\xed\xaf\xdd\x1eD\xd1p\x85\xb7\xff\x1bX\x9f\x1c\xea\xdc\xc8\x9c\x85\xb8\x1f\x19\xc9\xe8\x94~\x95K1\xfa\x94\xae\xa2\xd2\xc5\xc9`\xc7\x80\x7fC\x8d\xf0\xf0\xd1&lt;\xb8\xa1\xf1\x05\x03\xec\x00\xb8\x1bP\n\r\x15\xecX\x89a\x8b\xa9\xc9\x7f\xdc\xc2\xe9%M!\xe2\xa5\xe7\xc5^\x07O\xcdn%*L\xa28\xa1\xa1\x82\xe2\x7fT\xd0b&#125;\xd3/\xc8\xd9\x95~\x12F\x81\xd6)\x19\xcd\xf1\x13\xbf\xd0\x94\x89\xf2\xf9&#125;\x1c\xca\x93%;\x13\xd8;+k\x89%\x16c\xa8\x06\xca\xf6\xb2\x97*/\xb3X\xdb`\xb0\x8b\xf6\x01\x16\x0b\xd5\xcf\xe3f\xfb\x82\xf5D\x8d\xbd\xd5&gt;9\xa6Z\xeb\xbe\x9f\xd3L\xa0fM\x17\xd9n\xd0\xeb\x08\x06G\xfc\xa5\x07nF)\x9dH\x01YGk\x96\xd8\xeb\xe8\x158\x86u\x17n\xaa\x1e&#123;\n\xc5&quot;\xec\x15\x9f\xf0e\x1f\xa1\xa0\x04?\xa1\x9e%\x17\xd4\x88\x18\x97\xe7\x83\xbe\rZ24\xaa5\xe1\xcb;\xd0\xc54\xb5&amp;\xdd4\xe5\xbc9K&#125;\xd4\xff9\xe6\xb7\xc1#\x8a\xed\x1d\x9b\xb9/RR\xf3k\x0e\x98\xbd\xe0\xf8\x02\xd4z\xa5\xae\x92\x0c\xad3\xfd\x7fP\xd1n\xeek,^\xce\xfei\&#39;!x\x19q\x86|\x05\xb0\x82!\xd4x`\x9cE\xb6\x9e\xf2Z\x08\xb2KQG\x8f\r\x9e\xa1\xed\x84m\x1el\xa1\xfb\xbe]\x8b\xb8)m\xe7\x1d\x14\x02T\xf8c%\&#39;EB\x83\xd6\xc3\xceW\xd5\xddoa\x93\xf9\x08\xfa8-\xc6\xfe#\x9d1\tHMt\\\xb5|x\xd2A\x14\xab\xe2\xf69\xcd\x9d\xfd\xfa\x91k\xd6s\\\xd0\xebc1\xd9\xa6\xbay\xfcDp\x98g\xbfq\x18m\xbcY\xfc\x9cV_$\xd4\xdb\xd2\xf9\xfc\x95\t\x1f\x9d\xb8\x84$\x1d\x18*\xab+0\xee&amp;\xc7\x99\x87\xa2\x030\xe5O\xa5f\x18S\xbf\x80\x87X\xc3\xf9\xc9K\xcb+\x1e\xe6\xc4\&#39;\xad\x19\xe0\xa3\x14!a\x17\x06\xa6\xe8\xd9~\xc28\xb6\x98|\xaf\&#39;\xb8\xd7\x95\xf5I3\x19Lf\xb6\&#39;\x91]0D\xde\x08\x0b\xd9r\xac\xa9 dpMlxa^\xaf\xdb\xd8\x8b\x97|W6\x07\xfc\x0b\x13\x88g\x81\x88\xb1&#123;\&#39;\xb0\x8d\xd0~\x87\xc6\xa8\xd89\xdck\x8f\xb9\xe7\xf8W\x18P\xde\xba\x1ck\x7fJu\xa7\x07\xdcJ\xd6\xc3\xed\xb7\xda&#123;B\xb3\x89\xf9b;\x9a\xa1\x04,\xd7\x13\x9bZs\xb6\x8b3\xac\x85E\x19\x1e\xfae\x84\xfd\x0f\x10&#123;\xcfjJ\xd9\x9f\x97M\x7f\xf0\x85\xe4N\xe0\x9d\xf6\xe8\xe9\xd8\x84\x02we\xd8\xab\xbdFb\xb7\xb6O&#123;\xb0g*\xe6\xc4\xb9\xc3#\tZ,\xa1\x86B\x8f\xdaK\xbde\x0cTB.\xf9\xce8\&#39;\xc5\xcfA\rj\xa5\xb4\xc3\x93%\xb5&amp;\x0e\xbe\x89\xe5\x03\x07\xd8V\xf6L\x89\x1855\x8cU19W\xeaQ#H@1\xbc\xe2\xe76\xd0j\xb1\xf8\x99\xbbQ\xed:\x7f\x13;\x13\x07\xceD\x93`N\x93\xa5o\xc4\xd0\x83\xfakn=\x88\x99\xaf\xe5g\xe5\x14\xe0\x0b\x8a\xea-Q9*\x89\xf1n\xa1N&quot;\x16\xc3\xef)\x85I&#125;6H\x92\x82\xcb\xed\x86\xcb\x9c8\xae\r\xcc\xf2S\x9c\\\x03\xed\x857\x05b\x8aRzsoI\x98\x06\xfcz:Q\x80@\xa2\xff\xafR\x17\x98\x16\x971\x10\x02H\xedF\xe566\x88N\xa1(\xb2\x19\x90\xa5\x0b\xe28\x1a\xe4VLWEf\&#39;4m:\t\xc0r\x90L\x02f;\xd7AA\x8c\x1bfPTjVDi\x1d\xc0\xe2\x07\xad\xc8\&#39;2\x0c\x9d\xe4B_t[\x82?\xe7@\xcfV\xae\x13\xb9m?j\x99\xdbo\x9c+\x18n\xfa\x83\xee\xe3\xfc\x82p6D\xd6\xea\xf2\xe3\xbf\x83\xe3\xc0\x0f\xb5\xc8\xee\xb8\x0b\x94w\xb1tgs\xa4)\xce[\xfd\xc7V\xd9\x1f\xd6\x83\xe4__\x80\xfb5\xb5\x82D\xa4\x00\xd3)0\x1a\xae\xb7\x88\xd4\x85Z\x03\xc1\x18\xd3\xa8\xe7f\x15\xdb\xeb.\xc6\xf04\xb0_\xfa\xa97\xb3^5C\xaa\xcd\xb3cR\x0b\xe3q\xff\x8c\x96\xd0\x8a\xd4\xb4\x08\xf2\t\xe05\xfb\x1a\x8f\xf3H\xe9\xb1\&#39;c\x90bw]\x1a\x9ct\x8dg\xceY\xebO\xb1\x05\x96\x9f&gt;=@Z\xdd\x03\x16Af\xb5B\x89\x0c\xf3\x8co\x1bY\xcd\xf7\x98\xc5\x182\x9a\xb3\xf16\x89\xb6k\xba2KGB\xae\xb0\t\xdc\xbdtZ\x82B\x06g O\xd0\xb48\x8e\xa8\x15\xc9\xb4\xea\x13A\x1c4\xee\xb7\x90\xdbw\xac:\x0eL\xf2 \xcf\xefm(\x18\xc3b\x03A\xbe\x08\xfe\xe1\xa2\xd5l\xcd\x0e\x11,&gt;\x0e\xae\x9fA\x84\xd5\xd0QJ\x92\xf3R\x81\xb2\\\xb8\xb2Q\xb28.D\xb9\x9e\xde\x17\x03\xbdo\x12-r\xaa\x17\\,\x12nx\xd6\xd1\x95\x8a\x8b\x1d\xc0\xcaCn\x9b\x17b\x88\xde\xee\xa3\xa2c\x8a\x0eN\xdd\x98=\x1c\xf6\xb9\xebX\x01\xbd\x0c4\x8a\x90\xcdt9&#123;qo\xce\tq\x1c?\x8dlDd\x86\xf9\xa9l\xc6\x9b\x02\x06\x01\x91\x0ca\x91@\xa0\x86\xa6q/5\\W#\x0b\x87PR\x02\x97J\xb4\xb0\xba9\x07\xa2+y\xd7\xfe\xe6\n\xd6\xf8\\;&#125;9^\x08\x1b5\xdc\xef\xea\x8b\x83\xe4[\xfeH\xbcKkK\xb1\xbc;\x10\xbd[\xe3\xdb\x03\x80\x05\x11N\x89ca[\xab\xab\xb7)d\x0cZM\x1cz)di\x90\x9d&amp;\xc9l\x0f\xdbM&gt;#\xb3\xb8\x11\xb5\x17\xb3\xe0\xca\r\x97\r\xc8\x0cQ\xef,\x05*\xc0\xed\x87=\r\xe6\x8b\xcf\t6\x8d\xae(\xc2\x95\t\x94\x15z\xf5\x18\xa0!2\xc2 \x0e\xaf\xe4z23\xb8\xba\xc8\xc5\x17MOo&#123;\xecC\x02\x0c0\xa9whQ\xb2z3A^\x02$\x82\xdf\x0f\x06\x1b\xa9\xe0\x84\xd5\xe09\x07\xd7;|\xac\xa1vb\xff\xb3\xa4\xc2\x8f&amp;\x18\x85\xbc\xcd\x17\xd4\x12\x17\x86(\xbc4\xd9\x9f\xff\xc2\xc0e\xf7V\x02\x15PP\xfc\xeb\xaarT&#123;\xd4\x83\xcei\xa5Z\t];\x0e&#125;\xc2\x85A\xba\x03\x9d\xb30\xa8\xb5\xc4\xd7\xfa(\x8bj\xcb\x82V\xb8\xca\x1e4\x19\xf9r\xe0\xf6p2\xce\x99T\xe9A\x0e\xf5\x0ed\x88+\xba\x92\x11\xf3Y\x99bOR\x91G\xf5\xf8zwb\x82\xad\xd5\xe4\x19\x16\xb8i\xf6\x10#\xd9\xcc\xceS\xc5\x92\x05,\x86\xa8\xa4\x88F\x1d\x97\xc7\x82m\x85x\xe0I\xc3d\x9d\x80*j\xa1(\xe2\xd9\xd5\xd5\x0e\xa8\xb2\xc60\xccS\xbac6\xd3A\x1e\xf2\x06\xeb\x12\x94\xf3\x11`(8mtm\x8e\x1f\xec\x8e\xe4\xa9\xe4\xfc\xf5\xfcl\x8e3\x0e\xf8=\xe5aM#\x86\x8c\xa3!\xf1\x1f426\xf3\x07x\xab\t\x13u\x14\xef\\r\xc6\xfbh&#123;\x073\x91\xe7\xb5uA\x97;\xa7\xdf\x96\xa9\xa5w\t\xf4\xf2\x9a]\xf1\xe3V\xe2\x07p\xa3\x1e\xdd\x8dkN\xfd\xee\rG\x82\xa8d\xb8\xba\xb1]\xd4\xda\x11\xfe\xa4\xba\xe9\x16\x8e%\xc7\x95?h\t:\x81Y\xa1\xbf\xc3\x85\xbb.\xea\xe0\xa7T\xbcv\xce\x128:Y6\x8b@\xed]\xfa\xe7\x8a-\xdd\xbb\xc8\xcf\xd6\x14\xb2\xac@`PgX\xae\x06Q\xd0$0\xad\xa2\x9c\xff3\xafL\xfb\xe8\x0f\xf8\x12\xe0\xda(FA\xc9\x1b\x07@\x13\x96O\x9b\x83\xf9\xe8T\xb5.\xf8O(\x7f\xf0\x08s\xde\x8c.\xfei\xb4\x00\xb2-\xe7\xedF\x06\x9d\xa3+\x9a\xd7qMh\xac\xc2\xfb\x8enw\xfd\xc7F\xd5\xd5\xaeEK\xd8\x92\xe4\xe0\xa0\x06\x80\xd1\xdd\x8d\xc3\xf5\x83&#123;\xf6\xb2&quot;\x89+\xaa _x\xd5\x93\x84$#\xc2N\x01\xec\x9c\x84\x03\xbc\xd1(\x9aL\x91\xb3e\x10\t&amp;wx\x83;\x93\xf7i\x18oM1T\x82\x15r8@:f/\xa5S+\xf1\xfe\x16\x95[\x90\xb1\x08r\x96b-?\xf2\xb9\x95\x1f\x18u9YzF\xde\x94\xe4\nx@M\xaa\xb3\xaa4\t\xaedq\x89l\x07\x86W\x93\x96\xfdu&quot;\x19\xfaB\xcd\xee\x9d\xc6\x19||\x06\x82m\xcdB\xd3\x8dh\xe2H\x97\xd7@\x80\r\x84h\xeeYI\xbc\xf5\xa9\xed\xb30\xec\&#39;S\x9b\xdf\xfd\xc8\x8ey\xc6&amp;#\xa5Kj\x08\x85\xa3\x0b(\x01\xf9\xb3\xca\xc0\xfc\x04`J\x00\x9b\x1d\x7f\xd8S\x96\xa4\xaf\xf8_\xb9\\?\x05\xcf^\x91t\xb5LJ\xc5\xac\x8c\x9b\xb7\xa9E\xfb\xd0\xea\xc5o\r\xd7\x98\x15\x98\xdb\xcf\xb3\xed\x8f\xc7\x1b&gt;X|\xc2\xf6\xd7Ax\xdbW\xd9\x08\xdd\t\x92\xb08p\xa0\xca$\xaf\x84q\x88c%e\xd4-&quot;\xb5Ebr7\xb1l\x9f\x0f8\xb7\x9bk@\xd9FA\\\x83Ip\x19\x1cb\xa84\xc9\x99\x99a$\xce\x9d,vo\xb3&#125;\xed\xcdiq@\xbd=\xae\x19\xe0\x15\xcd\xa1\xb0`;\xefZ\x8a\xd5~\t\x8a\xd9\x86\x80\\\xc8\x87^\x1f\xc4z`Y6-\xe1\xa8\xde@Q\x7f\xf7\xb5\xaf7\xeel\xef\x1f\x8cV\xfb\x83\xc84\xce\x1b\xa92\xb5~\x98W\xa1I`\xa0\xd6M\xd0\x0e)\xc3\x11\xc9\x8a\xefb\r\xa0l%\x16\xc4\x1c\x81\xa3q\x82a&quot;\xc4\xd6\x94\xe2\x8d\xa3R\x85=\x0b4d\x8bJf\x120\x0e\x97c\xda\xc0\xea\xcc\xfc\x0e\xf3\xe2\xcbI\xd7E\xff\x00nc\x9b/\xd3]\xe4\xe9y\x86\xa7\x17Z\x8a2\x8f8C\xea\x8fC\xa9z\\k\xfe\x1eo\xaeX\xdb\n\xe7E\x1b\x0b\x9c\xe0\xa4\xc5\xc5\x91\xc5\x94\xb9~/\x85\xd1Y\xfcB\xdd\x1cW&#123;\x9f\xdcA\xc4#\xa8h\xc3\xe9\xc2|6\x99\x13:\x83\xbd&gt;\x8a\x17\xec\xcb\xa4\x1d=\x0e\xed\x0f\xec\xea\x87\x89\xa5\xdbQ\x08\&#39;\x06\xe6\xbb5o\xb7\xa1_i\xa7\x1b\xf6\x0e\xbc\xf5\x1a\x12\xe3\xc9;8\xf2!\xd59t$\xa7\x05-\xc0 P\xb4\xc5\xa9\x82\xd4\xa5\xff4\xe4\x0f\xb9f\xae\xef&#123;!\xf4\xe8,\x15\&#39;\xd8\xfe5\x8a7\xf1\xbc\xa2\xf5\xa4)\x0e\xee\x95\xc1\xb3\xc6\x0c\xeb\x08\&#39;\xad\xb9\&#39;\xd7\x18Q?\x0f\x12\xe0\xf5\x87\xbd\x1b\xd6\xf2I\xcb4\x83\xd4\x80\t\xf8\t;\r\x93\x07\xaa\xe5+\xd5\ncg9\x83\xff9\x9a\xdc\x9a\xcb\xfb1\x922pW\xd1\x0f\xe3u\xefW\x8a\xc0\x96+\xcaZd&quot;\x96\xc5O]\xdb\xbf\x10)m)\xb3yv\xfa\x90\xaa\x12\xadb\xcb6\xd0&#125;|_\xc1&gt;.\xfaG\xa7\xa7T\xfel7\x82\x08Y\xe7\xf6\xa3(N@\xa7\xe3\xd2\x81\x84\xd6\xc6d\xfd\xb4\x0b\xfaM\xbfVy\xa1\xe5jX\xf7V\x9fO\xcc\xee\x85\xee\xc7\xf8\xf3\x7f\xcej\x12\x1f\x96\x07\x11k\x8aD\xdd\x12k&quot;\xa8 fF\x05\xa7\xb5/\xc2\x83\xfc\xf9~\x91\x1e8\x04R\x19\x16\x07\xb4\xd4\x9fu\xdd\xc3\xd8\x91\x90;\xe4\xae\xa6\xacd\x14\xe0;\xff\x07\xe5m\xf5\xbb\xe5\xae\xec\xea\x90\x98~\xdd\xb0\x94d\x80\xf08\xd2B\xd4\xa8\x14!O\x89\xfb@\xb4\x9b\xe6*\xac\xed\xe9\xdaM\xab\xba\xdc(\x8b\x12(\t#hU\xd0/[1\x80\xcf\xaaSn\xea36\x8c\xa4Is)\xa5\xd0I\xe7&quot;3\xefl\xc4/VH\xc68MS_\xbaD\xbf\xa3\x01\x1e\xb12W\xd7\xb0\xc4*\xf7/,\x80\xb1\xd2[\xbd7\x96\xab\xed\x01b\xfa\xb2\xab\xa9\xd6F\xf5\x06=\xe6&quot;\x01\xb8\xde3xNrT*\x14xwC\xech:\xdaHXf\xa8\xc1\xf8.\x19\xce\&#39;x\xcc\xba=O\xc6\xc9\xf0K\x1f\xe6+\xd9\xf5\x9dW?\xa0\xce6A \x19\xff\x07\x96\xd7\xf5\xb6\xf4bX\xcbU\xcd\xa3\xf8\x92\xee\x80\xd5\xcc\x7f\xd1\x1d \xfa\&#39;\xf5\xa5k\xd3\xa9\xeb\xeam\x9a\x18\nJ\x9a\xc1\n&amp;l\xa2\x1d\x8e\xc13u\xad\x86\xa8/[+\x7f=\x10\xce\xd6z\xf4\xda\n\xf3(\x91^bX\xca\xa9\xfbmJ?\xaf5\x99i&quot;\xd0\xd1\x1d\x80\x96&gt;bB\xee\xc1\xf6gY\x8f\xa4b\x8f\xdb\x95\x0b=\xb3\x02\x1d\xbab\xacZRl\xf6Gh\xc5\xc8W\x06%\x95v\xbd\x96\&#39;\xa7\xd9\x1e\x00\xceg\xaf\x0e\xa0a\x07&amp;N\xb54\xaf\xb3\xff\xaf\x18&#123;J\xc8f\x1a\x89\xa86\x06\xaa\x0f\xa5\xef\x18\xf6\xcb\x1b\xa2t\x8a\x14\xbcu\xbcT\x01S\xe9\x08G\xbf\xe2&lt;\xe8\x06%\xb5n\x9aa=c\xe9\xbf!EQ\xc1\xfcq\x90\x83;i\xd9\x89\xf7\x8e\xdd\xd7B\xec\xecg\xd1`\xabJ\x13\x90\x7f\x87\xf5\x88PE\xd5t%\xba\xef\\R\x93|\xab\xe3_\x8c\xefK?\x96\x90\xd8\xd7\x0bi\xc8\xb2\x1d\xbchhgF\x85\xb1\xad&#123;3e\xa0\x16&lt;UW|\x89\x1e\x88\xe4h&quot;\xca\x85\xd0~\xcc\xd3v]V\xdblqiz.\xf8h\x118\xa1\x1c\xbb\xdb\xa5\x14p\xb8^i\xa3c\x04\xcd\xdbyY\xd1\xcb\xdf.\xd8\xfa\xf5\xca\xbe\x90*\xdd\xc4\xd7F\xac\xbf\xad\xfe4E6.\xca\xa2=\xc3e1\xc9^\x10&gt;\xcd\xc1z\x91\x98&#125;\x86E\xccU0\x06\x16\x88=\x00\x1d\xf4P=v\x8fA\x80\xb6\xc6\x9b.-\xb6\xeft\xc1w\xcb\x0c\x9a\x05\xbd\xd9\xb9f\xe4\x80\x8br\xe62\x85a\x0f&quot;\xa9\x7f\x97\x818\xa5W=\xe8SU\xc8\xbf\xa5\x0f\x03\xc8\x1d9\xd9\x11\xca-\x88j\xdd\xb8\x9e\x1c(&quot;\n\x10\x1e\x1b\&#39;a\xa8\xadne4\xd3\xcb\\\xf8\xce\x1e\xeb\xe9d\xe4I\xe5\xb7\xdb\xc0\xda\xb25L\xd5\x84\x96\x1c-J5\x84\xea\xc4\xc1\&#39;\x8bm\x10\x9f\x95\x9c\xb0\xb5\xf2\x06rW\x06.\xc1C\xdbl\xd3\nIs,:x\xf3\xa8&#125;\x8e\xa5n\xacq5u\xe8\xe2\xd4\x14\xe4\x10\x89\xc0\x02\x00\xe5]H\xc2\x03R^\xd0fv\xcaLt\x13C6X\x91j\xb8\xb2\x876y\xdf\xb6\xfd\xd3\x19\x02\x0b\x81*\xc9\xbd\xff\xe7\x82@&#123;\xe1\xcfHo\xb7\xe0:\x8a\x9f\xfc\n\xa9\x14\x82\xce\x19W\x8f\xd5\xad!\&#39;\x16\xfc\x01\xad\xee\x95\xfa\x10=\xdfa\xcbah\x16\xb4\x81\xeb0^8\xf4S\\\xe4\xfb\x9f\x9dO7\n\x11[\xf3\xe3\xce\xe2C8)w\xd0\x8aa\x104\xd2\xa1\xaf\x02\x0f\x11e\xb5V!E[\xd05\xf1\xc8\x98N\x99\xce\xda\xda\x19\x8cs\xfb&#125;Y\xe7\xbaMt,\xd3\x06[l\xf4\xb4\xcb\x17\xb6\xc7\xbb\xf8\xcd\x0b\xbdP\x8c\x10\x16W\x181m;\xcd\x0c\xbc\xcf\x84\x8a\x07CD\x02n8\xad\xd0k\xf1\xe2YY\xb2\x00\xeb?s\xdbj\xb7\xa9xET\x1bb\xbd\x9e\x1e\x9b\xc9U\xdb\x9c\x9f\xdc]\xa5\xc8\xfc\xc6\x0eng\xc0p\xa2\x0cM\x19a\x93\xe5x\xb0\xd9\x1e\xf4\&#39;\xbc\x1fN\xf8\x8d\x9d\nF\xdb\xd9r\xf3\xc2#J\xcc\xb8\xefE\xef\xca\xe4\x11#0\xf11\x15\x07\xe1\x18\x98\xcc\&#39;\xdbJ\xe4U\xd4[\x08\xad\xdeK\xdb\xd0\xfaw\x82 \x9eO\xd7\xd2~\xb3K\xc89(\x1fw-\xd7\x1b\x8aV\xdf\x88:\x92s\xe7\xbeuk\x02\xf2\x95\xb3\xe3r\xee\x1fm\x0eEG\xeft\x8az\x98\xec\x9c\xd5XN\xe2\xd2o;xJ7X\xd6d\x9f\xd9I\x85-\x1f\x0bY\xe3\xaek\x91\xd5\x13H\x02XQ\xea:\xe2\xce\xc9\x11\xe2\xc12a\x1b\xdc\xaa\x9e\x1c\xdf\xdbjag\xc7\t\xa1&#123;\x11RL\xe5B\xefts\x86\x87\xea\x9c\xf3\xb6&gt;n\x98\xff\xc4\xb6\xd2\x1c\x930i\x17&#125;\xcb\xe7/`\x1e\x1f\xa5\x8e\x90E\xb1d\x071I\xee\xba\xb0\xd8i&#123;\xa3&#123;\xfbj\xa0\x8d/\xaaN|fp.\xa3H\x1d\xcb\x1f\xee\xba\xcdJ\x0c\xc6\xfe\xdc\x80\xd7\n\xe4D \xf1.,\xd7\xb0\xec\xad\x86\xf8\xbaK\xbf\xc2\xb61\xc5\xe8%\x12n!\xb6\xe4W\x0b=\xb1F)\xaa\xeb\x17\xe2\x8e\xdaJ\x846\xbb`\xf8\xfe\x0bT\&#39;T\x14\n\xee\x8c)\xa9\xcbE\xab\xc8Y\xean\xbc\xec\x18\x1fEI\xf9\x01\xbd=RH\x80&lt;\xfc\x0b\xbc\x16b\x83\x18KX\xa8\x84-\x97\xdd\x11x\xeb\xd2\xfb::\xa1\xd0\xe6\x86Z\xbdD\xce\n\xd4\x9d\x87*\x13\xb1\xd2R\xb0Y\xa66g\xaa\x8e\x1b~\x1e\x08\x18\x8c\x12\x16Y\xf8\xaajV?\x14\x89S\n\xd7/+\xf2#\x15\xf9tv\xcaP\x0cZ\xd1\xb2x\x94A\xa5\x06^\xc81\xce\xc3\x08\xe8]\x81\xf8 ),\x83a\xfc&lt;\x9c\xac\xda\x04\xe6\xe2\x08\x8f\x0c\x91!\xb6sT\xf2\xfa\xcc\xce\xd2\x84\xd1\x8c8\x98=\xee\xfd\x96\&#39;W\xe7|\xbf\x9b\x8d8ja=\xe1\xf1M\xa6\xc3\x93\xe4\xf7\x9b\xee\x081t\xbf\x9dJK;]Fq\x16\x90a`\x99\xc3\n\xa0\x04M\xee\xd4l\x0e\x7f\x98\x11\xb2\x97\xa2\xcbNO\xea^\xee:\x8d\x16J[F!\xbb\x05\x0e\x06\r\xca \xd8&#123;\x1fH\x95TK\xc4\xf5\x91\x1b):w\xe5~S`\xe8\xb5\xf8\x9e0\xea\xd1ZW\x0e\xeaF\xd3\xf9%\xf5\xe1\x04x\x8ft\xb4\xd6ixlr\xc7TM\xdd\x8e\xfc\xedO\x8f\xb6B\r\\q\x8d\xb6\x8b\xc2\x0cIO\xd6\x0e\x87.\xe9\x15nE\xad\xfc\x8d\x18E\xfd\x82^aB\xea\xe0\xfb+CD\x9a\x96\x89Gp]I\xe7?\xffH\xd1\xd5X\x1c\n)[\x7f\x85\x9cz\x87\xb1\xdcL*\x03\xe3H\x1f\x04\x87PN\xd9p#V*q]:\xeb\x0eY\xa6\xaf\xf8\x07&quot;9E\x1b\xc1\x14\xaeR\x0f&gt;\xd5&gt;\xba#\xf8V\xc3\x90\x8d\x82\x0cT\xc3\xdf\xb2\xff\xda\n\xdf\xa7\xd4]\xbe\xe6Imi\x87\x7f\xac\x8a\x81\x98\xeeS\x9bJ&quot;\xc4\x02a\xf2!8HG\xd0\xd9-R\x80NB\xc4m\x97\x9c\xdb\xc6Y\xa6\xb5\x15J\x9e\xf3?\xdc\x18\x80Y\x98&#125;\x11q\xe9xa\x86\xcf\xecr&#125;\xaf%\xc1\xd1\x9cP\x17\x9b\xe8\r\xb2\xe4+\x88&amp;\xf7\xc9\xef\x139M\xc7E;\xc3\xb8\xebxP\xcbu\xb7K^5\xac&lt;\xb8p#\xea\x15\x85\xee\x111\xfa\x13\x10\xcbr\xc6\x01\xff\xe5\xa0\xa6\x11\xe2\xbd\x92\x8aT*\x18\x9e\n\x0f \x8f\xd6\xfe\xfd\xa2\xd2\xd1\x19D\x9b\xeb|\xc37W\x9e\x87\xd3i\x85YSH\xd5O\xbd\x1c/\x93\xe7&#123;k\xb4&amp;^U \x93+s\xd3\x08\x90ZyH\x18\xb5#\xe4D\xe5\x9e\x9d~\xd3\xad\x17_7\x85\xbb\xbef\x91C\x9b\xb0\x19aD\xd0\x805\xd04\rU\xcb^KB\xd3\x18\x0e\x9a\xaa\\)5(\x9a\xc5U\x8a\xd9\xe8B\xd8\xb2\xe21\xe5\x98\xba\x98r8\x0fx\xea\xa5\x97\xa6W\x07\x00 \x9a;M&gt;\xaf\x9e\xacB\xe6\xb9&gt;\x83\x1e\xc0-\xecz\x1e\xbd\x89&quot;\xf8\x03\xf5\xbe\xb6\x12\xfc\xf6 \xefT\xf6\xa5UR\x96\xbb\xf2\xc1\xa7\x04Q\x8a\xc5QA\xd4\xe1\xddG$\xf7ve\xdd\xd8Y\xd9\xaa\xc0V\\\xd0GO\x02\xeb\xc6\xf4G\x83\nr\xd4z\xbe\xb3\x96\x08\xac\x9b&amp;\xf4\xa0F\xfbI\x8f\xd1\x0fJi\x8e/d\x0by\x9d\x1c\xa8\x14\x8eC\xa3\x92D\x1b\xa7\xecC\xff\x06\x82gF?(K\x9e\x1c\xc65\x95\xb2\xfe\xe5^[BsG\xd7\x82j\xca-\x9e,R2\x89\xfbm\xc3_\xa0\xd3\xde\xdb~5\x15b\x11\xdf\xdf\rE\xd6\xde&#123;O\x1b\xa5!\xd4\x0e\x9fZT:\xce\xa4\x18Ir\x8f$j7Y\xe5\xa7X_\xc9\xeb\xbc\x7f\xb7`SC\x90jTg\xd8J\xc2\xb1@\x8c\xf7\xf6zJ\xba4\x06\xfa\nM\xa9\xa8\xcc\x9f\xd4hp\xcd\x05\xf1\x88]\x89\x1d\xf1\xae\x97\x85\x1e\xf2r\xfd\x05\xc9]\xf1\x8a\xfdf\xf9\xeco\xfd\xdcq\xd4\xb9\xbd\x16&quot;\xf6\xa4$\xb6\x9a\xe4\xabr&#123;h6\x80(\x0bat\x1a\xc2\xa7\x84JY\x06\x17\xeb\x00\xd4V\x18-\xddbm\xa2\\\x16U\x1a\xa5\x90\x11\xce\x9eRkT@\xa4\x1b\xab\xa5`\xa2jn\x01\xab\&#39;\xec\x03\x8b.\x06\x8f\x9c\x93\x08]\xc1\x0b\xa2\xeb\x06\xce\xd6\xaf\xb4\x9cA\xd31hpH\t\xea\xd7\x94%YU\x83\x9c\xdf\xed\xb6\xa0\x80zC\xd5\x04\xacM~\xfb\xad\xbc\x1cR\xe5\x81P\xa1,\x86\xb9&#125; \x17\xad\xa5\x1fX\xce\xcd%1\x05Y\x9d\xa7\x92L\xed\xc9\x0eL\xd9(\x02\xef\x16\xd6-4\x0bO\x1f\x08\xbbc\xf0\x90\xcb07X&gt;\xd71g\xae\xdfA\xb5\x85\t\xeb\x8f\x05^\xab\xb4\x84\x83v\x1a\x0cj\x9a\xcaF&#123;\xb6\xbf9\x88&#123;\xe3\xd93T\xd3\x00\xbb\x87\xbc\xec\x05\xd1\xe2\x9a\x00s\xe4\xc4Bp6\xd0\xd4\xf9\xaeJg\xfb\xa2\xa6\xa6\xc5*\xdaZ\xde*\xdc\xb1\xb4\xb5,\xd7|\xae#\xf4\xa3)\xec\x9b\xc4\x90\xc1~\xc5[e\xea\x01&#125;6]c&quot;\x82\x81K\xff\x0ff\x83\x0f\xd2\n\xb6\x16\x88\xbdH\x1eS\xae1\xf2\x823;\xb6\xd4\x05!\xb1KU\xa6X\x932n\x1eH\xe0\x08.\xb1\xfe\xa8\xad\xe2\xf0\tL\xe9-s\xa9\xaf\x1c9~L\x96\x05\xbf\xd0\xdf\x12\x92\xc3f;\t\x82\xca\x19M\xf6\xa9\xad\x94f\x0b\xee\x85\xd7]Y\x8e\xad\xf9\xf0\xbe\t~\xab\xe5\xa5\x93^\x1a\x90\xeftH\x9e\x1c/\xd6\xed\x19\x13\xc8GX\x0c\&#39;\x04q/?\x83\xfa\x14\x14\xcd&lt;RZ\x9a1\xa8\xbd\xc5M\xde\x17\xf49&gt;G\x86\n\xa6\xba1Z8\x1eh\xfe\xd1%.\x8cb\xef&quot;\xad.g\xa2\xb08y\xe9\xa1\x12\xbf/\x93\x8f\xb2\xb5\xabC\xcdp2\x17\xb9\x80\xc4\xb6\x88\x1b\x9c\xfc\xa3\xa6\xa8o\xfa82,T@\xd3\xa6&quot;h&quot;&gt;\xe3\x9d$\x15\xc2\x02\xe3\xbf|~a3\xc8\x00y\xa1\xcc\xb2t\xc0y\x04\x85\xd00r\xb0\\#\xc8*\xedI|\x84!\xabCd6\x87\xb4\xd5\xb8\xf0\x03G\xab\xfdi\xd9q&lt;\x9d\xda\x1a\xc1]\xb4,,\xa0\xa2\xdeQ\x8f\xdc-\xfcu&lt;\xfe\xeay\xeaYI\xaf\x8fc8&gt; \xf1\xb7\xb6\x1c!\x8a\xf3\xf6]dc\&#39;2\xe8\xb0\xa6\xcd\xdb\xb7\x14\x1e]B\xa9\xd3R\xfb\x06\xd8:\x82\xe7\n3\xb4_6\x9e#\nU\xdb=\x9bD\xfd\xe5\xe6\xed-\x82\x12qo&lt;\xe9\xe0\xd2\xb2\xae\xec\xefl\xff\xcb\x13%\x95\xf5\xd0Q\xeax\x9e\xb7\xcf&#125;\x17.X\xdd\x81\x1d\xc2V 4\x85m^\x89\xdb\x15CqFI\xd6(\x11\xe8\xf6Z\xbc$&gt;\x96v\xb8\xe0\x1c)m\x8e+H\x8ef7\x1dE\x1eN\x013\xaeF\x08\x8d\xcd\xb0\x7f\xe8\xea&#125;\xf8\xb0\x8f\x1d\xb2\xc5\xa9qI\x87\xb2C\xae)\x07\xf0H\xc0\xb8\xe3\xf3\x03\xe8\xf7\x91\xad9(\x84\xac\xeb\xffs\x9e\\\xb0\x8d\xfa\x00Q\xb4\x80\x91\x1e\xb6H\xf3\xa9\xf5R\x88;\x84\n\xb8\x0e\x9a\x19\xe2\x88\xa8\xceaJ\xe5\xf6\xbeV\xa7\xfcQ\x15\x91\x9d\xd1|c\xa3G\x19\xbb\xe0\x9f\xb4\x14W\x16\x02\x1eZ\xb1y\xac\xb6i\xe3\xd7\xcb.\xe2&#123;N\x9c)\x87Z\x84\xeed\xbf\xb95u\xbbWX\x1e\xfbwkG\xb3L\xdd\xe6\xb0DM\x9d3\x85\x9d\x8e.\x9c\x854\x9e\x8dG*\x0c?$\xed\x93\x8d\xb3\x0f\xa9\xe1\x97Jt\x93\x1bb\xe3\x03\x9e\xf4\x99u[\xc5\x98\xb6Of\x17I\xc9\xa3\x8e\xe4\xef\x934\xbf\x11~\x18\xec\xf9\xad\x19\x07MBl:\xce\x07\xc1\xe3\x9e\x9al\x927\xc8\xef\x19\x1f\xb4\xe8j\xd3\x02\x82\x11\x1dS\x19\xbb&amp;\xd9@v\xa0\xefM\x18\xa3\xb3\xc1p\x93\xb2\xefw\x19-\x04;Kagu\xdb\xe6\xa8.A\xe5\xc6\x88e\xd0\x00\x8fV\xda+\xc1)\xe4F\xda\xc6b*\x0c\x07\x99\nw$\x9b!\xce-\xab\xacH\xb0\x1c\x8b\x1c5\xcb\x19\x1d\xff\xbb\xc1v\x9f\xacaK\xde\x06\xe1)\xfe\xa1\x9bl0\x08\x19\xe9\x81\x80Y\x96\x96\x1a\xb3&#125;=\xbd\x8aoJ\xe8 \xeb3&#125;\x15\x9fp\x0e,\x96\x99\xff\xacp\x03\xb2\xe3K\x00L\x87\xee\x16n\x8a\xc9\x94.\xb8@+9\xbb*\xad*`&lt;n\x1b\x8d\xcb\xf9\xdb#!y\&#39;\xc3\xa197\x84\xea\x05\xabkm&amp;\xfb\x19Nd\x85f\x1d\x8f\x8bR\xc8\&#39;\x9e\xd8\xe7\xbd\x94oC\xc0d\xb6\x98\xdcx\xfb/\x10\x8a\xb9L\x9d/\xa4Z\x8e\x0f\x0e\x9d&lt;\x8c\x96\x9d\x8fCj\x8f\xd8i\xba\x04\x0c\xc1f\x9a4\xdf\xf83\x1a\x1e\xb0\n\x89\xf67#z\xff\xf8N\xec.\xfa\xf9\xd2\xc3\x93w\xa9&#125;\xc8-8\xd4&lt;\xa2vXH\xe5\x8a\xf3\x86\xd0\x0b\xfd?\x99S\x9f\xef\x1e\x86\xc1GI\x8d\xc9\x94\xcal\x15\x15K\xa6]c\&#39;-\x0c@\xde\xe1y\xeb\x8f\x83q\x8f\xb2\t\xcc\xbcE\xb8\xb0u.&lt;&lt;\xc0\xb1\x00\xeb`\xec@k\xbb\x87q\x07\xda\xeal&amp;K\x03\xf2\x00&lt;\x12g\x996\xe1\x9bF\x1ckhM\x85\xfcm\xd1\xa1\x8e\xd9;\xf4\xfd\x96\xea\x84\x89\xf1\x95\xd6\&#39;\xa4U\xaa\xder.%\xd3\x94&lt;\xf2\xd7\xfb/\xf8\x9d\xcd\xef\x8d\xf5NH\xdf+-\x82H|&#125;\xe2\x7fgn\xed2\x0c\xd1E\x04\x8f\xcd3\xef\xd8\x94a\xb4\xa4\x909&gt;\x8b\x94 \x15\x08\xfe\\\x8ap\xfe\xc5\x17\&#39;r\xcb \xfc\xd7\x08\x90\x99\xba\x8a\xde\x18\xdao\xabB\xd7L\x86\x8a\xef\t\xf1J\xfbi\n\\\xfa\x8a\xad\x02s\x87\xd4\x93\x17\xfax\x97W\xa8\xad\x90\x1c\x03\xa2\xf4*\xd3\xb3,\x97\xd7\x10`\xc2\xb43\r\x8d\xda&amp;\xca\xe3\x12\x97&#125;n\xdfw\xea_\x88\xadR \x9c\xc4\xc3\x00\x8fQof\xee\xfd\xaaK\x1f\xa9M\x95\xbfiE~k\x19F|&#123;H\x932\xfb\xac2\xb9)\x82\r\x1a\xf7S&lt;\x93&lt;\x92\x03\x17\x13\xf6Q\xf3\xc8\x8f&lt;\xc4\x9cO3lQ\xdb\xcb\xd9m\xd4(\t\xf8\x82u\xad\xb0\\\xc8\xff\xbd\xa0\x01kF\xbd\x11\xb5\xe9\x8an\x9a\xf9\r6\xfb?\xd1\x12\xa3\x1f@lc\x8dX\xac\xba\xde&lt;#\x97\x8c\xfc\xc0\xdc\x0f\x8d\x01\xe0/fB\xcb\xe3\x00\xb0Q\xd7m\xcb]8HA\xeb:\xf0\x15\xbfo[|\x8a~Bv!\x81\xd02\x12\x16$\xb4\xef\xdc\xc9\x11\x18\x197\x91\xdd4\xb6\xaa\xfb\x84\xe4\x0b! \xac\xa5`\xa9\\\x9c\xcc\x89&#125;\xb1\xd1\x18\x00\x11\x1f\xfb\x8d\x9af\xa3(;W\xec+A\xe4|\xc5\xa5\xd8:\xf6fE$\xa6\x9e\xdf\xe5w.\xf4\xe9\xb7?V;HFJ\x8ai&lt;\xb3\xb4\xfe\x9d\x18;Z\t\xd9\xc6\x01\x18\xe5\x1c\xa2n\xc4\xdcc\x03\xc5\x01q\x80gA\xdd\xb7&amp;R\xc1\x166kp\tK\xb7yH\xb8\xdd\xce\xbb\xf6\x8cqS9\xa1@\xb3\x8bV\x14\xcd)\xfbe3#\xad\x89\xa9\x18\x1b\xdb\xb8\n \xa1\x8ee\xbe\x19\xd6k\x80\xa4\xb1\xbb\xd6g\xb4x\x9a\xa8\x192e\x84\xd2\x92\x13R\x08\x01|\xc8j\xc8\xbbH\xfe\xd3\x9cUA_sL\xa4\xd3&#123;z\xde*^\xd5\xcf\xa9\x89\x7f\xd0&#123;\xcd\x9e\xf5nb\x10&lt;y~\x00\xe1\xbb\x04!\x93Q\xe9V\x0c\xf2\x8b\x9cJ_\xe3\xe7\x17Y\xbb\xc7\x92\x07\x1d\x98F^\x17\xe1R\xe22G\xc5\xed\x06&lt;X\xf5$\xef\x8d1\xb3\x03\x99\x0f\xd0\x8b\xc9\xf4\xc3GgL~wW\xa5\xad&#123;\x1f\xd0\xc6\xcc\xe8\xa6\x87 \x91\xa0\xa8jL\x06\xe5\xd2\x8b\xfd=wO\xd7\x84\x14\xf1\x1cd2\xe11\xd7 \x93\x1a\xb9\x80\xed\x8f\xde9\xe8#9\t\xa5\xb7\xc3I,--\xe0\x17L\x95&amp;\x12\xbfy\xe1\xb1\xedS\x06\xc3wv\x80\x15F\xe0Q\xcd\xc6\x97E\xf2\xa9\xc42\xb4\xcc\xff!\x9e\x8c\xe9\x0bU-\xc3\xacnt\xe8H\xbe9\xe1\x9c\x83\x92\x84\xd0&#123;YeE\xe2I\xa6\x9bQm\x0f\x9dT\xa1\xd6\x83Lt\xa7\xd58k\xad\x0b^\x83\x07\xba]]`H/\x0f\x83?\x01\x9b\xe2\xef#\xf6R\\\xbc9\xe6x\x89\x92d\xb4a\x01q9\x94\xe9=A\x85\xf3jpW\xcd\x89v\xd2K\x86\xa9\x03\xaa\xdd\xf1\xf1\xdd\xbbB03\xdaWMM%1\x05\xd7\xc0\xa5\x00\xc8\xaaCt\xb8\xa3N\x86\xa6W\x0bf\xf1U\x06\xc3[\x0b;)\xb4\xd2&amp;\x7fT\x00\x9e\xf5\x81\xb8B\xd4\x13VrGg.\x8f\x9e8w\xc0$\xc7\xe9V\xff\x7f\x13\x8eV\xf7\xcc+\xf6\xcb\x9b\xcee\x02W\xdd;\x08\xcfu\x05U\xf4\xcen\xcd\x1d\xfc\xaa\x12\x9f\xb6\xb1\xbfB\xef \tE\xb5\x05:)\x05\xb5S\xa45\xd8\xe1B\xc8\x10g\xb5oI\xc4\x86\xd3\xd4\x06\xffL\xc7\x07WCl[a\xc3&lt;\xa5\x01\xef\x81\x8c\xaeb?d\xb7V/F\xdc\x06\x03\x8a\xb4\xb2\x12BDT\xb0\xf2\x10\xa3.\xe1\xdb\x9c\xe2U\x83\xed\x0f\xd2\x11H\xa7\xf1\x82\xe4\&#39;nd\xea`\xee\xf8\xbaE\x8d\xcc\xbe\xe7W\x0b\xe7\xab\xcb\xfat1\xde6=\xc3\xb1&#123;\x17\x0f\x0f\x80(\&#39;\xa9\x0f\x18\xb7\xc3\xb6\xe1s\xbbH\xa4\xd8\xd1\x03\xdb\xee\xce/\x8c\xf3\xda\x92\xc0\xa1\xf8%Dp7\xc5\xe4&quot;\xe8QW\x1b&quot;\xa2\x80\x97\xc1\xe74\x1cwL\xc5(\xbc\xa0\xad\x04\xd3\xcdJWF1\x17U\&#39;\xaeF\x85;u\xae\x0cd\xf8)\x8b:R\xf6m\xff\xdar\xba\x80_\xd9\x0e|\x92\xf9P\xed \x15p&#123;\xf8\xf4\xc6@\xf1G\xab\xf9\x90-\x80~\x05\xcf\xa4\xcd[T\xf3l\x98*\xee\xe0h\xef\x12H,5[g\xd3U\x87\x82H\x0e\x87t&amp;|h\xd8\x9d\x085\x08\x84\xfa\x8b15\xa2\x97\xc8Y\xef\x93\x12\xc6\xc2\xb2X\xd0\xed\x08/\x84m\xad\x90\xda\xb4\x9d\xd64\xd53\xb3\x15#[\xd3\x1f\xbb\xa5\xe8\r\xc2%tV\xa3\x88\xa6\x1b\x0b\x123\xb6\xcd\xe0\xcd\xdbB\x90G\xb2\xb0\xc20\xa4\xe2J\x937\xd2\xb0\xf6g\xe8\xd4\\\xd0(I7b\x95\xa5\x8e\xc4\x0b\xc6\xb0o\xd9\x1a\xdc\xae\xcb\xfe\x88\xcea\xe5\x9c\xc4\&#39;V5f\xc3\xd7\x98\xa7\xc6\x92cg\xb2G\xf1&gt;\x0e\x82\x01\x142\&#39;\xd7\xfe~\x04\xc3\xa4w\x9ct\xb2\x11\x0f\t\xc0I\x81b\xe38\xbb\xe7\x8f\xdeh&gt;\x88\x97\x86\xb3\x82\xe9\xd7:;\x96\xda\x14&#125;\xf9l\xfe&#123;\xb3&#123;\x06\x16\x88\xf5u\x9c\xf4\xe3_\x88\xfc\x0b\xdc\xc7a+\xf3es\xd7\x03m\xb6P\xeat\x1c52\x85\xb65\xccT\xd3\x9dtM\x1f4\x13\xe6\n7\xbe\x05I\x9eh\x14\xe6\x18~a\xe8\xa50n\xfb\x81\xf1\xef\xe0+\xfe\x8c\n\x9f7\x87\x92\xa9\x1d\xb1\x12VtS\xe7\xba\x05\xbf\x96\x86s\n\xe7\x11\x9cD\xe9\xaaa.\xd7\x9e\x0b\xd9\nG6k\xbe\xfd\xa7\xdcVe\xa4\x85 \xd5\xea\xbds\xb9vJ?\xc0\x0b\x08\xa3\xe0\xbc$\xa0\xd9g\x89\xa3\xc5\xb8\x91K\xf7U\xdc\x1b^f\xd6\x15\xc0\x9e\xb3\x89\xf8\x83\x9f\xed\xd2\xf4\x9e\xc6W\xdf\xab\xd9\x96\xb4\xd7A\xd2\x96\x1a\x86\xc7\x134\xb6\xb1\xb5\xe2\xd2\xcbWhD/\x1ec\xb2&lt;jh+\x0e\xcc\xc1\xd7\x86N\xbd\xd9\xee\x93%\xe3\xe1\x13l\x1d\xf0\x1c\xf4\xafJ_\xadK\x9b\x82l\x0b.\x99&gt;\x04\x87*\x1d1\xd0\xba\x9a&#123;1(w\x84\x99\xbc\xa2\xeb\xcf\xe5i\xc4M\xb7q\xd9b\xa7J\xf0\xc5\x864N@\xb1e\xc9\xbe\x03\xfc\xc6\xe9\x02\xe1SV\xddE\xdbV\xbfksO\xd3\xe6]RL9\xa2b\x84\xa9\x8d|_\xc0\xc2\xa7\x99Iz\xb6~\xdc\x9c;\x8f\x94x~\xfc\xab\x8e\x9e\xd9\xc2\xf4\xad\xc6\xab\xfd\xbd\x8dS\xcd`\x0c2\r\xc7\xbe\x08B\xe8\xfa^y\xdb(\xb1\xed\xb9&#125;\x9bF\xad\xa8\xfc\xbf\xad\xc4r\x9eZ\xdbk\xf1h\xc8\xeb\xb5\xc4\xe5\x1dt\xdb#\xe4D\x08\xf5\x95P\xa1X\xb0\x16\x0e\x847\x80I\x15\xd6\xc1\tv\x02\x04J]&amp;\x1e\xd0CS\xbe\xb5\xaa\xc7\xfc\xc7\xed\x91\x92\x05~)\x997\x82t;\x18\\\xde\xee\x0f5\x15\xfd\x7f\xf0\xaa\xb0\xab\x8b\xb7\xbc&lt;G\x9c*\xa1\x14\xd6\x9a\x9f\xf9\xe33\xdb\x95o\x9f\x92\x84\x00\xd7:\x91U\x8bb\xbc\xc7\x1f\xca\x05\x80\xb9\xe1fD\xfd:\xb0[\xcf\xcb5C\xb8\xe7c\xff\xeb\xce\xech\xd2\x8c\x08\xab\xfa&quot;\\\xc9b\xee\x7f\xce\x81\xf3\x9c\xac3\xf7\xe7\r\xed \x00T\xe5\x13\x8a\xd5\xfdn\xbd\x1aJV!\x82J\x014\x8bj\xcf\x0etp\xe6\x90\x84\x1ex\xe1\xfe\xd0\xb3\xaas\x04t\xea\xbe\x0c\xb3b\xe8\xa5R\x95 \xf4 1\xa1\xadp\xe6\x9f\x16N\xac\x96\xf8hE\xd1\xe6(\xe2\x10bX\x0cMZW\x16Kq\x1c\xc19\xc29\x80\xfcGH~3]Q\xdf\xf7\xbd\xe2\x02\xd0\x9dv\xbe\x84\xcf\xe5\x8c\x00\xd3\x91pxZOk\xf5\x96\xaa\x9a\xa2?u_/T\x91\xbf\xce\x03q\xfe\x0fR\x0c\x12o\x8d\x1d\x83Na\xd6\xc7Tj\xa6&lt;\x1d\x06n5J\xe7\&#39;\x8f\\\xb0)\xb9\x95T\x98@\xbf\x93h\xb5hFUuI\xaf\x9d\x1c\x01\xfc\xd4\xbd5\xed9\x95]\xe6&lt;J&gt;N5X`\xc1\x96\xc3\xb6F\x7f2\xe8\xa5\xb4\xc7\x82\xd0\xff\xf4\xb0C\x12rSo\xecj&amp;\xb0\xbawB\x99\xfe\xe4\xe1Sy\xde\xeb\x0b\xafZ\xbd\xfav&#125;:\xc9\xd8a\xc8\xbc&lt;\r\x9f.\x88\x1e\\\x8c(\xec\xdf\xf85\x00\xfa\xf75\xf5V\xe1\x04s\x1fu*\x97\x12\x1fP#+hLC\xb6\x80Zs\xcb\x8ey\xe2+\x8e\x9e]\x97,\xfb\x8b\xe2\xbc86\x19\xf5\xf9\x0e\xb2\xf8\x8d\xf3\x819&lt;\x19-&gt;\xa1j\x9b\xa9\x07\xdeXP\&#39;\xe3i\n_?\xc5\xeb7\xb2\xd9\xb3\x9c0\xebw\xb7d\xdf#Rl\xda6\xa3\xe6+S\x0c\x1c\xaf?z&#123;m_\x06\xe3a\xb5\xa1\xec6\xdb\xb6\tx+\xb1G\xe7\x19\x01\xa7\xad\x06\xb7u\xfdl\x00\xf5^\xa5\xb6\xf7\xd1\x0e\x9a\xb2.\xa4\x99\xf1\xd63\xe9B\xa1\tot\x80tL\x869E\xbe\xd4J\xbd\x0e\xb9\xfe)\xd8+\xf2\x10\xa1\x17\xb0\xf6\xadXH\xb8\x01\xe3\x92\xdb\n$\x11\xf2\x13\x06\xd3\xc9\x8dM\xb8\xbb\x9dHv\xc4\x83\x96\xb7\xed\xe8\xb4\x05\xc0\x9bu8\xf9t\xf8\xc9[\x9f\x0e]\xc9\xf7\xce\xbd\xaf\xd7\x82T\x88T\x94\xd1\x81\x82D\xd0u\xab\xcd?\x07\xdet\xce\x90\x02\xba\t\xf4\xa3\xc8\x82j(\xcb\xa2\x89_\xc5K\xa5\xaa\xa5\x98\x18\xe3\xde\xae&#123;\xda&#123;sU\xcb\x03n\xd1\x82\xd4L\xdd&lt;i\x89x\xe5?6\x83\xbf\xa7\xbe\xc0\x0c\xb8\xc7^X\xb9O\x8f\xa6\xf90\xfd\x12\xed\xb8z&lt;C\xa0&#125;)\xdd\xafv\xe2\x86A:\x98\xd9.\xbbi?\xd3\xe7\xee\xff*C\xc5\x03\xf0L\xac*\xe0\xf5\xd5\xd1a\x92\x9b\xfa\xbf\&#39;r\x94\xd1\xd8n\x9a\xecO\xdf\xf5RM\xe5IL6=Y\x82\xe2[(\xe2\x8fsM\xb3&#123;\xb0\xa4\xfc\r\xeb\xc1s)-\xa1\xe8\xc7/\xda\xa6F(ol#T\x0e\xa4\x97\xc5\x94\x8b|v1G\x87`\xc7\xf7\xa8\xd9e\x1cV\x08\xa1\x07\xd5@\xee5\xc2\xce\xba;\x8e\xfc\xa7\xa4yL\xd8\xa6LC\x8a\xc55\x96\x14\xa4\xc6S`\xd9\x1c\xba?\xb8:\xe6\x92`\xd3\xec\xa2\x945Cb\xcf\xae\x1e\xf3)t&gt;\xf4g\x8eU\x9f\xc4\x9a;=\xcc\x15\x00Rg\x80w\xec)\xe9\xbc~VRA\xbe\x99\x0c@\xac\x93\xa1\xed\x7f!I\r\xfe\x1f\x85S\xfd\&#39;\xc7\xe5\xe5\xf5\xef\xfb\xdd\xfc\x910\xdd\x01v7\xad\xe0Q%\xe6\xee\xf3@\xc51\x14\xb6ny\x0f\x13\xe7\xff\xcc\x85\x9e\x16i\x86\xd4\xff\x007\xf7\x8e\x9c\xc1p\x06C\x95\x0e[\xc6mjCP\xdbc\xfc\xe37\xe4\xe7\xb4\xc0\x8b\xdeV\xd9\xed\xf3\xc0~\x12\x9d\xe5\xc4\x86B\x13\xc7\x95\x8c\xec\xbf\xcaK\xb7\xe9\xd1\x0b=[9I-\x8c\xeaR\xce\xdb\xc5\x01\xaf\xdb\x84\x06\xca\x92\xafV\xcf|\x82k#\xc6\xde\xde0&gt;\xbd6\xf3s5\xe8\x83\xb3\x86\x0c\xeb\x8f\xbc\xd4\x97-\x9f&#125;\xf9\xdf\xdf\xb3Nd\x8eJ\xd3\nnQd\xef\xa7\xf2\xa9\xa0,\xfb!\xb4\x947\x8aqe\x00\x93\x05\xd8\x80\x81\xb4k\xf1\xa3\xef\xd7\xd7\x1eZ\x86\xfb\xd1\x9f\xd0\xe9\x89v\x83PE\x9a\x80\xef\xd0\xd9C\xb2\x85\x9a\x82\xad\xf9\xa7\x1d\xf4\xbf)\x99d3cf4L\xdc+%\x9e 2\x98\xd8\xce^\x8cZ\xb6&gt;\xda\x98\xac\x89\x17a\x88d$I\x95/\xa1\xd6\xe5\xce?\xda\x01\xdf\x1b\x9b\x05s\xe4f\xc9\x96\x1f\xda\x1f[\xff\x11\xe0\x00\xd8$f\x7fH\xbb(\xeaL\x10\xc4\xf6\x14e&#39;
i=45, n=16429, dic=&#123;&#39;msg_type&#39;: 1, &#39;piece&#39;: 3, &#39;total_size&#39;: 74620&#125;
piece_len=16384
sent ext_data=b&#39;\x00\x00\x00\x1b\x14\x02d8:msg_typei0e5:piecei4ee&#39;
msg_len=9131, id=20
ext_id=1
recv=b&#39;d8:msg_typei1e5:piecei4e10:total_sizei74620ee\xd2\x1eF\x01\xb5\x88\xf5yi?\xbe\x00\x9b\xaf\xd7\xd45\xe7\x90\x19\x8d\xbc\x15\x06t\x97\xc0\x88\xae?\rw$\xc4\x0c\x028\x83\xaeXGl.\xf8b\xe2\xe0V\xdfI\xc3\xee\x00Uc \xeb\xbb\xca\xf5\xb8lA\x08g\xca\x842\xde\xea_\xd1\x18\xe3\xf6\xb0\x9ds!\xa8\xd6E\xca#_\xd7u\x9b\xc0\xe1[~\xd0\xa6\x1f\xea\xa3\xf3\xd9j\xd4\xe9c\x93\xa1\xd0\xa6\x81@\xf6\xdb[\xe59p\xaa\x04\xa9\xb1C\xc8\xad\xfen\x9bP\x02\xa1\xa8\xc3\xec\x0c\xde\xa5fnFM\xaag\xfeR\x0e\xaaw\xe2\xc1H(\x98&quot;\x07d\x88\xc9\xc1E\xf9\xca:\x8a\xac2\xb6\xb37o\x91W\xe9\xb9\x88r\xef\x0f\x96\xc3mA\x93\x19\x80z\xad\xc7\x83\xdbO\xbe\x16\&#39;\xf1\x1f\xb3\x94\xa1u\xc3\xc2\xfdo\xc2l\xe0\x92\xe34\xa9\xdf#\xd9\xebW\xe0\xffT\xde\n\x1bMi\xaf\x98\xd6\x02G\xbd\xdbN\x17\x84\xa6\x86\x97\xd0&quot;\x96\x9e\xc9\x0c\xcc\xb1\xe9\x8d\xb6\xb3\xd7M\x1f\x0e;\x0cCw\x05q\x1b6\xf4\x8aw0M\xe7\xcb\xb5 \xc2h\xaf\x89\xc4\xc5\x0c\&#39;V\xc8q!\xcf\x89\xc1\xf1c\xea\x9f\xa8\xad\xb2\xe69\xb9\xb0\xe1V\x1bs/i\xfcA\xeb\x01\x14\xc3U\x01/\xb6a\xa0\xa5qm\x06\xb5w\x83=Ia\xdc\xe0ltkV\xbfwC\x13\xcb\xc8&#125;3\x0eY@\xb5\x14*\xb14c\xc96\xafrzK\x84\xd4\xfc \xd7`\x1f3\xaa\xad6\x9d\x8f\xb3=\xac\xc0\xd4&gt;\x01\xad\xd9lq\xca/\xf0\x04\x15\xb76\xd0\xf2\xad\xb9\x05\xc5;c\xf8/&amp;f\x08\x11\x02\xac2\xaa\x7f\xbc\x00\xe1\xed\&#39;\xeb\xa7\xb4d\xf9\x8f\x91\x18\xb0\x7f]\x7f\xd0\xc0\x8f\xef/\xa6*E\xcd\xc8\x94\xbf\x807\xdb4\xe3Sz\x93&amp;\xdd\xf8\xdc\x05\xa8\&#39;\xc9\xe2\x96\xbcZ!\xa9\x11\x8f\x17&quot;5\x9f\xda&amp;b\xf3\xb5\xf0\xf2\x1e:\xbf\xc7R\xf6&quot;\xa7Y\xd93I_\x18\xa2\xbcl\xc4fw]\xd9wn\xc5\xfc\xe2\xac&#123;C\x95u#\x85|,\xd6R\x8a\x19\xf4\xc5\x97\xa8~f\xfdAF\xe2\xee\xf1\xc3\x8brk\xea\x18Gd\x87\xbb\xba\xf7\xf0\xa4\x9cB\x1e\xe0jk\x83I\xed9\xf5AM\xcaS\x90\xf8oZG\xear\xd6\x1c\r\xbdR-q\x84\xc9hf\xed\x18\xcd\x84FQ\xc6\x1f\x07\xce1\x0ecC\x99\xb4\x1f^0\x0f\x81\x9d)\xf5sf\xc1\xdeyVP\xe0^3x&gt;\xa9\x03gc&amp;7\x18q\x1c\xe7e\xcf\x0bo\xb2\x1cU=\x06d\xb2mM\xbbw\xb6d`\t\xd9\xc4\xea\x8dK\xf2R\xa8\xadF\xba\xd4\x96\x82\xe8\xb3\x8a\xac\xe0f\xf6\x1e\x00h\x14\xda\xd3\x9c\xc2\xd0\x84\x1b\x14\xca\xe3Flh\xa3\xb4&lt;\xea\xc6\xb0\xe7;g\xa23\&#39;dMb\xf1\xaeY&amp;Hl\xd2\x89\x8d\x90\xef\x8a&amp;\xb4\x1b\x02^\xe7R\x7f\x92\xd2\xc3~2s\xe7\xe7Ww&lt;\xe2K\xa1\x1a\xff\x84\xa4\x1d.\xea\xee\xc9l\x83\xe3\xe6 \xea#\x13X\xedo\xcdi\xb3`\xc6\x1f,\x9b-\x99\xbft\xb8\xe2\x9e\x89N\xec9\x88\x8b\x06\x98\xde\xf3s\xe1\xaaU\x18b\xaev\xed\xed1`\xd5\xfb\x8f\xb9\xd2\x8f\x18\n\x12\xecsX\xe2\x13\xafP\xd3\x91\x95\xc7\xd2\xec\xaf\x1cm\xfeC\x05\xe7\xb1\xfd#\x03\x8f\xd3WQN\xe3\x8a\xf2\r\x10\xee\xf2E\x08\x17*c\xc1\xc8,y\xf5]hg\x13_\xb6%\x0e2\xa7\xa3\x89\x0f\x97F\x9b\x897\x1f!\xc5\xc7GO$\xd8\xce\x9f\x8f\x85\xc2\xbdQ\x87\x9b!j\xf9\xc44\x9c\x96\t:Y\x89\\&gt;\xad&lt;\xc0\x0b?\x0f\x15\x03\xd7\x8d\xf8\x17\xf7\x06\xbe\xa9\xefyw\x89\xf3\x07\xa0\x94i\xad\xb4\xa0\x14\xf9\xa1\xdb|\xdf\xdbo=\x9f$\xde\n\x01\xa3\xce\&#39;\xc9V`w\xb7U:\xf5\n\xd7E\x0c\xc3V\x1ba\xe15\xabl\xff\xdd\x85\x11N\xf1\xee\xf6\x08@)\x19\x94\xa2\x0c\x8b\xea\xcbI\xa5\xc5v\xf8a\xbam\x81\xd3\xdd\x1e\xd0\x1b4\x0c]\xd6\x06\xf7\tca\x9f\x81\x96\x16D\xd2\xc8s\xc7\x0e\xc7\x81\xb87I\xd5\x06\xf0\xf9\xbe\x89\xeb\x86\xab\xc8\xdd\xc4\xe2\xd6p\xed\x0b\x1bk\xff\xa8v&#125;\x92\xec\xd9\xa6\x95\xaaX0\xfec\x0b\xdf\xb8\xcc\xe4\xaf&gt;\x1c\xb2G\&#39;T\xea\xb3`(D\xec\xf1\xe4l\xba\x14\x83-\xb1\xf3\xa091\x81P\xde\xc7&amp;1#\xd8\xe2/^=\xdf\xb2\xd6q`\x91s!\xba\xdbg\xaeD\xbc\xf12\x1d[\x9b\x19 \xa4\x17&#125;\xf6\x06\xc2p\x1b\\+\x80\xf0\xf8\xd2\xb2\xe3t\xb9\xf4p\xed\xfdk\x8e\xefwJ\xd9\\\x02\x08\x11\xf0\xba\xa6\x9d_\xec t\xd3\x8d\xf1\xffN&gt;\xc5\xdb\xa7IM\xaf\xcb\xfd\x18&#125;\xd8zq\xf2z\xfc&quot;cg\xe3G^U\x9d\xc5\xa3\xdc\xc1\xd7\xdf\x86q\xe1Axp\xd4\xa9\xe5\x9e\xc9\xca1\x8b\xfeir\x8cZ\t\x01\xecFP\xfd\x1f\xdd\x8a\xb3q\xbb\x12\xa1\xd9\xce\x88\x19\xf4\x0b\x85\xe80\xce\x88\xb5\x81\x1bp\x92\xbe7\t\xdb\xb9\xe6\x147\x0f\xcc\xfd|\x96\x15\xf1&amp;=\xeb\xd3#\xd5\x17\xd7\xb0\x1b\xa5\xb1\x85\x9eJr\xa4\x1f\xb7\x1a\xf7M\xbewl\x11\x9b\xe6I\x9dQF\xa1\x872\x00`\xc9p\xf0c\x17\x16b\xfe&#125;\x94\x0c&gt;\x8e]\xa1x|\x17\xeb\x8du\x02\x8f\xe1R8D\x0c\xcbIS\x9f\xa1|\xf1?@\xdd\x12XdYm\xd0\xff\tV\xc0w\xc4\xfd.4\xa5\xde8\x06\x1b\xb2\xdd\xcb\xcc?\xa2\xa0w\x1a\xa5\xa1@\x83\x96\xd6o\x10\x97\xe0&amp;\x95Yg\xfd\xbaV\xdc\xbc\x9b\xedj:Z\xe7\&#39;F\x06gK\xd4m\x80c\xf8\xbe+\xd6e\xccb\xdfD\xea\xe1\xcf\xb1b4S\x8f\xde\x97\xe6\x86\xd2\x05\xe1\xe5]\x815&gt;\x96\x97\x80OKM\x9d\xcb#*\xf5\xbc\xe6\xcc\xa9Q\x90\xfd9\xad\xffk\xc4\x80\xac\rmC\x08t\xe3\xff&quot;9P\x9dM\xec&gt;\xa8\x0c\xbc\xe08D\xc9O\xf0\x99\x8e\xe0t\x14o+Y&gt;\xd7l\xfd\xba\xa7\x1aP\xf8r\xd1\xb86o\xdb%\x05u`\xbdl&quot;xFx\x0b\x83\x04\xba:S\xa0\xe7n\xf4\xfc(\xd5\xaf\xcb\xeb\xc0xt\xda\xf8\xbc\xb2\x9e\xb9f\x9d\x8a\\\xe5\xa6\x07\x9aE\x1f\xed\x023]\x11\xa6\xc7\xa7\x96E\xb52\x1a\x97\xf7\xeby\x8a\x8e\xfa\xe9\x1b\xab\xa0\x1e\x84~\xf8\x07\x04X\x183\xf7\x8fGC\xadz\x144rGGu\xd6L\x94D f\xd7Q\xc8\x0eOoSi\xc2\xf7\xb7\x1c\x99NX\xac\xe7\xb9|\x95\xd3\xdb\xf3@#M_\xa11*S\xe3\x80\x12c\xc4K\x152\x86\x07c]5,\x1f\xc2v\x01\xdf&amp;rR9t\xe6\x85b\xa1TDY\xff\xb0&#125;\x11\x93W\rY\xf0\xf5\xd71Dt\xc0\x0f\x1c\x92J$\x0ei\xdb\r\xe9\xd8\xd3\xb5m\xbc\x01\xec\xd1K=o\xd8\x1adwL\x98\xfb%\x0b&quot;U\xd7N\xba\x9d\x0cBZ#/\xaf4\xd7\xd8\x0e\x95\xbc\x8e\xc6\x1b&#125;h\x82\x92\xc0\x19 \xebq\xb5+|(\xb5\xcc\xe0u\xbb\x9c\x967M\xc1\xa2i8\x0b\xf6d\xcd\x02\xcc\xd0w\xc7\xce\xbe\xb7\x88\x1f\x9c\xde.\xea8\x0b\x07\xa2/\x88,&#123;\x83;\rj\xca\x9b\x15\x91]3\xcd\x92D\xb8\xd8\xf32\\\x01\x95\xdf\xdf\xca\xda\xa8zh\xd6\x0f\x06\x84\x81\xc1\xd6\xbd$\xdb\xe9\xe5\xe8\x90X\x85\xe6\x8c\xa2\xba\xf8\x91\xfb\x1b\x19B\xa5\x1a\x8c\x0cn\xcb\xd9#pL%\xc2\xef\xf5lm\x84\xd4\x8d\xf2\xbfT\xa1\x1b\xfb\x95\xe5\xda\xd9\xe8#\x87\x9f`\xb0-\xcd\xf7\xc6Qo\xd8\xa3\xf4&#125;\xbdE\xee\xdf\xdf\x95b\xf7\xfe\xcd\x1d\x96\xf2\xf09\x7f2\x1a/\x194)\x0b\xeft\xbfc\\\x9c\x84\x95,\x1fd\xac\xba\xae\xf30,\xd0\x13\xee\x86\x1d\xde2\xac\xb5\xb5\xb1\xb9\x03\x88\x16I\xf3\xb0\x9f\x1c\xa3\xe0\x8b8 m\xbf\xe1%\xb5\xb9\x16\xb4\xbd\x89\xe7Y~0DgsXk\x18\xdc\xd4\x03\x06\x10\x9f&#123;\xf4\x1d\x7f\xa3\xcb\x9e-\xa1\x07]K\xd1E15#(\x08&#125;\x95\xaeV\xee\x14vV^\x1aQ\x9d\x97\xb3\x17\x9c\xb1\xa0\xe6O\x1f\xc5v\x95\xe1i*\x88\xd7@\&#39;\xc4\x90u\x04\x89\xe2W\xb0\xf0\xcf\x89L;\xb8|7\xbah\x93\x06\xfc\x14\x06i\x1d\xc8f\xf7s\xdc\xf1\x8a?4b8\xea\x9c\xa1\xe1\xe9RG\xbcS\xd9\xf0\x91\x82\xdd|\xa6\x94 ROf\xa3[\x1b\xe3M\xb0\x87Y\xa8\xb93\xff\x11jrI\x89\xce\x8d\xd1&gt;\xee\xd4\xa2\xab\x98\x86\xd0\x89\x0cg\xea\xc2\xd3PZ\xe0d\xfbS\x04.\xac\xc7\xf7\x9a!\x9b\xafc\xf5\x84\xa5\xf32\xe2\xdc\xb4/\x17\x19pQ\x7f\x18H]\xde\xd3o\xdf\xa4\xf46&lt;\xf7D\xe6:Z\xecV|L\xdbt|U\xbf\xe4\x03\xd5*\x10\x9f\xc0\xd5\x0b\xd0\xd23\x83\xf6\x96i/\xf0\xa2\xeaY\x1c\xe0\xf6\xa0\xea\xca\x99XB\xf5\x84\x10\x17\xe0\xb5p\xa9z^\xa2?C\xfdCaZ\x8cu\xc6\x97\x86\xce(\xc2\xeeE\xaf\xdb,\xebR\xf0A\xc1a\xe6\x8e\xef\x87\x98\x99\xcbt\x0f8\x1f\x91\r \xe4v\xf4A&#123;0\xaej\xb6\xd1C\x06\x8bR\x1e\xdb\x15\x08\xa3\x9f\xb3\xd5(\xeb\xf2\xc5V)\xb6\x9a\xb8\x8d\x0fQ0\xa1\xa1\x85\xabL\xa2\xaa\xe9.)\xf6\xcb^\x08\xe6\xef\x1d\x92\xe6\xa5\xf6t\x85B\xccR|&lt;\xabB&#125;;Y\x8c\xd9/\xe5\x91\xcf-o\x8e\xd7\xae\xc5&#125;\x91&amp;&gt;\xe34\x17\xaf\x84@\xbf,\xe0Q\xe9\x04\xed0\xb2\x9eEt\x08\xdcT\xa3F\x9a1(&#125;\xbd(P&amp;B\x868\r\xec&lt;\xce\\[\xc5\xc7\xc1\x96\xc9\xd6&#125;\t\x82\x95\xc0\xcd\xa6\xcd\xea\xa3O\xa2\xac\xea\xc5&#125;p\x12\x8f\x89\xc0P\x12\xe7- \xc3\xf8\xcb\xfb$\xc0\xce\x02-\xc3\xe3^\xe51\xdd^J:\xca\xb2.\x82\xc8\x83\xeb\xae\r\xa74\xb3\xad^\xd0\xa2N\xdcQT\xa0\x03\xc7\xf4\x8c\x06\xc9\xb9\x1d~\xea\xa0\xb6BK\x10\x15\xdd\x9e\x1b#\xe5V\x7f\x90(\xbf\\\x9a2Ga\xb7\xfc=\xa7+\xceO^\xd3C\xf0\x92\x8b\xd9\x9c\xa6ZG.\x1dUg&amp;\x14\x99?\xf4\x19\\\r\xc89\xe5\xb3\xf0r,\xcf7\x81r\x9a\xf8\xd7\xb4\x0f\r\x8e\xbb\x93\xcd\xd7\x96r\xfe\x01\t\xb1\xa2\xcdV\x85O\x82\xd7E\xad\xc2\xea\x81V\x1d\x80\xa4L\x8b\xc8\xde\xff\xa9\x1a\xa3U\xb5\xa7\x02P3-\x8a\x96\xd9\x91\xee\xabu\x83\x05\xcct#\xe6\xf7A\xaf\xe1\xeb\xbe9\x83@\x05S\xc5\xaa\xc5\xf9e&quot;\xc0\xbd\xa9J*\xb0\xee\x99\x96\xd86\xce~\x12\xd3\x9cpDf\xe2Q\xb8&#125;p:4Z\x9bt\x8cVmXM\xeay\x9a\xf5n\xb7#;\xb2CkOH\xdct\x19!$\x80\xc1\xa6\xd4G\xc3\xe9\xb1\x9aPu\x89\xce^\xf3\xfd\x0b\xb1\x8d\t\x9a-\n\x1b6\x91u\x89\x98&quot;o\x17\x994y\xf1)\xea%\xf4\xb5\xc6\\\xef4\x12\xef\x1a\x05\n#\xa3`\xa3\xef2\xf2n\x91\x1a|\xce\x96n\xbc\xf3\xf0\xfa\x00_LG\x19\x9d\x1c\x97\xe1[\xce\x15\x8f\xf4\x90\x0e\xadt\x85\xdd\xec\xd1\x91\xf4\x8d\xf8 i\xe7OR\x95#B\xd2\x88\x1f\xa2\xfcH\xe9\x1e\x94J\x8a\xa2\x87\xcc\xcf\xa4\x95h\xa6\xb7\x1b(\xe1&#123;\xaa\x8fxv\x83\xe9\xf5\xa8D\xb9\xf4\xb8\x9f\x1b\xb6GY\xa2\xee$\xc6\xc9\x8bx\xc7]m\xf2\r\xa7_6\xd3\xe6\x88\xea@\xb5\x06\xe8\xd2Lj\xc2d\x18A&amp;\x03]&amp;\xbe\xae\xd6&amp;\x04\xdb&amp;P\xf0\xee\x9enK\xf7\xb2\x10z\xe5=\xb5?#\xdc\x85\x19\x93$\xc1\x8b\xb0\xd3\xce\xc1\xba\x03\xf5\xe8y\x15\x11&lt;1\xe6\xc2\xf8S\xd3j\x97\xd0WZ\&#39;\xfbC\xdb,\x95\xa5\xec\xe5\x17\xa1K\xb3\x95\x99\x92\x16\xc8\x1a\xfe\xd3\x8b\x1dV\x00\&#39;\xa9\xda\xca\x19[\xd2o\xa50\xde\x85~_\xc2R\x9f\x1d\xd5\x7fZ\xb4\xd0\xe1\x98\r\x06:\x91\x11w\xf6\xefVIW/\xd3\x16\x81|\xd7v-\x18/\x7f\xb9\x94\xf5\xc3r\xa1z\xdb\xc6\xf2f\&#39;\xb8Es\xf0\x99(\xe1\xbd\xd93L|\xd1\xd5\xad&#123;\x93\x10\x02\xa3\xfa\xb2\xc3/\xb5\xbf\x16\xae\xdd\xfd\xd6\x97d\xd3\xe9:\xc5\x1c&#123;\xab\xe1\x19\xcbF\xb5N\x1ed1k&#123;\xf9\xbc\x91\x8c\x04\xbe\xdfH\xa7\xf5,\xb1\xc5\xdf\xe4\xc4\xfeo\xfd\xf4\x01\xa8((\xc1\xe5\xd1\xdb&quot;&#123;\xa7\x991\xd5\xf3&#123;\xf3\xd9\x03P\x15\n\x96\\\xbf\xf1\x1c\x8f~\x9bj/s\xcb\xfc\xf4Q\x80_ \xfaE\x84:\xdd\x99V\xc8]\xc6wE)\xc4\x088\xf5\xf6\xdb\xcc\x1a\rpa\x98N\xb3\\\xd36\x92;&#123;\x02&#123;\xda\xf4L\xf7\xc4\x14\xce\x04\x00sM\xe7\xa5\xca&#123;\x9c3\xd3\x97\xea\x111\xc7\x88\xf4\xb3\x998\x87\xafMg\xfao\xcf\xd4&#125;n\xbdk^\x80\xfdo\xbb-n\xd3\xfa\xa3b\x08n\xcfh\xa4\xf2\xda\\\x14\x81\xdf=Y\xff\x05\xb8\x0b@2\x04\xad\x92\xdb\xa02r\xd7f\xea\xc2Ch\x1aJ.\xc6)8\xdc\xc0\xcbW\xf6\x90B\xf2\x81\xd1\x93\xd01\xaa\xf6\xdd\x81/v\x1d\x11U.F\xe8Q\x05@\xd6\xbf\x8b\xd0E\x17\x88dC,\x1a\xf7\x00\xd5\xed\xb8\xb8\xcf\x03\x8aO\xf1\xe5\xd3p\xf3\xe1\x9b9\x97O\x03a+g\xa3S\xa1\x80\x08Z\xe34]\x93Br\x94[E\xd0k\x02\xa8\xba\xe8\x12Zf\xcc\xdaoA\x1el\xd1K\xfbX\x9d\xb0\x9f\x08\x92&amp;\x1a\x89\x9c\xda\x0cu8\xee\xc9t\xf4\x91\xfe\x05^\x96\xb0EG\xd6\xb9&#123;\x08\xff\xa7\xc1%WQ\xa1\x81\x0fl\xd0\xc8\x80\xf4Uk\xfc\xccZf\xc5\xb3P\xb2\x99\xc6 \xbb\xc7!\xc1\x8b\xeb\xdd\xd7Y\xdb]o\x08?2\xc2\x99.Z\xb6EU\x9b\xade&gt;\ne(j/\xce\x9e\x0bM\x1dYdJN\&#39;WBu\xaa\x02\xe7\xa9\xd4&lt;d\xa8%d+S\xff\x98\xaf\xefu\xe8\x84.F\x83\xbe[\xfd\x02\xbee#\x8f\xdc\xb5\xf1g\xfbTA\xf0\x11\xc1&quot;\x97\xab\xe6\xa3\xbd\xb3\xa8=\xc1\&#39;EWr\xd3$9\xca\xc2\x88\xa8\xab\xb5\x01\r\xbf\xc3\xe4p&gt;am7\x1f\x93\xb2\x8f\xd6\xd0Lo#8\x82&quot;\xde&lt;`a+\x84\xb1\t\xd9\xf2\x12\xf7\xfcQ$\xd7$t\xc5&gt;\x05\xdb\x89\x8b\x8c\xfb%JS\x14\xe3M\xd7im\x895!+\x9e\x84\xbc\x84\xd1\x8c\x9eX\xe9\xbbc\xf1f\x12\xcdk\xc5\xf9\x1e\x06\xa9\x1dp\xc2\xc6C\x81\xd7\x9b\x06\xd9\x1b\x01A:\xfehO\xa8\x07\xcei\x81Mj\xbez\xcc\xce\x86!\xd6\x85\x0ei\x92\x9c\xe1.\xbf\xa9\xe8\xbf\xce\x08\x87\x0fd\xa7\xdfp\xd7\xec*\xcc\xc1J\x02\xde\x16)\xe8v\x86R\xceJ\x1f\xd1\xd03\xbf\xacC\x8c\xf3\xa6\xd7\xf7\x8d\xd4\x1b\xcb\xf8\x1e#\xe4\x96\x8bD\xe9\x99Q\&#39;\x9f%\xc4f&quot;\x12\xf3\xc1k\xa1\xec\x1d\x8a\x14\xb7|?&quot;=0+1i\x86\x83\x93B\xe4Z\xd9\x9d\x92h_\xde\xff\xcb\x9a\x89k\x0fI\x9fr\x193\xdb\xf0\x134\xf8w\x14:\xd3\xe3\x10Q)J\xa9rx\x88\xf0\xe6l\xf7(\xb8\xfen:\r\x15\xcdx\x9c\x85\xc0\x11\xcd\xb2\xa1\xaaiK\x13\x8d\r\xdbS\x813\x02\&#39;)\xb8\xcb\xca\xa0:\x01W-\xa3\x12\x9bq\xa9\xc4\x91\xa1\xc6\xd9\xc6\xb5w\xa3\xc0|&#125;\x81F\xcc\xd1\xa3\x173\x8f&gt;&#125;\xb7\xf5\xf5\x0c\x0e\xa82\xf0\xed\x81\nQ\xd7\xc9\x9a?\xc0:\x15\x12\xed\xa7x\xf6\x86\xc9\xa3\x9d3\xe9l\x8b\x9dJ*a\x8ct# \xedB?A\x10u\xb7\x00\xd9\xb9H\xaeB\xf3m\xe1&#123;(^\x8f\xc8U\x90D \xf0\xcaf\xb0\x16T\xf1\x0c\x15\xc5V\xf5\xef\xbfr\xb1[\x9f\xdf\xa8bv\xc7\xd6\xf6K\xd6\xe4\xae\xa9\tb;\x8fX\x13\xa2\x8a\t\xf9\x19uic\xc6\x9f\xae\x9c\xd6\x03\x99\xc0\xbc\x9b\&#39;p\xba1\x12,\xc8\x98O\xf5\xa5\t\xe3\x94\x06Z\x91\x92?y\x01j\xb7\x94\xc5\xab\x0eA\xe8\xce\x14\x056ff\\\xe4`\x9f!-&gt;\xfa\xba\x0bu\xff7\xf1\xe0\xfb\xbb\x94\x08\xf0\xac\x84\x87\xdae\xace!l\xea\x1e\xe5c\\\x00\x9b\x87\x99\xf6\x92@\x17\xeaqgCb)3e\xae\xac\xf8\xdd\xc4u3\x9c\xa3\xbc\x14\x88i\x14\xf2\x08&amp;w\xae\xc8;\xadA0\xc5\xc5\x9b\x95\xcd \x1c\xe0\xbc\x1f\xa1O\xc4\x0ewsw\xf7Tx\x1f`\x17\xfc\xb7\x8e\x0b\xe7\xc5+\x07\xe1\xa9\xc2rq\x9cnT\x03\x1dc\x18\xcd\xd8\x88|A\tJt\xf2\xebw\x8f\xde\xb9\x87$\xe9&lt;\xab\xb6\\1\x11\xffz\xc0\xa3.\xae\x81\x7f\x1a\xe7\xb1\xd9\xd4 =\x87R\xef\xe5\xa9E\xbc\xefE\x05|\xb3\x05\xd3y!\x13F\xb7Z\x17\x02&#123;\xb5&lt;\xf9\xa8ky\x8a\xa2\xa1&#123;\xf7\rv\xe9c\xc3\xfe`\x1f\x88\x80\xfd\xad\x83tv\r\x9b\xcb\xe7\x1dZ\x87\xbd\xddf7\xd1\xf8Gx\xef^\x0e\x9b9\x05\x8d\x19\xd3\xf5\x88\x84(&gt;h\xb1\xd1\xf2\xe5\xea\nh\x0c=&gt;_h\xe3=\xb6&quot; 6\x1d\xf0\xb2\xb7/n\xf7\x08\xb0\xd6h7\xe3\x1f\xc5\xc6\x81\xc30\x01\xed\xef\xbf\xbf\x1c\xe2j+\x97\x00;&lt;\x1d\x05\xca\xbd\xe1\xc9\xf1\xb1\xf8V\x00\xa0\xf0G\xfaiL2D\x0b\x86\xd9\xc1\xbd\xbaA\x07\xb6\xa72\xbf\x1bH\xd8\x81MoO\xe6\x1bJ\x98\xa6\xfd\xb3W\xac\xe6\x8e\xd9\x85\x87\xe4\xdd\x0fX1)\xef\xb3\xabc\xc3\xb9IDSL\x13\x84\x8c5\xbe\x1e\x95\xefH\x1a\\\x9cw\xdcX\&#39;\xed*\xfb\xdf7\xe8\x15\xaa\xfc\x96!\xc1\xd8!\xe5\xcb&lt;dj|T`3\xb7\xe6A\x1d\xc7\xc8\xa2\xa0\x84!]74\xba\x13\x9db\x08\xc79[V\x1d+\xa9\xc6[\xa7\x17\x0c\x05\xc1\xa4\x04\xba\xd5\x0b\xdc$\x1d~\x0bx\x04g\xf5&amp;M\x95\xc7\xb5 \x10\xb7|\xa8\xfd\xd3h\x10\xaf\xf2\xdfL\x8ael\x07u\x03\xa8O\x04\xba\x14\x99\x05\xc1\x08\xbc\x88^w\x1bd\xb6&lt;\xd1q\xe2\x1a]l\xcd\xf1\x06?\x07/\xe6\x9d\xdcG\xec\x85B\xe0\xb0\xa3\xaa\n\x9e\x07&lt;\x15\xd2q\x0e.`\xba\xf3\x934\x86\xd1\x17\xf1\xe0A\x9f\xc7V\xbf\xe8gT\x96\x14\x08-`\xf5r\xb9\xff\xd0\xd2\xfeqf\xf3\xe4h$P\x10\x85\xe3\xaa\xc3V@\x05\x16W&gt;\xd6`\xd9W\x87\x12f\xc4H\xb9\xec\x7f\x9d\x8e\x0eELC*\xa3\x92B=`;\x82l\xd3?x\xb6\x9e6\x0e\xb2\x82\xd1K\xe2\x0b\x7f\x051\x10\xd85~\x98\x10\x1a\x1f\xe7\xa5\xd3\xd0\xcd\xe8\xdb\x84\xe5Q\x00\xd9d\xf0mI\xbbX\x8b\xc4\x07\x98\xca\x97a\x95\xa8\x8f\xb3O\xdb\xc3\xf2\xf1\xaa\xd1\x12\xf3a9\xd7\xee\xe7PI\x1dlI)E8\x0e\x08\xcaU\nP\x89J\x12\xfb\x97\x07\&#39;v\xc0G\xbacy\x08\xc3k\x83\xfc\xb8\xa4\xa3\x91\xd2\x1b\x8f0+\x1e,D\xd02\x01d~\xd1\xbf0T\x9a\xb8\x0c\xae?\x88@\x06\xa0\xe3g\x05\xcfqA-\xa2\xe6\xa65\xf4y\x96\xd4\xf8D\xa4\xd5\xb7\xde\x1a\xc1\x80(\xa4\x17\x16\xc4\x80\x94_\nU\xbdl\x9eh//\x8fRg\x95\xcc\xc9\xc8\x8a\xa3#\x7fvy\x04 \xbbX\xdcF#\x93\xd6\xfc\x9dc\x85\x94\x9egzR\xf0\x15\x08\xc7\x06\xa4\xe5e:\xd9Q/\xffx\xb8;!\x92\xc0l\xcd\xf7\xd2\xcd\t\xd4\&#39;\x9eN\x91\xfa#\xc5E\x03\xf3n?\x99(\xfb\x93\xd2\xa3M`\xef\xda=$\xb0&#123;\xeb\\N\x1c\x16\x8b\xf4\x98\x16Xj\xbepX\x10\xf8\xc7\xc0\x01\xd1$*V\xcc\xbb\xf3(\x98qV\x99\x8b\x9fEP.ej\xa0-\xb7vT\xf1\xb6\x0cL\xe0V\x14\x01t\x94\xb9L\xf5\xaf0)&amp;\xeb&#123;%\x84\x8a\x0c\x04 \x97\x10X|\xe7\xd4\xde1)\x082Mw\xc9\xa6\xe1\xde4\xb8\x95\xbe=|&gt;\x8d9\xac\x1c\xfbf\xd2Y\xf19\xddz\x88\x90\x95\xdb\x0e9\xf9\xfa\x199,\xb4yIGz\xb9\x07\xf1\x16^\xe86\xb8u+\xe0\xea\xfa\x05\x96\xeb+&lt;N\xb0A\xdaY\n[\x1dD\xbb\x9c\xac\xaa(\x19\xd0k\xf0\xdba\x83\xe5\xb9,\xe6\x8e\xcd\x97\xf9\xf6_,a5\xdftz\xbd#\x1b\xb0\xee\xc1\xbc8\r\xb8,-\xa6U^\x1c\&#39;Zm\xcc\xe6\&#39;\tQ\xed\xb3\xf1\xd8\&#39;[x\xd0r\x1d\xa6\xb5\xfe&amp;l\x15\xa2\xefZ\x14\xf2[ Z3\xc0u\xd7\xb0\xcf\xab\x1a\x9a\xa5\xb44\x0c\xba\xe4\xeb\x8bt\xe2\xc9,\xaf\x15\x009\xbe\xca\x86/\x86\xc4\x1b\x89V\xe9@\xffpL1\xd6cMu\x98\xcf\xddx\xfe\x9ef\xed\xdb\x19\xa8\xcfg\xc6lT*\x1f\x90\x1a0\xd1\xbd\xbd\xef\xdd\x12x\xfd\xd2\x8aE\xa2\x05-\xa2\xaf\xec\x87k\xfe\xe3T\x1e\x10qR+m\xe7E\xf2\xc3-z\xc7;\x1b\xfc\x02Pa\xa75\xea\xc0\xae\xf1\xa7\xa5\te\x8eD\x8e\xebx\x07\x1b$\xbb\td\xf0\xbb\x99o\x0c\xcb&gt;\xc1\x0c\xe40\xf2\x9e\x04\x9b\x81U\x8c\x7f\x0e[\x1a\r.\xd4R2\x9d\x14ND&#123;\n_\xa27\xf2\xfa\x97s\xfbQ\xed\t\xa1\xe54Nr2mi~B\xd5\xfatEf\xc1\n1\xe9\x12\xedG$\x88O\x90\x0c\xdc6\xfd\x1c\xd7&gt;\xa2\x95\x06\x9f\x1by]2\xf38&quot;\xf1\xb5D\xf0\xc4\xde\x82=i\xc9\x0e9&amp;h+\xc33 \xa8r\x98\x8bb\x8fJ\t\xba\xab\xa3\x0b\x85cG\xc0A\xfb1H\xed\xd1\xac\x8eat\x1b\xbc\x86\xb1\x16\x87\xbe&gt;\xfe0\xb4\xc1\xe6LLF\xa2\x99l\xef&#125;\xd5\xc2\x17\x8eW\x91\x19\x816\xd6|\xfb*)\x8d\xc6\xc7.\x99\xcb7\xa2\xd6\xaaA\xb4\x114A\xde9\x08Q@\xa2U\xf3(\xba\xb1\xd6$\xc6A2AJ,\xf1?,k\x9f\x85n\x89J\xf0\x19\x05\x7f\xae\xccLByj\xef\x19]K\x16-\xedr\x19]\xadK\xbf\xfdS~\xf5qb\xe6\xc1\x0b6X\x98\xcd[f|50\x99\r\x08\x9a\x11\x1by\x94\xfcb\x90\xbeE\xeb:r\x8aoVN\xbbr3 \x9du\xd9iT\xaeA\xd3\xa1\xa1\xb3\xab\x94\xf4\x95\xd0&#123;\xf8\xda\xca\x82\&#39;\xc95^5G\x13&quot;(A\x00\x9d$T\x00&quot;\xae\x15\x90\x97uqW\x95\xe8H\xa7\x05\xd4\xa5\x91\x9d\x16\xe5\xa9\xec\x98*l%?\xc2r\xdb\x9cht\xc8\xa7\x18\x84\xe8N\xe3\x8c\xf2\xd2&amp;\xd1\xb8\xa4A7\xeeF\xde\x86f\xd7]\xbe\xdb\xef\x92\x9b\xbd\x8c\xaa!\xdf[\xd7\x02\x06\xab \xce\xb2ie\xc7\x0b\xfc\xac\xb0[\xd1\xb1\&#39;^\xc9\xb3\xb77\xaf1\xa6\x14\xb2\xf7.C\xa1\x94\x99\xb7\nz\x84\x8f\xaa+\x958\xa8\xfdg\xed\x9e\xfd&quot;\xc8*Xs\xc2\xd3\xbe\x86\xa9\xd7\xd7\xc3P2\xe4o\xad\x95\xb6\x1a\x05\xe1M\\\xa9\xabf&amp;\xfe\xbb\x87\x14\xf3\x00H\x93\xc3\xcc\x0c\xe2W&lt;\xd1y\x1eMS\xa6\x1aX\x0e\xf0W/\xd8\xca\xae\xb9\xc5\xacd\xdbe\xcf\xdb\xb57]*4\xd1*\xad\xedi\x1f\xe7\xab\xc9b\x8d0\xd8a+]\xf8\x87M\xd2\x02\xee\xa3[Ly\x8c\xae\x02\x9b\x12t\x81`\x16\x1e%\x1a\x84+Y[\xaf\x96we\x15\xf6mR7&amp;jx\xc5l\xda\xf5\x03\x92,\xfe\xf6\xb2vN0=\x07+\x1bv\xba\xfa\x9c\xdc\xbe\x06\xee\x88\x88K7\xec6&lt;E\xf9\x11\xb28\xf0\xf4d\x993\x1a\x14?Y\xfeH7\x9e\x9cV\x1dQ\x81\xb2bX\x0e&amp;s\x17Q\x039\xa3\xbd,\xe9\tE.\x10\xb7\xdf&#123;jW\xce\xf0UA\xc0J\x87\xfaDy\x80p\xd2\x14G\xcd \xd1\xe5\x1b\x93\xe2\xe3C#4\x0f\xb1\x9b\xdd\xf2\x01A\x82\x9e\x9c7\x85\xed\xc1q\xe2\x85\xe3\xf2`z\x11\x99\x15\x0cm\x99\xe9f\xb14\xff\x84A\n\x01&gt;\xb6\x04\xca\x10\x952\xc3\xca\x1b=\xa3\x94\xea\xdf\x1e.\x81\x15iR[\x9d&lt;\xee\xcf\x94\xf7\x9c\x0b\x1f\xb7\xe2\xbc\xac\xf6\xc4\x07fR\x14hS\x89\xd9:\x959/\xee\xe0\xf6\x95\xb2\xe8q\xe2\xc5\xc7\xb3\xff\xc4$\xa6\xb6&#123;\xda\x16\\\x16&#123;|@|.|*\xdfGiW#\xc0\x8e\x03\xd0\xfb.c\x10\x99\xa2\\\xb3D\x0f+\x9fFe\x88,\x81\x02\xa9\x03\xd3\xe7L\xcaTo\x0eZ\xdd\n\xff\xd2\xf3\xbf\xaf&amp;;\x1d\x11\x90&#123;\x8c\xd7\xc57\xa3Zf\x1be\xcaq\xf7\xf7\xcb)zS!F\xa3\xc1\x1ck\xe0\xe3\xd3\xf9n\xe4\xb8m\xa9\xa5W\t\xb2\x18\xdfT\xba:\xbf\x12f\x01\xa4g\xb6\xbe\xc06:%\xcc&amp;\xb3\xd9\t\xa2\xe6\xaa\x95\&#39;\x1f\x13\\\x85\xff\x96&gt;\x0bf\x0c\x93*\xb3\x8a=\xa6\xac\xa2\xc4\xe9\x13\x1a\xc7=\xa5x\x17\xf1\xc3qd\xbbd\x14D\xf5\xe6\x93[\x9f2\xb11A\xccP\xcb4\x87\xe4\x89\x84\xb8\x81e^\xcc\xd9\x88C&lt;CG\x7f\x0c\xa7\x8c\xb6S\x03!\x81\xa7W\x88\xd7\xc1\xed\xd2\xe2\x80Z\xd2\xd1\xf6n|/\xec\x14\x94X\x12\x87\xc6+\xccW\xe8]\x91\xb5\x82\x12!\x1fv\xf0\x94\xb4\x1e\x15xM\x1b\xa8\xe4\xef\xea\xbdb~\xa6\x07\xae\xc2~\xe1\xf3\x8b\xe5\x81f\n\xaa\x08\xebgM\xd1\xc9~\xc6\x19[?\x13i\xaa\x10K4f\xec\x92\xe1\xc1\xd0\xbe\xa2\x18\x17D\xec\xa7\xf3R\r/J3;\x14\xf6:r[\xea\xfa\xca\xc59\xc5\xf40\x96\xed\xb0\x17\x8f\xda\xe8B\x03\xf82\xc9\xe3\x8bx\xf7\xff\x94\xac\xaa\x15&quot;\xe8\xfc\xaa.\xea#\xaa\xf4T\xcd\x18\xb0&gt;\xb5\x16\xfb\x89\x88\x1eFq\xeew\xee\x14\x99\x9c\xbd\x1a\xab\x01\x88\xae\xc9\xd9\xb0\xb9)y\x92R\xb4\x9d\xc3f\xf0\xff\xf7o\x91\xd1\x86\x03iP\xa2W\t\xd7n\x8e=\x10\x84i\xea\x892D\x9a\xb0\xcf\xf8\xbf\x14\x8a\x81\xf0\xbd\x83\x8b(\x17\x94J\x1a\xf6q\xfd8\xf4\x97|\x81t\n\xe4\xea\x02\xd1P\xc3F\xa4&#123;&quot;Z\x05\x89\xba\x01z0\xa8\xee\x80\xc6\xbd\x18&#125;-\xd2\xf8\xc8k\xdd\x1d\xf7i\x0bKK\xac0\x80\xbc&#125;\x16\xd3\xf8\xba\x17I\xaf\x8e)g\xdf\xb3\xf1\x14%\xb0\xa7R\xa6g\xa3\x8fE\x0e\xbb\xae)\x0f\xbf\x0f\x88\xf4?6i)\xac\x98\x14$9)m\xc7\x8e\xeeQ\xdb&gt;\x8a\x0eV\xe6\t\xeb/\xc2\x85\xf0=\xd0\x87\xc3I\xa6\xa4\x0f\xa1\xf2\x08\xa6\xafPBt\xf6\xa0\x01\x8b\xd4\xd8\x0f\&#39;\xc7\x88rQ8\xb7s\x1e:\xf6\xb4\x89\xac\xa8\x9e\xfbY\x9eC1\x7fq\xb6\x02\x83E\x89\xdc\x05\x93\\\xd3\xac,\xb5\x9f=\x8f1\xeb\x88\xd0\x83HCt\xf8\xafwa\x9d$\xde\xa0\x81\xbeE\x0e\xf2\xe4Lq\tL\x0c\xaa\xf6|\x14\x8dZZ\xd7tCD\x7f\x15E\xadD\xd2\x819\xe9\xa9\x7f\xbb\xff \xbd\xab\xe1\xe5Q\xcf\x12\xdd:P\x9d3\xa8]\xb4\xb1YW\x10c\x10\xa9nRg\xb9t\x1dE\x8b\x98|\x86gA\xa9:*_X\xddN\xa9$\xef\x11&#123;=\xfe\xc8V\x85\xee\xd8i\x83\x9dr&quot;d\xd10\x06\x9c\x1aU\x86\x9e=\x92\xdf+N\x1e\xfaC\r\x1b\n\x10\xbe\xe3J\x00K0\xec\xbdv\x9f\xa8\xeb^\x17\xfd#\x13\x8d\xb8\xbe\xc45eK\\\x03w\xd7\x1b\x91\x99\xe3z\x02&gt;\x0c\xf3\xce!z\xeb\x8d\xad\xfa.\x7f\xec\xab\xb0\xb1\xfa\xb7O:\x80)?\x8d\x12,-\xb8\x10\x8a]\xee\rx\xc9\x90\x9f\xa7=\xa1\x94R\xad\xc1j\xe2\xf5\xddB:a\r\x90\xe6\xf9D\x0fO&amp;@Mu\xe2\\\x81\xdbRV[L\&#39;\&#39;\x06\xdb\xd2\xfdK+_\xed\n\\\xcf\xd0\xe5\x06\xa5\x8a\xed\xcb@\xe86\x81r\x99\xaeB\x97\xe6\x98\x8c\xd3\xb4\xb0.\x82(\xb3\x82\xdcI\xf8\x9al\x87A\xa5:\xf6\xf3\xcf\x1e\xb3\xcb\x13!\x02dP\xfbaE\xe5\x9b^,p\xb4c)\x94y\x99\xa8\x1c\xf7\xe5\xa9\xaes\xac\xe6(A\x16\xae3\xc9\x08\xf1)\xe7^\t\xc1\x00\xa5\x93S\x08\rX\x17\xc1t\xb6\xbc\x0f5\x18\xdd\x1a\xa0\x87o\x81\x02\xa3\x02\x07\x8c\x86\xc4\xdaV`\xc8\x91\xb2\xa6\x1a\x0ff^K\x15\xca\xc45&amp;l\xbeq\xe4nvG\xb4\xf2,C\xca\xfe\x11\xdb\&#39;\x8cr.X\xc5\xe6\x814\x8b\xa2\x91\xa8\xea\x82&quot;\xf8\xea05\x11p\xf2\&#39;\xc7\xf2\xf7\xa7\xb6`\x19X\xea\x9e\xb4\xebj\x16q\x1a\xf0^jW\xe0\xdb`\xbc9qQc\x7f\xbc&gt;\x99\x12\xb8\xb2\x1dO\x00\xa7\x9e\xfb\xa9M\x8f\xe0DW\xc4\xb3\xbc\x1ck\xa5\xca\x84Jj5\x9f\xea\r*\xa2\x8b\x0b3\x94x\xa7\xdf\xa0\x02\xe8\xc9\xbe\xa4,\tCG\xc8\x082\xfb9\xcd\xee&gt;\xebMQQ\xb7\xd5\x17\xc5\xe9\xe0\x8boz\xf1\xd6J\x8eF\x8c\x8aX\xbe\xc0\x12\x9d\x1aN\xb53\xb2\xfe\xfa\xb4h\x13\xc6U\xfev\x05\x16GG\xbf\xa2D\x9c\xf1\x8eKe&lt;\x00\x03\x17\xad\xe5\xa9\x8d\x11\xd0\x95a!\x93a9\xb4F3\xbc\xb1j\xe6\x1d|\x81m\xc2\xcb\xeay\x80\xb8`\x08Q\x88\x84\x01\xab]~\x1e\xa0\xf7\xb5\xc6r\xa90\x91\xee&amp;p\xc5/\x02g\xf8sB&lt;-\x0f\xa1^&amp;\xd9&quot;\xe1\xa2\xfa\x8c\xf2\x83\xc8\xb5\x1a\xd9\xe2\x0c\xbb\xbf\x18\xa0\x1b@lq!ck\xf2v`\x18\xed\x7fN\xa0N\xa2\xba&quot;\xbb\x0buo\xc6_\xb2w\x81$\xfb\xce\xbd8\xc2\xb2\xc8\xa3E\xcai\x9b\xe5\xb6\xf8\xaa\x1a4w\x96\xb5\x86\x9f\na\xb8\nH\x11\xd8F\xaet\x93*\x07z\xe1\xd3\xe3&amp;\x87\x1dXB\x04\x8b\x00\xf6t\xa5_\xcc\xea\x96*\xb3\xdc\xc2\x18f\xf5MH\x8f\xd4\x8a\xaf\xf9\x8d\xea\x89\x9b\x05\xca\xf3K\xe7c\\d\xd7z6]3&amp;n\xd6Fg\xe1\x89\x8435dThSy-\xea\xd0M\x8a\xdb\x98\xb1\xc2\xdf\x17\xd3@\xb1%A\xefPocx\xe1e*\xd9\x19R7\xad\xd5\xf0+\xcc\xddCl\xb8\\6^\x8a\x03\xd8\x1eeq[\xfa\xf3\x8a\x16~\xcd\xef\x81\xfd\xe7\xaf\xf2\xef0F8\x1c\x8a\xb6\xcbi\xb1G\x9d|l\xef\x9b\xf6G\xba&amp;8\xa2\xa2j\x01&quot;\xaa\x9b\&#39;\xc9]\xcc\x8a\xcd.$\x03&lt;\xb6(\x9d\xee\xcb\xa96\x07\xb9\xc4\x1f\x93\x0c\x0f\xed\xc3v=\xa2\xf7\xc0\x9fNcm\xb9+\xf3\x1b\\\x19t\x1d\xf5eg\x1b\xda\x01!bm\xc9\xd7\xd2\xc0\xc8*\xcaZ\x0b\x15\x8d\x99A\x98\xfa\xa5\xdb\x81\xf518\r\x8d\x9c\xd4\x98Q&#125;\&#39;\xd6\xaf\t\xe4=\xd1T&#123;\xca\xe4Tp\xc5\x8c\xa7z\x9cQ\xd1\x06\x04\x05\xfa^\xb6o\x86E\xab\x80\xd3.-)\xae\x1bh\x81\xcb/\xf6!\x83\x105\x89\xfb\xac\xf3Q&amp;n\xc8\x1aP\x16\x11\xfd\x16\xf5\xe0\xb8\x1e\xc4\xf6\xba\xb8\x02\xa7\xfd\xfef\xae\t$\x0fI\xe3u\xa8\xf6\xa6+\xac\xce\xcb\xf8@\x91u\x02\xecI\x0c\xe0S\xe3\xbb4&#123;\xfe\xbc\xea\xd1\xd9\&#39;8\xe2\xd4\xf0\x1a\xc0\x05&#125;\x16\xcbc&#123;&amp;\x1bc:\xe3\x02\x1a\xdc\&#39;\xa2a@X\xd6\xf9A\x85 \x89y\xc38\x1d\xa2\xdc\x95\xaf.\xce\xeaV#\xdb\x12\x07\xd3\x87d\xc1\xc8y\x90\x01\\(\xaaVy\x8f\x8da\x85$4\xdc7\xfdl\x01\xbe\x1f\xef\xd1\t\xc7\xe2\xe6\xfb\x90\x7ft\x93J?\xc8\x04iO\xd8\xc5\xf5\x7f\xe8\x1a\x81\x19&lt;9`\xc5\x83\xe6L\xa6\xefT\xfc\xc3\xe8\x00\xdbl\xb2\x01\xcf3e_\xb2I\xf8W\xf6\xc2\xa3\xc7\xc4\x8fL\xc0B&amp;I\x89\x8bd\xae\x05#\xdcHG\xffN\x8c\xeb;I\x00\xa4\xa8\x96$\xaa\x8d\xa7\x03\t.\x19\x16$H\xe1\xe0\n\xc0\xf7,G\xce#\xc0,=\x0e&amp;\xedB\xd6\xf6\t\xc9P\x12\xf7V\xbaVq\x0c\x0f@\xe9\x9a\x10@\xae\x0b\x9aM\xaa\xd5\xbed\xa9v\xb9\xff\xe2&amp;1#;)A\x08\xd0\x08FN\xe1\xb3\x06sd?\xe8h\xd8\xbe:\xb0\x8c\xfa-\x1c\xbbB\xbd(\xe6\x94\xa2\xb2\x15t\xc4rhH\xe7\xa5\xa3\x1b\xe7\x93\xc3Y&amp;\x17\xcd\xe5\x8c\xcbi\x93n\x94\x0b\xa9[P\xa7\xa0\x7f\xa1\xe8(\&#39;f\xb4\xcd\x19[&amp;W\x7f\x0cb\xd9&gt;Gp\x7f\x1a\&#39;\xb8\x91\x11\xb7\xbb)r\x86\x82\x15#\xe8\xe0\xcdcwPM\x1f\xc0B\xd0\xb4ftngW\x92\xc4s\x8eSe\xcdv[&gt;\xbc\x8e\x97d\xd1\x84\x194\x82&gt;\xd1\n*\x88s?\xc4\xb0y\x05\x99\xa7\xfb\xad\xf0@\xf8\xed\xbbh\x14h$y\xc8\xbeR&quot;\xa6.\xb3\xd4\xc2\xda\x1a\xcb6($\x06\x93u\xeb&#125;a\xd1\x11x\xbf\x83\x9c\x89\xbf)\xadC|\xfb\x19kyI\xec\xb9\xbd^\xf4\xbd?]\xe2\x02J(&amp;\xc9?\xfc\xb1H\xb2\x9aL\xe1\xff\xebsf\xd9mS\xed\x87\x91\xc7\&#39;[\xf43\xb8\x16X\x82\xfd\xbd\xa2\xd0\x1eL\xeb\xd52\xab\xbde\x7f6\xbf\xd6tw\xc6\xbf\x865M\xb7\xf5\x83\x96\x9f9\xbd\xd9I\x89\xf9qdW\x1b9\x1d*A\xbf\xbc\x8e\xfc\xfd\xdd\x1a\x12\xe70_\xe7\x97\xa7is\xb9\x1a\x15\xc2h\xb5hI&gt;\x06\xb3H\xad\xfd\xc3\xa9\xda\xaeJ\xf5\x0baR\x1f\x07\x7f\x18\xc7%\x1c$\xba\x1c\x1e\x1ao\xc5\x970G\x12(a\x00\xb0i\xcdP\xa8&#125;\xde\xbda]s\x9ak\xbe\xbe\xf2_\xd2\xc1 \xde\xb7)ir\x99\xfd\xd7p\xa7\x8cE\xc0\xd6\xe9\xce5\x9b\xfc\xdc\xb6\x13\xa0\x91\xba\xda,\x1d\xdd\xb9\xad\xfd\x90\x1a\x11\xfd\xcf\xaf&amp;l\x8d\xa5&quot;]p\x1b\x95\xa6\x0c\x9bD\x04\x13\x96\xef\t\xbf\xadp\xb5O\x1d&lt;/\xfa\xbb\xfa\xc2R:#K\x1c\x1a\t\xbf\x8f\x1bSd\xbb\xa8\xa9\xb0\x83/(\xc4\x84r\xdd\x1a\xbf\xc7\tuzA\xf8\x89\xd5\xa0\xdcLg\x96(\xe6Mo\xee\xba\x8b6z8\xc7\x9a\xf3\xff\xa2\x02\xb4\xb3\xf9\xe3\xbe\xfb\xed\xdb(\x02\x88-\xf7\x1dM\xbdz\x91r\xbb\xec^\xf1;*\xa0\xcd@n\x1ch&amp;\xea/\xda&gt;V[b\x0bx\xe6\xcd\xb2\x87CO\x8b&gt;\xfa\xeb\x85\x1b\xf6Q\x94\xc5q)&gt;\x0b\xb1E\xc6\xd4\x16F\x87\xd7\xb6\xed\xf4Y^2y#O\x9bv\xb6\xbe\xf2\x1d\xd2\xd5li|\xcd@-\xc7\xf3,\x96&#123;\xd0\x10\xaf\xf40+\xae\xd7\xb9\xb4\x92\x84\x16\x94\x81\x8e\x1b\x8e\xce\n\xc6G\xbaU\x11\xb9\xd0\xc4\xf7Jvv:a(\xcb-f\xbb\xb7\xf8!\xae\xf4\xa0\xf9\xfb\xc0\xe1Q\x0c\xab\x1f3\xad\xf6\x15\x9eQ3 \r\x15\xccwL\xee\xa8\x99\xe3\xe3\xce\x18vF4\x86\xd6[mup\x8c6\x93O\x81\x10L\xb9@\xc9\xdb\xda+\xb2&gt;\x83\xbd`uz\x17\x16O\xea)3\xd5YP-\xaaOs\xce\xbag_*\x7f_\xffM\xaf\xc9\xef\xb4\xdai@\x10\x1d\xc5s\xc4\xae\xb3\x88W\xe8\x8e\xd0I\xa2\xffl\xa3\&#39;dr\x92ma\xd1W\x83\xe7\xbc\x14\x006#O%EH\xe8_\xd7\xb5\xfd\xa8\x8c\x81\x07\xdb\x98\xc7\xb7&gt;t&quot;\xf5G\xc0\xa3\x8e\x19QYZ|d\xbf&quot;&gt;\xea\x89\xcc\xb5\xea\xaa\xc62\xd6e\xac\xe9\xfa\x1c\x98\xb7\xfb\xfd\x15|\xb1`\xec\x1cO\xa4\xc0\x0c\x94\xd3.\xec\x17\x01P$\xd7\x95\xd2\x9b\xc0\x04o\x1d\xce\xaf\xd8\xe4_oS\xce\x8c-\xf0\x06\xc6v\xd2\xa3\x0eL\x11\xedC\xc7]\x82Z\x06\xe7\x92\xff\x19P\xd1\x02K\xc7a\xbd\x14\x8a9O;.\xa4,\xf3.N\x10\x10\xe1\xd6\xfcx\x94\xbeAp\xb8(\xdd_\xf65`\x9f\xa4#\x19a\xe8gC\xf0P\xba\x00\xb0\xc3z\xdc@\xad]\xb6\x0c\x8dy\xc8G\xc9\xf7q]\xaf\xf1[\x88\xba\x0e\xf9\xb2\xa2\xb5\xc7\x87\xce\xc9\xe3\x87\x1b\xad\xa6\xa5-,,~\x94\xea\xf9c\x99\x1d\x8aD\x1f\xbaH\x87.o\xed\xf8\xc6\xfa\xc7~\xa1\xd0\xc2$\xc5EU\x93 \xb5\x17a\xac\xed-|v\xc4&#123;]+9\x88\xda\xed\xea\xa0 \xd7z\x06\xd5\xd9`9\xcej\x8d\xab\x00\\\x88\xa8\xdf\x0e\t\xa2\xa9\xfe\x99y\x03p\x16\xb3I\xe2[\xe1\xbe\x98\x14\xa1\x15U\xac0\xca2\x19\xc1\xa4\\\xa1&#123;\xfb\x1a&amp;y\&#39;\xdd\x91h\r\xf0\x11\xf0\xc1\xe1hz\xd6\x80\xabH\xad\xf9f\x7f\xd5\xfb\xe3\x8dZV\xe1\x1d\x0f\x90AT\x05\xd3\x016\x02W\xb5L\xda\xff\x04\xb2h\xc5\xe4\x84\xe8y\xb4X\xb9\x07\xe7\xf8\xc5#SDG\x02+\x97\x83\xc2\xdf\xdb\x1c4\x94\x81\x99&#123;\x1f\xea\x99\xef\x11o\x10\xc0\xb9\x7f~o\xc0B\xce\x8b\xb5\xeb\x1cO9\xd5\x1dj\r\xea\xf6|\xf1\x0ev\xd6\xad\xc2\xe693w\xa2\xd7$\xbb\x97^F\xee\x12fm\xb9 \x03\x13 \xb7\x9a\xd3\xc8\xba\x10\xa7:\xc6\x8d\xffzQl\xb7\xb4\x85I)V\xe3G\&#39;\xb8\xb4n\x9a\x10\xded\x8d\x02\x11)\x05:\xc1|I\xa4\xe35&amp;\xc8\xdc\x988\xea\xce\xf9)\xa4\xb8\x95\xeb\x17\xc6\x94\xc5\xcc\x19\x0e\xda\x06\x9e\x90\xc8OZ20l0*E\xd0\x8f\x1b\x853l\xde\x1b\x8d=-\xe9\xb9\xfb\x89\xba\xe7z\xda\x92\x0b\nT-\xce\x9eLv^2+\x8ay\xd9\xc6\x89\xb7\x86\x02\x08G9\xe1\xe0\x9d\xc5l\x90S\xc6\xc8\xe4\xcf-\x8c\xb8\x99!^\xa9\xe7\x8f\xa7#[\xe7\x87|5Hf\xb9\xfea\xd6\xd49\xf1S\x7f%3\xef\n\xf1\x86De\x87\x95\x1dBpg\\&lt;\x80H\xe7\r$\xb2\x96\x81\xf9p-\xb9l\xe4\xa8\x9a@\x1d\xfeg\xa7jR\x1e\x1d*c,&amp;\xe5;\x83\xd2\xccK\x0e\xde\xcf\xc1\xe6\x8cjR\x1e\x1d*c,&amp;\xe5;\x83\xd2\xccK\x0e\xde\xcf\xc1\xe6\x8c\xddA\xb6\xe6\x90\xb4]|\x07\x92&amp;\xd8\xbe2\x85\xc76FsFe&#39;
i=45, n=9129, dic=&#123;&#39;msg_type&#39;: 1, &#39;piece&#39;: 4, &#39;total_size&#39;: 74620&#125;
piece_len=9084
recv end
info_hash=e84213a794f3ccd890382a54a64ca68b7e925433, metadata_size=74620, metadata=b&#39;d6:lengthi1953349632e4:name32:ubuntu-18.04.1-desktop-amd64.iso12:piece lengthi524288e6:pieces74520:\xba \xb5\xa7-0%\xbb\xc7\xab\xb4Xyvc\xbe\x82_RL\x8b\x1b\xd4\xc4X\xbf\x92\xf0\xebU\xb8&gt;\x89\xe3\xd9\xc5l\xbd\xc5$\xb4\x02\xc3\xcc\xa9\x9f\xf7\xad`\xf8\xe8\xe7\x81\xbe\x8c\x8f\xad\xba\x15~)\x88\x91\xd6v\xf7\x85\&#39;\x82\xb8\x05\xb4&gt;fhk\xb6\xad\x12\x07\xd9dd\x1c\x05\xcf\x1ax\xb2P\xc6he\xde)\xb0dsY\x10\xc0\xbe-\xd7\xf1\x1f\xbc\xbb\x14\x07\xe3\xb1\x14n\xbc\xfc\xc3)#Yj\x19\xebR\xf1\xd0\x13\x90W,\x93\xf7\xf4G+\x00T\x0c\xe4\x90\x13\xc8&#123;-m4\x94\xfd\xb2vvl\x95\xdf\xc1\xb9\x17w\xb6\xf1\xc1\x89\n\xdc\x11\x9c\x96r\x80yS\xa5^\xeb\xdau\xe3\xa4\xbf\xcb\x00\xb5\xcex\xe2\rxejk\xa4\xbdp\x16\xd0C\x97\xd7\xe1\x80\x01 \xce.y^\x02\xcc\xbfa\xa4\xb5&lt;\x83j\xb9\xa7\x16\xd8Q\r\xdc\xcaCc \xc6\xcc\x8c\x04\xf4b\x94%c\xbc\xb4Y\x8f_\x02\xb4\xb45\xdb&gt;z\&#39;\xe3=K\xa1\xfa. x\xef\x83W6I\x08\xfeI\xaf\xf3\xfcg-\x83ay\xfa\x85S\xd8\xa6(\xdc&#123;\xf8\xda\&#39;\xd2\xb4\x19&gt;\xa2jF\xd8\xf8|\x9c\xe8\xcb\xe3\xf3\xfcF]\x98-\xb7\xd2\x9f&#125;A\x14\x9c\xeaRw@\xe8\xbdn\x86*\xc0KC\x83\x9b\x15\xe3\x86\xfc!\\\x1b\xc4J\x90\x1dq\x85F\xdd\x0e`\x02)\xadQ\x9e=\xb4e\x88\xf1\xd9\xc2\x9c&amp;%\x11\x10\xa3\xb1aI\x1f\xd7\x92\xa9\xf2\x1d]J\xcd\xe7i\xdd7A\xd5\x12\x0f\xd2\x1bd\xe4\xf7%\xe2\x1d\x84\xb6M\xa6\x1d\xe5D\x9f\x98\x88\x98m\xa3\xef\xb4\xc6\xe2-\xc4\xa7\x97&lt;\xa6X\xf5\xb1\xa2yOE\xb5\xfe._p\xd7\xb5_\xf9\x89\xc1\xcd\x8b+\x97v\&#39;wk;I\nG\x11$6\x8e1\x1da\xcd&lt;k\xfd1\xd6\xf4%\xc561\x89$i4\xc2\xcb\x85\x87Bs\xec7rm\xf5\xb4!F\xb6\xc3r\x8a\x9e\xfd?y\x88\x00\x05\x03_\xf8\xa7SY\xf6\x88I\xf4\x8e\x9cPU3\xc3\xf1cZ\x8d\xed\xa3\x94 \xea\xc0+\xeb\xbc\xf2Y\xdf\x14\xc8\x05\x92\xbf\xd0&quot;p\xae\x9d\x1bA\xd4\x97c\x9b\x18\xb1\xd2\x0b\x8d\xd4\xc0\xf4\x03\xda\xf3^\xf3/\x12\rFV\xd0N\x80\xb4\xbd\x11\x92E#\xf0\xd4cq\\[\xfb6&amp;\xd0\x15\xcc&#123;gg\x87H&#125;&quot;\xfa\x9dW\x07y\xe6\x1dx!\xf1\xdb\xac\xbb\x84\xfbC\xcfjg\x035\xb7\xfbwu\x96i\x84i\xbdO\xc0\nhDb\xde\x08=\xcf\xbbzW&quot;\xa6\x08TWb\xb9H5e\x7f\xbdD\xfc\x91\xe7\xf1x6\xf94\xed\x02k\xbf\xe9\x1f\xcc-\xbd\x10&lt;\xf6\x93\x18\xb1\x15\x82\x05A&lt;\xdf\xb9\x96P\xca[U|Iy\xbd!_\x8c\x99q\x87\xa4\x01\xa3\x89\x95|t\x07[2\x0fT\xec\x83\xe9&#125;\x9d51\xc2\xb7\xdd\xb4\xe4\x10\xa8\xcc\xea\xb8\xfe\xa0\xac+\x9f\xafxR\xc4\xfc\x9d^\x0e\x9d\x0eK\rI\xc4\xdb\xd6a\x1c\xab8\xd2\\\xb3[\x04\xc2\xa3\x02fP\x8d\x90\xb1\xbb\x83E\xab\xd1\x8dt\x13d\x90\xb8\xce\x94\xb1\x80\xa9\x18\x95\x97\xb8;\x0bO\xce\x92\xc3dqw\x9dS\xcevO\xd9\x128\x13?\x0cp\x8b\x1b\x883\\0*\xbf\x1e\x87IB\x05\xa0~u-\xbdY\xbd\x03|y&quot;\xfc/[fP\x14&#125;\x13\xa4\x7f\xc8elz\xa1B\xe9N\xa22\xdc\xc8i\x1af_-\xa2\x81\xc3\x9e\x05a\x88\xd3[*x\x85Jy\xaa\x8e\xe7\xbe\x92\xa0\xb7\&#39;\x88\xb0\xff\xa1\xe0\xe8R9\xc0\x8a\x13\x0e\x0c,\x9c\xaf\xf4\x1bj\xac\x8aP\xb1\x11\xf78o\x02\x9b\xbcU\x1c9k=\x08\x8d\x05a\&#39;\x96u\xe9g\xd3\x1et\xc4N%9\n\xb7\xea\xd0\xea\xa1+\x19\x12\x1c=8\r\x8f\xdfu\x80x\x1b\xb1L+Q\x1f\xa0\xaem\x13\xb6\xee\x7f\x19#\xf9\xd7\xa5s\x10\xe3\xc1\xcaZ\xd5&gt;\xceN\xc2\x993P\x9fSq\xb6\x82\x1b\xd7\x9b$\xb4\xf5\x8f\xfe\x033\xd8j[\x9cO9J\x1e\x9fr\x15\x8a\x00\xea\x08\xe3\xeaG\xaaq\xfb\x19\xc4gn\x9a\x10\x91\xa9\xbf\x9d\x07V\xa6K\xb7\x02\xdazWQ\x82\x06p\x01\xd9\xd8Z\x14+7x\xc3?\xd6\xeb\x0f\xb7\xab\xa4\x99\\VG\x00\x16\xd3\x0b\xb3OFN\xfc\xe24a\xa770@\xa7AD\xab&amp;S\x19C\xf6\x9e\xb5\x05\xac\xb5=\xe3~\x82q\x1f\x0f\xbes\xc9X\xca83h\x15&quot;\xeb\xe6\xbe\xa3\xf9~U\xdc\x9d\x8a\x9fF\xa8\xe0\xecJ\xdd\xf7\&#39;\x1f\xd2\xb3\xf9\x0bYB\xb3\xcd\xc3V&amp;\x7f\xbc\xfbWl\xee\x86\xfc b\x85da?\xd0t&amp;\x7f\xedc\xc8,UN?\xd0\xf8\xd9\xea.\x1e\xc8\xc7\xc3mkme\xe3z\xb4\x9bi\xbd\x18\x9f\xf6\x83\xaa\xc4]?m\x1b&#125;\xa9X:\x9f\xd6\xc70\xb4X[\xed\xa3\x9bFL\x7fwo\x06\xdf\xaf\xbd&lt;\xe0Y\xfc&quot;\xf1\xe8\x19(\x06 \xa4\x9a\xb4k[\xb9\xc9\xbc\xbe\xa5\x86\xf0\x93\x06!@\xd5\xd3&#123;\xc5\xa7\x92rf&gt;K\xc6jI\xe0?\xf7&quot;\xce\xe0&quot;\x92E\xe1m\xbd&lt;]j\x0f2\xa5\xad\xf5\xef\x19\xa3c\xd7d\xcfi\xa4\x11\xfb\xc9\xff\x88\xdf\xf2\xee4a\xb1/\xe0\x03\xe0qMK\xdf\xc5\xa3\xaf\x90\x1d@\xdaQ\xc1.,\x8d\xd2\x07n\xcb\xef\x03\x94\x9f\xdaB^P\x89\xc6\xee\x9a\xcfc#au\x96x\x17\x06%\xdf;\xbaT\xa2\x8b\xcf\xdd\x8e\xc4w,\n\x9a8H]\xdc(\x88\x82[&quot;\x87y&gt;ft%lw\x80 \xbb\x93\xa5\xf4\xea\x17\xee\xbd\n\x0cW\xcdM\xb2\xff\xb9mQg\xa8\xb0\xaa\x8ff\xae\xce|1c@\x90\xa9v\x13W\x8d\xcb\x143\xe6\xcd\xd3Y\xf8\xafg3\xfcE\x81hl\xd4\x9e[&lt;\r[\x06\xad\xa8\x12+\xf5\x9d\x06+\xa9\xbc\xef\xe5\xf0_\xac)\t\x959\xeb\x89\x0bN&#125;\xf2\xbao\xf1\x84\xafx3\t\xa1!\x1b,Ik3yi]\xa4\xe5\t\xab\xd8\x0f6\x81\&#39;\xd4OE7\xc9\xad\x8dgr\xa1\xbe\xdd\x8d7\xb5\x1a\xb6)U&lt;\xa9C\x1aX\x1e\xf3Qf\xfa*#\x00\xc5\xea\x10\r\xd5\x18\xc4L\t\xa9\xd8\xbd\x18\xddo[\xf7P\x9c\x1b\xc3\xe6\xf7\x18W\xb1_s\x01\xffR\x82e4\xac\x9fx\xdb\t\x855\x90\x9f\xfc\x83\xf4r\xeeM\x1f\xdc\xd6\xf7rlv\xad\xf7\x9c\xe0q@;lL\x1a\x83!D\xa6\xb9\xdd\xd5@+L\xdcnp=\xe67/\xb3az\xb1&lt;\x0b\x94&gt;0\\&gt;\x91A0\xca\x96\x9dUeh\xd0\x1a\x97\xe6\xcb\x19\x8d\x81\xaa\x05\xa7\x94\xb9V~\xb3\xe0\x9c\xe1(\xff\xecGbnl\x81S\x03\x854\xf4:n\x14\xaa\x8eL\xfd\xf9\x9a\xbe\xb33\xf9\xb4\xc0\xed\x07!\x0f\x01\x90#\x8d\xf1\xc1O\x12\x8bUV\xa0\x14\x1bf\xde\\\xf9\xb0\xc9\xb1\x8b\x9d\xca\xe8\xa9\xa7\xcb/\xf37\x92\xa6\xca,\xbd\xa5\x1b\xbe&quot;\x83\x1c\xd0\xd8g&quot;\xbb\xf5\x96\x82\x0c\x05\xc6N\xe4\xcb\x05\x9c\x86\xe8&quot;-\xae\xa1\xa9\x17\xb1L\x1a~\xdd\xe4\x99Q\\\xb7\xa8\xc4\xc4\x0c2M\x87\x02\xbd\n))\x8c\xe26\xb0C\x1c\x04\x0e\xf3\xdb\xb4\xd4Ng\xc9\xdd\x08\xe0&#125;\\\xe7\x9b\x15\x08d7WO\xe4\xadw\xe0P\xa9\xec\x1f\x95\x1e7t3\xda\x06\xe3\xa3S\t\x18\xf4X\x8b\xb8\t\xe0\x86\xad\x95\x0c\xafr\x02 \xa717x\&#39;t\t\xe6f\xcc\xd4\xa1\x84\xc3g\xa7X\x96\xb1&#125;\xe1\x13B\x92\xd9Y\xe3\x90?\xa1\xea]\xe1\xae\x1d-\xf6y\xa4\xb9\x18\xdd\xe1\x02\xf0\x90C\xb50\xc0\x81_1\xa9\xc5\xf2\xc7\x90\xe2\xcd(\x9d\x00\xcc\xb4k\xaf\x13\x0bF\x00|.\xb1\x8e0&amp;6\xa0\x90x\xec\xde\\\xb4(\xee\xfd\xd5\&#39;\xa0[\xee\xeb\xf1\x95\xfc\x93\x1b\xa2r\xfd\x95\xacE\xe3\xcb*\xd4fJ\\\xc9sbV\xddn\xc4K\x9bg\x1b\xda\xadi\xa9Y$b\x88;\x03\xa7s\x05Wr\xa3!t\xc4\x84f\x981jZ\x9bE\xe3\xb5\xe9u\x92\xdb\x13\xadd~B\x8a\x00\xfd\xcf0&gt;Bt\x9c\xfc[\xb49\x92XY\x9d\xfav\x98\x1b\xa2Ej4\xf1)\xba\x86&#125;&lt;\xa2.\xd0\xc0\xd9\xdb\x0eZ9\x16\x8c\x9b\xea\xfb\xf2\x97\x92\xfb\x80\xc6\xfd\xa8&#125;\xee@i\x01\xe5.\xb7(W\xa6C\xba\xddZ4r\xba]\xf4\xbf\xc8\xa1\x95X\xeb\x9f\xc0\x11\xcaA\xc86\xe5D\x05\x84\x93\x85A\xbf\xcc\x89\x99\x1bCZ\xa5t\xadC\xa2Rm\x07j\nI\xf3\x890\xaf\x90\x95w\xd3\xf9\xdb\xa8J\xfdk_\n?\xba\xae\xdfHD!\x85\xe6\xb9\xff\xd3-\xd3\xc8\x14\xf6\xa3@\xf3\&#39;\x10kS\xc3\xb5\xdbQ\xb1\xc8\\\xb0\xc0\xa8\xf2\x14\xf6)9\xe3I\x16\x82\xa8\x14\xd0\xf6\x96\x0bdY\xffi2\x85#X\xbd\x07\xdc\xc9a\xbax\x8e#\xd2\x07\x93l\x0e\xd4\x0c-\xf2xZ\x1f0S\x8e\xac\x92\xbca\x16\xba[&lt;Z:N@\xdd\xee\nr\x7f\xe1\x94\x15\xa6\x01\xf7\xf3\xe9\x9f\x93\xb5\xc2\xc3\xe3\xe7&lt;\xe5y\xa0\xe7&#123;Gz\x1b\xd7\xf0uR\xde\x9d\xc6\xc1\xd2\x11Z*\xee\xabh\x95\xd8\xa3%yko\x1c&#125;\x00&amp;5P\x00e U\x9a\xd8\xff\x83IO\xfa\x8aM\xa6\xf0\r\x8d\x8bS\xd4\x90\x8e|\x86\x00\xf8\xa8\x0fPt3\xd7\x13xUB\xe1\xb0v(F\x8b\xb8\xf3\xdd\x19\xd1\x97[\xb4q\x84\xe9\xa6\xa07\xe8\x0b\x97\xber(\x88\xe6|\xab\xf2\xe9\x13\x08\xbb\x1d\xa4+\xa6\xf4KW\xcb\x93\xdf[\xd6D\xb7\xaf\xd1\x84o\xd7\xfae\x8a\x0f\xa3,m;7\xfc\xde\xba\xdc\x025\xd5\x90\x01;\xe0\xe5\&#39;\x92\xaa\xd9\x81\xd9\x11\x97%\xc4\xf2\xac\x0c\xb9\xd0\xee\xd51\xae\xdf\x1b8=\xd0\x7f\xb7\xa5\xaf\x1fP\xa4\xae\xc5\x8b\xaf\x04e\xc4\xc2\xff&lt;\xf8\xb1w\x9dJ\x98p\x8c8\xd2Yu\rA\xcb\xd7\xc3\xce%yYz\xff\xde\xdd\xba\xe1\xc6\x02\x9bZ\xc8\xae\xa4\xf6\xe0\x84\xf2:\x0c\x9cUf\xa2\xdb2Hp\x8f\xd0\xede\x0eA\x037\xae\x04Z\xdd^\xbb.&lt;\xa2\x8a.\n\x9f\xb6\x0c\xf6\x9a\xb2\xcf\xbd\xd4R\xe2PJv8\xd4\xeco&amp;\xd1\xde\xdc4\xe7\xb5\x80\x9a9N\xd1\x9d\xaf\xdc\x0bJ2\x9f\x05\x87\xad\xaf\xff\x11m\xf6\x99\x08Q\x8f\x93\x1d\xd1\xc5\xaa\x81+$S\x8c\x1e\x88G\xdeP\xab&gt;h;\x87,5\x19\xdc^\xbf\xf7u\xba\xa0\xc7gf\xdc\x90\xb8\xa4\x17\x16\xafsY\xb1\xbd\xbbm:\x18\xd5\xea\xabS)\&#39;\xc5\xce(\x9bN\xd4\x0e\n\xd3l\xb8]\xb1/\xd8\x8f\x82\x86Qe$\x84\xa8F\x03\x17\xd5\x88q\xcdqJJ\xf5\x93\x83Q\xd8\xc1)\xab\x90U\xef_\xc6:\x8e\xb9\xa7\x16\xbc\x1b\xac\x8d\xe1\xc8\x87\xc8l\xb3\x99\x02\xb2\xb0\x89\xc1\xf1\xf5\xe4\n\xd5?\\\x95\xb2\xb33\xf4\x8f\xd0\x89D\xec\x88\x089\x02\xa8b\xbd\xe0\x19#k\x91\x0cg\xc9I\x8e\x8bH\&#39;M8X\x1d\xe1\x7f\xf2\n\xa46m\xb4hm\xba\xc4\xac(W\x06\xdc\x93\xfdI&#123;Cdh\x9b\xc9\xe5\xc3\x08Xq\xedb\x9bX\x84[\x95 r&amp;\x1eY\xee\xa7\xd7\xb4\xad\x04\\&quot;\xd3\x16\xb1&amp;\xdf\x0bF\x8d\xf1\xb3V\xab\x895a\xf5z*\xfe4j\\\xb9%\xean\x9aP(H\xb7\xc4\x9e\xc3f4\xaf\x8fp\x03\xb1\x1ap\xd2~&#125;\x8d\x9a\x84\x86\x82\x0e\xfe\xe7:V \xa5\xbdC\x82\xee\xf0\xa1\xaa5i\xc7\x8b\xab\x92\x9e%!.\xd5J\xad\xf4\xe5\x1d\xae\x94U)G\xc7-\xb6\xc7\x81\x16\x8a&amp;0$\xaf,*\x16\xc6&gt;\x82\xb3H\xd2!\xc6\xab^h\xb0\x1c\xcb\xf3:\xf6\xcb\xd3\xf7\xc0Pa\x81\x1e\xa0\x90\x98k\xbc\xb6\x82\xdb;\xf7&quot;\x02\xfdb\xae\xe0\r\xb2\xd4\xe3\xd92\xa9\xb6\xff^&gt;\xce!zd\xd7,\x87\x1b,\xeb5\xf6\xec\xce\xb8\x1a\x9f(\xe5v\x95\x88\xbc+zrZ\xd3(\xe3\x9bw&amp;\xaf(wr+R\x89\xa3\xea\x03r\xc4\xce\x9a\xe3\xe0\xca\xacD&#123;l\x1c\x0f\x9fQ\xdeS;\xb61f#\xb2\x16\xc2\x0c\xe4\x03\xa8\xe2\x08^Q\xf0l-\xa1\x8a&gt; d\xc6U\xb0\xfbA;\xac\xf2\xd7\xc4\xec\x99x\xef\xf5\xf0|\x90f?mF#R\x9f\xd2\x9b\xfd\x18\x16\xc6\xde\x105\x7f\xc5\xbb\x9b)\xa3\xfb\xee\x80I\x07&#125;\xbe\xb2q1\xf1\xb5\xa7\xae\x0c\x18\xd3\x19w\x14e\xcc&amp;\x9b\x86~L\xc5yW8&lt;\x12D\x85K\x9a\xb6,\xe8\xb7\xa3\x8a\xf90\x1ci\x00\x81A\xd9\x80\x14\x98\xa6\x83\xf9\xc5\x9b\xa5%\x0c\xfd\nH\xc0\xc9\x8f\x02\xbe\xb9\xc6\r\x19$\xf5X\x1b\xe7\xfaP BEf\xe0\xecV\xcbi\x9b\x19\xc4\x13\xd0\x9f\xf63\r\xd4\xdc\xd1\xc9\x91C+\xbf&amp;wr\x0c\xc0&quot;h\x1d9\xde\x02\x89\xba\xdc\xa7i\xe5&#125;ib\x83o4&gt;\xf86\xeeJ\xb5\xef\xea\xa0\xd0O4\x89\x86\x16T\xa1\xee\xd3\xcb\xef\r\xf2\x0c\xfc\x046Qek\xf0\x9c\xd1[92z\xc2\x99\xa2U9\xafm\xc1]\x8dS&gt;&amp;\xf6\xfeK\xe3t\x03\x9f\x83\xa9\xc6m\xcbT\xb6_\n\xec\x83\xf2\x97H\xba\x14\xa7yO\x87\x86N\x9c\x81\xa47\xe8b\xef-M(I\x07\xda\x93\xbec\x10\n\x01\xb1\x06&lt;\xcc\x96\xbb\x05\n\xf6\xc0Xr\x8f&#125;\x0b-\xee\xaf\xd1J\r\xc7m*\xa8\x1cu\x95&amp;\xce\n\xf0\xbb\xa4\xa8-!\xa3\x11\x9ft\xa8l\x8a\xd3&quot;\xb3\x04O\xa4\xcd\x81\x1bu \&#39;\xae5\xf2\xcc\x02\xbc\xd7\xe3\xd4\xe7,\x9a\x85\x9f.Vu?y\x00W&#123;\xcb\x0cf\x8c\x82q\x03\x9e\xbb4\x0e&quot;\x1e\xe0x\xa6\xfb\xc3\xd7\xbf\xdd\xd9\x9ci\x12u\xf7\xa7\x7f\xb6\x11\xaf\x1e\x97\xf7\xcd\xc1\xea3\xae\x05\xe0\x94\xe0\x8b;\xf5\xa3hN\xe5\xce\xbe\xb2\x97\xcc\x08\xe4\x98\xbb\x9cq|\x8dP\x87m\xfb&lt;\xf1\x11\xd6\x8fB\x86\xeevT&lt;\xb1\xef\xa8\xc56\r\xb33B5\t\xd1\x0e&gt;Jh\xec\n8\x87\x8dS\x17\xe6h&amp;\x9b\x83\xc8X\xbf\xeb\xf4=9\x1f3P\xfdF&#123;)\xb5\x92\xeb\x0c\x8f\x156Jl\xd2q\xd2R\x13cj\x94\xd9t\xb2\xcfw\x0c\xf3\x1d\x97t\xe5R\x18\xbe&gt;\xc8\xf0\xeb\xd51\x08\x9b\r.E,9\x03\x96+/\xd0\x009\xb3\xaaWK\x9d\x14\xab\x04\x0eW7%\xd7\xd7\x1a3\\\x18C\xc5`\xbf\x7fB5T\xbc\xd3\xeb`\xa7\xb7\&#39;\xd6\xa1\xe2q\xbb\x96&#123;\xad\x92\xd0\x8c\xcd\x01\xcb\x92M\xa7O1h\x15\xc8\x8e\x99#6\x97\xa8\xa7\xcdG\xa1\x90\xaf@\xe5|\x94\xad7\x8c\xe8P\xe1O`\xd7\xdb\x98\xcb\x08\xb0\xde\xfb\x13:\x06L\xc2\xfb\x850\xf3\x1c\xd8\xfb\xb3\xa1^\xcfP\x96\x8e\x0bn\xcfk\x83\xa8p\xb2k_\xe7L.x\xdf\xd15\xe5&#123;9\xe3\x06\xec\xf2\xb6^\xa8r\xb4q\xdc\xa5\x18Fa\xf0\x8d\x86#\xbd_J\xdf\xb2\x80Q\x1a\x90\xa6\r\xbd\xc27\x96\x02\xc76\x0f\xaaOn\xec\xf7PY\xe7\xea\xf5\xa0\xc3\x10&#123;\xddx\x1a\x05#\x12\r\x94~DkN%\xd6Q\xa8VB\xac\x07\xae\x8a\x16\x07?\x10\x1e\xe3\xee\xe7y \xb0&quot;cj\x86\x0e\x1b\xa3\xbc\xab\xdf\xbb\x89\xc7*M\x93t\x9d\xa1)\xec\xb5\xfd9\x85\x00\xd0_~\xd1\no\x8c&gt;~7\xf4\x07\xab\x9c\xe8\x8dFh\xd4+\x9e\xe1a\xd7h\x98b\x17\xcdN]DS\x9aK1\xd7D\xbcw\xbb\xd3\xba0;oJg[\x98\x174p@\xc3qKB\xbf\xc3\xe5\xe0\x01X/\x83\x94pgk\x94\x05\xf8L\xb2q\x13\x01\x8f\x98.Q\x87&gt;\xe6\xce\x14 \xb2\x0f?\x08\xb5\&#39;\x15f\xff.\x89\xae\xc1t\x93\xc2\xfc\x9b\x89qz#y&amp;&#125;\xc06\xa7Ms\xdeB\xf7\x81B\xb5?\x16t\x04\x9a$\xd4o\x83&#125;%\xd7\xf0\x03\x9f\x90\xad\xd2C\xc2\xcb?\xa9F[A\x0b\xd6\x01\xc9\x93\xc0.\xfe\xc1\xf7\xa33\xb2\xf2\x8a_P*\x04\xe1\xf3\xa0\x1f/\x15\xcf2\x9b`b\x1d\xed@\x96h4\xf3w\xe4\x86@\xac\x13\xa1aWq\xa9oh\xc1\xc1e\x8c\x90\x17\xb6\xf1\xa7\xa9\xd2\x9er\x84\x96\xe7\x02;`f\x18\xe4\xc2AG\xb2\xc5\x92*&#123;\xfa\xb1Z\x06\xc9\x7f\xfc\x02+\xdb\xf22\xcd\xb9Xkn\x99\xa0\x99.\xe4F\x9f&#125;\x1a\xa0y]\x9d\x88\xaa\xa0\x80y\xc6\xcd\xec\xd6:\x95\x84\x99\xc9\xcf\xb7\x11\x0e\xf3t\x83\x04i\n(\x90Q\x1a\xb0\x11M\x82\xbc\xfb6%|&lt;=\n\xdd\xf2o\xc8\x1a\xe4\xe1$\xb0\x8ey/\xf4n\xc2J\x04\x03\xbe7\x04\xd0\x1b\r\xd8\xc4Q\x13y\xd5\x0eH^\xcfbVBs\xcf(cH\xbc\x02\xfbV\xb0\xbd\xb0\xa6l\xc7\xc1wP&gt;|&#125;x\xce\xbf\x18\xf3K;\xf6\x1a\xa7k\xed\xf8\xfa,\xab\xd2&amp;cI2\xef\xfd\x9f\xe2\x15?\xed\x07\xd5\xb0,\x8e\xc1Nl\xbe\x87\x1c\xfeo\x87\xc0\xe2\x88C\xad\xd0\xea%; aL\x0f&lt;\x8f\x1ec\xae\x03\xcf\xa7\x98\x8c\x82`\x88\x05\xcb\xc5\x90\xd7`\xfdZ\x83\x02oO\xe5&gt;\xb7\xffQ\x90\xadT\x83&quot;\xa0\xa8\x9a\xe0\xc2\xed\xf9YAx\x19+\x95\x19\x9br\xf4f0\x15\xf7\x96\xc3\xdad\xfdP\xe85(8w\xa7\x9b8\x90\xd4%\x84\x1e\xfc&quot;O\x9d]gZ*1X\xf7\x85`(\xd5^\x95\xe0\x1fxAf\xfaa\x1d\xbdG-\xcf\x94R-m\xce(B\xd8\xf5\xeb\&#39;\xa55\xbd\xcc\xc4=y&lt;\x14\xa8\xc4\xc9\xbf#\xee$\xdaO~\x91??\x80H\xe4\xd7\xaf\xb1\x8f\xb5\x8b]\xc5\x1d\xa8\xb6\xe2\xee\xc6@N7\x0b\x0c\xa3\x9b\xee\x8e\x14\xcb\xe8\xfd\xf0\xb6N\xf0b=(&#125;\x7fi\xae\xb4F\xe4\xe6\x02Z:\xe0\xbc\xe2\xcd &quot;\x80d\xf9\xb4\xe8\xe1\xd1\xd0G\xf5*\xe4\x14gV\x0e4\xebc\xba\xf7\xfd\xee\xb3\xc0\xa2\xffK\&#39;\x15\xcaf\xe8&quot;\xaf\x1c\xa9\xd4:\&#39;\x85\x81M&lt;^\x96m\xd0I\x1e %\xc8\x9a\xb2\xdf\xb2.\xd3\xfd\xff@)\xc9\x18\xa3\xac\xc1\x14$\xbc\xdd\xe6\xa4\x8d]2F\x88\xf6c\xa8\xd7_O\xc9\xce\xee\&#39;\x8aH\x99\x85&quot;n\xc2\xee\x91$\xea\x80\xdc\xc7lq\xc9yQ\x86l\x91\x80E~P\rT\xfd&gt;\xff\x93\xe4\xa4\t\x9a\xbb\xab%cz\xb1\xb5\xf3\x81\n\xd6\xf5rK\xa5\xbd\xb9\xd7-\x93$\xd2\xeb3n|\xbc\xc2[u\x8d\x05\xe7\x0f#mw\x9e\xbd\xeb\xe4B\x810\xee\xf6\xebQ\x82\xb7:^\xd1k:\xd0Y\x13\xc9\xae\xa9\xb0f\xcc\xba\xc8\\\x81\xc5.F\xa5\x1a\xac\xa0\x8eT\xd4fR\xba\xc8\x91\xb4g\xc0v\x12\xda\x08I\xf5\x7f\x9f\xefY%\xe7\x07\xfe\x98\x9a\xe7g\xab\xac\x88\xe6\x12\xc2&gt;\xd6&lt;\xa7\xfe\xd0\x1e\xe75\x87.\x1c+\x9ex\x94\&#39;\x07\xd2[\xbf\x9f\x83\xb8\xaa\xfe+\x94Ic\x9f\x1d\x9cgL\xb6@6\x88(K\x940\xe2\xc0 \xd5$?\t-q\x1f\x9b\x93Jm\xfd\x12\xbf%E\x17|\ti\x070El\xac\xe4;6z9\xdb\xbf\\\x11)\xa3&amp;\xa0`#=\xea\xe0\xa3\x1dJ|\xd7\xef\xa54%\xcc\x12B\xeds&#123;G\xfe:i~n\xc1\x16\xd5\xd5\xfeoT\&#39;\xd0\xbf5\x8b\x97C/)T\xe8g^\xa5\xb6\x13ElU\x7f\xc8\x1cMT\xbd\xa4\xd3\xb05\xc2s\x16u\x93N\x13\x88\x0f\x83\xc4\xb6s\x90\x0b\xdb?o\xf7\xb8\xcb\xaa\xfc\t\xc2jS\xd6O\x83Nw\xf6\x96I\xe7\xa4\xb9p\nu\x1a1]\xe3\xa4\xae\xfa+\xba\xb4\xb7e\xd9\x94\xaa\nk\x90x\xb1\xe0%\x19E1\xaf\x8d\xe3\x99&quot;~&quot;\x1a\xf6\x88\xa7Kz\x8e\xc1\xf5\xe0\xcc\xee\xa2\xf4\x82\x07S\xa2+Z\xe6\xce\xdb\x8eX\x881\xd0(J\xe3\xb7O~\xcd\x84\x9b\x83_\xf5\xf5p\xeb&#123;\xfcU\x18\x9d\xa6\xd4|\xcd\xc7\x99a\xee\xce\xf0i\x1ab\xa1\x04\xe0\x00Z%3t\xa9\xe1V\x12\x84\xb8\x14\x92\xf6\x82\x94\xcd\x91M\x07\x1b\xbb\x869n\xcey\x01\x8e\x9b_\x04\x8c&#125;\xf2I\x93\xe7\xa1&quot;\x90\xee\xf1\xbew\xa0l\xf1\x1f\x1f\x1c\xb9\x91\x8c\x00ns\xa00\xdb&#125;\xe9\xc8\xe8\xec|\xacU7\xf3d\x1c\xcd\rQ\x97\xc4\xd7\r)\xc9\xffy\xb5:J\xa2\x80\x82\x800\xf9\xfar\xf1\t\x93\x02\xe0I&amp;\x9c\xafA\x15\x16\x94\x0f\x7fm\x8a\x04\x87\x92\r\xc7U\x10M\xf6\xec!V\x90\xfc\xdd\xf5\x96\xe4\x11Q\x8b\xe6]\x04z=\xeb\xc7M\x00\xc8zwn\xaa\x02\&#39;J\xe4\x86\xf1\xcd\xf8&gt;5e\xb8%\x90q\x8e\x00\xb4\xd8&#125;ky\xfcV\xd6\xd7\x82\xd5\x99\xc8\xa00z\x83\xd0\x9a\x9b\x8fK\x9e\xf8:pV\xa0\xccn\x80\xccZ\x89\xd8Y:s\xae\xf7\x93\x85x\xf5\xc8\x07d\xa0R\xd6\xeb\xde\xa7\x97\x1b\x10C\xb9CM#\xc5:\xc3R\x16-h\x95\xb26\xff\x97\xd9\x04]6\xea%\x90\x13\xec?\x1a\xf3\xd4L&lt;\xbcF\xf5\xa2m\xbe\x82O\x91\xda\x84\x0ce\xd4\xaex\x9cbPv=C\xfa\x1b\xbf\x87E\xb1\x15\xd6+\x8ai\x99&lt;ZfV\xc75m\x06\x03\x91\x8fI\xcdn\x15re\xc4\x9a\xd3\xceHl\xe1\x9b\xd5\xb3\xed\\J\xd2\x05~\xca\xb9$\x1f\xd3\xd9\xff3L,\xcfwx\xc4\xc8\x1c$\x1f\x92\xd6\xc3\x04WX\xe2\x10&amp;\xf40r\xd2\x1f\x8a&#123;\xb5&#125;\xed\x88\xcd\xa1&lt;\xb4\x1b\&#39;\x1c\xa3\xf1\x9c\xc9\xec\x80\x81\xa6\xb2\x9dW-y\xa2l=\xca\xcc\xabNvv\x07\xbc\x80\xadT;\xb9\x185A\xc6\xa9\xe3\xeb,K+w\xfb&#125;]8d(\x1e\x85\xe2\x93/\x94\xdb\xb6\x8b\x15\x8f#pq\xa1\xf9\x8a\xb9\xcb\x89=\xad\xf3\xf6\xdd\x00\xb9R\xf3\x9d\x89e)\xaf\xc0K\x948\x05\xcc\xbbK\x8aG\xe2\xef\xb0l\xcap\xb5\xfa\x8d\xbfd\xa9 SO-&lt;\&#39;\x93\xf7(\xf8B\xaap6f\xc8Y\xa6\x98H\xb9X\xcb\x08\xec\xeb\x01p\xb1\xe7\xb6\xa8\xff\x9a\xa5c\x9f\xf0\xd1\xbf\x89\xfd \xa34\x12\x8fQO2\x8a\x14\rqI\xea\x19[u\x06\xe6\xfc\xa7\xfb\xa4;\xb6\xda\xc1\xc1\x8e\x9b\xdf\x01\x8b\xc7\xc8u\x8a\xd8s\xaeERx\xb7\x91u\x1e\x89e\xdb\x85L\xebFT\x97/:Odp\xf0h&lt;R`\xb9)\xf1\xab\x1b\xed\xce\xf3s\n\xee\xfd@\xcaV~P\xd9\xcd\xec\xc7\xf0KS\xbe\xf6\x01a\xf4\xf8\x95&amp;\xca=\&#39;\x88\xcb\x04\x16N\xe2\x98E\xc2~-\xbft5&lt;n\x9e\x15\xf7\xf5\xc9\xd6\r\xa2\xf2\xbc\x9a\xa1\xa1\xb5(] t\ts\x12\x13l\x8a9\x15\xaa\xfc\x19\xfd\x84\rht\xa7\xef|W8U\x87\x95\xf5\x08U\x97\xb5\x87\xbf-\xe5\xb7\xbav\xf4s\x01\x0c\xbfN\r\xcf\x8d\xcd\x05\xa1M\x9d\xfe[\x86\xb2\xc9\xa8\xbd\x90\x81\xa7N\xd5e\x0e\xbc`\x86\xfbghJ\x1c\xac9\x97\x19\xaf\xac\x7ft|\xbc\xbb\xfe\\\x9f\xba~R\xdb\x97\x0e2\xab;\xa4Rp\x97.\x04\x13\xf3\xd9[\x8e\x12&amp;\x0e\x97\\\xdek\x8bA\x11\x17\x9c\xdb\xdcgX\x81\xc3&amp;M\x08\x9fu\x02!\xb6\xd6V\xb6\xb1H\xb0|\xed\xd4\xe8\xc6\xfdw\xf0\xb4/\xf7i\xafJ\x85r&quot;\xf7q\&#39;\xc2\x04\x9c\x06\xfeR~\xea\xb3\xe5\x9e\x08\xf69\xc9\xf1O\x92\x89\xd3\xe6_)\xd5\x94\xabe\xd5K\xde\x8b!\xa3\x92\x8d\xc2\x11[zX!+\xb6|\xcf\xfd\x06!Q\x88C\xfb6\xda\xb0\x99g\xa0\x02\xa6\xdd\xf7n\x08\xafN\xf5\x87\x04\xc1\xa0\xed\x19\xb2L\xb9L`\x91W\xdd\xc6\xabL\xa75\xe5\xe1\x00\xac\xf9*\x94q\xb98\x1eHDP\xebf\xb0v\x93S\x1b\xaaI7\xb8&gt;B\x08\xe3h\x93@\xfaJ\x9b\xf3\xf6\xbf\x1d.&amp;\xf8\xe7\x90\xc8\xa8 \xf18\xd0\xcf\xa6\xa5\xd1e\x03\xf04\x9c\xdbs\x03,\xf8P\xca\x97\x8c\x04\xe2R\xec\x90\x1aztc\x12x\xee\xfe\x97\x02\xcbS\x07\x0c)x\xc4J\xeb8\xee\xb7\xd4\xba\xadu\xd7\xfa&#125;\x10\x0f8U8\xe6f\x96(\&#39;^\xabC\xe3F\xd0\xc4\x8b2\x16&gt;\xd7\xca\xd9&#123;\x85\xa4=\xe9\x1e\x81n\xaf\xd7\&#39;\xa3&#123;\xb3\x82P\xd4\xd9\x1c\xf3Z&#125;%\xfb\x06&lt;\xe9/b\xcd\xd9\x0fV\xc2\xdf\xb2\xfa\xd1\xa4\x900U\n\xe3\xca\xa6=b\x91\xc8e\xff=6\xea\x81\xb5\xc9_\x97\xea\xc1\xc2\x9c5z=^S`\xa3\r\xda.\xf1\x1b\xd1\xbbW\x86\xb0\rAU\x1as\xc4\xa5\x93\xed\xa46\x04\xc8Q\xa6\xc6\xd3o\xa8\xf2\xc1\xdb\x0fSp\xe8\xa5Z45@)\xff\n\xa4\x95\xbd\x8c\xcc\x93nj\x85\x83?\xe7\x04\x7f4`\xfdEJ\xe77\xc1\xa3\xc7\x83JO\xea]v\xf85g\x125\xd3V\xfbm\x84\xed-\x1b\x1f/B\xd9pd\xebs\xa6`\xecs\xf2\xb5\xd3\x827\x1ar\x06\xa3\xf3L%xA\xa5\xf4\x95\xf7\x8d4`1\x9c\xd1p7YL\xe7\x8eJz\xa0\xf0NFb\x0cu\xda1\r\x1b\xb0\xe8br3\r\xeb\xa0\x89dl@\x1a@e\x9a\x12\x03K\xd2\xf3\x9e\x158iD\xd8^x\x80X9:\xde\xed\xf4n\xea\xec\xa8\x16^\xb9]\xde\x95\x1a&amp;\xd8\x84=\xc6\xf1\x8b\x8d\x1c\x99\xa7\x88\xbb\xfb\xd88C\x80\xea%\xb3\xb1\xcf\xf1@\xe5\xb5\xdd\xdau\xea\xe1\x94\x93r\xa0\xd3Cl\xd7\xe9Y\x01\x1e\xbbZ\xcf\x0e\x0ej\xf24X\xc8\x1c\xe7\x86)\xa8\x8d\xd9\x08\xbe\xb0q\x03\xf1\xd4\x91\x15&amp;\xec(\xb6\xda4\x95o\x1cHxi\x15\xd7(g\xc8\xe4\xd9\x10\xa8)D\x9fJ\x86\x8c\xa4\x8b\x7f7`R\xb2\xdb\x9e\x90\xae\x85\xba\xd7X&#123;1\xae\x8f\x12-\xab\x8ai\xd7B\xb1\xee\xa1O\xb14\x19\xd2\xe2\x04\xed\xed\xa1\x93\x00\xe0h\x1b\xff\x8a\x85`9/\xa3\xdf\x12\x9e\x9c\xf0\x1d\xedB\xa9J\x1a\xf3\x9e\t^\xc3\x15&gt;.\x07%\xd1\xa17\xf9\xd0X\xdd\xe2Z6\xfe\x96\xc63*\xf7TM@\xaa\x9f\x86\xaf\xa3Gn\x9f~\xa9hs\x03\xbd&quot;\xd9\xfe\xec\x89\\\x06yY\xfc\xc7\x9eR\x83\xe8\xa00\xb2\xf0(r\xa4(\xe9\x90\x8a\xd5\xfd!\xd6\x15\x83\xb9\xd1ttQ\xd9\xcf\x85\x1a\xc1J\xd4\x881*\xa7\x85\xa6&gt;\xbc\x92\x17\x99\xa6\x02G\x82\t[I?u\xe6\xe0\x1e^t\xc7m\x1f\xe5\x18[\xf7pWV\xd5\x92\x89\n\xebT\x10*A\x91DF&lt;\xd4\xc4\xbb\xc9\xedU\xb8\x86\xcd\xe6.H\xc4\xb4\xb0\x9d\x83\xe7,x\xc05^\xfd\xa0\x8bXN\xd5a\xf7\x8e\x0b\x9fX\xb3=\x15B^\x95j\xfc\n\x81d\x93i/\x1bx\xa6\xde\xe5\xf7\x0f&amp;p\x01L\xa1WY&#123;\xe6\xd7\x02\xf2\x0b\x8f\x0b\xb4|~\xb8\xbe\xd5\xbc\xc4\xcd\xe0\xf6h5\x00\xb0t5a`\x7f\xe4S\xdd\x05k\xac\xce\x80\xccT\x95\xda\xa5\xe4?&lt;&gt;yP\xbbR^\x81F\xf0\xf2\\\xd0B\t&#125;W\xdd@\x7fk\xbe.\x089\xe0J9`\x96\x1d\xd8\xc4P\xdd\xa8\x17\xc3x\x82\xc2\xec&amp;\x86\x8f\xa4\xf9\x0c\xc5\xc2dW\xdc\x8d\x93\x0f,\xd0\xe5c\x82\x18\xa1\x06c4\x9a\x90\xa3-F@\x81\xe0k\xc2\xbf\xa1\xaaJ&quot;\x11\x1f\xa6)\xb4\xb0\x0ba\xd9\x11\xb1\x98\xd8~\xf1\xde~\x85&#125;\xd4\xacVc=m\x9c\xff&amp;O\xec&lt;\xa7DH~G\xe9\x9b\xc5\xb4+\x05iq\x04\xd7\xa9B\xb0PG\x92\xe1\xf8\x19\x00~LT\x81\xaa\xbb2\xad$\xff&quot;\xf8\xc2\xb6\xa1\x98\x8a\xa1\x8b\xb2\x06\x1e\x94\xa8(8r\x9e\xdfV\xa5\xb3\xc1\xd4\x90\xda)\xed\x9f\xfd\xd95\xc6\x87\xea\xa3\xf3\xacy\xcd\x9e5\\\x01K\xf3H\x99\x8f\x1b\x06\xea6\xeesL\xda\xf9\xa0\x05B&lt;\x96\xe1\xba\xd8\x83\xc2+)C\xd2\xb8\x86\x05\\\xac\x98\xa0\xcb\x99\x98a\xd9\xb5\xfa\x94\x9b4zX$t\x18\xa0\x04\xef\x95~&#123;\xe0\xd6\xa8\x11Q\xbe\xd9E\xd5\x87jf\x98\x9b\x1b\xe8(in\x8c\x1d&quot;\xd57&#125;\x88\x7fAG\xb0\t\x8ee9\x8c\x8a\xb9\x05O\xdd\x04c\x11\xe8\xbe&gt;k\xc5\x98q\x82=\xa0=l\xbf\xd4?\xc5!\xc0O\x18\xc78\xae\x06\xe2\xc0\x8b\x1e\xb9\&#39;T&#123;\x86%6\x9d\xf3\x12G\xe6b\xd53%A\x9dP\xb0\x8a\x86(ucp\x02\x1f\xb2\x98*Mr\xc5D\x18LV[\xc5\x81\xcb\x89\xdb\xb9\xc2~\xe6\xa1&#123;\xaaH\x95\x19i%\xa3pX|M\xc6O\xdb\xd9\xd9\x12\xcc|\x1d\xc1\xdc\xbc\xb6\n\x98\xd1\x1a&lt;\xba\x05\x00hq\xac\xf0\xcf(\x1c\xd5\xc3\xaf\xc0\xb4\xaeTx&amp;\xce!1\xbch\x8a\xd9^\xe8C\xf6\xdb/BaA\x0c\xf7`&quot;X\n\xd3\xbf5\xe1\x8b\xdb\x8c7#\x04O&gt;3^Z\xfa\xd5\x1a\xd3\xaf\x827\x97\x8a\xbe\xaa\xce\xa0?Y\xe9\xf9E\x96\xd5\xd6f\x03n\xa7p\x1f\xab\\\xbf\xd0T\x98\xebck\xfc\x8d\xca\xb89q\x016\x10\xdc\xb2\xff\xd5\xb1\xb5&#123;\x14\xa9\x1d7b\&#39;\xa8\xc4\x99\xdb\xb0(\x8d&quot;j\xfb\xbc\xda 6\xc9\xb7bQ(gM|\xf2\xe9\xc6X\x0f\xac\x82\xec\x95\x18\x99\xc0\x1ex\xc4\x12\xfe\x96\xa5*\xdb\xe8\x94\x02\xf0W\xae\xec\xc3\x19Ys\xcas\xa2\x1e\\w(&quot;\xa5\xa0\x1b\xfe\xb9\x91\xdcN\xfen\xd5\xde&gt;&#123;\xdf\\\xac\xed\x85\xabI:\xe6\x9f\x11\\I\x03\x9b\xe20\xcf\x85Ja_\xd5\x84\x8e\xc3o\x92\x02\xdf&quot;x/\xe9\x85\xde \xf6#\x17\x96\x12\xd0\x80\x97\xa0\xe7\x8de\xca\x87y\xd8\x06[P%Z\xb8o\xfe\xfe\xf5[XkR3|\x01\x89\xc7\xd8&#123;\x81\x93\x8d\x1f$&lt;\xeb;\xd5\xcb\xd2\xc9&#125;H\xb7\x89\xd05|s\xa3ih\x1ds\x03\xa6\xa3\xf5It\x95|\xda6\xdb\xed\x11\xa5\x1e\xf3z\xf6\xb0m!\x87\xad\xc9`\x8c\xa8\xa49Q\x9bH\xc2\xad*,uU\x18\xc2\x1d*\xb4y\xf6\xa4oO\xfaJ\xe9+&#125;\xeeF\x86&#123;\x9f\x1e\x8fJ)c\x81\x98\xc3uxVvT\xe8\xc8\xc9\x1cf\x9c\xd03\xe7\xdc\xeedi\xfa;qk\xb9`\x9f\x1d\xceYj\\\x1a\x03KaO8]p\x83\xdb\x04-\xbaWh\xca\x15\x1eK&#125;\xb6\xfd$IkuA\x01\xe7\xc8\xd3\xber\x0f\xber\xce\x9e\xe10\xc4\x991\x83X\xef\xac\x98\x01\x80\x99u&amp;V\x06|\xb3\xe5\x1a\xbd\x1c\xcc\xb5!\xc2U(\x89\xd4\xd6c\xd4\xe6\xb4\x10x[|\xa9\x04\x90Y\x08\xd6P\xff\xd5\xfe|\xe8\xbbs\x89Z0rffZ^U\x9e\xc2ED\xabl:\xde\xecv&amp;\xdd\x0f\xee\x16uv%\x0c\x15\xd2\xc4\x8c\x11\xec\x0c\xb2\x1b\x01\xfa\xd6DNb3\x08\xdd\x12\x05\x90Z&amp;\xc6^\x85\x1b\x0bA\xb5\xc9\xe3x&lt;\xd1\x90+\xf2\x97\xb4\r\xe7\xc4\xc0\xfcGqW\xd2|\xbab \xa2\x17\x88\xbb5)P`\xde,\x85\xe5\xc0mO\x10tL)X\xbb\x94\x9f6\xb2\x88\xc9&lt;B\xcd2\xd58\xa2l\xf8\xef\xeeCD!F$@\xd8\x0f\x9c9E\xaa5\xf9\xabGl\x9cp\xc2\xdf\xfcZ\xc3s\r\xfdX\x97\xb2I.\x7f\xb2\xd6\x01\x001\x984m\xd9NA\xe7\x13\xdd,YJ\xbeg\x14\x01b~\xb9_\xde\x93\x8d\x85\x84\xb9\xcf\xc1\x8e\xba\xb0=\xbb\x08s\xa3^\xed\xd3\x0e\xd8N\xad\xa3\xab\xa4r\x90KK\x15_\xcc\x1b\xb7K\xb7\xef\x9e?\x9e\x99\xe4\xa53.\xc0\x04\x91q\xbb\x89J\x1a\x1c7[\xe05\x1d\xe2\xf9?x\x9c\xe4\xb5%\x9e\xe4d \xc9E@\xbb\xc4\x0f\xc3+\xe3\x95a\xe0\x9d\xde\xb8u\x1e\xf0q\xc3X\x1f\xc9F\x89z\xc5,&quot;\x85e\x86\x91\xf91_l\x85j\x99f[e\x8c\xa0&gt;\xd5)0 \x9d\x9a7\xbf\x8b\xedh\n\xa8\xa6\x83\x8b\xdf\x98\xf5\x9dS\x1cL\x18\x15\x17\x01\x17\xf9\x1b\x02\xb2,\xbc\xaf\x03n\xd1|\x84\xb8V\xab\xec\xa2\xce\xba\n\x03\xea\xd4\xdf\x91a\x1e.\xe1\x8c&#125;7\xa8\xafl\xd4\x81\xd42\x92f\xb3A&lt;\xb4\x08iB:\xa4 \xd8J\xb1\x81\x85v*\xe8\xe2\xd6\x84b16&gt;Y\x9bj\x00:M\xd7D\xb5\xcf\xe8\x7f;\x83&#125;\xe2\xe9\x199\xc4\xc5\xbe\x1a;\xdb+\xcfG\xaa$\xe8\x9e\xbbV 4\xf11\xcc\xd2\x03Zr\xa2\xb4\xd5\x12t\x0c1&lt;Pv;_,\xe1\x96\xd5m\xdc\x05\xb0\x81\xe0o\x8b\x19\xddZ\xa6\x86\x16\x7f$\x07AA&gt;\xeck:\xa9\x00B:\xdfO\x81\x11\xac\x13~\xf2]\xe3\xec\xbf\x1d\xa4\xf7_\xa04]\xd8\xa8\xf5?\xdd\x8b\x0e\xc3\n\x83\xdbQN\xfe\x86\xd7!B&gt;\xc2\x90_^\n\xe4\xbbx\x9f%CU\x80\x88\xd9\xb6\xeb&amp;`\x8fg\xd6\x87\xb6n\x13\x87\xdb\x9f\xd5\xcdCR\xa19p\x10\x82\xb034\xe5\x9b\xcd\xeac\xb4\x05\xd3\xa1\xc4\x01\xbd\xc7\xc7\x97M\\.\xc1\x934\xf6\xf5Ft8O#\xa2L\xf2\x11\xa4p\xf8\x064D\xe1\x06\x9f~\xcc\xc2\x89\xc3\xd1\xcc+eKG\xa0\x85g\x12\x15\xb7\x87\x11\xe7oe9\xe0\x99z7\x8a8$\xd6\xe2\xac\xf0\xbc\x05\x9e\xf9\xea&amp;\xbc\xb4\xcd\xce\x86z;\xe2\xa56\xd6&amp;\xfe1\x1dK&#125;7\xc7Q\xa9\x10\xdf\xe8\xe5a\x0b~\x1f\x99\xef&gt;)\x84\xd9\x16(\xd7\&#39;T\xeeK\x06\xee&#125;\xdbj\xcb@s\x1a%\xfe\xc3C\x9c\x1c\x9b\xf0\x8b\xa8\xfd\x118$\xcaZ\xf8e_\x1a4\x9b\x94:r\xb0\xdb\xbb\x12J\xde\xc2\xedg\x9a\xb52CMm\x8e\x00\x81\xae\x8d\x16\xca\n\xe1\x85&#125;&amp;\x10WZ\x8cM8c\xeb\xcegA\xe0!*k\xdc9\xe5vZ\xba\x88\x01\xc2\xbc\xadW\xcfs\xcdj\xf6MN\xb1 i6&#125;8\xb6\xc43\xb3\xbe\xf0\xb6&quot;\xe8E\xf4n\x917\xc6\xbb\xd79\xbc\xc0)\xea\x94\xbc\xde\xc3\xc9\xc20\xbb\xde\xd7S\xde\xdc\xf8\xb1\xd6\xdf\xf2\x04g`\xd2\xdd7\xf4\x14\x14\xb0\x9d\x9a.\xc8\x19zM\xbe\x84\xa8Aw\x06&#125;_zR\xb7h\xdd\x12\x08g\x96\x1a\xf1\xb0\x8f\x8b$&#123;\x9aL~\xce\xa4\x02\xeb2G\xbc\x00\xect\xd2T\xa7Q\x88\x88\xa9s&quot;\xf4\xeb\x9e\xfb\xe7D\&#39;\x1c\x95\xbfE\xd3&lt;u@KA\xcfK1D\x82\x08b?\x89\xd6\x90:\x9f\x16\xa4h\xc4i\x8e\x81\xb9 \xba\xf60\xf2\&#39;tJ\xb2&amp;B\x82\xf0\xa7\xab\xc2\x02\x98\xb9\x18\x83|1\x7f\r\x8e\x16\xa4\x1c\x00\x06\xa2\xcc4\xa1\xd9\xad\x98\xcbEA_Ciu\x98\x0c\xb6I\xc5\x8b\xe9h\xfc\xcb\xc3#\x95 \xec\xd4\x0e\xc4\x03\xe14V\xfa\xb1\xfd\x10H\xe7\x95ScX\xe7\xce\xa4\xe8%\x02\xbd/\xdcX\x03\x81\xd1f\x14\xab/\xe1\xcd\xe9\xc7\xa6P\xf4\xc6~V\xf9\x8fB\xb5k\x07\x86\x01\x8e\xcf\xc1\x1e\xb2yP/\xa2\x9e\x8e\xa5$0:E\x13I\xa8\xbaE\xc7\xa9\xf0\x0c\x91\x7f5B\x91\xf2#\x19\xda\xe0\xb1m#z\x1b\x8f\x80[\xa1\xc0C\xcf\xc1o\xe5\xefRhAt\x1eL\x88v\xf8\xfc&quot;O\x8e\xb6\x089\xcd\xe0\xde\xa5\xd5v\xa8~\xccR\xdc\xa2\xefk\xd5++)\xf3jJk\xa4K\xcf\x07\x90\n\x1e\xf8\xe6\x92B\x88\x86\xe7\xe2\xdf&amp;\x0b\xa0\xfeY\x8a\x00g\xe7\x81\x17\xf62\xa9?\x0f\xe6\x19\xf3\xcb\x06\x9c\xef\xc8B\x87\xe1\xffex\xedg\xde\xcb\xa7Wy\x05\x02\xe4a\xe3\xb6\xa4\xe3\x8a\x9a\xe5iL,\xa1\xf6\x0fU\x0e\x9d\xa5\xfb\x9b\x81o\xc1%q\xc5`=\x9f\xd2\x07\x1d\xd0\xf6W\x10\xc6\x11\xb6\xf9\xea)Q\xfb\x80;\x8e\r\x12C\x92 P*-&gt;\xc9b\xb6\xe1\x86\xcf|\x981Kv?T\xea\xea\n\x91\x7f\xc8f-\x07\xf0ec)\x91\xb2\x82%H\xb5\x0e\x12\xa1*\x13\x92\xf2\x17\xe7\x8d\x17L\x1dnxi\xd4\xd9\xdb\x9b\xfc%mg&lt;\xdfT\xa7B\xec7\xf1\x01\xa2\x8aU\x05\xf8\x0e\x19\xaf\xb9f\xe0\xa7\xfc\xa7K\xe1\x82(\xa5vW\x9cj\xbd\xa0\xf7\x02\xdf\xa6\x12\xf8\xd5\x80\xd0\xa8f\xf0\x89iI\x92\x82\xd7\xc2`j\x14\xa3\xaa\xfd?/\xf4|%l\x99~\x95\xaf\xb2\xe9\x12\xdb7\x80\n\x92\x9ft\x889,\xeaK\x82b\x0b\xff\xd4;\xed\x11\x195\xa9R&#123;\xad\xc27I\x0b=\x96F\x99\x91Z\xa0\xdd\xe6\xa6\xad\x80\x1f\xbc\x9fC\xe1\x98\xaf\xa1G\x98\xc5\xdaf\xe1m\\bO+\xb1\x03\xd1b\x1b6\xb2\x06\\\x9a\x9ez%X\x803\x0c\r\xdc\t\xf3\x08\xab\xe8\xa4\xc3\x9e\&#39;\x1f\xac\xef\xed\x02gmWlG/\x94\x99\x80\x99\xa10f\xd4u\x9f\xd3\xa3\xfcG\x94\xa9|^x?\xb3\xfc\x98\xa2\xf9\xe1q\xa1%\nG\xdd6\xd8\x97\xc8\x99XzHbK\xd8\x00/\x07\x0b\xdf.AVs\xa6\xc5\xe9\xd6\x81\xbbvN6\x13\xd6\xb0n\xbb\x00\xff\xf6\x82\xb0\x8e[P\xc5\x9c.6\x0e\xad&#125;\x9f\x11\x98\x89O_\x1a\x02\xc1\x8c-\x90\x99\xa0\xed\xa4L\x1b\xdd\xf8\x90\xc6,\xf6&#123;\x94\x82`b\xc3:0\x8a\x17\xf4\x89\x18\xe4\xdf\xa1-\xcf\xe9[\x13\xec\&#39;\xf3\xc9@\xe0\x89\x8c:&#125;\xdd\r\xa5\xaf\xbf\xb1j\xed\xb5\x1ep\xc4z\x03P\xb8\xd4\xf4M\xcd\xb9C\x8d\x18J\x03O\xfabk\xe6e\x0egO2]\xf8K\x9dC\xc2\xc2\xebs\x19\xa1\xe6\x01\t&#123;\x10\xcf#\x1d\x12\xbdk\x17e\xed\x1e\xb5\xa2\xf2^t\xf8\x18gqvj+\x19\x17\xbe\xf0\x9f\x8d\x80/\xd3\xc2|\xcf I\xce_\x8a\xc8\xf9zj\xd8RH\xa0\x93b\x14\x8f0\x03\xdd\xa7\xfd\x8d\xf7\xa6\xf0\xc6\xdd\xe9N\xff\xc9\x05\xd0\xe8-\xa6\xccB\xca&#123;\x18)Fmxg\xa2$Z*\x00\x0f\x85\xac\xa0\x0by&amp;e\xb1hq|\x838M\xd0\xcf\\\xa8\xf2+X\xc0\x83m3\x19\x8e\xec\xb4\xc5\xa0\x9dJ\xfa\xf7\xcb\xb1&lt;^\xa7\xe3\xc7&quot;\x0e\x1f\xe3g \x8c\x18L\x85\xb9c\xee\x9b\x1f\xf5\xcd\xbd\x18\x8d~\xa2\xb9\xab\xd3\x0f\xb3H[p\xee\nD\xd5Y\xf3\x80\xf8\x0cI\xcf\x0e`\x868\x19*\xc3\xc7a\xebs8\xeb\xf1\x15l\x8dZ\xebr\x8f\xa6\x0f\xcd\xf4\&#39;\x8b\x13\x8e6&#125;\x0c\xd7\x195\xd5\x19\x8f\xb4O\x08\x99o&quot;ykA\xe1\xd1\x8ea*\xcdI\x0c\x8dW\xe3Y\xaa\xa6\x80I\x81\xedC\x1b(\x92g\xc2\xa8\x8fQb\xba~\xa7\x86&#123;\x98l\xb9H\xec\xe1\rU\xaf\x80\x0ei!\xae\xceaa3x\xb1\xd9\xffi\xd9v\xa9/\xe8\x18\xaeX\xd5\x10\x90\&#39;\x1c:\xae=\xd0\xe0\x849\x89\r:j\xa7\xd6\x96\x08\xc9F6\x1d\xad\xb5\x8a\xaf\x1b\xe7\xb3.\x94\x7f\x0f\x9a\xb2\xb3(\x8a2 \x06\x959\xe2\xfd)(\x9foC\x8c]t\xa8x@\x9a\xd21+\x84q\xbf\xf44\x98\xb2B&#123;;F@&gt;\xb8\x16\xe9d\xd4\xae\xf0\x11k\x10F\xd31t\x16\x19\x1b\xe5\x0f\xe8\xe5\xecw/n\xbc\x01~2\xea\xbf\xa7\xfb\xe1&quot;S.\xc2\x06o3\xd3-n-\xacZ#\xcfK\xf5V\t\xaa\xc1\x8a)D\xcb\xba#\xdb\xb7\xcc\xe6w\xe6U\xef\x1c\xca\xd8&amp;\xb7\x8f-+\x1f&amp;&#125;\x1c1rZ\x8e%Iu\x05R\xc6\xbe\xe6\xa4j\xc0\x11\xdc\xc6\xff\t\x85R\xab\xdfA\xaaG\xdf\x8e\xe7\xba\xba\xa3\xb4i\xf5b9\xfa\xa6\xfe\xff\xf0,\xbb\x10A&quot;tt2S\xe8\xc7\xaf\xf5\xee\x97&quot;\xec\x0c\xe2z\xedbEMR\x80\x13\x97\x00\xf8\xd6CC\x86D\xbd\xf0\xde\xa8\xf4\xe5\x84\xa4\xcdG\x8e\xdcb`l\xcd\x19\xab\xf9\x05\x1c\x1fO\x86TV+\r[[\xee\xc5\xab\xec\x1a\xbf\x13\x02P,\xb0B\x9f\xd8eL\xd3UO\xc7\xb5\x12\xdd\x84\n\xc9x\x1a\xcd\xb3V \xa6\x1d\xda\xa1\xdc\xdb\\P\xa4O\xfbW\xa0\x19\xf5\xac\xc4\x94\xe6\x9f\x8d\x891\xad\x90\xa0\x1e\x19Mn\x00\xc7\xac\xb9\xcf&lt;\xfbrp\xd1]\xe1\x86\xbbvN\xb4\xab\x8c\x89g\x9b\xca\xb7\xdb\xe8\x1fU\x9d\xca&quot;%3\x1b\xafH\xd0\xe2\x12\xbf\xb5\x85At\x8b\x02\xdaaoZ\xf8]\xd0\xe3\x83\xec\xca\x02s\xda\x1e\x87\x08$ \xea\x14\xaf\x05\xaf\xd8qCd(&quot;\&#39;s\xbe+?+\x9e\xa66\xd4\x8cd?\x8d\xc0\xc7\x174R\\\xc4d5\xcaC\x8c\x80\xa8X\x93t\xee\x0b\xb3L\x969\xb8)/4\xdfL\xf9&quot;RQ&lt;\x9a\x9d|\xf6u\xbfD\x13\xb0\xf8H\xf8\x05\xc5\xa6\x13p\xb0\xc6r0\x1aO\xad\x9a\xd9\xfe\xeb\xbd\xb4CO|\x8d2\x89\xd2\x1b\xf0&#125;R\x12U\x1e\xea\xaf\xf5\x03\x99\x8bK\x9c\xeb\xd8\xfa0\xe7]\xae\xdcc8A\x9f\xa0\xff\xe5\x80\xae\xc4d2F\x9e&gt;o\x99[\xe1\xfb\xe4\xa8\xd7\xf6\xb8 \xe2\xfe\x1a@\x85\x82 cV\x8d\xfe\x97\x9d&gt;jV\xb8\x84\xef\xad\xcf\xec\x87\xb6\xfb.Fky/_\xd1\xf7\xd5\xb3\x8bu\xeb\xdd\x02\x14\xe1\x17\x1d\xb7Z\x84g\xd3$s\xc0\x10\x9aP\x10\&#39;\xd7\xcf\xd5ug\x9e`\xcc\xf3\xc4\xb9\xb3Jw\xa9I\x96\xcfsZ\xfb\x10\x85J\xedR\xc6&lt;Y\x93\xa1\xfb\xc0&lt;\xe6\x9f\x9bb\x98\xdd\xc3\xbbt5\x10\xa1\x80p\&#39;\xd3\xca\xd3\rR\x13\x13jS\xe5\xaa\xc5\xbe\x14\xa8c\xa7\xec\xb00\xe0D@\x1fE\xa7\xaf\x03`Fo\x8b0f\xbe\x1dIK\x08\xf8\xb7I\x0c\xcd\xb1\xee\x1d\xaf\xc6\x1a\x9fQ\x03\x07\xb9j\xba\xd9\x93\xf5\x90?\xe1\x9ec\x9c@o\xb0\xc8:\x9d\x959v\x87j\xe6\xfc\x19\x8bY\xe8\xcfHeLjQ\x14\xe5@h\xfbY\xbc*\xb4$\xcf\xec@\x9e\xf97nC\xfe\x1c9\x18\x8f \x1a\x80f\x1b\x05\xb3^R\x85\xdd\xa8\xe2\x19Q\x03\xc9\xff\xe1\xeev\x917\x1a\x8c\xd5\x9f\x98p\x02W\x99\x8c#\xe5\x83J\x84\xa4\xd2\xe2\xfa_\xc2\x15/\xee!CF\x83U\xb6d\xda\xe6\xb7J\xa2\x05\x7f\xfc\xb4C\xfa\xae\xe3\xe9\xd94\xdd\xd9&lt;6\xe2c\xe5\xa7\xe0\xc4\xff&gt;Y\xfc\r\x84\\\x1c\x0b\r\xf1\&#39;\\Q\xd2\x04\xf0\xe0\x15\x07\xcf\xf6?\x07\x1b\x16&gt;\xae?\x99\xe7\x7fN\x93B`\xfe&#125;\x88\x12\x1fy\x18\x00w\x15U\xb0\xb8\xb6\x91A\xbd\xcc\x1fT*\xb5F\xa9\x01\xf1L\xb3N;\x87S#\xc4/a2\\\xe6G\xa6\xee0Br\xc8-\xbb9 \xd7R\tB\xa9\xads\xf9\x1a\x85\xf4\xc7pv\x96\xdc#\x10sp\xdb\xba\xa2\xf4l\xfd\xcd\x0c\xa58\xb3\xb0\xf7\th\xe38\xaaF\xfd\xda\x8f\xc2\xb5\xdc\x942F\xea\xdbY\xd8\x94\xbe\x0bP\xe8\x0e\x7f\xed\x1aq\xaa\x19\x8cR\t\xd0\xaa\x17\xee\x82\&#39;\xab\xb4\xfc\xda\x16h0\xb6\xb7\xb9&quot;\xd6\xaa\xfc\x0esQ7\xe9S\x11\x90P&#123;\xaf\xbbO\x13JL\xa0\x1f\x87\n\xc5\x8d\xfd\xe8\xb8!\xae\x87\xe0\xc2\x1d\x9dD\xaa\xe4\x13\xd7\x03\r\x86\xa0@\x04\xefl&#125;\x8d\xbdC\x80\x00\x0c\n\xea5~\xea\xf5\x94\xed\xc0\x12\x16\x1d\xacl&amp;\x97:i\xee\xbdz\x9a\xe8\xd5\x95mY\x0e\xd8^=U\xec\x14\x86\xfaQA~\x99\x87R\xdcI58\x19\xa6\xa3\xe4\x903\\\x95i\xb8\x04ggm\xa9\xfd\xff\xea&amp;B\xdf\x18V&lt;\xbfL\xfec\xc2\x06&quot;da\xbf\xfel\rX\xa6\x8fqO\xdb\xb8|\xebH\xb91\xf3n\x13\xb4\x05\xad\xcf\x9b\x8a\xee\xfc\xdb\xbc2\xda_%\xae\xf0p\xbe\xbc\xc2)\xc8\x0e\xe6M\xef\xcf\x11\xf8CN\xbe\x8a\xa8\x83X5\xe2Htqm*]%\xc7\x05T\xc64\x03\xf71G\xc1m\xe5\xcb\xa9#\x19\x05\x9dI\xa5\xaf\xd5&quot;[\\\xe6\xc4\xe3\xce\xc9&#123;\xb8\x8c\xdf\xc4\x7fZXdB-G\xe4\xa3;\xac\xc2_\xde\\\x9b\xa5p\x96&#125;5\xae-\tA\x11M\xa9a\x08g\xac\&#39;^\x05\xcbE\x17\xaeZ\x17N\xd1I\x84\xf0z\x91\xe5\xbb6\xb5\xda\xce\xf7\x97\x06\xd8g\xb2=\xcfo\xf0&quot;c&#123;s\xf4&lt;\xb0\xde^\x9c\xaf\xa4\xaf,x\xf1T\xba\xe6\xac\\\x8b\xa6\x878V~\n\x8a\x80\x8bus\xc9\xaam\x87v1^D\x0f\n\x01\xd9 \x99W)\xe7\x18\x9f\xbd\xd6R\xa8\xd92\x07I\xae\x1f3)I\x9d\xe1d\x8b\x01\x1b\x0e\xac\xa5\x12\x9c\x1b\xa4\xd2\xd6(\xc4\x9f\x80\xb4\x8a+\xe1@\xa6\x1eBEy0ALp\x14\xae\x93\x13Lc\x9a\xb3a\x9c\xb3Bi\xf1\xfdp,b\xff\x0b\x06&amp;\xfeOY\t\xd1\xc3t\x1a\x07\x14\xe9\xed\x87\xa7x\x1f\xd3\x7fx\xe2J\xcaBG\x9d\x03f\x9b\x07?\xd1\xa7\xb4^l2\xf4\xee\xb0\xbf\xdb\x0e\xe1\x90\xd8\xd92\xa8\xad\xaa\xa1EM\x9c\xb1\x15L\xe7T+oJc#5O\xc4\xae\x02X\x8b\xb8@\x8e\xfa\x14&quot;$\xe2-\x0c$\x92\x91@dV\x83Sc;vP\xd4\xbd\x07\x91\xc3\x9cw\x00\x13\x01q\x899\x13F\xe4\x1c[\x0f\xa9\x9c0\x7f\xedr\xf3\x89\x7f\xa9^\x1c\x00\xe9\x9e\xa8`\xe4S\xce\xf5\nm\xa0\xff\xb2\xf6\xac\x1cZ\x1a:?\x9b\x99\xf5k\xd1&#125;\xcf\xf9\xb1\xce\xe9\x93\xbf\x87`\x08\xc7&#125;\x82istT\xb3\x01\xfc\x9aO#\x0c\xcc\xf9C\xa8\x04\xe5\xf6\x81;,Jp\xba\x16K-\x11P\xdet\x90\xef\xff_\x892S\x90\xc9BT\xb4\x9e\\\x07\xc6\xb2\xa6/S\xfd\xa9\xf0(\x98\xf3\xbf\x17\x1e\x9d[p \xb7&#123; \xd3\xf1\xc3\xc0\xf6\xd9K\xa8\xd6\xc7-q\xf7r\xac\x1fR\xe4J\x9e2l\x1e\xeb\x81y!\x99C\x02vs9\x96\x11\x80\x92,\x13&#123;\x1f\xe8e0\x80Q\xcb\xefJ\xc0Ztqm~\xcf\x9e,\x9dR&amp;\xc4\xee_|J\xe8ce~\xa0\xd2\x05\xc3\x15dxo\xee\x11\xa7\x8aH\x93\xc5s\x1eXV\x9d\xf5\r\x95#\xe1Y\x04 ^\xec1\xbd\xd3\x97\x9d\x06\x99&amp;Vy\xf1\xa2\x85\xa6\xa7\x83\x06c\xc7\xa9\xf9\xdb#\x91\x93\xd0\xde\xd5\x9f\xdaiq\x9f\xe2\x12\xc2KO\xe5\xf7\xc9]L\x00\x838yk\x19\xe8\xb6\xf2\xcc\x82\xb9*9\xd2\xf1\x89\xad\xeb\x03\xe46\x0e\x9f\x8f\x03C\xa8\x9b\x04:\xb2\x83\xa5\x17\x80\x07\x99$\x80\x0e1\xdf5Kh\xa9\xc9!C\xcb\x99\x17\xea\xdeC\xe2e\xf9\xd9*\xae`C\xcb\xe6K\x8a\xc0\x90\x83/\xfd\x90\x1f0\xff\xbb2\xc7\x89\xa2@\x11e1a\xfdw\x95\xa8qm\xc9l\x96zq#\xb9\xea\x1e\xf8\x1d\x93l\x8dB\x82\x84\xd2\xe7=\xc4\xebD7CBC\xda\xe8\xe5\xc6\x08\xfe\xc4e\xdb5\xb3\x8e\xd3\xf2\x8b\x0b\r\xc9p;|\x1e\x19F\xc5.\x85\x84\&#39;\x83\x7f\xa2\x15\xb3\x19g\xbbge\x99\x17J\xca\x08\xf6,7\xd2\x01\x7fa\xf8\x81\xdc\xb7E\x06\x96\x85_\x0f\x19.9\x99\x10n\n\x01\x86\xfc\x157\xc0\xa3X\xb7\xf2\xef\xbb\xc3n\x92p\x04\xc6\xe3)\x1bwe\x8d#r\x83\x1a=\x92\x8e\x80&amp;\x07\xaa.\xf0\x88\xda[\x0c7w\xf7\xe3\x9a\xad\xc5\xa5f\xfd\xe4\xcf\xb7\xb8\x0f\xba\x1f\x05\xa7\xc2\xbb\x8f\x19\xbeh\\\xbd\xc4\xb9\x16\x05\t\xa8\xf76S6\xb7\xd2\xa4\x86\x8d0\xa0\xa1\xba|\x11i%\xd1\x82\x0e@\x9f\xd9~\x85k\x81\xb5\xfcr0\xb7\x8bd\x13\x1bO\x15\xdc\x7f\xc9\xd8\x8dp\xf6Mh\xe5\xe6\xa7\x16Q\xa1b4\xa8\xb06e\xd9\xa2f\xa2\x0e5\xf7\x8d\xb2\x11YH\x9f:\xa1)\xa5n\x1e\x97\x89\xba\x17\x84\xe2\xdc.\xd4\xcb\xfd\x8e\x1foh\x85\xde\xd1\x941\xe9\x9b\x97\x9a@\x8b\x93JEIb\xc9\xee\xf6\x9e*\xfb\x18S\x82j\x9ag\x1c\x1a\xb9\x98X[\x85\xa3\x94\x12\xb7\xc3\xa83\&#39;\xda\x02\xa3*EQ\xe1h\xe1[\x8e\xe2\xc6&quot;\xf7Eb\xbav\xab\x87\xc0\x98\xd7 \xa8\xbe\x1c^\x02\x96\xd4P\xd00\x13\xd5\xd5\x96=\x95\xbe\x8c\xdbd&lt;wTn\xc0[\x16~\xd53T4\xffJwJ\xc9K\x18\\PT^\xabE\xabI\xf7v\xdf\xfe\x88\xc6\xb7\x9a\xaab\x81mj\x05\xd8\x0f\x03\xab-C\x1c\xfbS\xb2I=\xbd*\xa9&#123;\xf2\x16\xccq8\xc2$&amp;\xec\xa5 \xbe\x85,\xd0R\n\xa8R\xa5\xa5_(\xb0\x8f\xe1\xa5\x8bE\xb4#\xc0\x8b\x97\xf0\xa0\xdc\xc5!\xae\x15\x0c|\xcc\x191\xdb\x02U\xe6\xed\xb4\xbf\xed\r&#123;\xe57\x88J\xc6\xbd\xe5\x90\x9b\x99Jk\xf3\xbeX\xbe\xe7e\xd7W\xea\x9bzg&amp;\xb5\xdf\x00\x90\xbf\xb0]\xbd\xe9!\xde\x8ak\xf2\no\x91\xa8y\xdc\x0e\x0ci\xb4py`\xcc\x85(\x0b\xa5\x085\xb3w\x1c\xbfW\xe9\xd9\xd0\xc1\xfb1\xfet\x17\xad\x8c\x91\xbd\xd7m&quot;\xf8\xdc\xf2\xfb\x00\xa9\xd7\xf2nT\xb3\xa1\xc2g\x14C\x9aa)d`U\xc4\x11\xdf\xcf,\x16\t\xe1p\xd6\xb5K\xbaE\xe5%\r]\xa6\x1d\xc5y\x94\xcf1\xaf\xd8W\xe4\xec\xf1\x81\x18\xa0\x8b\xa7=\x1d\xe4dB\xf2s\x9d\xd9\xd6\xc2\xcf#&amp;\x1e\xf0\xcf@\x91\x92\xc0\xba%\xba\xe9\xb2&gt;V\xb9\x04\xd1\xbe\xbf4\x07R\xe1R1\xcb\x85\xaf\xa5 \xb5\x18\xe7\xb44\xeb\x95\x95\xb1\xa1\xcfI\xe9\xe9\xe8\x97\xc6\xec\x1ce\x8e\x8fYQqY\xbec$IU\x00AINp\x18\xbbl*\x0ei\xf10\x19\x1f^\x98M\x91\xfaC\xbf\xea\xad8\xa1P\x10\x8b\xcf\x90\x18\xb3\xbd\x0e@\x08+\xe1\xfc\xac\x16\xdc\xb6\xe3\xc3vW\xf0\r\xfb\xfa1\xef:yp\xdd+\x1a\xf7\xb4VZ,\xfa\xb5\x19\xc3-\xb4p\x1a\x18/\x14a$!\xc6\xea\x91\x13b-M\x9et\x86\x00\xc4\xf1\x9eO\xd9\xdc\xa0u\x0c\xe9I\xf3\x1d\xef%k\xb8\x95~ ,B\x97\xc1/\xaf\x84^\x1f)\xfb\xb9&#123;\x9e\&#39;L\x9c\x17&quot;\xf4\xa56K\x9d\xbc\xe3\x01[ \x17\xb5\xd83`\x85&gt; B%\xe3\xfa\xfe\xd5koU\x16\xf1\xa4\xfa\xc4\x81\xbd\xdd\xbaqF\x14\xed\xa0JR\xbe\xcf_9\xf1TV\x152\xdb\x98\xc3A\x0bM\x9f\x8cl\xc9iE\x03\xa0.\x9e\xc3W\xa4\xa7*\xf9\x00\x7f\xea\x16t?;\xa7\xcc\x17\xcads\xec\xe1\xa4\xfc\xc8\x84\xf5-\xa7\xca\xfa\x8b\xc9\x07\x87\xfa\xce\xaeU\x0c\xab\xb4Q#\xdd\xb1\x91:F\x19\xb5\xe3\xaf\xcf\x02\xa2\x08\xc6\x85\x9a\xfa\xb3]\x9ck\x81&lt;\xea\xe5\x15\x17\xad\xc7+.\xe1\xcd]\xe5=\x90\xf0K\x0f\xa8\xe3\xca\xf7\xe7c\xb6\xd8x\x8d\xdb,\xba!O\x94\xa0\x0e\x0f~\xde~\xf2\xf6\xe0U=\x81\x91dq\x8a\&#39;\xd6\x92\xe6~1\tt\x9e\xa5\xaeh!\xcdJ\xb1\xb3q\x96\xf0&#123;\xfa\x0b\x10]*\xce&quot;\xff\xd4rk\xe9\xf7\x1dK \xb8\xd6\x89\xfcj\xa0\xf8\xd8\x82\xa2\xed\x97\xbeom\x9c\xd6\xd6\xea\xf6\x1dN\x1c\x01\x1d\xa1\xae\t\xd7\xd1O\xd8\x13\xcf,\x9a\x17\xbf\xfe\xdfuB\x13\xe3\xa8d:RuV\x98aAM|\xa59&#125;F\xa2[]\x05\xfeef\xe3\x92h\xf1\xc2\x97a\xcc\xa3Z&quot;*\xb6_\xff\xdeu\xadR\xf0\x0e\x0e\x89\x17\x18 \xf0\xe8&#125;B,\xa0&#123;\xd6\xbd\x11\xfdi\xe2K\xde\xb7&lt;\xa4(\x1a\xc6Z\x96\n\xdc\xe9\x82)!\xf4\&#39;`Qs_\xec\xe8\x18#\xcbHo!Tx\xce\x1a\x7f`v)\x15D\xc9\xfdE\xe5sy\x85\x87`\xf8\xa8[\x1d\xd9\xcee\x0e\x87\xd1\x1a\xfa\xcfA\xf9\xe6\x0fS\xec\xfc#\xd7\xd73\x1c=\xcb\xcb\x9dC\xba\xcb\x03\x8a\xbb\xb5\x1c\xf1PS\xbe\x14[\xc3`\xbd\x87\&#39;o\xef\xddN\x89\x10\xfd\xc3\xc4\xafq\x17e\x0f`U\x8e5\x19\x0f[\xa2)\r\x0c\xa9\xc2q\xbcS\x9ap\\\x92\xe9\x16+\n\x98w\xf7)MS\xec\xb1\xa9\\\xecR\xc1\x03\x13\xe7\x80\xe6\xf8\xe1nz=Q\x10\xb2\x1c\x12\xa7\xed\xe0\x9e\xa7C\x89\xa8\xd4N\x1f\xe4\xc1\xf2\xdd\xbeJ\x9e\xd3\x1c\xa7EE~\x1a$\xea\\\x98\xb8\xe8/\x05\xc0\x96\xd96\x02luFB5g\x83D\xea^1d%\x91\xe1\x01\xe8\xd39\x7f\x027\xc6X\x1at\xccES\xb9)s\xb7r\xfa\x0c\xf6WDR\n7 c&#123;\x8b\xef\xb0\xb2u\xbd\xca1vq$\xa1\xb7\xa9\xa4x)\xac\x11:[:\xdee\xc1JL\x7f\x0b&#125;\xd4\xd8\xe7?\xca+\x86\x85\xd1\xbc\x82\x98\xadfG\xaa#\x18\x18W\x8f\x91\xd3p&quot;wV\xc9\xfc\x92M\x16P~y\xf2`v6\xe4\xce \xc8\xd31\xbbR\x9bV+\xa1\xd9\xc4\x16\xef\xb8F\xf1\xd5\xf2c\xfb\xe9\xa2S\xb8\x87\x9c\x90\xff\x8b\x19p\x876\x04\xe2\xf9&gt;\x86\xe3\xb8r\x9e\&#39;\\\x89\xca]z|1\xe8l\xa0\xec\xbd\xc5\xf9\xd7a\x82\xe8\x11\xf6\xf4\x84)\xdb\xde\xb6t%\xfe\xa2y\xc7zf\x8d\xf8\xae\x87\x91\xa6W \xe2\x93\x9f\x85\x8cg\xc53%\xb3\x1b\nt\xce\xdc_\xcf\x8c\xfdI\xe93\x92\xb8\xe7\x8f@\xfe\xb8\nZ\xe6\x82\x10Q\xb7\x91P\xc4\xd3o\x97*\x11T\xffe\xc1\x84S*\xef\x85\x8evW8y\xfe5#9\xca\xac\x8d\x92;\xe4\xa8\xd5\xdd\x01g\xf9J\xe2P\x9f\xf7\x8d8&amp;\xed\x13\xfd\xfc\xb8\x1b\xe1H\x9bs\x9d\xbd2\x16!\rd\x8dS)\x9d&quot; \xef\x86\xf0\&#39;\xd6\xeb&lt;\xe4\xc6\x12\x06*\xdf\xb6e4_d\xc5\xc9\xa20\xdc\x85a\x98z\xe7E\xcd\xd6Z\xc3_u=\xad&lt;]\xe5\xbf\x15\x88\x97\xfbalz)\xda\x18\xbd\x9e&lt;5Tdr2 \xf0\xfd\xcb\xa7\xde\xea\xaf\x1b\xc3\xf2@\x99\x95\x81?\xbc\xe4\x9f\x0b\xe1\x08Q\xdc\xba\xe6\xa1\x1c(\r1\xf6\xef\x95\xb3\xc6\xb9i9\xc5\xaa[g\xf5\x14d&gt;D;o\xd7\x8cVj\x8e\xc4)\x95\x96\x8cyX\xf0\xe5\xe0\xb5/:\x9eR\xbdO\xcd\xb2pn\x17B\xdaR\x07\x15\x1bq\xef5pB1\xf5\x8c\x17av\x8d\xb6t\xe1\n\xacZ\xc3\x90\xed\xc2[\xc6\x7f\x83\x84q\xe9ep\xd3\xe3\xa6\x16\r\x94r\x89\xf0\xb2%qx\xefe\x02\x96vf\xe2\xacq$P\xd0\xee\xb7s7\x9d\x93$\xce&#125;\x00=\x8b\xcb\xcb\x86K\xb6\x136\xbc\xac\xccS\xff\x9e5\x0fO\xc2\xe0Qa\t(\x15\xd2\xf2q\xec\xc4k0\xd0\xe9\xaf\x10z\xbb\xd4\xc5\x0b\xedP\x90\x16\xad\x81\xe7\x08\xf9\x85\x83\xe3bNP\xff;\x1d\xdf\x88\x99&lt;\x02\xbb\x1e\xd5\xbe\x7f\xbce\xc6\xea!2\xb5\x0bk\xc5\x1e\xe3\xa0\xc2Z\xf9\x1a\x00\x812\xf0\x00t\x88B\xb5\x87\xd6c\xa4W\x06 /\xe2[3\xd5\x91\xec\xdb\xb7X\x9a\xc4\xd4\xc6\x1a\x05R\x87\xf9\x90L\xe8\x04\xce\x02\xbd\xbd\xe7=\x95\x93\x88pIPBF\x95Iq[\x97\xfbl\xaa\x9fF#\x0f 12\xady#\x13\xbc\x0ex\x1f\x85f\xd9\x9ez\\&#123;ec?\xb8#\xebL\xe0*\x8bL\xff\x98az\xdbxV[\x80%vk\x1b^\x92\xac\x98P\x8f\xbf\xc7x\xf5\xc7\xa0C\xaeY,\x1b_\xa34\xd9\x8e\xcf\xd1\xe2\xfb\x99Q|\xb2\xb0\x17\x019\x96-\xadV8\xa5\x96\xb7\x19V\xb1\x92\xa7\xb3\x9aad\x9a\xb5w1\xb0\x1e8$8\tn\x0c\xb2\xd3h\xaf\xc3\x06\x8d\xe9\x9b\xfa\t\x1fw\x85\xa2\x15\x90\x17\xc9\x00\r`\xc4\xd3\x8b\xf9\x08\xeb\xa30\x85\xb2\xbff\xde&#125;\xbf\x99\xa6\xd0j\xb3\xb5QmR\x00\x1ei&gt;\xdc\x04\xd4\x9eix\xccoD\x91\xa7\xb7s\ro\x18\xdc\xaf\x84\x98\x17d\xc5\x99E[\xef\x889\xc7\xb8H\x12o\xdc\xbe\xdaL\xe9\xdc%\xfa\xc6\x8ac\xcd\xcb\xce\xdca\x86\x19\xe1\x9dc\x82\x08\x11\xadu\x9c\x9f2\xfe\xc1$\xbc\x98\xb8\xe4\xfb\xdc\xd5\xd1\x1d\xd0|p\x92\x1f\xef\xc6\x99\x94\xe2\x18\xae\x7f\xf0\xf4\xa2\x14#\xaeM @)\x14N5C\xcey\x89m\xa1%%\xe1\x11H\xb7\xc0\x8e\xb4\xef!qr\x8e+\xff\x91\x06\xf9\xdeC\x82l~\x8f\xe1\t\x82\x18\ts\x7f\xf6\xd0\xbe8u\xdaG\xd7\x85o\x86\xb1?\x1b\x98\xd2\xa7\x8f\xa0\xb1n\xed!\xe5b\xf0(\xd5\x07\xb0\xbd\nJ\xa7\xb5-\x14w\x0f\xb5n\xf3\x80\x85\xa7\xf6\x84\x9a\xb3\xfd\x017$\xd6\xfbb3\x1dl$\xff\x05\xe4^\xc4A\x0e\x12\xc3(\xd5\xdf\x81\x89y\x1awF\x94\xaf&lt;\xa9B\xf9f\xe2\xcby\xaa0\x7f\x10g\xde\x1fx;\x11\xdb#\xe1\xa8\xe9\x7f\xeb\xdb\xbb\xfb\xa2(\x9c\xd2g\xa4\x84)W_G\xe4\xc2\xd1\x88*\x81\x04\xf9\x1bn\xe6J]\xb3Q\x8e0\x82\xd6\x9eN\xb3&gt;\x1f+\xebUf\xe4HK\x9e\xb1\x90\x7f\x9c\xeaM\x9c\x12\x88\xc4L\xb0\xbe\x9f+\xadX\x06\xddd\xb8\x13\x89.q\xdb:\x81VT\n\xa2\x14\xa3@A\x86\xb0\xd5\xaa\xb5\x92\x07X\xf8&gt;\xd9[\xd7\xad%U\x8a\xbd\xf4\xb8c\x94\xf0S-\xbdn^\x84\xd0/2HP\xd7\xf84\x05Z\xc6p0\x0eR\xa2p\x83\xb5P\x87\x94\x97\xa0\t\x10\xc7\xca\xa4N\x08\xb0\x99\x8f\xd2\x08Fm\xc0w\x91\xec\xdb\x1c\xff\xe2\x98V\xa7\xa4\xdcH&amp;\xfe\x18X\xe3/\xfd\xdch\xe8\xe9\xd9iv\x15\xcd\xf0g\xad\x02\xd8\x9e\xb5\xf0\x169\x85\xd7~\xb1\x99\xae\x19\xf1\xefS\x18w\xe0\xc8\xfa\xcfG\x8d\xabM\x82\x94\x97\xe7\xec\xd7\x9eD-\xd4\xc3\x06$\x8fx,I\xb7\xb5\xf0\xfa\xdc\xd2\x88D\xa2\xd5\x9d\t\x1e\xe1\xe2\xf5eo\x81\x82\xc5&lt;p\xb0\xe2,\x1a\xbbU\xff@\xd2\x1a\x03P\x06\x90a\xec\xdeT\xf0@#\xec\x137\x18Z\xec&#123;\xafd?!\xddV\xc7\x17\x8a\x88&gt;\xc3f\xb0\xca\xb6N4K\xe7\xc9\xea\xcd&#123;k$\x16=\xf4?d\xeeR\x1eQp\x13\x0b\xf7\xb8\xeb\xdb\xd5\xa6\x96\xff6\x14f&gt;\x96b\xc6\xa9$)$m\x9e\xac\x12\xda\xa4\xc3W%\xc7\xd3,\x15\xc2F\x83\xcb\x8bu\xb1\xdc\xd0\x08%\xbb\x05\x88\x1d\x16\xce\x95\xfcS\x1a\xef\xebi\xa7d\x7f\xf18\xaa\xe0c\x99\x7f\x04#n^\xec\xeb/\x8c\xdezI\x9db\xaa\x98\xd9/\xbd\xda\xb7\xd2\x15\xe8M\t\x80\xf9\xa4\xd8\xbc\xb2\xc2\x99&quot;\xca\xe3\xcd\xd6?\x84Hx\xcc\xa57\xc7\xd3V\xffm\&#39;X\x81g\xd2\x1a)f\x81\xba\xa6:e9\xba \xb0\x1f\x19g\xa4\x81\xdb3wh. \x18BH\xca\x83&quot;/*\x04\xc9\xcc\x15\xddKH\x030\xf0\x1a\xb8h\x02Z\x10J3\x99T\x91\xd1iC\x85s\xb8&quot;SJf(\xce\xa1o\x91Z&amp;s\xc9\xc0\xdf\x86\xb4\xa0\xaf\x13\xac\xc9SS\x1a\x896\xfc\x1a\x0fu\x0b\xda\x82\xfa\xc9\x8a\x86/\xe7o!\xf9nE\xb9d\x911\xfb\x8a45\xb7\xda\x00\x9f_\xe0\t%,\xd7\xa8\xad\xe1\x93Aj%\xb5\xdf\xf9\xad\xab\x88\xfa\x13\x02q HN\x9b\xde\x04\xd8p-\xd5\xc7!\xf98\\(\xc9)&gt;\xa2\xecA\xb0S7\xa8|\xff=\x81,\x895$\xc2\xed\xb6A\x89&#125;\xaf\xdc1\xae9\xaf&#125;E\x07w\xca\xeb\xe5\xd1m\xdca\x0f\xe7AS\x93\xbc&#123;\xd1\x82HM\xfc;\xa6w)&gt;\xd0\xb6\x0f\xcd\xe1+Y\xdeW\xeb\xae\&#39;\x7f\x90e9B9Y\xadE\xf8\x9d\xac\x92/M3\xcb\xbd]|,\r&#125;\x13\xc4\t\x95\x13\\\xc2 &#125;\xeb@\xa0\x06\xbc\xe0\xb0\xa6\xa5A\xd1\x00:p\x0f!=wXW\x19\xee\xb0bZe\xdd\xa5\x8b*\x0cZ\x88\x1e\x93chb\xe6s*%\x9c&#125;g\xd2\x93(\x05\x83\x96H\xb1/^j*\xa8\xdc\xa2\x1f.yS)\xb4\x10\x89\xc8\xd1j\x08\x8a\xcf\xf2\xa6\xc3\x04#a\xd4\xaeP\xdcg\n0\xe6\x0bPQD(\x8f\x8b\xa6y&lt;&#125;j\x19Gz\xcfd\x88\xc2\xb3\xaaKq\x16\xd9&amp;#\x9fJ\xbc\xf1\x1e\xb8\xed\xed_\x00(5\x07K\x97\t`\xf6J\xa9\xde\x02\xf9LE\x05t\xdb\x15\x7fI\xd8y\x10\x18\x92\x98m\xe2C|\x12\x02\xea\x1fj\x05\x9d4i\x88\x8ffJ1&#125;\x93\xd7q\xcdk\x1a\x93\\\xf5|\xac\xe4\xb2\x9a\x0f\xd3k\x7f\xcaLB\xdf\x06\xd6\xff*\xb7\xee\xc9\xed\x7f\x0c\x97\xf3\x9e.\xc02uI+\x1f\xf2\xae\xd6\xb7\xfb\xb3\x07\x1a^)\x0b&lt;/*U\xe2\n\xd4\xe2\xd6$N(S\xa6!\xa9%\xf3\xae~\x927m\xe8\t\x08\x95\xb7\xc0\xe2\xb2\xc2\xd95\xdd\t\x0ex\xbe!\xc6\xe1\xdf\xad\x81&gt;\xd6\x99\x1e\xe8\xa7YK\xf4\xa0\xd3\xedf\xf4%\x84b\x12\xe9\xa2\xf3Y#\x1f\x17?\x8b\xa7\x15\x16\x97\xa2\xbd\x7f5JAT\x9a&amp;\xa1z\x87\xc5=\x92\x0b\xac\xc1\xfd\x1b6\xbc\x85\x0f\x94\x0fG\xca\x02\xec0\x17\x95\x91\x99\x18\x8b\xe5x\x11o\x7fK\xa5Q\xa1\x86\x0e\x8c\x9c\x8eA\xb5\xa1\xaa\x8b\xd0\x076\xa0\x03\xa6\x8e1\x92\x9a\xb4dD&#125;P\x98H\x03\xac\xb5\xa6\xf6\xf9\xdb|\xe0m\xf3\xb0\xbb\xb1\x0bMAd\xcc\xaa\xd4\x05\xf8\x7f\xc5B\xd0\xd2\xf0\xf0\xd1I\xffn\xbeE\xad\xf2]?\xdef\x1dx\xc8(\xc1\x07bZ&amp;\x18\xa6\xca\xda\x83Pz\xa4\xf3\x15\xd0(\xe4\x9f\xf0\xfbC\x01&gt;RR\x9c\xd5\x1f\x06\xf6U+\x00f\x97\xe1\xd6\xd2\x8cO\xa4H\x0b\xbf\x9c\xfe\xd7\xa5=\x0b\xc7\xech\x19\xaf\x1d\xb8\xbeNB\xb1\xdc\xbby\x14\xf51S\x15\r/\xf0\xce\x14K\xe3\xd6\x95\x9d]\xae\x04\xe9\x00|V\xcc\xfa=o\xe7\x11\x98W\xa5\x1aSk\xdc\xaa\xc6\x19 &#125;\xb9\xdfi\xa9&amp;\xd4\xb8\xa1&#125;\xb2\x95\xa3\xa9\x83\xdf\x9d\xfa\xa9|VW]\x0c\xc7\x8a\xbf\x98\x87$\xa4\xb7\xca.m\xaf\x0f\xa1q\xbcu\xc3\x7f\\/\xba\xde m\xb8\&#39;\x88\x95\xd1 v?%\x88&#125;\xe15\xc6\x94\xd9\xefE3\xcb#\xbc\x11JhA`,\xad\xf1\x84\xad\xd8\xa1\xb9l\xce\x02K\xf1\xfbI%\x86\xcf\x9a\xc1\x18p#\x1b\xaf\x91S\xfb\xc0\x00\xf7\xd7$!\xed\xcf$\xfb&#123;\x9b(|\xeb&#123;D\x8c\x92\x04\xed\x84\xed\xc4\xaf,\x86\x15\xb5\xc4\xb2d[c\xd5\x13&lt;\x94\x15h\xe4\x94q\xd8k&#123;&gt;\xd3n\xd1\xa9?\r\xe5!\x12\xb4\xa2\x12g[\x84\x04ng\xc7=|\x89T\xcc(\xb8\xac\r\xc8~\x1a\x952\xb6~\xa1EfX\x03\xe7Q\x87\xba%\r\x00\x18\x89\xcc\x14\xb9\xabd\xe0\x00H\xec\xa0-\xd0\&#39;h\x14\xef3\xd1s-;\x83\xbep\xb9\xeam\x94\x8c\x08\x1d\xe7\xa9Ce\xcf\xe3\xaaeh,\x13g\xe8\xad&quot;s0\x8d\xf3\xc7m\xf2X\xae^\x1a\x0c\x80\xf8\x9be\xa5$\x11\xe8B\xcf\x88\xceyK\xe1\x05\x0c\x9f\xef\xb3\xf3\x9bdp\t\xb2\x95?f$\xa6Xurn\xf1\x02\xd5\x87\xb0n\x1d\xe3\x9e\xe0^\xcb\x9f\xdd\xab\xfb\x14\xe5\xb4afl6us!\x16\xe3\xcaQ\xf3\xff\x13\xac&#123;\xafT\xd9y^\x12#l\x14O\xaf\x1e\xc5\xc2b\x10!\xc5OdL\xb8\xb4D\x8a\xa8\xc9Q\xc6\xdc\x97m.:mI\xd1J\xd9\x924cl\xa2\xd1\x9c\x87O\xc9\xca\xf2\xa4\xca\xed\xca\x1c||\xbf\x1b\x80M\xcb\xc7|\x16\xa1O\xb6\xfe\x9bpr\x02\x02LGi\x152&gt;sq\xee\x18Z\ngz\x15\xf9\xbc\x95\xf5\xd0\xefZ7\xcdH4\x83\x98\x05r\x88K~\xed\x05\xa0Ys\xb3\x1bF\xd6\x82\x8f\xa0#\xb6\x8cwt\xff04\xa5\xd7\xff\x89\xe86\xd9\x83(O`\xa5d\x9cgx\xc8\xe7\x91#\xfe\x1f\xa0\x1e\x85\xba\x01%\x16U?\xce\x8aZ\xf1oz: \x00\x9fU\x92\x84\xd7\xb3d\xfev\x98\xd4db\xe9D\xfc~Jw\x8d\xfd1O\x0b\xaa\xd0&lt;\x18\xd4#\x96$\xf5\xde\x0e\xc2\x11\xdf\x07\x9a\x8f\xa1\xd6\xd7\rq\xa3\x93\x1bJ\xcd;AD\xc8\xb0)\xb2\xa9`\xa8mg-\xda\xcc\xf0\xb9\x82b[|s\x8a\x11K\\\xe30le\x9a\x99\x93\xdf\xc6\xcd\x9b\xa1\x96\x9b\x96\x8b\xab\xfe\x10n\x95\x8d\xe9\x9e3\x8ex\x98\xcaA\xb0A\x7f/f\xe40\xdb!\xd3yS\x1d*\xd6EDY\x99\xf8\xc9\x0e(=\x1f\xce\x9f\x05Z\xf2L\xca\xe82\xf0\x91\x05\x8e=\xc2\xb6\x8d\xa7\x1a\x9eT\x19l\xf3%r\xc1PD\x94\x9bG%\x8bQm\x0f\xed3\x92\x06+\x93a\x83\x80\xf0 \x1cd\xa9&amp;b\xa3\xdf\xbeY\xf9\xdf\x8f\xa6\x8bG\xb2\xa0Y\x85\xbb\x8e\xedV\x9c\xac\xcd9n7\xa1\x86\x90\xba\xde\xe5\x86\xdf\n\xac-\x10\xf6\xa6(F+\xab\x94\xd3\xe4\xf5\xf5\x94Z\x05o\x126\x9a\xf1\xc1r%\xeb:\xeeM\xfb\xc7A\xde\x94B\xec\xe8\x17\xb3qD\xd20\xba\xfaNF3%\xb3\xc9\x94\xd8\x7f\xea\xb8k\x1f\xe67T$\x87\xbb!\xe4\xacd\xcf\xa9\xb3\x0b2\xdf\x1d\xb57\x11\x12\xd40Z\x7f\x97\x18X\xa2\xa4\xd9P\xc7j4\x9fwS\xd3\xc9\x1d\x90*m\xae\x00(\xe6\x03\xde-\x13l\xc2\xc1\xfb\x90X\xd7Jr!\xb5v\xc6e\x0c\xa2\xf9\x17\xc2!\x84\xc4\xf9e\xb8\n\xfbb\xcbB\x87\x86%(\x1b\x0b\xb7\xd3Y&#123;\xddR&gt;\xbc;/\x05lm\xdc\x10\x05?W\x1bF\xa9\xd6\xa3(\x95\xbf\x82\x1a\xcaw\xef\xdd\x8a\xcf\x1e\x11\xe2\x07\xba\xd4W\x87l\xba:\xda9\x8f6\xdf\xe3$m\xe55\xa2\xe38I&#125;\xde*\&#39;\xc2!u\x86\x02\xfb??/&#125;\x91\\\xefX4\xd9\x1a\x80\x12S@\xc8\xa1R\xc5\x90\x87\x163\t~eO\xee&#125;-j\x90,\xeb\xf29\x92`d\xcc\x9d\xe7\x10e\xd6:\xa7\rG\xe9v\xd6Y\x08\x93&quot;\xe6\xb7)@0s\x16U\t\x83\xe8\x9d/-\x10\xe7!\x7f^\x89K^\x00\xb8\x7f\x90%\x81\xe9\xadU\xc3y\x9d\xa8\x10!&lt;*\xd8\xc3O\x87\x0c\x9d5\xea1\xc2R+\xc0\x13\xada\xd3\xfej\x0f\xcdXJ\xfc\x825\x8a\xb9\n\xce\xc6\xa0\xdc\xfa\xd3\x94\x1b/\xc6\x05\xf7\x10M\xd9\xc3(\x17\x0c\x1d\x97C5#\x0b\x1b\xa7\x84\xb4\xc3\xaf\x0b\xf2`\xfd\xcbr?=\x9fd\xd8\x18\x1e\x11\xb6\xbb\x8b\x9a\xe3\x96\x82\xa3\x99\xedF\x19\xcc)\x1d\x01\xc7\xc7\x97\x89\xdd\r\x0c:&amp;\r\xef\x8d\x8fa\xadZ\xceN\xd5i\x88\xd5\xdb\xce\xe7\xec\xc1\xf8\xda\x13\xf6,zH\xdf\x0fR\x8b\xb1\x15\x8e\xc7$\xb5t1\x01\xf4\xa1\x96T8\xd4S\n2&lt;&#123;\x19\xcfe\xac+\xc9\xf1\xf9\xa7\x85\x8d/|\x89\x83`\x1e\x15\x15_\x19\x14,\xaeXr\xec\xf9\xab\x8c\xd9|\xe7LH\x19\xb7\xf2|\x9c\r\x96p\x10\xb8X\x83\x05\xc6\xc4\x02ZN\\\xad\x1a]&quot;\xb0,L\xd8\xfa\x85~\xa2\xd3K%f\x85\xd3\t\xf5x$`\x8c\xde[aU\x15\xcaJg\x03\xb3&lt;\x85\xeb\x1bi\x99)\xce\xf9\x90\xcf\x9f\xa9O~w%r\xc5\xa1\xea\x05~\xee\xb0\xf7\xdb2\x14\xbd\x81#w\x80\x0b3\x15\xb5?\xc43\x96:\xa2\x84rS\xeaWw\xfd\x0e\x7fB\xb8\xdd\x06J]V?\xd5\x85U[?Fh\x87\x01\x1b\xbf\xfd\x8crL\x19\xc1I\xa7t/\xdf\x99%\x9d\x10,N\xd0)\xd7\x85\xdcw\x97\x80\x14\xc8W\xd4\x1d\x0e\xd4\x87\xf4\x9d\xdf\xcd|\x96\xba\xdb\xb670&amp;\x08\x95\xc0+\x8d\x0b^\x88\x19m\xd1c\xe3\xa5\xe2KL\xe0\x9bCF\xdb\x82\xdb\xbc\x90L\x9a\xc3o\xaa\x0b&amp;EYX&gt;\xb8\xca\x1dk^\xbbH\xd8\&#39;\x81FuSgG\xc3\x90\xe0\x0b\xde\xba\xad\xfd\xecN\xa70/\xc4PD\xd5C\xe0\xcc\xe7\xaa_Q\xcc\xc6\x97r\x917\x81\xf0\xba\x9d\x07\xdd\x116\xd2/\xe87y\xd2AO\x9e\xa6 dE\xbb\x8e\xa2~\x9am\xb5\x1fV\xf3A\xf2I\xaa1\x8eGL.\x07\xffK\xa6\x16\\\x81\&#39;!= K\xcb \xf6O\xd9\xb7A&#125;\xb4#\xb9\xbf\xf91\xe0&amp;\xf7\xab\r1!\&#39;\xc0\x9a\xbb\x7f\xd0\x15\xeb\x91_\x0f\x97\x94&#125;\xdbg\xaaU\xe0\xfa\xa9\x9e&amp;\x01\xf1`9\xf7RP3\x80\x8b\x88\xb2\x83\xc1\x93\xd2\n\xc47\x8fFE\xc1\x84\xddb\x03;\xbf\xba\x9b1?I\tZ\x97m\xe0\x8f\xc2\xab)\x8f\t\xbc\xa6I&gt;\x8f\xcb\xdf\xb0\xdaa\xa9]\x05\xb3\x19\xfe\x8b@.f&lt;\x80\x15\xb6\xa7\xa3\x13\x13\xbd\xe0&lt;[\xe3?\xad\t/\xacD2\x80\x13\x17\xddx\xfe\xa2\x93\x1c\xc7\xc5u\x01Y\n\xe6\xd8\xb49\x1d\x14\xc2\xf9Em\xde\xa2\xa5\xf3\x82\x1a\xae\xe2\x04!\xa0\x8c\xc5\x038sP#\x9d\x8c\x8c\xe3\x86\x00\t\xffeF\xb1\x94\x82I\x95\xa7\xf8?\xa1\x1a:jp\x06\xe4\xd3/\xa3\xbc&#125;]\xd1M\xe7\xcfe\xac\xefT\xcd-\x11\xa5#\xb9\x97\xd5\x91\x8eL\xe2\xf6\x17\xfa\x96e\x95\x9c\x95\xfd\xb7\xec\xdd\xe9\xa1\xb668\x186\xaek(\x9cg\x91sWb=&#123;\x93\x12\xce\x83\x81~X3-r?k\x11\xc2\xf8\x01\xe3\xa8\x87\xff;\x0c\xbb\x9a\xe26\r\xe6\xd7\xc3\xf4\x12yE\xa16\xc9\xbf\xe7s_&#123;d\x1a\x87\x92\x0bC\x1f\xb3\xdd9\xbc\x9c\xe5t\x050\xa3\x94\xa95\x9e\\\x08\xa5\x0c[\xf4\xb7M\xc8\x11~-\xbf\xee0\xb8\x89\&#39;\xffy\x02\xa6;!\xf2\x8c\x03\xeb\xa1+\xa4[~\x9e\xd3Au[\t%\xdd\x98\x01\xa8n-\x1f\x91\x8e7Uj\xe5\xe8\xe6|\x91\x9c5!Wr\x90\x04\xd8\xfbM=oU\r&amp;P\xc9;e_\xae@\x82\x10\xd8\x86\xef\xa7b\xd5\x1bxes\x15f\xfe\x9b\xf7\xcbk0\x95\x7f\x03\xbb\xe4&amp;\xc7\xb9\xac6\xba\xe8B\xa3a\xf1\xae\r\xfe\x14\x07\xd4\xed\xa2V&lt;:\xb5\xfd\xe3\x92eO\xeb\x9eg\x11)\xf1\x89hap\xe0\xf5\xf1\xfe\x913\x96\xa2\x01\x07\x88h\xc7&#125;\xc1\xf1\xb7.\xc1\xd87\&#39;ak\xd8o5k\xd5\xe9f\x9ab\xe7\xc39P0aD7\xf6\xf7\xa3E\x00\xd8\x88\xd5\x04\xc6\x98`\xf3\x85\xd1q\x0f&quot;\xb3&gt;\xe8w\x0c/\xd8G\xd8\x881axf&lt;\xe1%\xb2xt\xfa\xd7\xe2\t%b\xb5|e\x80\x05\xfb\xd9\xfe@W\xfayu\x14\x01\x84nz\x02\x17\xc8Fk\xd5\x85\x96\x18\xe6\xa9\x8cC]\xcf\xaeh\xb0@tN\x80\x12\xbeg\xce`\x87\xb1\x028\x99c`s-^\xe1\x8c\x80\x19\xe0*\xebH!p\xa9\xd5h\n\x13:Z\xd7P\t.\x81\x1b\xa2\xcf?T\xe9 \xb3_L\xbaC\xe7\x9dJ\xf1\xd6\xec\xbb\x00n\x97@F\xca\x0e\x17!?\xeec[\xce\x7f\xe3\xe4v\xdb\xa8\xb7W8\x9e\x1cf\xa7\xe0\xa8\xab\xbb&lt;\xaf.\xf1\xe30\\2\t\xd1U)A\&#39;\xde\xd68\x91\xc3t\xd1\x90q\x06r\xcb6\xba\xc4\x14d\xf1?&amp;\xfc\xaa==\xcb\x82#\xfc&#123;\xd5\x0e\xf2\x90\xb1\xa1nM\xe0\x83\xb2\xcf\xe6,\x81E\xba\xdd\x8c\x9e\xb9^\xbc\xf2^\xbf\xd9p\x0bo\x9fD`\x06\xcd\x0f\x08\xc5yi\xd6\xf4pIOK\xa5\xe2W\x95Y\x10\xbd\x83&gt;\xdc\xee\xa0&#123;Q\x1c\xed\x94H\xad\xdcHM\\\xeax\xf4\xd3K5\xa9\x03&amp;7p\xc0\x9cB\x98\xce\x98(\xe0dE\xcd\n\x1a\xaf\x08\x9bj\x87\xef\x8f\npM\x8f\xd5\x1e[\xdc:\xbc\xf5\x19\xb6~l\xbaD\&#39;\x18\x97\xf3\xb0]\xbd\xb3\xd4sn4\xc6;\x9d\x0f\x0e\xa1\xb7a\x17\x99(\xbf\xf6lg\xe9\x9b:\x0b\xe2K\x03\x01\x98\xadb\xd09\xb4O\xa6H\x96\x19H\xfa?_\xee1J\xd9\xb3\xae\xe3\x80\xcb\x07\x83\x92%\xcc\x1e\x16\xc7\x87*\x877s\xc4\xf3\xa8\x80]\x10\xdc\x91\x91i\x10l\x7f]\x03\xc4&lt;\xebM\xe3_H\xa45b\xfb\x1d49tR\xa0\x1c\x05\x8d\x8e\xfe\n\x06XM\xc9\xdf\x96\x1f\xae\xd8\xd5\xb4\x0e.\xbc\x07\xd9\xaf\xecn+\xf8\x87&lt;\xcf\x8e\x85B\xb2 &lt;\xee\xa5\xcb\xd7\x01\x8d\x9c\x80?mU\n\xb6!\xaf\xbf\xcb`Y\x18G\xa44\xb7\x17,\xa4\t\x00\xeb)\xbfJ\xee\x91&amp;\x02;\x99S\xb02\xdfux\x99\x1d\xe1\x04R\x9cQ\x14q\xe6_\x84\x8c\xdd\xfd=\xe6\x12\xae\xd6\x8a\xeb?\xccu\x01\xb9\x03=\xf9\t\xc3Iz\xbeK\xb0\x0c\x12\xb4I\x1e\x07\x1e\x04\xd2c2\xc1\xfc\x80\x05\x97\x86\xca\x82\x9e&amp;\x84\xd1\x13dhn]\x1fy/\x15\xe7\x10\x95MH|\n\x1d\xb0\xd80~u\xe5A\xaf\xf4\xe8\xe6T\xb6\xb1S\xef\xb3\x83\x8d4\xe4\nK\xb8\x0c\xfd\x89\x1cfK&gt;\x15\x7f\xa5=,\x06\xc6V\xc2\xef\x99\xc3O\x99\xcc\x91J\\\x9e\xc0.VD\xb1\xc1\x84\xb7/\xcb\x11S\xda\xaa\x92\xbc\x89\x82\xc9\xe8\x9bY\xf7\x0c\x1f\x1a\xfdxY\t\xef\xb0\x18\xe9\x80\xd8\xc5)+E\x1a\xa8~\xefJ\xbf\xcd\x82d\xe0&gt;\x1dx&#123;?\x8c\xc3\xe7a7\xc5\x16\xae\xd8\xf8+\x06\xfa\x92t|\xcf\x06-[\xd8\x9a.\x04\xe3\x99\x0fB\xaa\xdf8\xba?\xebUz\x02T\xaa\xe5\xd1C!\xb2\xcd\xc7\x1d\x97\x97\xa4\xf9&amp;8P?\xa7\x82\xef\xc8&quot;\x0f&amp;\x96\&#39;\xaf\xaeP\xed&#123;\xf4\xcd\xc5\x1e\xdbr\xa6\xadVgz\x8ah\xee\xcey\xcb\x85Mi&quot;\xe29\xf2\xd0I?\xb3%\x85\xa05\xdc\xadv&#123;\x1d\xc4:\x9d\xdc\xc47\&#39;t\xaf\x13\xc3\x12\xcc\x85Vzh\\&quot;\xcb\x0b\x96J\x02\x16\xb6&#123;\x1e\x84\xbfe\xc5\xa4\xed\xc8\x9c\x08\x0b\x1a\t\t\x02d\x04\x13\xc0\xbc\xa5~\x1b\xb7\x1a\x81\xff3\x0ek\xe2\x00\xd6:=&#123;=~\t\xe8U`\xcc\xac\xc7\xc0(-\xe1\r\x19o\xd4|K\x16Y$\x99\xf8\x00\x8dY\x8e\xf9j\xed\x15_\xaa\xf1\xaa\xaep\x8e\xe5\x90\x07\n0\x99d,\x8e;\xc3d\x0c1\xa0\xa7\xb3\xc5\xd8\xb9\x0bB\x96\x96(\xfd\xccz\xdfX\xae\x15\xa2\xaa3\x9fK\x84\x1c%\xc3\xb2\xa38L\xaf\x12\x896\x7f\xf8\xa2|V\xb5\xad\xd2_\xd1T\xb7\xeb\xad\xb0\x9a\x1a\xad\r\xd2\rM\x81\xcb\xc5w\x88\xba\xae\xc9E;\x92\xdc\xa5xq\x9a\xd8o\xb2\x14?\xdc\xb1\xdc\xe3\&#39;-\x05\xa9\rz\xed\x86\xed\x81\xb4\xba\x86\xac\x88&lt;5(#\x9a\xff\x01*\x9c\xdd\x16\xa0.7$\x1e\x00e\xcd\xd8\xfe7U\x0eL,\xe2f=\xccC\xca\xf6\x8d\x81\x18\x172\xb2\t\\v\x04\x8f\xfb\xe8\xdb\x0f\x99?\xf6j\x1b\x9e\xda)\x1d\xb6j\xf3\x12\xb7\xbe\x83P4\xcf\x0f2\xe7C#\xa3\x90\xd9\x7f*$\\\x8di\xa8\&#39;\xc2\x8a\x13\xda\xc8\n\x99x\x02^\xd7\xb4\xa6[\xe36\xcbk\xe9\xc5e\xf6\xdeZb\x04k\x9b\xbb\xc4gF\x8bRr\x96U5\x95\xecL\xca\xe7S\xf4 \xb6\xb3bD\x19\xd2f\x1b\x05P\x85\xddq\x90&lt;\xb0R\xa1$89\xdd\xafk\xf5Xdz\x19$\xf8\x01eu\xfeQ\x1d\xaeIm\xae6/AL\xf4\x1b[\xfd\xa7\x99g\x87\xf5I\x109\x83n\xde\x84\x19eS\xe1V\xed\xaal\xd9X\xfc\x8aa1aU\xe5[\xe3\x0f\xcd\xe9\x8f\xfd\x06\xad\x8c\x9f\x11\xeek\x1b\x0eP\x1eaW\xbbK\xeb\xa48\xc5r\x90\xf4nP\x92Q\xabN\xdb\xde\xb5V\x0e\xeai&lt;\xaen\xf6%K\n\xcd\x9eoXrZ\xd3\xdd\xb3&#125;\x07\x94\x07T\xc3\xfa\xc5\xd5\x98\&#39;/!\xd9G\x17\xb1\xe7I\x86\x8c\x1cyr;\xa4\r\x7f\x8c\xcc|*rn\xe8\xc0\xa6pt\x97h\xdf$\x1a:\x96\xdd1?\x8doRe\x15\xc3\x80\xc8\xdb\t2\xd4V:U&lt;\xe8\x91\x84\xa4Y\x90h\xc4\x9e1\xd6\x93\x9b\x93\xe6\xa7q@\xcc\t\x15\xf9\xa0i\xaa\x1b\xd1\xf6\x86\xfb\r\x1dD\xda\x8d\x984\xf2,\xe7\xac\xe7oo\xda\xc4,9\x7f\x0e&amp;M\x08\r\&#39;yF\xb7&#125;\xab\xaf\xac4\xe8\xb6\x7f\xb8\xf1C[!B\xa9\x94*\x91\x87\xad% \x99\xf9\x9f\x85\xe6#\x12j\x04\x0c\xd5z\x86\xe8@\x9c?\x0bdB?\xb3.V\xb3\xb6\xe0\xea\xb5\xb0^\xa70R\xd9(\xa4d.\xe36&quot;\xbd-\xc0\xce\x94\x05oFQ\x8e\x054\xe0\x90\t\xe2\xe2\xe7\xdam\x1f\xef\x038+\xcc&lt;\xfeg\x91\xa6I\xe5\x92\x18\x98\x19\xca`\xa1\xab\xd5#\xde\xce\x0e_$\x88\x18\xcb&amp;q\xfa)02\x178\xb0\x8f\x0e\xe4Hjl\xf1\xcdC\xee4\xd4:\x94\xac\x9bh\xe5B\x98\xa3\xc8\x1d\x9f\&#39;|\xa5\xa2\x10\xce#\x990\xa5\x96\x8a\xd3\xf7\xd3\xbb\x9c\x01A\xd3rjd7\x84H\xb3\xc7\xc0R\x8a\x1d\xdf\xd0$P4\xe4`\x8e:&amp;\x7f\x86\x9a\x12\xaa\xf4&gt;\xc9UM\xc2\xee\xf2I\x8d\x0e\xe2&amp;\xf7@&amp;\xa6\x83e\x81\x04FRK\xee\xdf&quot;\xfc\x19\xd5\xcf\x8b\xc0\x1d\x92\xc7\x9dw&lt;Z]\xa9\xbe&quot;\xd2W\xdb\x83$\xb0\xc7~2\xb9\xdb\xbe\xc2\x97qtKe\x8c\xb2gD|\xeb\xf3j:\xc0\x08\xa0\xa6f\xf8\xc12\xb5\xb6\x0c\xa5\xde\xbcz\x06\x02\xee\x08\x8ev\xf6\xa4\r\x9f!\x14\xf0\xb1\xf2\xde\xde~\xa1\xa0(O\xe9\xb2\xd4\x00\x96\xe35)+~\xff[\xe4\n^D\x05\xcd\xf8|\xfb\xe3\x03a4g&quot;\xf4\xc9\x02\xce\xb9/\xefw[\xa9\xa28WQ\x89\x83\x06\xb4\x1b\xd9\xa5\x8fX.&lt;\xa4\x18*\x92&amp;\x06\x83\xe8L\x90\r\xd3-m\xafu\xd3\xc2/&gt;\xec\xcaO\xeb\xd8\xe3E\xd5\x9e\xa5\t\xbc\x9f\xb7b\x98\xdcE\xb4eM\xd8\xea\x87\x13\xb7?\x15\x0f:x\x93\xb5~\x1a\xde\xe0\xae\x9c\xfe\xd6\xca\xda\xf1\xfe0\xe1s\xeb\xc4U\xe2+\xbcN&#123;\xed\xc9\xd3\xee\xfa\xb0\xaa\xcf&lt;\xd5\xdb\xdem\xc7\xd2\xaaN\x7f\xdd\x1b\x89\xf3N\xbe~YK\xa9\xa1\xdb\x1c[cwP\xfb\x81l\x8cx\xd3h\xca&amp;p\xf8\xf3qw\x97p&gt;\&#39;c\xfaH\x1b\x85\xb8\x84\x12\x1e\x85ud:#\xde\x04\xa7m\xcd@*\x88\xb56\xc7\x05\x83n_9\x94\xbdY\x85\x87&amp;&amp;\x898rU\x7f\xa1\x11\xa0&quot;\x03\x95\x98\xc2\x0c\xc5&amp;$\x12\xc1\xa1UZ\xef\xa0\xeez5\x1e\x84\xf7vKV\xfb\xa5y~\xac\&#39;\xab.\x01S\x18\xfb\xdb\xb6\xc6\xa7\xe4\xac5\x166FJN\xa8\xf7Lz\xca\x00\x9c\x1c\xe9:\x84\xd2\xe0X\x1b\x8f!\xbb\xcd\xe7\xff\x87\xc47\x1a;_z\n_\x16\x8b\x93\x14X\xa4,\xa8&quot;\xd0\xbb\xee/mTLq\xa9\x06\xe0F*Qz\x88\x92b\x8f\xbb&#125;\x13\xd1KN\x16.\xe6\xd1\x02\x0b_g\x92&amp;\xa2\xc6K\x08\x93ZP\xe0\xa6\xa7\xe9\xc8\xfd\xac\xa4\xd6\x83\xb55\xc1\x7f\xcb\xad\x98\xafiR\xa9\xcbme\xbd3\xd9\rW\xda\xe9Zx\xdb\xa51V\xb7#;\xcb?[tT\xc4\xdeX\x95\x1c\x06U\xdc\xcbQ\xa4\x98R\xa0\xdb\xad)\xf4Q\xc7\x16k\xe5a\x05p4ko&#123;\xa5\xc6\xeb\x86\x1dI\x11\x98\xde\xfe\x9az\x0c\x04\x00\x86\xf8$\x14_\xe7\x9c \x8fh$\xc4\xe9e\x9b\x96\xb7\&#39;\xfb\xfc\xae&#123;\x8bQDr\x9a\x0c\x8b]\x86\x08\xccy@\x11\xb5\xfe\xd1&#125;q\xb0\xc2\xa9\xcf \x0b\xd8bq\xc9&#123;@n\xcb\xb2\xe2v\xdb9\xaev\x83E\xdd\xbc\xd9K\x0c\xde\xaf&amp;b1D&#125;\x89\\\xa1\xdex\xe2L\xb9\x8b\xf9W\x1c\x90\x97\x00\xd4\x08\x87\xc5/\xf0\x8c\xa8\x17\xe9&gt;[a6\xb2v\x9d\xd4\x87[e\x91D\xae\\\xd8\x1f\x19q&amp;\xdd\xe5\xd8R\x85\x03Q\&#39;\x88F)\xceMk\xe7\xa4n:\x9b\xec&gt;Q\ne\n\xda\xf1y\x87\xa5\x15y\xce\x05l\x06\xa9Hkj]&quot;\x84\&#39;\xfag\x12\xe8\xd7(\x03\xd1\xdb\x19\x99\x01\xf4\xee\x19\x19#F\xc5\xdf/Z\xce\x84\x08\xd0M\xb6\xf34&#125;\rN\xf2K\xee\x86\x1b\xb3E\xc7u\xac\xc5\xab\x98\x16%\xc5\xb7j\x80\xa6|#\xfa\xb3T\xb0\x87\xe0-a\xde=~\xe8V9\xbb\x91\xa1\x1a\xd2\xe7h\xb8\x08\xf4&lt;l\xbf0\x0c[\xf2\x8d\t\x95~\xc0\xe8J\x9e\x95Q\xafK\xf9\x8b\xa5\xdcyZ\xc3\xd5\xb8#Uw\x96\xcc(\xfa1\xc0C\x1f\xd0?\x11\xf3\x1e\x8dW\xfc\x8bz&#125;\x9b\x04\xca9i\xde\xb0GX\x9e\&#39;\xc7\x1f\xeb\xa6\xc2\&#39;\xd3u\xcb&quot;l\xebE\xb5\xd8;S\x81\xcaz*\x07\xeb\x9c\x0b\xd4pb\xaf\r\xa1-6m=nB+0\x9b\x97\xe3p\xc20d\xfc\x8d\xb8nB\xd5\xcd\xefx\xf1mga\x132_o\x1d)\x87\xd3L\xac\xd8\x1f=b\xc0\t\xf0;W\x1c\xbaf\xb1\xcd\x1e\xe8%&gt;\x85\x9f|mp4@\xdaY\xa3z\x82\xe3\xba\xb4\x05\xa2\x08\xa3\n)\xd2D\xfd\x97\x10\xba\x00vSl\x16\r\x7f\xfe\x97jE\x9f\xd7\nZ@~\xbd1\xf2\x04\xf4\xff)x&quot;\x08\x80\xacq\x01\x88\x97\xb3\x1f\x8e\xc5\x00\xd3k\x8cWp\x8fm\xa8\xd8\x86\x9a?\xc2\x03\x99h\xb6\x9d\xfc\x91\x00\x14\xe2\x8b&#123;\xca0\xd8&#123;M\x0fB\xafG\xa9\xbe\x1e\x13z\x1b\xa4\xaa\xd7\xbf\xbf\xear\x9f\xe2\x95\xe7\xb1\xee4\xd2To\x1f\r\xf2\xc6\x0b\x0cZF\x13\n\xd3\x81\x84\x88;\xe5\xb1\x19\x83\xbe\xc2*\x8a\xedNg\x01x\x14Yb\xf3\x98\xcb\x0e\xc7d(\xa9\xa9wU\&#39;R\xd8\xda&#123;\xd0\x8ci\xec\xabGI\xfa\xe2\xfc:^b\xc6\x86oi|\x86\xc4\xd8\xe8\xe9\xea\xc7Q\xd1q\xa2\xb3+\xe1\xef\t\x0c\xeb\xb3\xa4g\x90\x17U\xf9\x1fA\x91\x80\xa2p\x1c\xa1\xb4\x97\xab.\xf5\x91H\x8fB\xbd\xcf\xc1\x9ahus\xad\xa81X2[f\x01\xa9i\x1d\xa0\x1e\x14\x0fw\x8b\xb6\x8cl\xe7\xc2\xe98w\xfc\xb8\xf8\x95\x08d\x80\r\x1a\xd8\x9e _\x99\xb9\x86\x88\x90\x99;\xc5\x0e&#125;\xcd\x8a\x9a$\x8cY\xc5\xb0P\x9a\xb5z\x88\x04\x17\x02T\x93\xef\x88\x13\xad\x96\\\x1c\xed\xae\xdf\xf2Z\x10r\xdb\xcfqa\xdf\x81\x85\x844\xbb\xed\xae\xc0J\xe2\x99(\xab:0\xe2@\xd5\xa3H\\\x16\xe2\x0e\xc0-\x1a5H\xd4^\xa6\xff\x11\xa3\xd7\xd2\x05\x86~D\x1a\xe3\x7fL\xc5R\x87\xef\xbeG&lt;\x1b\x86\xb6\xc5\xf2\xff\xa7CH\xd4\x8c\xe3\x1a9\xd3\x16`)\xbb\x1d\xf9\x8e\x7f\xe1W\xd0\xd7i2\x1f~\x90/=\x18\xa6\x1c\xc4\x88\xd5\x9f?D\nV:\xb1\x0e\x82\xa4\xfb\xf2\xe3S)\xdb8N\x15\x81\x8c&#125;\r\xbb:\xf4\xda\xe1lm.\x02t\xb0\xb3\x89\x96\xb8 \xcd\xf3\xd9\x87\x06\xe3\xee\xbe\xe5\x8c\xcb\x83AJ.P\xa2E(r\xdd\xbf\x88%A\xc8\xc7!\xfa\xbeN\xdc\x14+\x18\xe3\x84\xeb\xc3\xb7a\xf2^\xcb\x94\x99\x14\x9daIl&quot;\xcbR\xe8\x8an\xb4\xac\xad\xa9\xfdv\xc3\xebS\xceF\xa0\xb4\x0eN\xeboW\x85\xac\\nrx\xc0*@f=\xbdR\xd7\xf5\x1b\xb6\xaf\xfa\x7f\x00*V\x9fC\xb9\x94\xc8A*$g3\x81u\x969U\xc9\xa5\xda\xec\x8c\x83FYS\xf7\xacE\xda4\xde\x03\x04\x19\xd9].\xd7\x03g\x1dj\x0ex\x98A\&#39;\x81\xfd\xd8\x9bl\xf0\xa6\xf0\x87d\x85\xcc\xf7\xdf\x04\xb4\x14F\x8f\x02\xa6\xfce\x7f\xe0\x1b\xba\xbe\x85\x06\xc6\xc7\xec/IP\x1b\x14\xd0\xc3^\xf4z\xbe\x0fs\x817\xe2\x16$&gt;\x8e\xdf\x9b\x06] \x18\xf0|\xe8\xb8\xfb\xa3\xbe\x86\xafB\x8a\xeeP\x91^\x01J\x04\xdc\xfc%\x87\x1ff\x11\x1e\xd5b^\x8d\x04SGV\xc3\xbf_o4\x85e\xa7;\x0cFQ\xb39\xa6tL\xc8\xed\x8f\x83\xd4Hu\xfc_\xf8f\xba\x84UBo\xd0\xed`\xe6\x0f\x8dt\xff&#125;\xc355\x0b&#125;\xa8&quot;\xf6X\xbaT=\x8e4\x08\xff\x7f\x80Y\x9bm\xc2iE\xcd\xdbC\x89S&lt;\x8c\x0e\xbbD\x03\xbdS\xf0Dx\x0e8\xba\xa4N\x0f\xce\x12\x1a)\x17n@\x01\xba\x14\xd5\xcf\xfa\x04\x992\xa2\xc0\xed7\rg)\xc7\xa3\x87\xf2ITP\xc6\xcd]J0\x94\xc6?\x1eb7\xfd\xe4\xf2\xb1b_K&#123;\xb0\x93\xf3\xfbD\x05\xfc\x92\x00DG]TSu\x1808\x99l|\x82\xc0M\xc2N\xfeIU\xda@d\xe2\x1e\x15\xf8\xd5\xbf/-f\x91G\x0e\xc9\x1a\xcb\xbf\xfdH\xffT\x80\x91(4\xd0c\xf2L\xb0\xb7d\x8b\x97\xe3\xe1q\xa9\xdd8\xbf\xce\x9bWw\xa3]n\x0b\xe8\xb9\xc5uF\xf7\xdc\xf5\xecH\x07\xe6\xc8H\xba\x05\x833Q\x97z\xeci\x07H\&#39;\x8e\x15\x10\x84\x91\xbfJeLQz\xc5\x8fG\xdd\xbf\xae\xbe\xad\x85\xbfj\x0c\xba\x91\x0c\x84agJ7\x1e\xd7.\xd42h\x92\xb3\x7f\x939B\xc2\xb3\x9a\xe2\xec\xd1\x03\x94&quot;\xf2\x8c\xce\x95\xa9c\x8a\x82\x11B\xbe\xb3\xdf=2,&quot;\xdc\xad\x97M\xbe\xb2\xe2@\x1fX\xd6\xcar-\xad&lt;\xab\xb6\x9d\xd6\xafd\x9c\t\xfb\xb5\xfbi\xe8\xa2\xe1\xc6\xa0\xdb\xb0\x94L\xb4\x8bh*yL\xe5\xc1\xc7\xc4&#125;\xe0P\x96/oi\xc2\x18\xcc\x8e\x98yc\x87~wbc\x1b93\xf4\xff\x8bc[KQ\xdbTqk\x81\xfc\x88\x9c\xa3\xb4\x04\xe3\x88\x83jG\xba\xbd\xa2\xeb\xd9\x8d\x9f\x8co\x99\x13\xb7\x1e\x9d\x13+\xba\&#39;\xb8\x1e\x96\xcdTl\x966\xa0\xb6\xed\x80\x86\x13\xcbq\xbd?\xaft\x913\xe3\xb5\xac\xd3\xb8=\xc0\x14\xecY\xe3$~\xf7@\x82]\xd3\xaeK\xfe\x0c\xbau\xda\x9c\xa9\xbd\xae\xd8\xb5\x8b\&#39;\x1c\xa9\xde\xe8\x0c\x80\xd3x\xf4\xa0\xa0\xbd\xf7\xc8\xc3\x84\x99\xecqv\xa7\x86\x1e\x07\xdb_O\x01\xdf\xd5\xd8~\x7f\x1b\xebX\x82\xfc\x8d\xe2\xdc\xd3p\x95\x12\xc0o\xc4\xdb\xdd*&quot;\xa1\x95\xe1D\x83\xa0\xa9\x81\xe8&amp;\x16\xfaq&#123;A\xbf`\xa0-&#125;K@\x94Lh~\x19\x8f\xab\xa8\xf6\xfbL\xd0s\xa5&gt;\x8b\xf1\x8d\xe1\x8cp\xc1Vs\xc9\xd7\xc0D-\xe5\xb3&lt;\xb2\x85\xe2\x02)]\xa9?\xaa#\xd9\x07\xa1\x0f\xa8K|\x9f\n\x12$0&lt;\xdb\xaeF\xd51\xb88\xa49?\\&gt;\x94\x14\&#39;\xbe\x0f\x90\x12\x19\xb6\xbf\xea\xce;B.\xe1\x12\xff\xc6\x0f\xff\xff\xb2J\xfb(I\x00e\xdc\xaf7\xd3SUC\xe6sy\x86&amp;\xf8\x7f\xfd\xf3J\xcb\xb5,\xd6\x8ey\x91\xed\xc4\x81\xba\x08\xd8xe\x921\xa8\x00W\xde]\x8a\xd4\xb41i\xb24\x04\xd09\x8a5 \xaf\xc9\x19\xa4\x88\xacn\xd0\x15\xea8\x1d$l\x8e\xf1:\xea\x80:\xf5\x15\x0c\x97\xd9e\x97\xfcx_ :\xf3]\xa7\xb8\xff\xf4@\x19\x15(t\x04\x19\xdf\xc8\x06\xfdw\xc7R\xe1\xd4\xfb\x84R\xff\xa6:\x87\\\xd8E\xa8\xaf\xb8 \xd4\x87=\x809~\xc3\&#39;\x95\xeaS\xb3]\x12\xdc\xcc\x9d.Z\x0f\x00\xd6\xd5\xf8\xdf\xf75\xb9\x03\xfb\x0bwM\t\xa5|\xe7\x91\xc9\xa1\x1fg\xf9s5\x85o$\xe0F\x18\xa4\xb3\x14\x80\xc8\xaf\x07`YPiL1\x01\xde\x8c)\x8d\xb7\xda\xb4\xcd\xb4\xd0\xd3\x9f\x9c\x8eg\x85\x85.!\xd2\x82\xaf\x86q\xb6\xa0Yl1[\xd4%\x13\xc0\xb9fE\x15M\x16:5V;\x19\xbd5k\x94H7o\x0c\xe2\xf7\x0fs\x9f\xd3\xf7\x9f\xeb\xe91X]\xe0\x10\t\xd5\xfc\xf3g\xac\x9e/\xd2\x17\xa4@\x12\xa6\xca\xd1F\x08r\x05\x14\x11\xfa\x98\xf2\xef\x05\xa9\x8dr\xdc\x97\xfa\xbaQp\x1e\xbb\xef\xb0\xcd\x07\x80\x99\x03\xba\xb62W\xf9\xd0?\xeb\xac\xb1 7CqU\xf0\xf03k\xc505\xe2\x03*]\xfc\x13\x11\x89\x041\xb9\x95\xe5\x11U&#123;\x14\x1e\xac\xa9\xf9%~\x03c\xe6\t\xc8\x86\t\x8a\x1f:\x97H!7\x11B\xa9`Q\xc3(md,\xf1\x82\xf5\xdb\xaa[/\xcc\xbfe\x08[P\x8d\x1f\xab\xe0\x97\xdcbe\x03\x9en?3\xce\xf3\x1eaD:\xac\xb2\x9e7\x93+\xe0\x12\x0c\xb9\x1c~4&#123;d\xd06\xc7\x02\x15\t\x18:eDf8\xd5Fe\xa3xV\xa0\xf9\xa4\x05\x80&#123;B\xc4\xdd)\xb3\xec&amp;f\xa1\xf6\xad\xfb\x1f-\xf9\xe9\x11\xafR7\xfd\xc2\x9a\xde\xec\x1b\x15&amp;4?H\xcf\x16&#123;\xc9\x15M=\x1d(\x91.m\xebL;h0k\xf5\x0ce_i\x18\x06\xd4\x83\xb4\x82\xd2u\xf5i\xad:\xf9\xa6\x08\xb2\xddSun&#123;\x1f\xc6\x1f\rD\xb4\xec\xed\xae\x84\xfa\x85\xd6\x18\x03pF\x89Rz*3\xa0\xcf\xc0\xf2h\xda\x14\xca\xe6\xec/r\xeaZ\xec\xdd\x03\xd3e\x85\xaa#\xc0\x8c\x98\xcf\xf9\xd4\xc5\xe4\xfb\xc7\xa3\xb4\x17\x9f\xb8&#123;\xf1\xca&lt;\xbe\xc5&quot;\xb4%\x9d\x81\xa0\x9f+\xdbMi\xdf\xfc\xf7\xa8\x93\x06\xd7\x0e\x14\xeaj\xb6\xa4\xa1\xe2r\x04K+\xb3\xec\x02\xfa\xcf\xf1?\x97I\r=\xff\xado\xf0[\xed\x07.E*\xac\x9b\xb5\xda\x06L\x08:\xd6\xb5\xb5\xd9vs\x91\\\xd9\xe6\x92j-\xda\x7f\x99\xf7(\xe1\x1f\xbd\xf1\xaaE52\x85o\x0c\xe89l \x9b\xabh\x11\x03&quot;3\x1c\xcd\xffQ\xda\x10.\x11\xec\xafwQ96\xc5\x93S\x834\x8d\xb3\x1fm\xfb\xcb)\xeb\x87g\t\x12\xad85guB\x00\x0c*\x0byL\xfdX\x96&quot;\xfc\x83&lt;)\xdd[9\xf0\xf1U\xabk9\xab\x90,\xff\xe9g\x16\xd1\xda\x84Q0\x08]\x1a\xd59\xc5\xa0\xb1.G\xd5\x07\x06\xa1F\xfc\xcf\x16@\xbeE2t\x16\x88\xda~\x95$\x97L \xd4\xae\xa2\xceh\xd2~4\xa4\x861\xa9\xaeQ&gt;%V.Xf\xe0\xbf^\x97]\xb1+D\x192\xc7\xacq\x11g\xf1\x16\xc8\x1f1J\x85F\x9a\x81\x97\xcb\x18\xd9\xddX\xa3\xad\x95g\x99\x07&#123;h\x1fdA\xc8\xbc\xe8\xf7\x92\xfb\x0c\x1a\xd2&#125;\xd1\x97W\x93vz\x11\xc9\xb0\xf0\xff\xd5\xee\x96\xac&#125;9p\xe6\x15O\x84\xba\xdaP\xfe%1Z\xabKR\xf2b\&#39;_\x8a\xa4C eV&#123;\xd6\xf2\x01\xa1\xc3\xff\x99\xb5\xf13\xe8\x08n9\x0f\xc0W\xfcZ\xb3\xcd0K\xe4\xf1\xc8#\x8a\t\xfd\xf1\xd5\xb5T=\xf0\x08\xc0\x89\xe3\x1a\&#39;|\x96\x1d\x96\x85\x86\xd5\xb2\x17\xc9\x1a\xc1\x1d\xbd/\x11\x0f\x7f&#123;\x8d~Q\xc0W\xb3\x8d=\r\xc7\xd0\xbd\xa8U`\xbb\x84\xe8lS\xa0-Y\xaa\xfc\x00\x8e\x13\xfen\xb4\xa1\x17\xea\x86\x80\x0b\xe9y\xcc\xa4/\t\n\xd88u\xc0\x06n\xf5\x87C\xf4?:\x10\x1d\x06LS\xa3\x05\x00\xa0\xc5y(\x83\x1bc;/\xab\x0bM\x97P\xf9\x1c\x8f\xb4\x99\x118&gt;&amp;P\x96\xdf\xc8\xae\x97E\x13\xf8\xd6\xa2u\xf4\xf3|M\xdb\xb1\x13n\xa7\xc3\x15:\x0e\x07\xe9\x99\x0b5f\xbc\xad\\/o\xb6\xb1k\x9e\&#39;I\xc1\x94H\x19\xbf%UZ\xd3^I6\xaa\xac\xa9\x84\x83%B\x0f\xf0o\xf3|P\xcey\xa8&gt;7^l6?\xd9\x08A\x1f\x17\x08to\x02\xe2i\xd2\x91\xd1\xe4\xd1g\xfe\x80\xf7\x88\xff\xe4r\xd02\xb0!\xb8\xc4\x92\x86\xeb\xbf\xe6\x81p\x13\x11\x11\x95\xc0\n\x01\xbd\xcdB\x98rN\x1e\xa4|\x0e&lt;\xaboh\xce\x91 \x8b\nu\x02\x84\xa0\xb7b\xeb\x17\xac\x0e\xa0\x8b&quot;\xfb\x91!\x1e\x17L\xa7\xa2\xa02?M&quot;c\xa8\x9dwG~\x08.\xcd\xf0\x04pE8\xee\xbd\x0cP:\xf4\x0c\xa2\xcd\xe9_\x00&lt;\xe7\x08\x90\x01\xd5\xda\xe0h\x02\x95&quot;\t\x82\x16Y\xd3q\x90&#123;\xb1\xcd\xdd\x15G\xae\xd1\xa9\xec\xeb\xf2\x0c\xdb\x80\x12\xc1\xff\xe5\xe0\xd8\x04\x13\xa8\xd7\t\x06fcS8@4\x14\x00NE\xdd\xdeA\x1b\xa8\x12\x1a\xc1K@\xc4\x9c*_\x18\xb7a-\xc5\xe5\xd2Y\&#39;\x16\xa2l\x9ep\xec\xcd\xdc\xeb\xfb\xf82\xf7b\xfe\xab\xb9&#125;\xdas\xffh\xb1\xf7\\\xec?\xff\x80\nd,\xca\xa0\x92n\xb4\xd0\x8b\xb1\x93\xf3\xe0S\x91\x89\x17&quot;\x03O(F\xba=\x0ct\x8a\xd9\xb4\xac\xe4\xfa$\xd9\xfb\xa2\xf4%w\xbcM\xdd*\xc6\xd9\xc5\x08ue\x90$y\xa5\xf3\x9dk\xa0\xaf\xb9\x9d\xc5\xf4\xf8\x06\xe8\x81\x10\x0c\x7f\xd2\x95\x1d\xa0`\xc4\xb0\x81\xf8TFj|\x9a+\xd0\xeb,\x0bG\xf5\x89\xbe\x1cm?\x83j8GH\x8e\x8f\xf6D\xf6&lt;\x91\x80\x85\x95$M\x8c\x8cn\x16$EJ\xa1=-\xb0t2S\x1f\nO&quot;\xc6t&gt;8\x00*S\xddB\xd628\xa5#\xf1/\xf8\xd5e\xb64\xa0B;\x02\xc7\r\x11\xaa\x07\x0c\xb0-J&quot;\x14n_\xae\xc5\x95\xadO\xbfA\xbd\x13\xc7\x9f\x8d&#125;\x106\x87\x0c\x7f\x9bb\xe2_\x1d\xb9\x87\x07\xe0\x95p\x9c\x0b\xd0\x853\xfa\xcd\xd8\x96]d\xbb) 2\xe0\rL(\x0f&#123;\xa6I09\x9e(4\xe1\xe5\x8ba\xa9\xfc\x87x\xbf\x14\xa87\x03\x82\xde\xd5\x8f\r\xe2\x81a\xd6\xbc%\xb4\x13Si\x13s\x12\xaa\xe6%\x00k74\xdd\x18\x91\xed\x1c/\xd2\xba\xf4X\x07&amp;-%\x01fML\xda\x80\xc9\xb7/\x80\xe0\x96\x98\xc2\xe9\x1d\x8a\x9a\x14\xc2&#123;e\x00&#123;|\xf2*\xc0\xaa.-\xfaP\x1cA\x873\xf1\xe0\x9b\x08fb\xd2U\xc6\n]\x12O1q%\xd2\x97\xa2F+m\x82|gy\x93\x91\xf5F\x94ik\xc3\xd6#l7\x1e?_\xee46\xd3\xd43\xf06\x86\x0c+q\xecO\xda\xfd\xc8\x93&#125;P&lt;|j\xb6\xb1\xc21\xd0\x99\xac5\xe7\xa3\xe3\xa1i\xd9\xbbPw\xfb\xe7\xb1\xd8\xf1\xb0\xc9\x9b\xd9#\xd4?\xbb\x94\xd5\xbfi0\xa1\xd2DA\xbd\xd9y\xb6\xcc\xb1p[\xc8\x06\x84\xfd\x1d\x00\x16\xc6\x8c\xa7\x01s\x11&gt;\x91.-\x9e\x0f&gt;V\xcbUgEiUv:\xd9\xe7\xd7O\xa1\xac\x06&#125;\x02\xcb\x816\xce\xaa\x81\xe1\x03x\x03U\x15f1\t\xcc[\xa3\xa9\x1e\x98~c\xe3:\xea\xc9\x97\xa2\x9e\xd2(\xe4\\&lt;\xcc[F?j\xf7\xa4\xe3D\x87&#125;\xe5x\xc71\x0cw\xdcpo\xd6\x14B6\x84\xf6\xebJ\xdf6\x9e&gt;\x17\xb4\xe3\xbd\x12\x86\xf6`\x05\xa6f\x1d\x84z\x8b\xfd\xb4\x1b\t\xc1f\x13\xceU)\xfa\x81eN\xff\xaeW_\x05\x8b\xe8\x85\xec\x1b\xbb\x05\xc6\x8f)\xb4\x1f\xbdl\xb1\xb1\x08\xea\xce\xd72\xa42\xbblR\xa7A2\x04&amp;g\xd5\x9fC\x7f\xb82u\xee\xd36;$^m\xc3\xd3\xbe\x95\x87\xb6\xc0\x80qo\n#\xc6\x0c\x17\x085r\xa2\x1c!\xfa\xe5\xd4z1ZP\xe9NAYv\x14\x00\xf3\xc4\xea\x7f\xb8\xeb\xeb\xc4SkZ\x1f\x1a\xc6$\xc8\xe1\x1f\xd7\xb6l\x1b\x90\x17\xe66\x93v\x1b1\x86\x936\xee\x92\xe2\xb1\xa6\xb0\xdd\x82\xc4\x96f\xce\xce\xdep=\x1fA\x10\xd7\xbe?K\xb8\xa7\xc1\xc2\xff\&#39;N\xc4\x9c\x7f6\r\xba)\xfd\xac\x0cl\x02\x0cuJ\xf5\xf3B\xeb\x94x^V\xe2\xbc\xd9\xc3\xb5\x9b\xe2\xb6\x8b\xaa\xee\xf2|x\x85\x0b\xa3\xb7_2\xd689\xfa\x91\xec\r\xf5\x0c\xb0\x86\x99\xafz\x94N#Fc\x8d|u.\xeb)p\x8a\x11m\xeeOzx\x93&#123;F\xd3y\xe7`\xe7\xe3\xea\xd5\x18gd\xe1\x08\xb2+\x82\xa4)\x82\xe25[G\xef|Q\x04\x8dc\xb9\xcb\x1b\x97\xa6\xcb\xea\xcfKm\x8a=\\\x13\xe6\xc4=*L)fU\x02\xd9\xdb\xfdEz\xd7\xdd\xfeA\xf7\xe1S\x13\x0fDB8\x17q\x1b\xd5\xfc9\x97+$\x02\x89\x9b&#125;O&quot;V\xb8\xe5\xfc\xa8pj3Da\x95\xbe\xf7\xf4\xc2#\xd6\x9f&quot;\x11hu\xd5\xadqZJ\xcd*\xc4\xc8\xc5t\r\xcb )\xc6\x19\xcc\xcb\xb5\xabw\xb8\xcc\xa0i\x03QS\xa8\x1f\xde\x8dx\xa13l\xd6\xa2\x0f\xc7\xb4$H+X&quot;\xaa\xe0\x83\xe8\x94D\xc1W\x9f\xd2\x1f!\xa5k\xf9\x8c\x80\xf4\xff\xea\xd1Ue\xde\xb1\x1c\xc94M&gt;\x97R\x1e\x83U\xb9bF\xd4\xec\xfd\r\xe0\xb6\xc5\xb6Rwi\x9c&quot;\xc8,\x07\xcc\xbc\xf9x\x95\x9d\xacy\x9b&#125;:\x03\xcd\x17_-\xad\x99\x80\xe8~\xf1r\xf4\x81\x92P%2`\x90\x158riHk&quot;Z\x92\&#39;\x1d\xa2\x17l\xb2\x93\x9b\t\x18\xc21\xe2t\x96\xf44\xd9\xc4-\x0b\xb4\x99\xca\xdf\xa4\xa0ee\x08\x9c^7\xe9+\xb5\xdb\x1a\xeb\xe28Z\x03\x15o\xf7\xff&lt;\xc9\x02wZ\xe2M\xbf\x82:\xa3\xd9\xef\x0c\xb4]Fo\xefy\x90e\xc5N\xb8\xe5\x92CH\xef\x14\x82\xc03\xf3@\xff\x81\xd9\xf9\xd51O\xbf\r\xe1ex\ri:\xddN\x06)\x9c\x86\x92\xe8\x19\xa9\xbbB\x88\x84\x0f\xd5\x1dpn*@\xade-\x88a]\xe4\x87\xbb\xbf\x8f+\x85\x1etg)\\\x11\x03\x03e\x1c\xea\xe1\x9d\xf6\x08@\x18Y\xb7\xa2B\xb1\xa0Y&lt;\xbf\x9b\x07\n\x8dH\x9a8\x08\x04\x97:\xb8\xad\xb0s.\xfe3\xe31o\x97\x0c\xcb\xdf\x8a\x05P\x17\x01D\xd0\x1b@\x88\x92\n\xb8i?\xb6\x8f\xa6\xca\xb9%\x01G\x15\xd2\xc7\xe9&lt;98\x86\xaa\x9c\xe7\x80\x803\x8b\x81U\x10c\xd8I\xc4\x87\xe4))!\xd7\xc9\t\x88&#123;:\xe2\xbco\x1eZ\xab\xd1\xa4CO\x9bDt#\xc3\x1f\xa5e\xb9\x8a\x1cFs\x14\x11\xc7\x95\x86\xc9P\x07\xa3\x94LJE\x1aff\x9e)c\xe9TTB\xaf\x07\xf0+\xc8l\x1b\xc7\x07Y\xf8\x85H;\tP\xee\x15\xe0\xb9H\xc1\xc7K%\xb0&#125;\x82\xb6\\\x88\x9e\xf8\x15\xc6O\xf5\t\x99\x0b\xf4e\x8a\xb3 \xfc\x12~\x15M\xd9\xc3\xabL\xf7\x84Z\xbe\xd4\xf8\x12c\x8b\xf8\x01&lt;\xf0T\xbe2,\xab\x0c\xc2\x85\xa6Xn\xe0\x0eJ\xef\xb4\xf1\xaa\xf3\x83\xec\xbe\xb7\x8bo=2\x90\x11\&#39;\xe4\x10UE\x04\x8d\x01\xa4B\x1b\x1b\x88T \xc232\xa9\xb9\x81v\x10$h\x8e\x7f\xc3g\xd6\xb5+fs\xd7\x02\xf0\x17Pom\t\x97\x95\x9bM\xf7g\xf2:;?\xc5\x87\xb2\xf4\x9c\xe4@`L-\xad\x9eT\xbc\xbb\xa3_(\xa6\xb3Z\x8feF$\xa7\xb9\xde1\xeb\xe2\x0c\xb8_\xc8\x83\xb9\xd8\xe2\x112\xe5\xaf\xaa_@U\xf5&lt;\xab$k\x04\xc8!:\xdc\x1aG\t\xcdl\x1d2\xe2\xe7NI\x10\xe6\xac\xf9\xf7m\xc9`8\xb1&#123;\xaa\r\xa6\xff\xe7\xaf\xdd\xf8\xd29\x01\xdb\xf0\xd2CL\x8b\xb1\x82\xb2|\x04\xd9\xab\xdb\x1er4EDS\xc5\x92\x1eh\x8d%6\x00\xba\xac\xcc\x7f\x94\xe68\x02\xb8]\xc1 ,\xc8\xd0I#\xa3\xbc\xc1\x87\xad\x1d\x1df\x9d\x05\xf0\x06\\p~\xa1\x82)\xcc&#123;\x01\x1d\nB|\xb6\x82A\x8c\x8e\xf61\xb5\x14H\x9d\xeb\xbf\xb8\x05\xcb\xc3\xd9\xbd\x9e\xf3\x11\x9a0\xed\xbe@&lt;\x0f v\xde\x91\x1e\xba\xce7_\x1dO\xf20\x98de\x05\&#39;2\x96\xb6\xf7\x13\xc8\x11\x07\xc9\xae\x8c\x86\x9a.\xf5u]&#125;\x83G\xc5.m,\xfcH\xfc\xf0\xbd\x8d\x00\x1eC\xa5\xe3A|\xf4&quot;\x83\xe8\x12i\xab\xe8|\x82J+,\xb3\xee&amp;\x84\x88F\x19B\xe6\xde\x03\xa9\xb2\xeeg\xc7g2\x8a==b\x86\xc3\xdcuh\xb8wE\x89\x88#\xde\xcc D:.\x8f\xa0#@\xde\x8b\xf8\x189\xed\x1f7@\xccU\x1d\x02z\xd9W\x16\xd5\x81\rc4\xa2\xc4j\xe6\xd4?l\xfd\xb62Wv\xc0X\x8d\n\x9a\x003\x9f!#\xd0\xba\x0b(v\t\xb7~\x05j\x00\tM*s-\xce\xa7\xdb\x82\xe8\xccS\xd9\xdaj\x92$\x08\x14\x85\xd1\xceh\xfaj\x10\xc2\xa0\&#39;\x89\xb6k\xd6f\xb6\xee\x9daj\xe5k\x97\xd4\xd6\xe4\xe3vk\xadC]\x1e\xbc\x8fo\x96ok\xd5\xe4\x02~-\x1e\xd4-8\x83\xfd\x12\xcc\xde\xb0\xb6&amp;+B\xe1m&amp;[T\xdfrll\xe8|\xe9\xbdk\x82\x94s5p\xf8\xf8\xd3\xd46\xcez\x85/]\x90\x9f\xc3q.\xac&amp;\xadjQ!\x10\xcd\xeb\x10\xa4&amp;\xe0\&#39;\xc6\x05$\xb4 \xf4Zr\xd5vz\xa1P\xc6\xfb(\x0ct\x14\xb9\xef\x11\x9bN\x16T\xef\x19f\x16\x1b\xc3i\xa3x\xc01\x01\xb2J?\x1c\x1e-\x9aN\xa9]\xd0\x87\x94\xaf\xb8_i\xad\x11\xf4\xf5\x08%\xd1\x1e\x9dr\xd7\x0c\xa4\\\xba@\x90\x01\xf95\xfe\x0b\xf2 \xdfD\x03\xc5%kst\x0co\x8e\xd2\xe0\xe1M\xe7%\xe1\x0b\x15\xfeMS\xe3&#125;\xf9\xeb\x97\xe8\x94\xbea|\x00\xc8\x00\xd2:\x12\xc8\x00\xad\xd0_Sj\xbf8\x98\x80\xedy\x8f\x9a\xc9\x90\xa0\x12\xfe\x94D_l\xdaC\x07NO\xb5M\xcd\xb3\xb4\x0f\x0c\x19\x02\xf4k\x8eL\x89\xb9\xc0[\x0c#\xf7\x07\xfa\xff\xe56\x80\xf1\xd3\x01\x998\xf9\xa0\xfa(\x11q\&#39;_q\xe0\x9a7\x92\xe3\xdc\xeb\xcd\x14hs%&#123;\r\xef\x1aO\x9aRU\x17\xc8\x8f\xdf\xd3\xc9\x01[\xf32\x81MY_@eO9\x06#\xed\x17\xeaV\x14;\xd7\xeayr\xbc\xe1\xd7\xbc\xa9\xed*\xfdV\x8e]\xb1UI\x85\xb5\xeal\xad\x0ei\x0c\xbe\x83\x87\x0f\xfa\x1d\xe4bo\xfdO&amp;\xe7O\x92\xe7\x93\xb8\x1e1\xe4\xc7\x19\xa0\xf9\xddsm\xe3+\x06\x88\xe1N\xb9\xbbZ\xf1x\xac\x02\xc8&lt;\x0b\x8f\nW\x83:\xc5T\xc5*\x1cO~\x15M\xf3&#123;\xe7\xc2\xe6[\xc1\x8b\xbb)\x1a\x84\xe1\x03b\x97\xae\xf5S\xbd\xb3\xdc\x15s\x0b\xec\xb5u0\x10\x91\x82\x83\x014\x93\xa4\xb1i\xe3\xfd\xf9\xf4]Be)\x8b~\xd5\x1d\xb6\xdd\x81\x0c\xb3\x93U\xd6\x9a&#125;\xc0\xf8.5\xb1Y|\x02\xdd\x8c\x88&quot;\xadJ\xaaYq\xb4&#125;\xac4\xb4\x941\xa4\xa2!\x1d\xe8\xe1_HAO\xacO\x85Q_\x03\x1e\xcb&quot;rB~\x13\x1c\xa7^\xac\xd1\x03H\xff\x8bk\xefK\xc3\x97\xdf\xc5q\xbe!\xe6u\xceY\x8a&amp;\xdd\x81\xe5x\xccA\xdb~\x85&#123;\xd2%\x86\xf7$\x8a\x86(5!\xa3\xf6E\xbfS\x9bc\xfe.g(\x0b\xd7\xb2E\x8b$-(\xe1\xd4z\xa0\xcd9|\xf3\xdcf\xb7Wp\xc0\x8dG-\xacg\xfa;*\xb3\xd2\xe9t\xf8\x0c\xe5\x14W1\xf8\xef\x9f[\x84\x0f.0\xda\x15\xd4rI\x93\x1b\xe6p\x96+\xed=N\xf6Y\x1a#\x0f\xc9\xf82\x98\x85\xee\xb6\x925.\xf95\xc4\n\x18\n\xd2@\xb2\xb5\x02\r\xce\x15a\xac\xb01&#123;\xdf\xfb\xfe\xd9mB\x7f\xf8s6\xae&#123;U\xf8UM~Q$6\x14\xbf\xdb\xb5\xc4s\xdc1O\xc85\x9c\xf4h&#125;\xaer\xdf\xce\x1c\xca\x83\x1c\x83\n\xa5p\xd0\xea\xfb\x80\xef&quot;\x1a\xe4\xba\x0fW\xd2B\x9dcK9\xcbF\xdb\xd5\xf6\x83\x14]\xb6,\x1b\xc9\xb7\x0e\xb6\xf4r\x12P\xe5\xf9e\xfd1\x80\xc8\x9e=7S\xaf\xf3\xf41\xf1\xa4\x16\xb5\xef\xfd\xd6n\x0b\xa4X\x81\x8fm:\x97\xe6\xa7\xa3\xa6\xffUN\xac\xb87\x89.\xfa\xdf\xe5\x9b\t\xb9\t\x98\x82\x1e\xf0\xdfP\x00!b&#125;\x04i\x95\x07+\xffs\xb8\xd9\xcd\xcaB^\xff\\\x8eO\x84K3\x8a,&#123;^t2\x80qW\xdc\x8d&#123;Nj*\xd15\x98\xd1\n!\xe6|\xe7K\xf3\xab\xb8\xae\xca\xc4#s.\xc4\xdb\x82\xbc\xdf\x86\xe8-\xee\xa6\r\xa8\xda\xc7\x80dKW\x8cF&lt;f\xce\xbe\xc7\x0f@h&#125;:Y\x17\xf7\xe3\xfc\xfd\xd4\x9f\xa6%\x92|\xa1\x0f\xb0c\x83@\x88\xb7\x08G\x9ck:\x1ai\xe1\xfe\xfa\x11*\rK_z\x806\xb2\x9a\x88\xe8\x08\xb3\x14\x8ba\x7f&amp;\x07\xec\xbeR\xcd\xf2R\xa1 =\x8du\xa8_c\xa0\xff\x1f\x040\x1fLs.gp\x96\x95I\xc0\xedn\xd5O\x02,\xafxb\xf6\xeb&amp;X/q%\xe5*l@\xc1K\xdf,5^\x8c\xbf\xecM\x7f\xbaV\xfb\x92@\n\xec/\x16\x06x \xb4d;\xb2\xd0\xf8:]0PGj|~\xc4\x1a2\x9c\x8a#\x83`\xeb\xb8\xff&amp;\xa5\xd4\xde\xe1\xb4\xa2];\xff\xd7\x10od\xa8\x86\x02\xde\xa9YWu\x8e\x9c\x8e\xb8\x04gsH\\p\x9e8R,\xde\x8b\x1c\xe6Ra\x1fN\\\xab\xc7cM\x9a\x02@\xafhC\x19\xdbT\xd08\xccv7-\x8fz\x8e\x97\xf1\xe8\x17Z\xfd\xe4~\xe4\xd1m\xd0\xfb\xb2\xde&#125;\x0c,\x83K\xf1\x11\x0f\xe4\t\xcd\x87\xbe\xab&#125;A\x87\x8b\x1a\x0f=\xecB&quot;\x1d\xcd\xab\xda\x8bp\x7f&amp;H\x9e\x15=G!\xcb\xa6W\x1f\xb0\xee\&#39;\\\x88:\x92UlIwr\xd5\x0e=\xcf\x12\xae\x8c\x83l\x00*\&#39;$0\x81\xeb9\x19\x18\x0b\x0c\x8eh\xdfNc\xc3:\x07\xe9\xa4\xe6ke~\xc90\xc3\xbdRf\x87\x97\x1c\x8a9\xfeM\x15\xa1\x1a\xd2\xcb\xb4\xc7x\xdc\x055\xc1r\xe3\xd7\xf2\x1e\xb3\x91:Z\x05\xc2\xfcg\xe8\xf5\x00R0kbp\x9a\xc5\xfc\x04o\xc8C\x81v\xc2[\x8b\xeb$\xf5\xd4@\xf0\xec\x82\xb6\xd0\x0b(\xd0\xecF\xd9\xec=K&quot;\x02\x16K\xa7\xe7\xec\x03\x12=[2gk&#125;\xbdp\x9c\xeb\xde\xf5\xf6\xaa\xee\xbf\x86\x14\x1atPI\xc3s\xd0\x99\xeb\xfeN\x8a\\\x11\x10\x8d\x92\xbeA\x92!r[\xc6\xac\xcb\xad*\x089\x05\xa1h6&#123;_\x83\xffR\xaav\x92A\x1d\xf3\x12\xed\xd7\rV\xa7-\n\x80&quot;v\xabx\xc0\x9b\xa1\xef\x97z\xbb\x11O\xffB\xc3\x92\xba\xe8.\x10.\xd6\n\xdd\xea\xfa\xe1\xb9GT\xa2\xa6\xbe\xda\xe7\x84\xcbD\xbb\&#39;\xf5\xf6\x95Ux?&gt;\xcf\xd1\xa9\x14b\xbd\xc8\xb1&gt;\x0c(\xcb\xcatB!\xbawEpf\xfe\xe5_\xd3\x00\xa2\xdfH\xac@_\x17\xb1b\x92\xdfv^F\xd2\x87\xd6\xef\x90&gt;\xce5\xe1\xd0\xee\xe5\xbew\x12\xf6\x97\&#39;\x19\xee\xf5\x975\x1fU._\x84q\xf5&amp;\xf7\xd5K\xf1\x0b\x7f\xd8\xf4\xa9\x1fO\xd4u\xd3_c\x89\xde\xd5\xc5qz\xc3\xf3\xaeq\xa4\xeb\xaf\xc5\x83\x87\xf2\xd2w\x88\xe9\xb1\xcdk\x1e\x14\x1b \xeb\xfc\x03B#\x1b\xe73\x82\x0f\xc7ar\x9d\xaf\xe4\x7f\xe5X\xd3\x93\xcf\xf2\x10J\xa5N\xd4J\xc2y\x12\xb4D\xfb\xb5\xa6\x0f\xa2%\x13\xd1\x9a\xffE7\xeb\x8e\x126A\xfd\xc6\xc2\x8b\xb2\xb0l\x15L\xcb\x0c\xdf\x19\xf9[\x8e;\x94\xd2\xea\x0f\xdc\xf2\xc7\x01W\x08\x9fNa\x8b\xcf\x1d\x8b\x86\xe0\xd6\xecG\xeb\xb6\x17R&amp; \xfc\x1b\xce|\x07\xb8\xf6\xd2*\x18\xcd1\x89\xc9\xee\xe9\xda3\x02\x93w\xe5\x04\xb9\xd8\xb6\x83\xd9\xee\xecp\xd5f\x04Y\x08\x0cR[\x87\xca&#125;\xf2\x8d#jO?h?\x8b\xcb[1=\xf18\x80\xbbk\xd2\xcb\xc3\x1f\xef1\xa1C&gt;\xcd\xad(\xb7:\x9b\x19pP\x8e\xf4z\xb0\x853\xb1\x13\x04\xcf\xc5\xd1=\xe9\x99\x8c\xa7\xde\xd6\x1a[Xi/\x8c\xbd\x9d)\xc1\xd1t&quot;a\x9c\xc2\x92Y\x9c\x17t0vH\x06\xd4U\x0ebV\xaa&#123;`\xfduX]\x80\xad+\xa7\x7f\x98y\xbak\xe2r\xd0\xa9^\xacB\t\x1b8\xdb\x12\x9ay\xcaQ\r\xa4(\xa7\x11\x0b\xbf\x07!c\&#39;1\xb1t\x8f\xbd\x88\xc0S=2\xe8\xf7\xe5\x98\xf8\xa4\xe4H\xa1\\\x1d\xe3\xf4\xb2\xaf&quot;/w\xc7Q^\x9e;AI\xfcxgfS_\x92\xd2\xab\xe2\xd8\xc4=&quot;\xda:\xc0B\x9d7u&#125;:\xa6\xa9\x1fn\xf22G&#123;O\x91%\xfe\xde\xbay\xd2oD0*\xc4Qx)\xd6P\xe4\x18TZ\xe4AX\xe8\xfaj\xa8\xdce\xd9k\x10\x8e\xa9$\x84/\x02Jw\x08\x93\xdfFp\r\xc4\x97)3\xe2&amp;\xc0&gt;\xbfk\xe2O/\xa1~\x8a;\xee\x06\xcfbA\x0e\xd8\x94g\xa2\xd8\xfb\xfa_\xd6\xf5\xcd\xa3\x98\x86\x19\xf0\x06\x1f\xb0\xd3\x05\x0e\xfe\x89\n,\xb72\xc8\x81\x95F\xf0!G\xfa\x00\xdd\xcdk\x95\xf3\xd6i+\xcd\xe4\x16\t0\xd6\x95$p(h\xc2\xe6*\x94t\xd1h\xce\x18\xd4\x1c/\x94\\\xa4\xf5\xe9uw\xc8\xb9\x91H\xfe$&#125;X\x92\xa0B\xdd&lt;X\n\xa7&gt;\xfe\x8a\xd3\xc5\xfd\x10\x0e\xd3bat\x17U\xc0\xd9\xdf:z\t\xdc\x9a\xe8\x89f\xe1\xb6t\xe3\xb5x\xd9\xf4\xc1\x01\xda\xec\xe5\xef\xa1~\xea\xa29\xd3\x03PLC\xc1*\xcd\xd2\xbf\xb6\x9b+A]\xfc\x88\x17\xd23\x8d\x04\xd0\xe2\x93\x98\x0e\xf6\x93~\x89m\xb8\xad\xbc\xc4\xea\xdf\xa1^\x98RK\x04\xd1q\xa1\xb14\xbe6h^r\xe1u\xa1|e\xf4\xcd\xcd\x81\x92S\xfdx\xdc\x86\x18\xa0\xf4\x04\xa3\x1b\x95\x81L=\xcd\xe4\x06\xd3\xf02Af\x90\x13\xd4Y\x15/\xff\xf0\xb0\xa2F\xe00uP\xccq\x81.\xe1~I\xb5\x85SR+\x97\xa4\xb6\xca&amp;A\x01P\xcbyN\xb5\x90E\x02\x91#\xc0\xa2\x8a[*\x1b\x8cS\x1a\x85\xd2)\xd8\xd4Z\xbfd\xae\x11\x889\x8d.`&quot;8+\x9d\xb3\x17\xd0F\x9d\xe4\xf2\xc760\x9a\r\xb36\x00k\xa0,\xdfA\xe7\xa8\xf3\x03\xd6\x8a\xacp~\xd6\xebz\xf2\xe7\xf7\xca\xb2q\x1dS\xd9y\x9aP\xf6;\\\xaa\xe3\xca\x08\xcfp\xa1\x0f\x89F+\xbcb\x0f\xb2\xea(=#\x9ew\xfbS(\xd7\xe8W\xd0\xbe+\xc3\x81\xae,G\xdeR,i\x89n\xe6\n\xd0\x07\xd8\x90PR\xc9\x88\&#39;i\xd1\xbc&quot;\xea\xb1Z\xbb\xb2\x95M\n\xfeJS\xfcd&#125;\x7f\xf3\x05\&#39;\xd3\x95\x02\xc8!a\xe6l\x1e\xbf\xa8&gt;L4\x9b\xf6XG\x96\xc7d\x15\xe6\xbbutL\xdc\xbfr@^\x86P&amp;\x8eP\xe6&lt;&#123;B3\x80\xca\xe6\xb4p[\xd1x\xdf\x16\x12\xe1JWd\xc7]\xa1^\x16s,\xd9\xf1A\xd5E\x92\x93\xe8\xd2\x1f\xca\xc7\xae\xccB\xe2a\xe9A\x10\x0f0\xbf\xc5h \x08]\xfb\x1b1-\xdb8\xad\t\xf6\xecH\&#39;m-B\xe4\xc9]\x8c\x1cz\x88\n\xb6\xb1\xed\x85V%\xdf\xfe\xf9\xa5\x857\x02\xef\xf08\xc6\x15\xf0\xc9\x1a\xc0\x97\x94-\xb5r\x93\x87\x07\xe2\xadB\xda\xef&amp;\xfe\x8cj\x89\xd2\x14K\r\x83\xdab \xcd\xd8uO\xc3c\xb0:\xc6\xa80s\x88\xfev9\x05C$\x8eb\x99n\x98\xec\x1a\xb6\xbd\x10\x1e!\x0e\xf9\xe3\xc5T\x95\xdf\x95\x9b\xaf\xd8a\xc5+\xf6\xfe\x84g\xfbk\xc5\x1b\x01\x00\xe9_\xcb\xee\xdb\x88\xad\xdf\x0490\x07mr\xf3\xa8\xd6t\xb1W@_\xf8\xda~9b\x96\n\xb1\x03PI\x10\x8a\x1c\x9b\xc7I\x1eNr`\xb3Q\x1e\xdfbGC&amp;\x06Ff\x9a\xdc\x8a\x10\xb3?\x85J\x1e\xe5z\xcf\x81n\xf4\xaapE\xc4\x0c(%\x87\xa9\xc0\x98\xf0\x1d\xf1e\x88M\x98\xc2\xd4u2\xc2\x8b\xd5\xac\x0c\xf8)\xd4U\x95\xd1\x02X]\xec\xe2\xf6\xdd\xc6\xcd\x9b$o5H\xfem\xaa\xbc\x8cVh\xbe1wL\xa8\xb0w\xe9nd2\x96\x1d\x824P\x97g\xce\xa1m+\x02\xad&#125;\xbbH\x95\xe4\x128b\xb30k\xa7\xa9\xc3\xcc\x15h\xb3z,\x95/8SA\x83\xda8S@\xfa\x96P\x8a\xe9\x07\xda\x8dw\xa0:(\xb8BI\xac\n&gt;\&#39;\x9dc\xbc\x7f\xc4\x18$4\xf7cg\xe3\x8e\xddIO\x05\xf8\x19\x1a\x0f\xb3\xc6\xf8#W\xc3\xceM-\x8f\x90\x0f\x92\x9b\\f\xc4\x84c\x06\x93\x10\xe7\xf6\xb0y\x15 \x80/3\x00A\xc3\x1cX\xf5UU%\x94&gt;\xf4\xfa\x07\x8cE\x941v\x01$\xcfO&lt;\xc1\xf0\x9f\x14\xf1o \xf3\x93\x9c\xe1E\x9bb\xdd\xe6\xbc*\x03\x05\xd7\x9e\xb9N\xc7\xe3\xdc\x08\xd8\xc5\xa2\x8fh\x03\xfa\xe2ZY:7\xc7\x0e\x0e\xeaI+ke(7\xd0\xf4V\nT\xe0\xbe\x96\xfb\x070\r\x7f\&#39;n\x94`\xf1w\xe8\xf181\xe7[\x06\x9cg\x90\xc4\x01\x82\xf2F\xad\x1c\xc3l5&amp;9\xde\xcd)\x1bM\x92\x15\xbeU\xb5\x95\xf9\xf0t\x1f\xdd\x19g]e\x9d&#123;\xbb\xc9\xd7.Rv\x98\xf6S\xb4X\xb2\n\xd3C\xa6\xef\x05_\x17\xb8\xc2\x13\x08\xd4\xdbWV\xa3g\x00\x9cr\xfdIVWo\x00\xa8\xdc&lt;\xc2\x89\x8ds\x92\xedd\xf8\xd6\x9b*\xa39\xffa\x06\x83\xbf\xa9j\tBm\xc9\x06\xf9n\xcd\xff\t\x1a!\x8e\x0e\xcd\x12:\xd4\xf2\xfaC\x14&gt;\x13\xc8a\x93\x01\x8b&gt;\x1c\xad\xe8(\x84\x07\x10\x84Oo^\xe7L&gt;\xcb\&#39;\xcf\x08\xff\x90\x9b\x01\xb5\rq\xad\xb1\xec+F.\x92$\x82\x9d\x85\x1aV-%\x12Z|\x18\x1dt\x82\xed\tK\x97\xc2\xf2\xf5\x9c\xbc8\xc62\xb9\xe2\xaexIj\x84\x856\xce&lt;\xf6\xb8\xca\xe0)&gt;\xd5\xa5\xf5 \xce\xd6( \xe6\xe4\xbc:\xe88\xa2\xfb\xe2\xaf;\x1do\&#39;\xa7\xfe\xb0o5\xdc\xa50\x04\xc53\xf6C\xa6wV\rR\xf44\xe3\xf32D\xff\x8c2\x00-\x8a)\xdcH&lt;\x81(\x01\x9f\xc4\x95\xc7\x8d\r\xedw\x1fi]\xd8\xdf\xaf6\x12%\xef\xf9\xcb2-\x8a\xe0\x7fC6\x12\xc5\x9a\xe8\x9d\xa8\xa7\xb8H\xba\x91\x8b\xdb\xc4V\x8c\x1e,ez#\xb7\xe1\xfeY\x7f\xd4D2\x82\xf3B\xe7\xbak\xd0\xec.\x0f\x9a &amp;\rf\x98\xf9$\xfa&lt;\xe2\xbc&gt;\\i\x8f\x19\x87K\xba\\\x80Y\xce\xe8\x86\xbb:\xf1\xefw\x98\x82\xad\x9b\xff\xa2\xf3\xd0(2\x8c\xcd^\x82b\xf0rtE\xe6\x17\x81\x80!:\x95\x89g&gt;\x11\x0b\x02\xd9\t\xe8\xdf\xbd\x06\xb2-h\x07Iu6b\xd6.\x9b\xd00\xd9\xc4Xq\x9f\x06\x1f\xab\x19\x8a\xd1#\x84\x93&amp;\x02\x82\xce\x9a\xe1\x14M\xb5\xf0&gt;a\xe424\xe5\xcf\xc5&amp;\x80@Y\xea\x0e\xde\x1aM~\xf2|p/\xe0\xc2\xbb\xce\xdaTv\x8aM\xfd\x06*\xd6\xdd@&quot;\xfe\x082\xf5sK\x04\x12\xa2\xcf\xe0\n\xf7\xa3\x1eg\x96nq\x85j\x98\x83\x13\x90\xca\xc0\xd9\xe5&lt;\xee\x15%y+\xc5`\xbc\xb0L\x1f\xb6\x15R\xf9\xed\xd5\xd6\xc6\x891W\xf1\x94\x80.L\x82\xe9&amp;\xff*\x01A*\xe9\xa0\xd7\x14.\x07\xc6n5\xa4\xa0*\x93\t\xff\xbb\x02\x0f\xc2\x93CQL^\xe9\x06!\xcaBB\xe6\x11!\x07\x92\x8cV\xbas2\xda\xe2y\xa2\x97\x83-\xb7\x10~\xfb\x94\xfaZ\xd2\xdb\xd6\xec\xa1\xd8f+Ce\x1b\x06\x82\x12\x95e\xb54\x93\x02\x972p|\xe4\x922&quot;\x08#\xbf\xce\xa0&#125;\xe9\x91v\xf8\xd4\xd7$\xb6\x1dmQR\xa8\xc2L\xef\x93\xcd\x1c\xc0\xe1\x19Vy\xad2\xe1\x9d;\xdb\x1dS?\xaa\x9a\xdf\xe3\xa4\x8aZ\xd2)\xcf\\\x8f\x83\xdd-m]\x12P\xc9y+\x8a\xf6\xb6\xb1\xb2\x16\xd0\xa6!q;\x01y\xfc\x18\x81C\xb4\xf80\x17\x8e\xf5\x98\x89\x1c\x04\xfdwe\xc77y\xbf\xffG\xdd\x97\xcb\xaf\xf7&#125;A\xf6=d\xaf\x83uH\x07\xcb\x9e\xf0=\xfa\x06\xee\x8c$\xda\x9d\x7f[\xd7\x81?\x0c.\x810\x05\xb6\xf8.\x03\xc0\xce@\xa1\xbei\xe23\xd4\x1f\xd6\x9d;\xc0\x18[\xb5d#\x05V\xbf\x11\x05\x08\x80\xa7|^%\xfa\xd6\xb8\x13~\xf6&gt;\x15`\xf7a\xaaJgB\xedi3\xe5\x1a\x13 x\xd1\x01\x00\xc7O\xa1\x0c\xa2\x1fY\xe3D\x92\x9bxR,\xed\xba\x87\xad\x0bhA\xad\xa1\xa1\xe9t\xe8C\x96bl\x12+\xb6\x8b\x9b\x06\xc8\x1c\xae\xc9\xb6\x98H\n\xcc\xd9\x89\xd7\r\n\x8c\xd7\xbbv\xfa\x0f\x0c\x00\x08\x19N\xe3$\x97\xc4\xd5\x89\xf7\xab]1q#N\xdbE\xc6h\xf3\xa5/\xc2\x1a\xff\x1a9\x06df\xbf@ VO\x84!&#123;KE\xf0\xa1S\xfe5\xc9U\x93\xbdk\x1e\xb5C\x84\x96\x8e&amp;\xcb\xa2\x1cQ\xd0\x99\x98\xfcs\x03\x0b\x02\xf1\x9b\xeb\xac\xd2\x16\xaa\xdeW\xdd/\x15\x92W\xf8\x03XT\r\xe5\xb1i\xf0\x90l\x19\xfe\x89\x17=\xb5\x91\xf4\x7f\x80U\x1eG0\x10bYmJ52\x18Q\x9b-\xb0\xb0\&#39;&quot;.\xd3(\x8c\xeb\xfd\xb4\xd7\xd2\xf7\xaf\xffZO%i0\x90&lt;&amp;\\1\xa1\xd1\x96\x13\xf1\x1b\x8b\x1b\n\x8b\xcf=j*\xae\x1c\xb2\x9ao/\x93\xf1\t(\xf2`\xa9F\x04\xc9\xd3\xab\xa7\xf3\x03\xc2\x04\x83\x85\xdfc[0\xdd\xe6\xbc6\xe92\xafL\xf6\x1d\x02\x8b\x1ab\xb0\xce\xe6\xa7N\xba\xa6\xc3S\xf7X\xb3\xc1\xd7\xb0\xa2\x85\xa0\xcb\x01s\xb3\xbd\xa9q\x9f)\xab\x11\x1ey\xaaMA\x84:\x9b\xef\xe9z\xbeL\\d\x9f\xcf\\0*\xdf\xe1&gt;\x83\xd4Z\x062\x8e\x8c&amp;Y&gt;\xa0Q \x8fs\xd5\nG\xec\x87\xa0&#123;\xfd\x15\x98@:q\x1cwC\xa6\x8e\xf3\xfdoF\x95U\xd4\x00I\xccXT\xea\xa6\x1f\xce*^A\xd7\xe9\x1dI\xdd\xe6\xed\xe6\x83\xc9\xe7\xfd\xeb\xd0\xf2[G\x85G(\x9c\xc5\xc2\xcek*\xcf*\xa8\xc6%\xf3\xe8\xc9\xcd\xba\xc7\r\x1f2G\xb5\xfd#\x1f)\xf4\xc50\x8aL\xc2WH\xb9*e\xc3\xa1\xdc\x17to\xf6H1T\x17\xad\xb5]w,\xf7\xa9d\xae\xad\x9c\xab~&quot;\x1a\xc1nO\xd3\xff\xcbB\x8d\xa0\x03\xff\xdaQb\x8e\x0b\xf6\x1a\xda\xbc,\xbcT\xe4\xcf\xc1z&quot;&#123;\x13)\xb3pRXm\xdc\xe2,\xda\&#39;\xbc\xd8gL\xcf\xcd&lt;M\x1e\xaba\xb57\xcb\xe4&gt;x\x02\xd4\x87\xb8*\xa5\xb4\x8d\xfc\x16\x1e\xb0c\xff\x93/P\xa0/W /\xdc\x80]\xc0U\xaa^\x11\xb3L\xd7;\xc6\xcb\xd6\xfe\xf5)\x8ep\x86A\x90\x07\x07\xc2\xd8\xf0\xd2a\xd7\xb9\x87\xa6\x9d\x1e\x80\xf2\x91\xdd\x04\xa7\x1ce8pm\xa8\xe1\xce\xd6\x8b\x0f\x12\xf7\x98H\xd4~+DO3!\xdbW\x84\x1aD\x8d\x1d\x0e\x88G\xd2_L+\t\xf2\xb6\xd1\xb0\x19\x02\x91\xbb\x13\xe7\xf2\xf2\xe3\x88x\r\x0b\xde]\xbc+A&#125;\xc4\xd3U\xd7\x9e\x1b6|\x94\x83N\x0f^D\xc6N\xe2\x07\x06gs\xd0\xae=J\x82\xd7\x06\xbfS\xaeE\x9a&amp;+\xa9\xe5\xda\xeb \n,\xd9\t\xa8\xb4\x8a|\x88U\xba\xc5\xafo9\xcfKOm\xbe\xfb\xfc\xebI\xcb\x1b\xfc\xac\x92\x91\x06\xaep\xb5Vn\x9ae\xf8M`\x8b!G\x16\r\xfe\x1e\x0fP\xed\xfb\x1a\x99\xd1\xde\xc2\x91\xa0\x03gN\xb5\xaa\xc9\x80&#123;\xabU\xa8H!(\xb1\xfcJ\x86\xa54\xb8)L\xa9@\x94&#125;\xae\x1c=\xde^!A\xb7x\x19\xac\x99\xff\xbf\x9e\xb3\xe1Jo/\x8cz\x95\xabY\xfc\x15\x05v\x93T\xff\x15\x98\xf3O\x92\xff\x03\xefX9\xed.\xc2\xabqf2\xd2&#125;\xf2\xb2_\x90\x9d#\xc2\xf4\x07\xe0\xf3Vp\xf4\xdc\x87\x0c\xb7\xc0\xfb\xc3\xa0\x18\xff\xfd\xc9W\xb7Wy=y\rPLp\xfd\x81\x95\xffI\x82\xbb\x17\x97\x03\x97\xfb\xf9\t\xa8l\xd6\x03\xf1\xce\xf8\xb6\x07\xfd\x87\x061K\x06\xfc\xc4-\xb5\x00\xcb&amp;\xef\xb1\x0b6\x1b\xdd\x80[6\x0c\x10\xe1\x96\x85\xbc[\xf2\xb1\xc7\xedUx\x15rI\x0c\xa8\x93~\xac\nj\xf2\xedn\xdeY\x13\xdb\xdc\xe6XC\x93e\x0eG\x00\xc5\xcd^\xe3hC\xf3\xcc\xe2?\xf7\nP\xc0\xdf\xe9lE\xb2\xd3\x9d\xf5\&#39;\xc1\x83v\xe1\xbc\xb1\xaa\xe9p\x16\x02\xb72\x82(\x87\xf0\xbamO\t\xff#\x17;\xaa\x1b\xbcF\x0e\xaaK\xbe%gS\xbe\xd5Z\xf7H\xc8\xef\xb0\x10\x18\xa5j#\x85\xab\xe0\xaf&lt;\xbd\x82\x94F\xb6\xbc\xa1\xceo\xb6~\x02\xdd\x92p\xc8l\x18\xc3\xff]\xce\xebB\xfd\xb3-1\xd8\xf63\x91=\xc7n\x88\xb6G\xce\x03\x96\x81A2\x0e\xd5\xb9:N\xbdL\xe1HzT\xe7\x9a-\xe3\x97\x84\xb5\xf2\x88mo\xb4&#123;\x95\x81I\xc0.\x93M\xc2\x9b\xe5\xb8\x86\xda\xd9\x82\xbe\xcb\xe6\x1a \x98iF\x9aN\xeb\xd6\xb6\xca\xa7\x1c\xfc\xb6Gci\xe7.\x9c\xca\xae/l\xb3\xdd\x16\xc1h\xfd\x98\xa1zt\xfd\xd5\xe6A\x8do`\xde\xcf\x1d\xa8,G\x92AU\xa3\xf9#QW\xc1\xab\xe6\xae\x97\xe7\xcd\x93V\xb6\xe68%\xe4&#125;\x94Wlr\xe5\xf6\xc8\x85\xd2VR)\xc5h\xf9\xbe\x17J\x15\x9a\xc8c\x87\xb9\xd2\xa7.\xde\x08&quot;\xfa\x99\x8aEqxp\xc5|\x17\xad\x184@s6\xe4\x19H\x9a\x9c\x0bG=k\xf8\xe5\xbb~\xadw\xe9\x9e\x8d?\xb4\xf5\xaa&amp;\xf3\xf3\xec\x18U\x08d\nAk\x11\xb0\n\xbd\x9e\x01\xa8\x92\x89\xec\x8c/\xe5b\xaab\xc4\x0b\xd7\xe8S\xd2\x17\xe1\xfe\xfcl(&#125;B\xc9\x1d\xa4\xd5-\xe69\x95\x8a\x89i\x1b\x87\x92Q\x11\xc9u\xda\xcb;\xe5\xa8\xa1~\xa8\xf0Tg\x8d\xbaS\xcb\x80A\xadF\xd6\xf54 \xf0N\xd1\xc1\r\x86\xde\x9d\xf0-\xae\x9dH)\x0fA\x9e\xdbT__\x94\xca4Lw\xab\x0b&#123;/Eg\x9e.\xf6\xcf,\xca7\x1a\xb4*f\x19\xd3z\xf7g\xd3\x98\x8f*k\x12u\xf3\x85\x9d\x1d\x15rn~]\\\xd3\x13Rz\xda~[\x0e\xd6\xb5\x17\xd0\xc2\xba]\x18\xdf\xd8\x87\x0c\x84\x14\xfc\xb0o\xc4l\xcb37\xb0\xf2.\x895:bWTX\xf7\x94\xd2\xb5?\xf7g\x084\x8a\xd8\x1ei\x81=\nq(r\x88\xd3\x1f\xf9\xeb\xe7\xf2\x9c\x966\xe4\xd8\xbc\xf4\x92U\x8cG\xb0\x02\xb0z\x07\xd7Jv\x91\xfa8Z3\x8f\x9f\xe4S\x05\xd5\x98\xb1\xa5\xb3\x04\xbe\xa8\xe1R\x1d\xb8X\xc7\xeb\xd6\x85\xa3&#125;\xfa\x15V+\xce\x82\xf0\x9a\x1cN\xc4\xee\xf7\x0cf\xfc\xaa\xc2m\x8a\x99E,~Z!\xd1\xbc\x0c~@ \x91\x17\xf33\xc2DwD\x1d\x88\xeb\xe9;\xe3\x0e\x87\x86\x11G\xc5L\xbe\xfeP\xc7\x16\xdd\xb9#\&#39;\x04\xcc\xcc\x08yT\xb0R\xe7\xe4z\xd95\xae\x1e\xdd\x01g\xf8\x99\x87\xd0\x8c\xfe\xfd\xab\xe7\x82\xd7&amp;\x98\xca\xbc\xe6\xea\xfa\xf8\x10|Y\xccms\x8f\x1b\xfe\x0b\xbf\x15Q*\xa6\xb6\x9d\x9b\x89H\x87\xbfn_\x8dM\xdbS\xaa\xa7\xcfB\x858\xbbf\xddTa&lt;\x0e\x8f\x92\xca\xa3I\xd9\xe2C\\\xf2~\xe6\x1a\xd5\tU\x19\x82\xc0\xc0\x8f\xcdc\xefa\xe1\xacbmB\xf2\x14\xfcpM\x1f\x95I\xc8\xef=\xb80\xba\xf1\xc6\xcb\x025\x8b\xa4mI\x89Y\xf9\xc1\x1b\xfdt\xb6\x1cn\xb8\xa6\x8el\x895\x14\xdc.\xd5S\xf7\xfd\x88\xd6\xe2\x84\x8d\xce\x88\xb8\xe89\xc4.\xcc\t+|\x1dB\xc3Z\xe6\x84\xc8\xcb\xb2\xe0\xaa5b\xd5z\x81&amp;\x8e\x03=\xf0\xb2\xc5i\xca\xbf\xfe\xf2\x117\xf5\xd0\xa0\xf89l\x9c\xe0\x07\xd9\xbdy\xbb1\n\xe0.\xf4B\x99(\x08 \xfaE\xfd\xda\xa6\xce\xbf\xdf\xa6\x19\x85\xca\xa8\xa2\x9b\r\xc3\xac&quot;+\n(\x1e\xb5z&#125;G\xe2\xd7\x18\x96y&amp;\x0c\xb7\xb0\xa3\xd4n\xad&#123;\x88G+\x95\x05\xc2Ro\x9d\xd7\xf7\xd99\xff\xce\x8f5\t\xbcc\x8d\xdb\xbb\xdc3U\xcb\x1c\x03\x7f2K\xac\x7f\xf5\xf8\xb7Y\x1a\x94\xac\x01\xb4l0\xb7\x19\xef\xbf\x19d\xe8\x82\xde^\xf3\xb6A\xb0\x89\x91\x9c\x0f\xf5\xd4\xde&#125;\x14\xe1\&#39;\x9a\x8f\xeah\xa6zBs%ED\xf1\x00x\xb3&gt;\xf3\xd5\xc4\xb7\x15&lt;+G\xe3\xe9W\xc0\x1d;\xcc\xcf\xae\x0c\xe1\xc8Q9Y\xc2\xfd\x93\xda\xb5\x0fFmHZgJ\xed\x91k\xd6\x90 \xda\xd6,I\xfe\x90?\xc0?\n\x01JG*\x98\rf\&#39;?\xa9\xbe\xae\xb4&quot;\xdfm\xe5Q\xd3N\xfa\xdc\x9e\x01\xbf\xa2\xbd\x88\x7f\x85\xceM\xed\xa7\xea\xc8\x9e\x80\xb1\xeci\xb5Jm+\xdf\xcc\xbd\xe0\xd3\xddJj\xcatL-\xfb8&#123;\xf7\x06T^l\x94H\x87\xf8\x19&#123;\xa1o\xadB\xb0\xc6)\xc87\x06&gt;\xb3\x07\xcf\x05\xd1\xb3u&#125;\xd76\xef4w\xfd\xf9$\x84Q\x18\xbe\xbc\x13&quot;\x8dP`n1\xd6\x83\x08\x84:\x8d\xce\x06_\xcf8j\x1bto\xd9\x93\x8d]\xd9\x1c\xc1gyr\xadK,\x81R\xb0\xa2\x92\x8e\x9c\x0c\xb5Q\xd3\x1d\xa9\xcfk_\x97\xfbH\x19k\xd8\xccrB\xe9\x0b\xa6\xd1\xcd\xfb\x1f\x0c1\xf1\x00/cGh3\x8c1\x8f\x931\x90\xa9\x0b\xaf\xec\xfc\xf8\xf5\&#39;\x8b\x9b\x04N\xe6\xf7r\x89h\xc7&lt;G\xa3\xd0\xaa\xc0\x94_\xc8I\x1d\r=\x87\xaa\xfd\x01\xb9\xff\xa8q\xc3cg\x94\xaa\xb0\xbc\x1f\x86\xce$\x88Q\xeb\xad\x1c\x82\xbf\x19\x14&#125;tI$\xf7$\r\x9c\x9b\x90\x15u\xc5u\xaca:q&quot;Xf\x1a\xa04\xe6&#125;\xebhCH\xa95\x04\x8f\x82%\xe9\xc4\x1bL\xb9-\xa5s\xc6\nCf\xbb\x1f\xf8\xcb\n\xc45\xb5\xff\x9d\xfc\x8c\x0e\xa1\x89)\xfb\xbf \x1a\xf2\xc3\x99@\xae4\xa6q\xc7\xc9\xa3S\x14\x8a\xec\xefs\xd2\xe9\x9c\xa5\xc2\x87\xaf\xe1\xe3\xdf\x93^\x1f4\x9ec\xc5\xba[O\x1e\xe0\x83\x13\xa1\xda\xa7\x0eO\xcb\xcc\x97B\x18\x82\x80T\xbd%\xb7\xe7oPh;\xce\xec\xd5\x9a\xe9\x0b\x14\xc4j\xab\xe5k\x16#\x7f\x1dL\x9ed\xee\xa9d~\xefR*l\x1a\xb0\x839\x1f\x0c\x1e7\x8e\xe5\xffE2\xecD\xee\x91q\x0e\xc7\x11\x93T\xdao8\x06\x87\xb0\x08\xc9\xb2\xf7\xf6\x91\xc6\xc3\x02\xd2\xd2\xf5\xbc\xdae\xd1\xa8W\x15\xb8\xb6\x83$~A\xd8\xf9b\xff^\xdcDV\xcd\x91\x0e\xc8fbQ\xb9\xc5\xf6\x85.\xc9\xb1\xfab\t\xb2:\xe5\x94\x87\x17ZB?_\x1d[z/\x9e\xff\x99\xc5\xc3\xf4Q\xa3Q\x8d\xaa\x0e\x8f\xc7`,\x8c\xa6\\l#\x90\xd0\xac\xf8\xc8\xdf\x1aY\x18\xf16\xcb\xf0\xbeO\x9b\x94\x13)\x81\x96\x1f\x8a[\xd0\xc6\xed0t&#125;\xf1\x9fD\x80\x87U\xe9L\x05\xa9\xd2\xe8gd_\x13Bi\x8e\x92|2\x92krd\xc8\xc6\x950^\xe5k@\x9dE\xc7s\xf0%\x01R@Hcf\xa1\xee\xebI3K\xa1\xe7\x03\x90\x8ePA$b\xf5\xe8\x03\xf5~_1\x023&gt;\x1f\x9epOA\xa9\xc6\x1d&gt;\xa0T\xf1\xec\x1f,\xe2.\n\x952U\x9c]\xed6\x8bI\xd8j\xb2:\xfb\x9a,\x9b&lt;\xd5s\\\xfbrH\xfbg\xcex\xc1\xbc\x18\x04[6S\xb5y/\xc3\x0fHq\x9c\xbf\x05\x14\xa8\xdc\x92\xf9\x8b\x874\xd1\x0e.\x93\xea\x82\xc5j&#123;N\x05\xa4\xba\x11\xd4\x7f*\xa2\xed\xdda\xac\x0eA\xd3\xfe\x8eYS\xe4\xd3\x13dn\x1b\x9f\xcd\xfe\x05\xbc\x0fq\x91\xe6v\xc9_\xfa\x1f%\xc1\xf8-\xcd\x1a\xc2\x03\x8e\x1b\x7f#p\xaa\x94\xf9\x82\xf3e&quot;k\x88\xf0\xefid\xd2\xe9\x1ed\x8aI$\xa1=\x8c\x1d\xa2\xbbY|I\n\xc9\x04zC\x12\xab\xd4\\\xa8\xf1\xbd\xb4\xc7(\x86t\x0e\x1b&gt;\x85\xf1\xf2\xc9\xe6y\x14G\xb8\x97\xa0\x11\xaeq8\x1bX\xad\x88\x03\xeb:\x8f\xc5o\xf1\x9e\x90:\xad9\x9b\xf4\xd9\x87=\x16\xe4\x19\xa5!\x8cx\x16\x11O\x9by`\xfc\xeb\xcb\xb62\x1f$\xdd\xc8&gt;\xdd\x8d\x8c\xc6\xf7\xc4f\x9b$[_\xf3\x14\xfc.&gt;EU\xd6\xa7l6\xdfD\xa3\xb2w\x80A\xf7zg;\xc8[\x933\x15(\x12\xb7\x19@\xdc\x7f\x8e\x97c\xba\xab\xd8\xdc\xda\xb9\xc0\xbfl\xa5\x11\xbb\x8e4^\x03\xef\xf47\xbf&#125;\xf7\xf5\x0c\xb2\xe7\xfb\xf3_\xf9\ni$\xa9\x86\x95\x12\xa9RC\xa3\xd2\xca\xca\xec!\x86\xb4,`\xda\x9b8\x9bS\xa6\x0f\x9e/&lt;\x8e\x8c\xde&quot;\xf7|w\xbc\xd2\x00\xabz\x94\xb6\xd0\xd4)\xb5\xf3\xe0\r\xbfx\xa0\xdf\xda\xa3x$\xe2\xfb\x98\xdc\x89\xe2\x81A\xb7-\xb7:c\xe2\xb6\xf0\xb1\x02\xf0\xab\xbeB\xcf\x9f\xc7\x10\x0f\x1aN\xffi\xa9\x86\xdc\xb0\x0f\x92\tv\xcf\x7fE\xf6U\xbb\x11Wy\xdbY*b\\8\x02\x00\x93\xda\x9d1*y\xc8\xc9\x0eM&quot;\xf7\xce\x9bFW\x0fkA\xa9\xacT\xb6\xfbB\xde3\xf54\xf3\x99zr\x95PB+\xbd4V\xfc2\xf1\tF\tR-\xec\xe5-\x10\x87\x9f\x1aX\xa2,\x7f.$\xcc\x9b\xdb\xe6\x18\xd9\xfb+\x00\x1cT\xcesV\x8d \x1d\xc1\xd7S\xeb\xeb\xec\x90A\x9cW\x93B(R\xf4\x1f\x90qW\xb8\x9f\xc5\x19q&lt;\xd2\x9f\x82B\xfb\xab\xb8xC\x8a,\xc6\xf8S\xaf\x8a \xd8g\xabEw\xa8\xd3\xa9\x95\x12\x86\x11\xc6f\xc6\x9e\xfdo6\x82&lt;\x98\x82\xc7\xee\x93\xecN\x8dC\xc0\xbb\x85\xea\x0e \xc7\xf4\x1e\xb4\xde\xa8\xff\x16\xa5R\x83l\x12t\x84\xc4xt\xe9+F\xa1\xd3\x9f\xfa\xa5\xb7rL\xbc\x12\xbe\xdf\xe2\x11\xd2\xee!?\xff\xab\x9b\x01\xbcn[\xe8fLS\xbf\x8f\x0e9\x92\xf0?\x1fx`\x0c@\xb3\x07b\xa4\xe0\xf8Np\xe5H\xb7!nb\x8e\x16-~\x89\xc0\xfd\xc3\xbb\xd0i\xb5\\\xd6\xbe&amp;\xc0J\x07j\x11\x1cJM\x06\xc0\xe8Lv\xed\x11\xf6X\xc6\xcfW\x0ep\t%O\x03\xf8\x94\x88\x8eJE\xfb\xd4Z\xec\x04\x8c\xf2\xa0qbu\xb8\xf6\xf9E\x8e\xa9d\x04\x0e\xfb\xd1\xe1\x11W\x18\xf2\xd0\x1d\xd8&lt;\x04\xb0\xc4\xcbU\x86\xa8\xd5\xc8\x02I\xaa\xd4&#123;\xca\xe53o\xb7\x0e\x94@\x88S\xed\x97\xee\xed\x17\x8cM\xa3X\x86Z\xecK\xa9\xe5o&#123;\xec\xbe\x08\x9d\x85\xe4\xcd\&#39;!\x1f\x93\xf6V&#123;h~\xb6\x86\xbaM\x07\x9e\xc7\xc0\xc6\xc8\xf3i#\xe1\xf9\xa0\xd0z\x0c\x880\x88\x9au\xb1PE\xcd\x10\xa3a\xa1\xbfd#j\xc2*&#125;&amp;\x85\xc5\xb0b\x94\x8a(\x81\xda\x12\xf0\xd0\xb2\x82\xccT\xa9\rv3\xa8\xc2\xf6\xf95\xf3\xe3[\x1cc\xb3\xedyN\xfb\x8e\&#39;\xc4\x19\x82\xe4\xec$\x13D\xd6,K\x01\x10g&lt;\xf1_\xf2M\xf0\x84\xb8\xf0m\x0c\x08\xb5e\xb9\xb6\x8bMM\x8e1j\x82\xe2\xcb\xd5\xd1\x04\xa7\xaa\xbf\x98\x85\x833v\xd7\x16\x13&amp;\x99:0\x08\x8d;u\x7f\xc2V\xd0\xa51&amp;\x94)\x0b\x08\xf2\xc1\x12\xd5K\xeb\x0ff@\x14!\x08\xad\x04&gt;\x11\x00&gt;\xca\x18\xdd\x00\xf2\xd5\x85\x8f0\xf7\x80\xba\x0e]\xdauT\xedOn\x171\xa9\x86yQ\xebTa\xdd\xfc],\xaf\x16\x7fJ1\xfc\x7f]&amp;\xd0y\xef\xd2&#125;[\xfc\xc7+\x9d\x18\x11(\xdbT\x18\x18d\xe2\x020aQ\xc2V\xe0;\xae\xf1\x8d\x88\x96i\x01\xf2G\xa0C\x96\xccz\xad\x0fr )\xff\xb9\xd2\x01m\xf5i\xf7\x82\xc3\xb2\x83\xd3 \xb3\x0f\xc3\x06\x198T*\xaa\xa3\xfe\xdc&quot;*\x19\x03\x0e\x19S\xa1\xb0j\xe0\xe8\x14\xea\xab|d\x02\x08z;N\x13 \xf9\xd3\x99DZ\xa6u\x94@\x08\xf1\xc6w\x03\xf2\xd01 .b\x85U\xad\xbb\x96\xe0\xe4\xfbzp\x83FH\x83\x067\xb6\x11`\xba\x99Z]\xc2/x~\x86r\x1d&#123;\x14\x8d\xb2D\xc58Fy\xaa\x11X\xc0:\xe6\xe5\x06\xc22g\x84\xff\xc8\xd6\x97\x0e!\xd8@$\xdbg\x0e\xc0\xbf\x94\xf85$\xce\x8d\x03\xfa\\\x16\x92\xa6\x93\xd5\xfa\xda\xdf\xe4\x830\x1cv#3\n\xac\xd3\x08WmV\x06\xdf \xa7^\xc6\xe7\xdbm!\xf5\x9f6\x05\xac\xc2BJ\xabt\xb7c\x02Q\x96:\x83\xa7\x11\x0c:I\xd41\xc5\x8d3\x94\x88\xac\x8e\x0f\\\x84\x15\xe7\x98v\xf7\x11\x98w\xfbUGLT\x05Y+\xc7\xc3C\xc0Fn#\xd5\x8d\xc5\xb6\x88\xd8\xa0\xc7\xe9b\xeb\xc5\x15u\x90\x95F\xa9\xdaF\xd7S\x96\xf0\x08\x11\x1eBsYs\x99P\xcf\xa4,\xbe\xc1\x1e=\x97\xfd;],\x99\xbc\xe3\xee\x97z\x98\x00\xa7\&#39;W\xdd_i\x7fI\x95\x83\xb1\xf6dWq1\xefQn\xe5\xc7\x96\x90\x92\x8bW4!.y\xab\x08&gt;\xe0(&lt;@=\xc1\x81\xb8\xfc\xdb`\x0b\xa5\xed\x0b\xaf\x1dq\x8b\xe1~&quot;\x9f)\x827\x8aO\xab\x918p\xba\xe7[(\xaa\x14\x0e\xa9\x90\x8a\xec\xd2\x0fYK\xde\x1e\xca)i\xb0L\xac\x12\x00\x8a/x\x1b\x9d9=7\x06\xc9\xb8\xb8&lt;\x99\xef\x80\x9a\x93&#123;\x87\xa6\x91\x86\xbb\xebW\x0b\x0c\xfa\x9c\x9c&#125;L\xbc\xf5oj\x0e&amp;\xddy.3\xf4e\xc2\x8a\xc1&#123;\xea\xc9s\xd6\x0e\xec\xbe\x1a,4\xb7/\x97\x80\xea\x85\x9bP\x88\x8d\xa2\xd1\xb1\xdd\x12=\xd22\xb6%s\xba\xb8\xc0\xcb\x85\x12\x1d\xe2H\x9e\xe6\xa2v&#123;\xbaQ&quot;(j\xb9\xab\xcd\xb2\xd7\x88\x05\x83ix\x8d_k\xe6V\x0f&gt;\xd2\xfa\n\xccv\xe7w\xf7FE\xcbMt\xbaw\xddt\xe5\xddK\xd9R\xeaV.p-\x9eB:\x0b\xcdY\x0b\xd9\xf3\r\x1e\x13\r|\x01\xe4\n\xc0\xbb\xfdv\x94\xf7\xe1=\xe8\n\xdc2g\xcf&amp;\xc2\xff\xb6\xd4\x91\xa2\xc7\xec\xd3L\x07I\x11\x18\xaf:\xb5)^\x1cNO\x8e\x04\x01nW\xfac\xbe\x00\xc0\xd7\xc4U\xbf\xa4\xf6\xb2\xb4\x07\x1dW\xedjO\xa8\xb6L\xa6\xa9\x156\x8b\x14\xb6\x83\xb9h\xcf\x06\x8f\x00\x0e$4\x88\x94\xbd\xaa\t\xab!\xd5\xff\x94\xef\x1c\xefY\xb0`_\x95\xc2\xf1\xc4\xf2\x83O1\xb8)\xde\x89\x06\xdam\xc8\xd4\xf8\xd9\x13j\xbdT\x04\x07\xb1y&#125;\x9a\x98F\xbe@\xb1\xfe8\x19\x0c?]\xbeA\xea\t7\xb1A\xb6P\xf7T\xa4V\xa9\x14\xd36\xa1\x95\t\x81\xae\x7f9\x8a\rV\xc3\xaf\x0c/C\xac\xd7\x9fe\xedm\xf3\r\x8a\xa5\x0b$\xe3\xd5(\xec\x81\xe1\xae:\xd6\xf4\x9cXY\x9e\xe5\x81\x0c\x1c\x0b\xd5\xe2\x91\xb84\x03[&quot;\xfda&amp;\xd6G\x85b\xf0\xe6.\x91\x96\x90\xb9\xd9\xd9\xa0\xd6\x98+&#123; \x91\x0e\x88\xfcH\xf7Y \xe8\x8fZu1\xba\x10DKt\x02p^\xaa!W\xdc\x9a\xf67[J.&lt;\x9b\xcb\xd2\xc0\x9e\x97|Y\x9cS\x03\x87\xb2\xca\xa0\xf2\xc33q\n`\x83x\x96H\xd5\xdc\x82\xbe\x98\x1bC)&quot;\xc0C\xfb\xb7\x07k\x8c\xfd\x18f\xcf\xf2\x88\xe5\x10\x16_\x84\x13E\x0b\x92\x80W\xcf\x97\xb92\x122\xbf\x11\x19\xf9)\xa4\xc8\x87a\x14\xc0c=N\xe0\x8eu,\xbc\xd3\xf2\xfa\x85\x1e\x15b\xe2\xef\xa0\xa8&#125;\x8d\x9e\xa2\xfcZD\tI$\xac\xeeA\x12@\x9c\xfa\xf2J\xf8\\\xd7/\xcc\x84\xbb|K)\xbb\x9cv\x15\xf3\x9f\xed|\x97A1\x11-\xd0\x9a[\x05\x85\xc5d&quot;\x05\x8c\xef\xea8\xea1\x80E\xf5\xc29\&#39;\xfcJ\xff\&#39;\x03H\xa6\xc0\xe1\xb4O\xc8\xa9\xf6\xe2,H\x1bou\xcc\xbeR-\x13\n[\xfc\x04m\x14r\\\xf3*\x1d\xfc\xbeq\xaf\xaf\x0c\xf6V\x05A\xa7\x92\x15\xb5f\xcf\xcd\xe6\x8c\xfa\x05\x11\xf3\xfeO\xe1$ \x84\xd2\x80\xbbQ:\x07i`M\xeex\x0e\x0bV\xb6\x0c\xf8&quot;\xc6F^\x94\xdc\xbc\xe4\x19_&gt;&gt;\x07\x97\x0f+6\x01\xfe\x0b\x824&#125;\xb4ka\xb9\x03]g\x1d\xd5\xe4mqGx;\xca\xddiC#4\xa5H\xd1:\x06\xc6]\x8f\&#39;4\xd5\x8fN\x86\xbe\xdf\xeb\x9f\x98 \xbcr\xe1v\xf9\xa6`\x1d\xae\xf9&gt;\xb6|\x82B\xee\x86\xd4\xae\xee\xe9\x93HS\x87\xc1\xc6@;\xdfT*\xf1\xd2\x1f\x0fA\x01\xb5\xa6S\x08v\x10\x07\xb0\xces\x895%\t\x9bh&amp;\xa2\xd4a\xf8\xde_\t\x0bb\xbb\xa7\xed\xd7|\xc795t]\xb7\xd3\x87u\xfc\xfa\x03\x86\xdbFg\x11\xaa\xfa\xca\xf8\xe1\x05\x04\xd9j\xce\xcfqb(\x92\x7f\n\x17CG;\xc6\xaaD&#123;\xb8\xbc\xb7\xec\xd8\x0e\xe42R&#123;\x8f\x861\xcb\ti\xfb\xf7\x89n\xbd\x02\xce\xef\x1b\x1e?C\xe2X\x9e!o\x1d\xfe\x9f\x91N\x9db^l\xeeX\x93do\x0e\xc9\x0b\xfa\x05\xa5ZoU\x86\xbd\xfc]\xdb^\xd1)\xbe\xb5\x04\xf0\xf3\x87\xb9\x8e\x8a-=&lt;\x9f\x0f\xa3\x1c?n4\x8d\xa8\xd2)W\x80l\\\xef-%\x9f\x86k\x8d\xfd\xca\xac\xa6\xf9\xf6$#S\xf9S\x9f\x1f*\x8be\x9cU\xbdi\x837At#\x02\x85n\x92\xd0\xdb*\xdf(\x10\x18\xc4\x8c\xd1\xc8\x07w\xce\xae\x95F\xba\x9b\x1e\xd8O\xff\xbd=.H+\x82\xc5\x17\x0c\x1b\xc2r\x04$\x07\x8f~\xe0j\x10,\x96\x0fW#|0\x0b\xdb\x9aE\x817\xc2Z\xc5\xc0T\xef-\xa9b\x1b$\xa4\xe7\x97\xd8\n\x85\xf4L\xe3\x83\xa1\xc8 \xa0Y\x1f\xf9FE\xb8\xa9.\x02\xc7\xdf\xd2\xd8f\xdf@\x10-\xd7\x83\xb1\xdeV\x1b\xd2\x16\x1a\xf6F\x1fP;\xd3M\xcfs@N\xa7\xe9w\xac)\x85\xd4\xd2\xcf8`\x82Ev,\x05\xd1\xe6X\x85sU\x91:\x0c\xab\xf5\xea4PTQ\xe88O|\xaa\xc7\x91\xb2\xc2\xe5!\xfdz9\xe0GZ\xd6\x15\xb1O\xca&#125;\xaf;\x18&amp;\xe6\x8f\xd3*w\xbc\xe7\xb9E,P\xe8\xc4N_\xc7\x92_0\xa3\x98\xd2\x8c\x07\xe5?\xdc\x12\x85\xc7\r\xc0\xb6:\x06\r\xfd\xe0\x02\x9b2\xf4\x8cH&#125;\x86\x9c\x01[\xc1F?\xb6\rT\x81\x15\xc8\x802rKJM-\xb8\x12\x9d\x92\x15S\x8f\xe3\x92\xfa\x1e\xc6\xfc\x8b\t\xb0&#123;W\xbd\xf3\xd4\x0f\x0c\xe0O[A\x8e\xa91~\t\\|\xda\x18.\x0c\xeb\xbd\x06\xc3O\x1b_\x04\xe9i\xb84\x94&amp;\xd91r\xfd\x12rHB^\xbf\x02&lt;\x93\xf9\x11\xf2N\xa8\rfv\xaa(2\xe5\xa5\x97\x0cD\xef&lt;\xc7\x08\x1a\xfe\xee\x1e\xae.D\xde\xdd\x8b\xb2\ru\xcb\x16\xd7i:\x0bk]\xdey\xf8&lt;.\xf5\xbf\xee\xd7\xe6@[\x97&#125;\xb5-CQ\xe8\xbaA !?tj&gt;E\x95Y\xc9\xb85]d\xd1 \xef\xa7\x9e\xd1\xd2AQ\x9co`\x0b\x13m\xc8C\xfa&quot;\xa3\x7f\x07\xc0D\xa5\x97\x85\x1aX4\xe9\x91\x05BZh\xde \xd7\x05\xab+\x85\xdd`\xf2\x07\xfd&amp;\xa3\x1fV4\xfb~\x91q\xff\xccO\x9a`\x0b\x82\xfb\xef\xfb-x\xbe\x96\xa5F&quot;\x0e\xc0\xcf\x84&#125;\x81\xd3v\xf3\xedQ&#123;\x82\x82\xad\xb5\x9b\xd8zZ\x83\xb4L\x03\xca\xa0D`Z\x12\xd4M\xa6\x17\xd4\xac_\xbd\x1b\x9c\xd4b\xfc\xdf~\x9c\t0Q\x82\xd60z\x13\xac\xd2?\xdf`\xd4\xca\xad&quot;\x01\x87\xee\xc1\xb7\xd8p\x8a\xcd(\r\xb3\xb0\xbcl\x00\x80-\xb5ey\x8d\x99\xafs\xa5\xb2\x15\x11s\x11yk\xbf\xceji\x18\xe4\xb7um\xe2\x19~yl\xac\xdb\x1e\x99\xc4Ul\xf9B\xc2\x07\xfc\x0e\x04\xa5\xed8@\x01\xdf_\x1c\xaf\x84R+\xab\xbc\n\xb9\xf4\xc10\xe9&gt;\&#39;Z\xb7G3Y4\x802k\xb0Z\x15\x96T\xfa\xae_50ze\x03\x01\x9d\x0b\xb4d\x14$\xe0\xc1\x1f\x05$\xb0\xc1T\xac\x05\xcb\xea\x95\x99\xa5\xc9\x10\xbf\xc6\xbf\x93\xa9\xb3\xc7\xf2\xf4\xa5X\xbf,\xf5\xf2\xf3f2\xe3RL\x85\x01\xea\x94j\xfe.9\xf7\x8d$\xea\x80\xb2*w\xeb\xcf\x05@\xbe\x94\xcb\xc7\xef@`\xc3\x90:q\x14\xe6\x95\xfdJ\xb92\x8a\xb6\x880\x1c-\xe2\x8b\xf3\x10s\xc2 2\x01\xa4/\xc4+:\x8cZE(n\xafB\xe2\xed\xb6\xde\xa2m\xa5\xee\xeb\xa8\xdd\xad\n,/(s\xf0\xef\xc5\x1fl\x04b\xfaZ\xcd\x8b\xf7\x85\x8c+\x1d\xac\x8fBI%/^&gt;f\x18\xdfO\xb35\x90\x8b%\x01\x19\x8bz\x96\x14\xf8&#123;\xc5\xd2qC\xa9\xd7\x9d\x81_)u\xb7\xa2\xb4_\xb3\xbe\xd2\xa9.\x96Fvv\x95\xe1\x9b\x1eq+\x16p\xb3\x16k\xa1\xe4V~Yr?y\x9d\x08\xd2\xb9i\xd2\xab\t3\xf7/P\xe4\x17\x9d\x97\x8a\xf7\t\x98R\xee\x16V0;\xc9\xb8\nh\xb6tdn\x14\xc0\x83\x04\xf2e\xb5!a;@\x03\xae2\xf33\x86s\x9c\x93\n /\xdb\x18\xca\t\xf4\xbdZ\x15F\x900\x12&lt;\xd3&#125;\xb5\xe9\xad\x17\xf2\xb9\xed?\x1bM\xd3\xa0\xc2mPG\x1a\xc0Mj\x94&lt;b@O\x03=\xde/o*\x97J\x90\x94\xb7\xc5\x98@(\xd2x\x8b\&#39;\xe1\xb5\x88\x08\x83\xa0e\xa8\rh\xc5\x01(\n\xf4eq\xb1\x049^\x14\xf3&lt;Z\xf5\xed\xa5\x9b\x9b\x82\x95\x8ddh\xcb\n\x94\x08\xc7\x92\x15\xf9\xaa\x8b\xef\xf3Jp\xb3\x90#\x0e\xbc\xed\x7f\x95\xfa?vA8f\xcc\xc7M\x98\x8b8\x1es)\xcf\xc6\xc0\xffi\x96TOcF\x1a\x16\x8d\x84\xbe0\x97\xd0\xbd\xa4\xe0\xa3&lt;\x969\xe9\xfc\x0b\xaa\xb8\x841n\x13\xd11\x95\x04Q\xce\xbaF`&gt;\x1aK\xfaM\xcd\x04&amp;\x9c\xb3(\xf0\xbd\xf02\x8a\xec&gt;Y\x9c\xa0\x03\xc9\x0cu\xc4\xc1\xc8\x1a\x1f\x95\xf8\xda4\xf7\xcb\xe7\xe7\x97\\\xd5\x9c\xd8\xf9\\\xcf\xcc\x93\x83\xb6O\xbfH_\x81\x8b\x90&amp;,\xf4\x10\xe0F\xb7Q\x19\x02\xbbG?\xca\xa0mQ\xf8\xb32\xaa&quot;\xe5\x0f\xf8\x00\tJ\x95\xaak8\xf0t\x06\x9f \x13\x9a\x06\xba\xfdp\&#39;]m L\xac\xfc\x9d\x035.^\xfa\xc3\xad&lt;\xf8\xeb\xa0\xd3\xc5\x02v\x02\x8aW\x12c\xd2\x85\xc7\xcb\x83\xc2\x86g\xfc\x11\x979\x87p\xde\xec\xfb\x0b\x1c&lt;\x04\xe2!\xe7\xed\xb9\xbf/*\xdb\xfe*\xb1\x9a\x9e\xa7\x00q\xf6qm\t\x8d\xeb\x11DQJ\x0e\xfa\xa7yW\xacz\x0f\x9d\x8b\xa0\xaaH\x08&lt;\x82\x18\xd7\xd4\xd1\x88\xc5\x14\xa2\xb0\xf6\xd4\xb1&#123;\xe2\xdf\xc1\xc2\xec\xa9\\=f\&#39;\xd4\x92s\xcd-c\xe9\xc1\xad\x8d\x1b%\x88\xa2\xfa\x9a?gb\xb8x\x9b\xcc\xf9I\xcc3&amp;\xb57\x86\xaf\xd2p]0\xbdP&lt;*\x02\xed\xf4\xed\x9dV\xeb\xf3\xe5\x81O/\xc3\xac&#123;\xfc\x80D\xa4\x820z\xd4\xca\xb4\x95\xa01-\xe7#\xbb\xf4\xed\x91\xde\x17-\xe0\xbf\x17\x7f|\n\xed\xce(\xfa:\x19g\x96\xc1z\xd8Bpm\xaa\xfa\xc4\x8df\xab\xc7\&#39;\xc3\xf3\xf7az\xb8EXIMGN\x19\x1f\x82[\x8b\xadY\xd43\xce\xe5\xabf\xb5\xfe\xd7\xf0\xec\xb1\x07\xb3\x1fZ\x87\xf8o\xc5\x8cJQ\x90E\xcd\xd7\x86\x80\xf3\xf8\xab\x9c\xddeh\x87B\xce\x9b\xf2\xe7\xed\xf1`\xb4z8\xe7\xe4\xc9\x8b\x8d\xaf\x11\xa4-78\xc0\xdce\xb3\xfa\x11i\xbd\x900\xd8x5M-\x0c\x07\x06\x07\x9f~\xc4\x05O:\xe0\xf0\xfe\xd4\x03\x17\x98\xb3.\xd4\x8e\xf3\xc1z\xe5\xe2%\xfc \xd4\xf7\x10R,\x92\xa5\xb2\xbdUn_I\xbc\xf1\xd3\xdd\x14\xb4\xe8\xc2\x8f\xc6\x1aH\xd5\xa2\x1f\xfd^\xac\x05=\x0b\xe6z&gt;\x98\xbd\xc8\xd3\xc7\xfa\xd5\xa3%\xce\x00\xc0?\xb8\xe6\xfc\xa7\x16\xf2\xa8?\xf9Q\x80\xb63qFc\x8a\xabR\xb3\xc8J\xd4\x19\xa25\xdb\xf5O\x14\xe7\x1d\xf4\x07\xebN\xc7\xad\xfc\x96\xc8\xc0xd\xea\xaa\xa7\xd2(Gu\xea\x93:\xfe^\xd2\x0f\x82j\xf7\xd4&amp;\xb7\x9c\x8a\x1f\xb3\x81\xd2Xp\xf2\x10\x9f\xddmt\xe4\xe1\xf9H\xc2&quot;s&#125;NC\x91|\x8aI\x0e\xd5\xb0\x14\xef\xda\xfe\x195&quot;\x97\x95\xc6WO\xbe\xcf\x86\x8dk\xf1O\xaf&quot;\xb1\xee\xef\xb1\xe0\xa4&lt;\xd1k\xf3\x17\x82\x136\xcc\x01\xf2\xc8N&amp;fv\xf0b\xaac].\xe2\r\xa7~wu\xce\xdb\xce\x13\xebM\xf9Fm\xb5(\x8b\xc0\x8bM\xea\xe6\xa6tL]\xcb,o\x06L\xe8\x1a\xfa\x7f.\xb8\n\xe1\x90\xac\x9b8\xc5\xd6\xd1\xa6\x191\xe6H\x08\x02c%\xa1\xee^;\xa5\x80cw\xf1\xd6\x8et\x94\xa7\xaf\x1e\x8cF\x8a\xdc\x1bHYK/\xac\xb2\x97\x92\xe9\x07\xb4\x80\xda\xd2\xdd\xb4\xee\xf6\xf3\xbb\xbfa\xa0\x06\xf2\xc2\x97\xe3\x1c\x15\xe9\xd0\x10$M&#125;\x9f\xd9\xae\xc3)W\xc2z\xb2\xd9L\xcf\xafy\xf4\xe8\xd6n\x8aIh\xe6\xb8\xe7[%\x04\x89\x81\x1c\xea\x94\xb0&amp;)\xffz#\x9e\xa7\xb8O\nh\x18\xca\x1a\xdd\xe1*b\xc9\xb6^qRqW\xcf\xe3-h\t\xfa\x15\x84K\xb3H\xe3\xf9%\xd5\x1d\xe6\\\x92\x10F8\xb9\x165\x90\x8aFc\xa3\xbc\x91\xae\xd3\x06\x93 \x90\x8b\x1ch/g\x99\x91\x87\x8a\xafv\xecn\xa4\xb0\x02[\xc4n\x0e\x0e\xc06f\x0b\xc3r\x99&gt;\xa1\x12:\xca\xa1l\xd7\xbadm\x84\xb4\xc6\xf3m\xb3E\xa0\x95u\xf1h\x8b\\\x96H\xf4\xffr&#125;\x17\xf0\xd2\x0f\x94\xcf\xbe\xd0\xa7\xc09\xd3\xacA\xb2&amp;r\x19H\x8ce\xcd\x9e\xae\x8c+\x00;\xa3f\x8f\x92\xe1x \xa3\x10\xe6\xda\xccw\xfa\xd5Bq\xa0\xadejN\x8a\xb4\x00\x06\x85|u\x86\xf9\xdc\xb7\xb0\xce\x04q\x99=\xba\x1b2m!z\x12J\xddD\x10X0(\xc8\x9e\xe3\xa4\xd8\xf8\xb4\xb58\xa8\xdc\xec\x96\xe0w%\xd6U(]\xb1\x88\xd0\xadf\xc5xgK\xda\x1d\xe1\xa4\x85\xd9;N\x19m\x81&lt;s\xb8\xdc\xa7t\x80\x16\xb7o\x94\xc3\xd4\x06\xf8\xf2\x19\x03TVG\xb3\xe6\x98\x96rQwuh8\x8d&quot;\xf2X\x05\x11\x8e\n\xbd\xaaK\xab\xff&lt;\xe7\x0e`\x9f \xfa&quot;?H\x8e\x9c\xd0\xd7\xf1\x9c\x97W\x8dE\xd1^\xc8\xe2*g\xd0I\xed\xe7\xe6^\xb6\x85KH\x9a\xc7\xac\xef\\\x1e\xab9+tMC\xd2m-\x96NI\xa2\xd3:l[\xe3\xc5\x03Z\xcb\xac\x00Gk\xc8\xe5s\xbdF\x9a\xcd\xa2\xa5\xf2#+H\xed\x86D\x13;\xa7\x9dYk\n@\x8c\xb3\xbe\x91(a\x99&#125;c\xac\x18Ok\xfd8\x83M\xe4\xf4\xde\x9cP\x1c\xdb\xcc\xa4b=\x87\t\x83W\xf5\x9c\x87\xea!\x8a`q\xd2 M7\x12\x13\xe3\x13\x14/@\x8b\x01\x04\xa8SS!\x9b)\xf9\x91c\xe2?s\x92\x034ad\x9c\xb9 g&#125;/\xc3\xee\xe0\xb4\x8bi\xa3&gt;\x93W\x11\xc2\x9c\xbeuVl6\x89\x8e\x98\xdf1\xe5\xf8(_%k\xcd\xd2\xfa\xf9jS\x83\xba\xeb\x89\x8b\xf26\xe8\xe7o\xb4\xbd\x13\xe3\xac\xb0\xb3=D\x18\xac~O2G\x82\xe1\xea\xe1\xd9\xb0\xb4\x1f\xc5\xdfC\xf4\x9b5Q;\xbc\xf9\xa0\xba\x7f\xe7\xcbE0\x93v\xe8\x8a\xc7\x84\xe1&amp;\xcf9pk\xb9|\xc1Rk?\xbdx\xed\x8c_C\x01\xae3\xc1i&gt;\xc5\xd9k6\xb7X\x01\xfcU\x93n\xa9\xa9\x14\xfa6\xde\xcc\x95\xf1\x01\x07l\xe9rK\xb4x\xdd&gt;QJrj\xa7\x1d.B\xed\xdaLU\&#39;\xe3\x88\x96&amp;O\x8cc\xee\x7f\x08R\x10\xdf^\xbe\xcf\xbcI(#~\xa6&gt;VX5\x0eD\x83\&#39;\xe4\x80\xefK\xcb\xb5\x1f#S\xcf\xac\xb1\xa6\x91\xaa\xc5\x074x\xa9\x10\xc9\xea\xa9\xc4\xf4|\xdc\xb9|$\xc18\x04z\xa1I,6t\x04e\x07\xfb-\xeeiM\xf2`\xe1V\x01\x07\x02\x13\xadyJmH\r\xbch&#123;LO\x1f\xcd\x16x\xf1\xb7\xdf\xc0\xb9\xa2B\x92\x0f&#123;\xf8U^\xaaT\x94\xb8\xed\x15\xd5\x1a\xde\xdf8Mj\xef;\xd1\xd7\x08\xad\x1b[&lt;\xa5A\x80\xac\xee]\xb3\xe5~;\xe0\xf2\x072\xe4\xb4\x9b\xff\xf12\x96\x1f\xa2^\x0b\xaf\xb5U\xc8!\xb9_\xe4\xb4\xe7vn\x82\x98\xfa\x8f\xdbwa0\x8dK\x0c\x902\xd2\x1e+\xe0\xf4\x93\x88T\x8d\xad&gt;\x8d\x7f\x92\x1c\x80Q\x0f\xf6\x8c\x87\x80\x87\xe0\xb91q\x80 &#125;\x05\xc0[\xa6\x07g\x8e\xe3q1\xdcF&#125;hRs\xfc7L\x86u\xe4\xc7\x12\x9d\x0f\x07\xdd\xd1\xe5\xc5\&#39;:&gt;\xef\x9bWu\xa9\xf3\xaa8\xbb\xc0\x9a\xfa0&#125;J\x9c(\xec\xcd\xc3oB\x8e\xe13\x02\xfbYn\xffw\xc8\xc4\x7fh\x19_\xc2\x97\xf0\xa1\x98+\xf7\x03~C\x8b\x8c!\xaf\x82\x92\xa3\x04\xd7D\xc2\xe0\x0b\x0bI\xc7\x02\xcb7`5*\x1c\x19\xe5.\xd8&amp;\xdd\xc7w\x1a\x8e4\xdc\xe1\x90B|\xbfwq\xa4&gt;\xb9c\x9e\xaf\xa1\x83\xea\x92\x98\x19\xac\x8f\x8cF\xa0\x9d&#125;\x9f2b=\x94\x97\xacr+\xce\xd8g\x88d\xcd\x87/\x90\xf0\xdd\x9d\xde\xf8\xee]c\xafE\xb3\x86O\xce\x05Y\x90\xc8P\xaf\xe3\xafm\x82\xfeg\x10p\x9bG38E\x8d\xaf\xe8a_\x99 \t\xa3\x18\x1es\xdc\xccN\xa0a\xed\xe6\xe6\xb4T9\xdc3rK\x13&#123;\x0c\xfd\xdd\x90\xee\x14\xea\xb9E\xd5\xada2\xe0\xf5o\xcf\xdf6\x8a\xcb\xf6\xa9`\xfb\x02%\x89\x1aCc\xde\xdb\xc0\xf6q\xd0\xd6\xe43D\x1a@\xf7\xd5\xae\x17/\xb9!\xd3\x9dSF\xb7=\xfb;\xee&#123;C\xa8:\x16\x04\x05\x9fox\xd8\x15\x8f\xcd\xd2x\x19\xa8\xfcB\xb6DBu\xb0EXP\x80B\x97:k\xfe\t\x13$j\xde1D\xacY\x0fl\xe4\xc1X\x8e%\xb4\x91\xb4\x9e\xb7\x1b\xa6\x8e\xcauWY\xcd\xc1\x8d\xd3\x16])\xb2r\x85\xdcUs\x9e\xdc\xb50\xb1\xb7/\xba\x1f\xa4\xd0\x010=\xb7\x1d\xe4R\xce\xa2%\x02\xd2\xd2\x19=\xdd\x8f\xe7\xe1\xb4\xb9\xad\x92\x8f\x95iD?j,m&lt;\xbb\x90p?\x97\xb3\x11\xa2\xcb7\xa2\xdb\xd1\x9c\x10\xbf\xa1\xc0\xba@]\xa9\xb7\xa4@^\x8e\xdc\xd4\x98\x9e\xb0\x8c./\xf9F\x98oo\x92\x91\x1a\x12-\tU\r\xcc\x04j\x9a\xcbS\xfe\xee\xa1q\xfd\xf0\xc5m\xb7%L\xb1%L\xdc|\xfaPn\xd8pH7|\xb2&#123;I\x17\xe6\xdc\xba\x1f\xd8\xa5\x07=\xf3\x0b\x14\x97Y.\xaf%n\x7f\xb0\x19\x0e1u\xcal\nRV2\x85u\xb5\xa2\xb7\xa2J\xab?\x89\xe0^N\xb32\x9c\xc1Z\x13\x84J\xb63 \xe1\xd1\x85\xd6\xcf\xbb\t/\xcb\xbb\xc0\x8b\x9f\xda\xf6\xf2#0\xbe\x9f\xcf\x1dB\xd3\r\xe6Qs\xaf\x97\x16&amp;\xe5\xc1a\x1f\xe2L#Sh?\x9f1\x8fi\xc9T\x82\x8b\x9d\x8b\x83w\xdbz\x8f\xb1 ?K\xfd\xc9\x16\x96\x9e\x06\xa8\xaa\xec\xd3\x07\xd4\xea\x90\x11\xae\x1f\x0f\x13w=e\x95m\xdf\xfa\x1dc\xe4\xcf0+\xa3\x00=[dAc\x92T@\xc0\x04D\xb9\x7f\xaa\xb5m\x81A\xcf\x98F\xeb\xe7\xd9W\x84g\xa3\x8b\x80\x9a\\\x0eZ\x94e\x10\x94\xb0\xb5\x15\x1f\xa7\xa8\xf0\xfe\xd3\x03O\xbc\xacU\xa3\xc3\xfd]\xa7\xae\xce\xd3\xad\x14\x80\xc5*\r\xb7\xddX\xef\xc1\xac\xd6C~\xe0&quot;\x8e\rC\xf7\xa0\x92\x1c\xc0rb*|\xd7\x83\xaf&quot;\xec\xa3\xab\xc6G26D\xcbe\xdb]\x90\xea\x92\xa1\x01F&quot;OL\x9c\&#39;\xa2\xb4\xfbg0\xb42\xc4\xb5\x12\xe9\xe9\xa3\x84\xc7\x05\x03\x14\x0cUA\x92\xdf\x05\x9d\xff\xb8\x8e\x80\x12\xceL\xfb\x03jW\xe0\x90\x15\x14\x82S\xaf\x10l\&#39;\x02\xc3\xa0\tK\x13\x80\x7fQ=~\xca&gt;\x08\xd0\xcf\xd4\xbeNW\x06\xb1\xd82\xe5V[\x96?Xbs%L\x82\xce\x05\xcb\xb3\xf2\x82\xb6\x9d\xb0?\xd7\xf6H5\xc9\xbd+H\x91\x7f\xc7\xac\x9d\xeb\xb0\xa0iL$\x93\xe9j\xda\xfbV\r\xc8Y\xaa\xfd\x99\x03$G\x86\x89G\xea\t\xf0\xbd\xe8p\xc3y\x96zr855]L,\x9e\x00~P\xfax\x8d\&#39;5:\xed\x840\x9dwP\x17\xc4~G\x81\x86\x89\xa0=\xcaw\x08\xbeA\xdb\xc6a\xcc\xce\x90Ey\x16i\x9d\x12\xde/\xf9\xa6\x11S\xbb\xf6\x90\xdal\xe2\xb0\xf7.EW]Le\xd0:R\x10Y\x07\x84~f\x8c\x8f\xe3\x1d\xeb\xd1\xebqOcWV\xc6\x7f\xd2\xa0\xfa\xd1\xf4\x9c\xf6\xee\&#39;w\xa4f\xac\xe1\xe9\x97\x86!\x97\xce\x7f\x02^\xda\xd1\xda\xd2f\x86\xff\x9f\xa3\xa8!\x96O\x9f)\x83\x98_\xf8y&#123;S\xc8lr\t8\x0b5\xc2\x06\x1e\xd5A\xd8\t\x83\x1b\x8bQ0\x05\xa8\xbf.\xdbFQ\x9d\xc5\xa5\xf0\xc1\x81\xb5J\r\x12\x00L\xb0\xf1\xeb7\xb4r\x16&gt;X\t\x9b0s-\xd1RC\xa9a\x9d#Wg\x15\x9c\xb3N\xfbS\xc2[&#123;\x13\x8fx-e\xdf8\xa1\x96\xab\x0e\xc7\xfd|\x96x\x97\xd1&amp;\x1b\xa5\x95\x08\x95G\xfdJ\xa0\xfb\x90ejB&#123;z\\ZOH\xb21\x05w$\xc5\xae= 5\x88!\xcd\x86\x14N\xad\x92\xf3tR\xad\xee\xf5\x90]\xf5P\xee\xa3\xab\xb8\x16g1w*\xee\x13\xf1\xac\x89\x9b\xcb&#125;(Jv\xf2\xb5JSF\xb2\x9c\xac\xe6?\&#39;`\xde\xc9\x02\xc1\x0fr\xf4\x8e\xd5\x87w\x14\xab\x07\xd0\xeff(\x8e\xbce-\xe0\xed\x9aR\&#39;T\xe1\xf9\xe8\x97x\xfb\xa2\xd8\xdax\xd2q\xbb\xe0L\xf2\xfc@wWD\xa3\xc3:\x02\xb8N\xb8:F\xe7t\x14\x9e39Y\xcd\x1c_~\x17\x89\xcb\xea\xef\x86$\x0fg@&gt;\x95\x05\x024k\xb0\x8b\xabQ\xbb\x1b\xf7\t\xca\x9e\xa6G+\x9b\x03\xebc\xbb\x9b\xae\xac\x81\x0e\xb9\x9d\x97L\xfbg\xff\x86\xea:\xd8b\x98p\x08\xf1\xef]\x7fO\xcf|\x06\xbfR;\x9d\xf6\x8e\xa3\xac\x1d\x18Bj\x12e\xd0X\x7f\xd3\x1cb&gt;P\xff\xc8\xc0\xf9\x90\x85\xe8\x08\xfc\xedxw\xd5\xf9\xfb\x90\xa4\x80H\x8d`-\xac\xa7\xda\xebt\xdd\xac\xf1*\x15\xbd\xcep\xc9\xeb@\xd1\xcd\xef\x1a\xe6\xac\xf2g\x8c\xf0\xaeC@\x01s\x04*\xf1\xa5\x80\xbf\xf7\x11\xcd\xc10Jg\xb4\x10\x9a\xeb \xc3\x950C\x03&amp;\xd2\xc3\x13\xee\xdb\xf8\xdd\xf9\x03\x90\xd5\xb6\x80\xa7\x17|\x80\x08:\xd8\xae\x16\x19\xa4[\xfbs\xc6\xa1rlL\x94\xf4\xf5\x08M\xec\xb7\xc1\xe8,\x7f\x13^\xf0\x18P\x9a6qj\xbd\x96\x9d\xa5\x91\xe3\xf5\x0eD\xf0\x13L\x17\xb5\xcf6\xba\xa4\x0b\xe0\xadZ\xa1\x1eF\x98\xee\x82\xb0V\x7f\xf0|\xd6&#123;E@\xf0\x02\xf5I\x08S_p\xb0X@\x07\x18\x8f\xb3\xc3I%\xfar(\xb6\x81\x8d_\xee\xee\xe4N\xe6\x9c&#125;\x1e\x1f\xa0a\x92\xcalv\xd1]\xe9N\x8b\xeb\xc8\x1d8p\xdf\xc9a\x1a\x0f|aN\x87\x12Ld\x00\xebl=\xfb\xad$D6\x1e\xe9v\xe9\x18=\xce\xe9\x8afd\xa8\xbey\xfe|\x9f-\xa4\xf6\x06\xac\xe4\x95\x0f\xb0\xafO\xb7\&#39;0\x0e\x85\xac6\x98\x1c&#123;b\xf3\xfd\x0c0\x06\xa9&quot;\x18*\x1e0\xef\xa1\xd3\x85D_\xb8\x1d@\x0f\xe3\xef\n\x01\xa26 8\x19\xb5R\xc4T\xb9&amp;\x95\x95\xafr\xf0\xd3;&quot;\x8c\xa2\xfd\xc2V\xf4r\x96\x0b\xbb\xac@\xa4M5e,\xb3\x0b&amp;:\x05+\xc8\x96\xcc&#123;\xa6\xe3\xd4P\\\xa5X\x93\xe3\xb6\&#39;\xf7\x95\xbbA\xe79\x9f\x18\xf4\xaaB\x0c\xdb\xc7Hp\x95\xc7\xf3\x18wyv\xcdg&#123;\x97\x06\x8b\xba\xe3\xd2K\xf4A\xdc\x88n\xd1N\xb5*Fw\xee\x80\xb4\xd7\xf2\x9c!\xf1-1As\x83c\xca\xc2\xe1@\xc7f\x95J&gt;\x00\xdf|\xb5\\\xff\x1coNl\x9fRus?\x9a\x93\\J~0\xf2\x99\xdb07\xf7\x90\xf9;\x06\xb8[|\xc8&amp;(\xa3+\xd7\x87\xef\x90I\xe1[(\xcaQ\xe1~\x84&gt;\x1d\x13\xeet\xfe\x1a\x96\xfc1*D\xda\x01\xd0\x9c\xda\xd6uD\x01\xcaf\xcba\xc5oW\xda\x03\x88\xd5lkFl|q\xccE\xfe\xf1P\xe8\xd4\xb9&#123;N\xf7;&#123;\xce6\xca==R\x00\x85\x0b\xa1\xc7\xfc#j \xb7\xa5\x96:\xc1\xa9\x14\xa5\x90\x10\x88\x86\x81\xe9\x84\xaf\x93*%\x05\x15E&#125;B\xf5\xfb\x03!\xf8`.\x0f\xb0J\xf8\xb5\xd2,t*$y\x1d\xe2\xf5\x04\xc68\xc6\x98\x11\xd0\xe0\x84\xde\x0e\xfc\x89a\x86\xfb\xf4o\xf0A\xfe\xbd\t\x03\x91!H\xb0h\xb6~p\x1c\x9651=G\x90\xf2\xa7|\xf0\x1e$\xad\x05&amp;\xebj\xab\x88\x14&amp;u\xa8Yv\x12S\x12\x97\xdf\xc0T\xf1&quot;T9x\xc2\xb3p\x05\xe8^\xf5Ng\x8e-X\xd3^\xa4\x05\x02G-\xad;\xbc\xe9\x9fj\x0eu\x1coV\xed[\x91\xdc\x94\x7f\xb5)\xf2\xb5v\x96\xf7\xdb\xe3\xa4D\x9bB\x1e\xb1\xb8\xa1ndU*\x01\xc6_T\xe9\xc6\xb3\xb8V,\x15&amp;\xa4X&gt;F\xe4\x93\x04\xb1\xc7_k\xc7eFu\xf7\xa8\xe2\xd05~\xbabw\nD6\xe1\x9fc\x84\xc6\xe2m\x7f\xbf\x92\x04;\xc4\xed\x1fX\xae\x7f\xbd\x1f\x1dn\xd4\x7f\x9395\xdfG\xd5\x10z\xd1dy!v\xc9&#123;\x86\xdd\xb3\xabZ\xce\x82\xd1\xe8\x1c\x03f\xe3K\xcdG\x9ba\xc3\xd8%\x94\x0cz\xdf\x0e\xfdYf\xef\xf7\xa8\t\xa9\x1fuu6\xd3\xea\x0b\xec\xbd\x06AI\xadh^\xa5`\xdd\xc1\xfa&gt;\xd5\x1a\xc1\x8f&#123;J\x1d\x96t\x85~\x87P\xf7&quot;\x03\x02C\x977\x8f:|\x8e\xbe&amp;\xd8j_\xda\xd54\xbbm\xc6\xeb\x87r\xc6\xb1\x0eKqo\xc7\x8e\n\xa6\xd1g&quot;\xd6\x16~\x98\xe0\xd5\xd6Bj\x1f\xa5z\x14@\xa6\xe0\xa5\xa5\xb1\&#39;\xca\xbf\xf8\xe6\xb7\xd9[Q=t\x86\xbc\xa7F\x87\xdfNci\xde\xf2i\x13 \xa9\xb3_?\xa2X*&amp;\xbau\xb5\xcc\xc0\xd4.\x8c\xed^\xed\xbcs\t\x17\&#39;adGkc\x15\xaf\xab+&#125;P\xc3A]\xeaA\x91v\x15\xb4\xea\x82\xa4\xdf\xf0\xdfZ1\xf6\xc7\xd31\x86\x06&quot;\x0b\xbf\x89oB\xa7\xb0\xc6w\xa3\xeb-\x10C&#125;P\xe9\xb9\xe6\x1ec|\xcd$\xffI`=\xcd\xc5O\xe9qs\x0b\x92\xe4\x8fVk]\n!\xc9~\xf3\x16a\x80n+\xdd\xc8&gt;\xc2\xf0\x85\xd0\xf9\xbe\x87@\xe7\xc1\xa8\xb0\x81\xd22\xce@\xc5\xcaBO\xcc,\x9c&quot;\x99:G8\xe0j\xf3\x06\xa6\xed\x0e\xbfl\xd6\xd4\xaf\xff`\xd0\x13\x82\xa4\x93S,\x886\xc9\x18\x8b\xd3\x8c\x13W?\xcd\xe3\x7f~\x9e\xfa\x12\\R\xf1~\xdd5i\xe7\xce\xe8\xd4\xf9\x81Oii\x17JY\xc7\x0f.y\x19\xcd4\x83\xc4w\xed\x00l\xecl\x85\rA\xe9&#125;\x866\xbb\xb3\xad\xee\xf2\x18\xc228n\x8eQs\xf4\xfe\xc8&gt;\x91\xeb\xe7v\xed\xa4\x90\xe0\x18\r\x173\x81\x0e\xc1\x18\xd9\x1e\x06)\xd8z\xa2\x8c\xd4\t4\xc3&#125;\xc1O\xb66\xf8L\xe5k\xa9\x90\x06E\xb7\xa1\xeaG\xbfS\xbc\x86\x08\x1c\xff\x94xc\x0f\xa1o\x0f\xc4%Pe\xfc\x7f\xe1\x8d\xfe\x07os4\xb3 \xc4B\xd9j0n\xfc\x9e\x08\x9c\x8aG_[\x95U&quot;\xf8\xf4ES\xc9\xcbVj\xdf5a\x89\xe9\x05\xa0\x7f\xd2\xbac\xd0\x92\xd2\x0f\xdd\xb8&#125;;\xe8\xa6\x16AbI\x84\xd2\xf4\xad\xf6\x1f\xe2\x83\xe1u\x86=\xe3)\xe6\x8a\xd2B\x90;\xb6ww\xd1\xefL\xf3\x90\x94GF\x97\xfa\xd6\xe7\x90n\xce\xf3\xc4\xdc\xe8\x93\xfc\x04\xc5=\xa4\xc6\xa8\x0b\xee&gt;\x9b/\xdek\x82s&#123;\x0fS\xf4\xcfS\xd2\x9c\x99\x18w\x9b\x9192&amp;J\xb8\xb8D\xaf\x9b\xe7\xde_\xb1\xea:\xdcI\x9c\x80\xd5$\x96\xa5\r\xcbO\xca\x82\xc7\xf2\x176\x99[+\xd6\xb8ss\n#\x8f\x99K\xf1\xe2lM\x8e\xfc\x90\xd9\&#39;W3\xe7\x83\x9e\x1bt\x8es\xe7\x89E\xa2\xbe\xff\xdc$5Ft\xb7Ml\xfff\x07f\x1b\xdf\xb6\x89\x94\x12\x86\x94\xe5N\xcf\x16&gt;V\xeef\xd58\x7f\x94\xc1)l\xb6\xed\xe1\x8f\x06M\xdc\xd7t\x102U\xd8W\x92\xbf\xfa\xfaPO\xe6Z\x13&#125;&#125;\xabA\xc1Y\x9fA\xf6\x11hN\n\xfa\xd6\x99\xd8\x81\x82\xa7\x02W4.dz\x0c\x1a\xed\xbf\&#39;-\xee\xaf\xdc\x182j\x86x\xcb\xa8\xc6Z\x8dz\xbc\x91\x82\xd5\xf2T\xcd\x1e7\x1b\xcd\xc3N\xdf\xf4\xf7O3\x80@d~\xf6\xeb\t\x16\x95ZM\xd4\x0fM\x9aFT/\r\xccJW\xe9\x9ei0\xc7Uy\x80\xfd\xde\x17\xaeH\x0c\xe0\x1c\x95\xaeJb\xd8\xe6i1Eo\xcf\xe7\x95S\x04A\xa0\x8d\xc8\xc0VE/\xb9N\x88n\xc8:8\xc5\xa8\x97\x12\xf3\xb8u(C\xf6\xe5\n\xdf\xa0\xd4\x85\xf7A\xf1\xb3\x03g4&#125;\x17k\xcf\xca\xd573\x984gS\xca\xb4\\\xfe\xe3\xefp\xef\x8f,/q\x027\xdb\xee\xd1-\xce&quot;oz\x9d\xa7u\xd6\xbb\xe3\x80L\xb0\x10\x1c\x1e;P\xfa \x9a\x99\xa8F\x93J\xbd\x89D~\xe1t\xaf\x1e\xd0\xaf\x14b\x1c\xf5Yl\xf2H\x97\x0f\xcf\xc3E\xe09\x9e@\x81\x03\xab\x1e\x06\x87\x9d\x92:\xc4\xdd\xde\x973_\x85\x86&lt;t5&#125;f%$?\xf5 \xc1\xa0\x95\x07\x13\x95\xeb\x0e\x04\xbd\x1c\xd4\x07\xec1;\xb7\xef&amp;\x03\xd8\xe9(wD\xfb\x1bQ`\x84\x85\xc3\xcap\xc4Lw\xac72(\xd9Y\xad\x1d$&#123;\xb84;\&#39;\x94i,\xae7\x95\xf6\xb2\xd7\xecl&quot;\x1aF\xf1\x98\x84I+\xe5\x8f0\xd4\xad\x1f[\xc3\xc6\x97&quot;\xce\xd7\xb7d\x03\xa5\xb5F\x12\xa6\x04\x17\x88;\x84\xe5\x07\xad\x97g\x00\xa9~\xc4\x94\xc6\xa8\xad\xfc\xa8\xcd\xa8\x13R\n\xd8\xdf\xb8\x1e\xfc\x8fC\xe2\x9c\x89\xb12\xa9v\x00(\xfcoYAU\xab\x03\xf7\x8b/\x00\xc9\xa2%\xc1e\x99L\xc4\x03 N\xa2\xd4Y\x86\x14\x13\x93 \xcf@)\x9b\x13uR\xa2\x16J)\xa8/\xa4\xf6=\xa0^\xf2S\xe5\xd0\x93\xb2)\x7f\xaf?\xd8a\xcf!\x8bg\x9a\xd56\x87`\xb3F\x870\x04\xdfI\xf4\xe58u8\xde\xbd\xd7T\x02\&#39;\x04\x8c1\xac&quot;ODB\x98]]\xd3\x01\xe5\x08/\xfe\x99\x87_!+\x15I\x91\xb5\xb1\x020/\x7f\x08L\xb3\xb95+\x83k$o\xe1&#123;\x9f\xa0\xf3xj\xf8/\xf8\x12\xa3\xaf\x157\xec\xb6\xa2\x18\xa8\x83\&#39;\xceS\xfb\x99\xd9\xb9\xde\x1d\xd1\xe3\\\&#39;\n\xec\x9a\xd8\xb0\x06\x1e\xabf6\xb6\x8b~\x98\x94\xfe\x12\xf7\xe8\xeb\x85\xc3\xb9\x07Y\xb93\xf1o!K\x17\xecp\x9f\x83\x1c\xb9\xb7Q\xef\x1fO+\x00[\xc2\xe023\x81t\x19\x14_E\xa2\x95\xb0=0\x19K[\xb4\xdb\xe45\x85\xae\x93\x91\x85#\xdcW\xca=1\xc6&gt;\&#39;\xe35\x94\x1a\x14\xe1\xf7o\x13\x9f\x0ft\xaa\x1e,\x11/\xc4\\\xfa\x97\x84\xbep\x90\xae\x1d\x1c\xe0\nc\x8f\xfd3\xdc\xbf\xbc\xeb-@kj\xa7st\xdb\x1c\x82\xdd\x1ddk|\x8a\x17:Qm1Ss\x1e\x94\xa1\x84\xdeaIob\xf88@=H\xe7\xde\x080\x84ST\xbd\x17\x07\x89]\x9b\xd6\xac\x1fb\x12R\x99\xfen\x99\x8f\x06P\xe2\xb5\x87x]4\xa2&gt;\x1d\x126J\x1b\x03\x8a\x847\xd5\x05Du\xd2\t:\x11\x81\x99\xbbs\xbcK\xe69\xf8\x19\xb4\x08\x83\xbaX)N\x95\xcd\x81\xf8\xf5L\xc7\x10\t3\x91\xca\xccBWO\xadE\x18k\x10\xbe\xce\xe2\xbc\x00\xf1\xc7\x0f\xb9\x89\x93!I\x8fS]5I\xed\xdd\xac\xdf\xcf\xf8\xd5%@\xbb\xd7&#125;\xace&gt;\xac\xfbx\x05;\xed\xe8\xa5\xe4\xef\xb1#\xe8\x1c&amp;\xe0]\xcf\xe2\x96\x04\x7f\xcc&#125;\x0bj\x84\x17D\x84\x18\xe3\xe7&#123;\xe5\xdc\x1c\x0f~\xd4\x13\xbe\xa6\r\x13\x01\x02\xa0\xb1\x87Iz\x836\xf9\xf6\xb9[\xab\xe5\x0c\xed/;\xd3Q\xf1\xef_\x01\xd4c\xa2\xb2`\x87\xa4\x07,\xfcx\xbd\xa5[FX\xbbRu&lt;ODbk\xdat\xa3\xc7\xe5\x19\xd4\xd0\xf6r\x12\xe2\xee\xc0\x90\x94\xafr\x16T7\x82\xbf\x12\x8b&lt;\xf7%%4\xc1\r\x96\xdfx\x9d0\xdcEV@,\xab\xa1\xe8\xccj\xbf%\xbf\xd1a\x1e\xfe\xfc4U\xba9\xf5\x842&#125;]\xc2\x990\xcb\xe40\x82\xbb]\x04G:\x99=]9\xe7\x9f\x18\x98C\x94\x94\x1a\xb4\xfc\xdc\xd9\xa4\x99\xae\x1d\xe5\x06\xa2\xc7^_Vx\xac\xd2\x96\x91\xcbk]S\x89\x18\x19\x15\xcd\x04@\xea\xd1\xefN\x0f\xde&gt;.\xa2M\x02J&#123;\xba6g\x13\x97D3E\rPO]\xf2\x7fv\xb7N\x9a\x85\\C\xe9-9\xd4l\xeb\xfe\xa0\xb2\xd2\xc2b\xf90B\xe0\xcd\xf7R\xb30 D\\\xc4\xdaY\xf1\x82\xfb\x9eD:~\&#39;\x12B\x88\x1b\xc5\x07H@\x9b\x8f \xfe\x03)\x84\\\xc5\x1a\xec\xd0\xcc\xed\xa4\xf7\x1f8\x8b\xedQ\x12N;\x8e\xcb\xb7\x1e\x96&lt;\xd6\n\xf1\xbd`aFC|\x8b\xd0sW\xf4N\x95\x9b\x98sS\xbaEj\xbe?v&amp;\x98\x8c\n),_,H\x0br;\xab=\xd4\xffS\&#39;\xdb\xa5U\xf8\xbf\x87\xbdv\xd4|q;Q\xfe\x91r;\xe8\xee\x00\xb1)\x05\x85&#125;C\xbc\xbe\xb0KXF\xdd\x8f\xdcX\xa4\xca\xb8\xb5\x16\xf0\xf1\\\x7f\xad&#125;\xbel/\xfc\x107\x10\xad\xf4\xea24\xf6\x16\x81\x00\x9a\xc5\xa7\x87\xc9\x92&gt;\x1a\x0c^$m\xbb|\x19Sp\x15\xb1$w\xe0\n\xfd\x97\x96yYR\x9au\xe3\xff\xd0^t\x8e\xe4\xea\xfa\xc1B\x9em\x049\xe1\x9e\xcf\x84i\xdd\x81W5T\xe75E\x06\xc0@q\n\xc7]08\xbc\xc4Dr\xd9\xf6\x9c/w\x19\xca\x03\x9b\xa7\xe6o\xbb\x93j6\xb4\xe7\x93uUO&amp;\xcc\xdbi(\x10\\nC\xde\x19\x96\xd28\xd4v\x84\xbe&amp;\nX$\xd8[\xd4\x14w+\x94zi5\x86\xab\x90\xe4\xf6\xf3r\xa9\xbcF\xb1\xba\x1aT\xa1\xf3\x05\xf8\xaa\x0f\x9f.\xcc\x0b\xe6&quot;\xf2\xb8:\xe6r\xb6&quot;\xb0\x01\x03\x11P\xc3D\x9a\&#39;V\xc2\xc6\xa21\x92&#125;+WAy\xc4\tX\x02\xd8\x01\xa4R\xfe\xca\xd9\xe7R\xc7\x91\xb6o\xa5\xdb*)I&#123;&amp;\xb3w\xce~ha\xa0\xd0/\xe9\x82\xeb\xb0]\xb3\x89)\xf8W\xd0\x91\x14\x1fT;\xbe2\x9fW\x8fj&amp;\xd39\xed2+\x04\xc2\xc87vG\xder\x1d\x86\x81\xfb\xaa\xe2\xe0\x12\x86`\xc8\xae\xc6\xfc\xd3p3\x13\xd1L\xb2\xabU\n\xb7\x99\x14\x0c\xc7\x0e\x7f\x8d\xc2\xeaNV\xb1\xae\xbe\x98\xfd\xe4\x91LN\xb8\xacp\xd6&#123;\x06&quot;\xd9S5\x80\xb8\xda\xdb\xa0\x9d\xfeM\xef\xcf%\xc9\r\xb6\x1cy\xa7\xce\xa5\x8f\x18m\xb8\xd9\xd5c\xad?\xe7\xaaZ\x8e\xc0#\xeb8\xa4S4y&#125;dk\r\xf66KM8NO\x1c\x19\x91q\x03lj\x98\xe7\xdf\x03\xbcL\xce\x8c\x11\xf5qc\xe2onZ\xf2\x8ak3\xbc\xebh\xafS\x82A\xcf[r\xaf\xa7\xafPW\x9dL\xbd\x9d[\x0c\x19\xa7\x1fn\xb0\x06\x16\x91\xa3EDR\x9a7\xd1\x8ek\xd7\xe2P\xcc\xdc\x86\xa3\xd0a\x95\xa6\x1ay\x81\xf4\x8d\xfaA\xb7W\x0b\xae\x9e\xd7\xefZV\xa8\xcf\x8a\xd3\xaa\xbb#\x029!\x89J\x13J)\x88W\x98\x8c\xc0\x8ct\x834\x80\x9bZ\x1e\xe0N\xba\x9c\xe7\xa9f\x98\x02\xf1\xf0\xac\xef\xa6He3\xdcr\xa7\x81\\P\x98\x07^\xe5m\xbf\xd5O\x84\x12\x9au\xb1%AXq\xf2&#125;%[&lt;\xf1\xacha|&gt;\xd0\xd3JLhQ\xa7\&#39;\xd4\xaf7+S\xe6\xc9\x8f@\xfcwJ\x073&gt;\x87\x10\xc0\x9fn\xdb\xe1\xdeW\xae\x90(\x18;\x8d\xc1CK\x8a\x92\x8dU\x03\xbaB\xf2\xd2\x8fj`\x16\x96\xae\x87\xa4_\x1fz\xac\xc6\xb8\x03\xd2\xd3\x1ar\xd2b7\x14\x02\xbfq\xa15\xdf\xce\xe3\x91\x1aU\x16\x01\xef\xea\x04A\x9c\x80\xef)\x81\x89c7\xb9&lt;\xb2\xf6\x00\x92]\xaa\x9b)\x9c\xdc\x19\xef\xea9\xfc\x8e\xfa\xb2\xe4\xff\xd4\x95;\xf6\x88\x89\xa0\xe5\xef&#125;e\xa3;$ \xfd\x93\xa1\x8b\xeb\x94\xee8g(\xec\xb7\x9a\x97\x18F\xd0&amp;l\xcb\x10\xea\xff\xd6\xd6\x1d\xa6\xa1\xb4\xe6| \xae\x8b;\n_\xfc\x8f\x93\xd1\x0c\x98\x82\xf5\x93E\xf9\xc4n\xf4\xd62\xa4\xe4&amp;\xf2Z\xc8X\x81\xee$\x86\x95c\x7f\xb8\xe0\xab\xd80\x87C\x82\x9c\xaa=\x03\x94d\xe5\x0fX\x13\x9dh12&#123;\xa9\x98j\xd1\xa8\x9d\xf2\x9f\x03\xae\x0bw,\xd8y\x05\xf4A\xc3p\xb3\xb1\x82*\xf3\xd2\xbd\xfe\xac\xdc\x92\x0e\xce\xcf4@\xab\x07\x1b\x0c\xeb\x19\xe8\xee\xdf\xbf#D\xab\x88\xf3b\x8d`R\xefG\xe8\x1bd\xb6s\xc4\x11\x98#]\x08\x1a_\x8c\xcb)\x0f|\xd7%\xe6\xd77\xb1\x9d\xcc\x19s\xdc&gt;-\xf0\x1b\xbd)\xde\xdf;\xf6\xfc\xbc\xdd\xc3n(kj2\x9f\xe9\xe1\xd9\xf3\xec\xf7qKt.\x9a\xb3\x8e\xf8&lt;u\x06\xa9\x1b&#123;\xf6#\xceO\xe3\x8aV\xcd\x17I\xa9\x8c\x8bf\xa6\xc0\x01rk\xb1jt\xf6C0T\xb13o\x1d\xf7\x81\x93\xbb\x05\xc8\x9b\xa0`V12Y%&quot;\x8c%\x04\xc6\n\xcc\xe1-\xf4\xaa\xe8\xe7\xc5#W\xce*\n\xb3\xb71\xb4c\x94\x8aq\x18\xa1Y\x1a\xc0#\\\xd8\x92\xa8\xf7\x9b\xabe0\xf1\xb7\xf0\x03\x07\xa9\xab\xeag&#123;\xbe\xd9M\xf0\x80\xe5\xb8\xc2\x84Z\xbfP\xd2\x8f\xebJ.X\x9d\x89\xfb\x90D\x94\xee\xd3U\xc1\\\x10Mj\x81i\x9aF\x18\xdby\xaf\xf9\xf7\x01^\x9a:\x93A\xe7\xe0p\xd1\x04\xc8\x1e\xf4\x12\xc3\xe5\xd0bU\xdd\xdam\xb7\x15\xfb\x15\xab\xa0d*\x86\x11\xe7\x13\xc5\x8aV\xf7\xcf\x00\xb7~\xd5\xd3\t\xbd\x1bm:\x9e\x16\x8f\xf4\x05\x11Z\xb6\x90\xec&#123;\xca\xa0\xc4\x9b\xf7\xa6\x06\x8bx\x82[\x18\xfe\xbc\x81\xd1\x0bC\x18~\xbb\xa0\x8c|:\xd6.d\x8d\xe0F%\xf4\x80\x15]\x01@\xc0Ai\xbc5\xb6S\x93\xaa\xae0\xb8\xc1r$\x13\x85\xd6\xe2\x9eI\x06\xd8R\x96S&amp;\xca\xe7\x83\x02e\x98\xe5\x1a\xd84\xb4\xa6\xbb1\xb7K\xe4H\xb82\\J\x8e\xc7w\xaeX\xf6v\x97\xe3\xc1\xd4\xe8b\xd2\\\xc0[\xcbI\x1d\&#39;\xad\xd5\xf6*\x92\x02\xa1\xa0+\xa7\xc1\xc8\xfa\xb8\x8b1$\xb0&#125;\xc4\xa0cg1\x85\\\x82\xceJ\xadh\\N\x163%\xf4\xd3\xdf\x17Qx\x8cv\x03\xf8Rw\x8c\xb9\x89.P\xa5\xc3U\xfdC\x8bJf\xcc1\xd46\x0b\x00&lt;\xef\x7f\x84\xdf\x84Z\xfe\xc0A\x11\xdc\xf3\xfd\xcf $&quot;;\x19\xc13D\xf7[\x9f\x1b\xb89\xda\t\x93\x11O)\xbe\x00\x86Gc?\xb4\xd7\xf5y\xba\xe5\xefu\x81\xf3\x16x\x9b\x9e7\xf0Sk\x97\x85\x16\x0f\x9a\xb9\x0f\xef\xc9\xe0\xef\x1aAC\x854\xa2\x8f\xdaw=\r\xb6i\x8f\x98\xa9e\xf3\xc3\x15\xd3\xdb\x12Q\r+\xbb\xeft\x0fvG\xfd-&amp;\x8cI\x1b\xabJ\xdc\xbe\xf4\xa4Pn\xedJ,a\xb1\xeb\xaf\x7f\x12\xbe\xda\r0\x95\&#39;FM;1/\x0b\xf9&lt;\xf0\xd2\n\xb7\x01\xdcU\\\xca\xe5\xc9sa\xc9\x9b\xc5\x03\xf3\x00\x13\xacf\xd7\r|u\x97?L\xeaF\xe49\xfb\x89\xbc\xc4\xb4Lmx\x15s\xe6\x07r!\x8e\x011)_\xe5\xa4\x99x1&#123;3S\x81\xf7\xe4\xb5\xdc\xa6%K&#123;J\xe4\xc9\x0c\xafU\xe2\xe2u\xba9r\xd3t\x85-&#123;\xb7\xf7\x9c\x18\xa0$\\\x18\x1d\x018\x8d\x00\x9a\xa1\xb9\x18p\x8a\x0e\xd1\x04\xa3G\x01&gt;y_\xf6\xef~\xe9\xc2x@\xd78[^+\x9c~\xd8\x03\xc7\xddt\xba\xca\xa00(/\xd3\xcd\x8d\x03^y\x1b\x9d\xdd\x80&gt;\xfcC\x81\x8c/\xd0\xc8\xd8\xd8\xfb\xbbw,\x05\x90\xe1\x92O\x08f=\xc7\x05qMK#\xdf\xea\x12s&#125;\n\&#39;\x82\x06\r\xb92\x9e\xf3\t\x94\xdd?\xc0\x8fatUG\x1fu\x0e\xd7\xd6\x93\xd8\xccH\xb0\xf5d\xa3\xc8\x94\x9bO\xd6w\xf6\x19\x82\x1d\xd3L\x12\xbe\xb9\xa0\xb8\xaad\xb8\xfc\xe5\x0eIC\x97\x0e\xa5\x0b\xfe\x9aQb\x87\x87\xc1\x96\xaf\x88\xcc\xa2B;\x19\xd2\xc1_&quot;\xdc\x87=b)\t\xa5m\x84N\xb3 \xb6\xa9&gt;\x9a\xbdPz\xc1SZ\x9b\xc2\xab]\x8b\xce,\xc6\xe1J&amp;\xb3X\xb3\xf5^\x84\x07\x9b\x1c\xff\xb0\xbf\x8c\xd2\x1c\xecIb.(\xcdlU\x9f\xd6i\x9ep$ \x08\xcaf,\xce\xd9\x94\xf2j\xe2-\xb3v\x1cv|V\x0c\x918g\xd8\x12\x8b\xbb\xf4rF6&amp;\xbd\xe8\x1e\xa5\x19\x00F\x95\xb4#6\xbcG\xd6g\xe4:\xc2\xb1\xf0\x0b\xe3\x98\x1a\x199\xdf\xa9Z~\x95kQ\xa0\xf2\x805\xbb`TM\xa7[\xdd\xbfkm\x8d\xb3\xbc\x1cS\xb0f\xc4\xfb c\xc24\xe8\x7f\x0e\xdd\x91p\xf3\xa4\x82\x94\xbe\xa0\xfc\xe4\xad\x92\x85\x14\xfe\xed\x0e\xc4\xbd\xa6\xc7]GF\x02,\x18\x1a&lt;\x91\x01\x93\xc9h\xf3\xdc=/\x11\xcf\x8a\x9b\xa1\x85V\x9de\x94\x0e\&#39;\xc6X\x05\\&#123;ojK\x99\xb9I\x1b\x16\x003\x1c\xd1Y\xdc3\x0b\x9c\xc6\xe6u\xab5F\xfb\x03\x0b\xb0\xbc\xf9\x93\xe9\x8f\xe5,\xeaJr\xae\xf1\x99\xe0F\x162\&#39;\x97\x97\x0c\xb5\x98\xe4DLA\xc0\xf5\x14b\xbf\x93h\xf0m\x15\\ \xc9\xb2a+a\xdd\x98\x99)\x1e\x05\x9d\xa3GU0t\xcd\xaa\xa3\xfa\xad\xc3,\xc6)\x13MQ]\x1bw\x01\&#39;\x14\x9cU8\xd4\xbb\xbdG\xb6N7\xca\xf0\x1a\xcc\x1a\x11q\x06\xb8\x98\x95j\x1ccj\xc84\xc0/\xaeH^\xf6\xe7D\x7f\xae\xfe&#123;\x9d\x10\x1e\x01\xff\xc8\xe8s$\r\xdb\xbc^\xcd\\\xda\x8f\rE\xcf\x94n\xc4\x84\x1a\x07\x81\x9a]\xa8\x1fT\xe2=&gt;\xab\xf4c\x1a\xb7\xc1\x0foC\xa2@\xbfC5n\xc2\xc9\x8c\x1c&lt;(\xc0\xe3\x95A\xf0ty\xd6\xc2G\xc4\xd9\xe8n\xb6\xf0\xcc\xb8\xe7,u\xc3\xbf/SAy&gt;$\x91\x05\xe1\x82\xd4X\x1a\xce\x06\xd5\x86\xf8\xf6\xed\x0f\xe7\xd0\r\xca\xd4\x04\x1an.&quot;\xe7S1Gat\x96\xce\xe9\xdc\xfc\xa4\xb8\xc1&lt;\xb8\x17\x1f\xc6(\xdd\xf8\xb8\xa5\x1f\xe9\xf54^\x12$\\\x0ex\xcf7R\xdc\x1a\xb2\r\x8d\xc6\x1f\xf0cY\x15\xaf\x82T\xd6\xf30\xa9\x0b4o\xf0\xbb\x10\x9f\xe9\x08l\x89\xa6A\xb5J\x7f\xd8:\xd9\xae\xe9Y%f\xf4\xfd\xfa\x8cP\xf0X\x88\xcb\xc0\xf9\x01\xce\xf3\x19\xe3\xceC\xf0\xfe\xeb\xab\xfcW\xfbm\x96f\x9bA\nG\xaaw\xc3\x9fD\xc7\x0e\xbb\n\xbe\xa7\x16\xab\x99\xb5\x05\xf3\n\x07\xeeX\x06^\x10y\x9e\xc1\xe4\xe1\x16\x95\x90\x07:\xfd&lt;\xd8\xa9\xa9\xc6\xe6o\x84\&#39;\xf6H&lt;\x82KS\xc9\x97\xefW\xb1\xb0t~[\x07\xdf\xd7\xf7\xb3q\xd2\xe6\xb3:\xf6\x9b\x81@^\xc2\xf7of\xf0\xdf\x02\x8a\xf2\xb5\x02\xe2\x9e\x1fkqS\x8em\x9d\xcc \rzv\\%k\xe7\xee`\x932\xe6\xca8&#125;d$o\xb8t\xab\xde\x81\x96 \xd2MM\xbeB\xf7C\rbr\x9a\xa3\x93\xbb\xc6d\xcb\x8dd\xda\xa6\x13a\x9c$\x1fm;\xb9\\\xeaM^a\x8e\xcc\xe2\x91\xc8\xf8y\xfc2\xd3s\xb5\xef\x97\x14\xfb_\x1c\x88\xe3\xce|\xd5@\xc0cJ?\xa5\x19\xc7\xe5\xf2\x1d7\xc1\xf2\x0b\x91\xec(\\[x_V\xf1\\\xe3c\xf4\x88\x97\\\x1b\x95\xe3P\xee\x07W\x106\x1bA\x9a\xff\x0cv\xfb\xaaDE\xc5~\x18\xf1\xb8\x04rO\x12\x02\xb7\x1f=Q\xdbA\xb4\xc6\xc7e\xcb\xe9\xc8w\xfe\xdf\xe5\x88J\x9c\x91]p\xf3H\xfb~\x1a\x16\x1e\xf1\xeb\xe2X\x8a\xbd\x80\x170\xf5\xbf\x1e\x1f\xbe\xe0Q\x90\x89\xa97\x93\x99\x96\xa7\xbe\xcd\xce\xfb\x91`\x8a&#125;\xb7\xf6 \xfe(m\xba\xd9\x90\x84LW\x13\x14\xce\xbd\xcf\xc8\xd2\xfc#\xc7\x05+\xb6C\xd1N&lt;sI\xc8\r\xe8\xe5\xa9\x84\xba\x05)$\xbc\x91^\x0f\x1dJj\xcd*N\xf4\xafTH\xbbX\xfd\xf7\xae\x06@\t\xed\xfd\x89\x1f\xf9\x8a\xf1\xec:&amp;u&gt;D\xea\xa86\xd7\xf4\xdbSO\\\xb8\xfa\xb5\xccc\x87\x9f\x1be[\x97\xcf\xaf1\xd6H&lt;m\xe4&quot;\x02I5\xeb\x93\xc7\xda\xefU\&#39;\x99Z\xd7!\xe31\xc7_\x85\xafP\xa7\xb5\x8b\xc64\xd0*\xd0Q\x08\xdck\xfa^\x89:\xd3\xa2\xbd\xa6l&#125;dn\xf1\xbf\x86&gt;\xf4\xf1\xc1[\xfd8^\xcf)\x06eH\x15\xe4\x19\xe1\xa8\x11\x8e\x838(\x9c\x85Aw\\\xa9u7\x12LJ\x7f\x02\&#39;&amp;yk\x9f\x8d\xc1\xfc\x01\x92l\x80\x04\xc8\x16`\xcfz\xca\x03u \x17\xfa\x19J\xd9/\xbf\x95\xb0\x184\x8by%i$J\xba\x1e\x0e\xec\x1c\x90zrq\x85\xce\x9f\xca%\xae\x02\xac\xf0\xc0\xa8\x01I\xc6\xd5_\x97\xf7\xccq8&amp;\xbch\xf6\xca\xe1\xda\x16\xfeL&gt;\x19W\x97&#123;X\x00g\x8d\x8c\xd9q_L\xf3\x87J%[\x14`\x83\xe6\x0c\xfd=\xdb\xd2_\xfa\x05@[\xa3M\x05\x044|--q9;\xb0\n\x94\x98&#125;@\x82\xb8\x9f9\x16\xd8\x1f\xa1m\xc3\xf1\xb2n\x9f\xdb(\x88\xb4&quot;\xd3\x19[\xae\xc5\xb9\xee\xa2\xbd\x1d\&#39;\xec\x10\x1fY\xda\xeei\xaf\xdb\xdd=\x98\xfa0-\xfc\x9a\x85\x7f\xb4!\x01\x1e\x10\xf9\xa72#\xd0\xa9\xef\xa3\xc8\x18S\xfb\xbeem\x9d\xa7\xf00\xcal&amp;\x0cjn\xed\xa4\xf3m\xe4\x964\x83\xcbFj\x03B\x8e\x10|!&amp;\x19\xaf\x92\xd9\x7f\x17\xbd\xc5\xce\x19y.\x9e\t\x8c\xfc\x83\\\x03\xb8\x97&amp;\x98*\x0c@\xd9\xa9\xf5\xee\x83\xb2\x9e\x03\xd5J&gt;n4\xe4[\x0e6\xcb\x07\x11\xc8V\r\x8c#\xe9\n\xe5\xa1,i\x8f\x11st\x0c%\xbe\x04`E\x1a-\xfd*\x0fS7\xa6\xde\x0fh\xc5\xc5\x85\x9e\\B]W\xb6\x85\xf9(H\x91\xc6\x08\xafTF3\x90h\x058\xe92\xfbuAG\xf6\&#39;u\xf5f&#123;p\xe0XJ\x81/\x8f\x96\x119\x81\xf1)\xa8i\xfbV\xa6\xfby5y\xa2\xc9\x8b\xbd`E\x8esTET\xe5\xf0\xa7q\xcd\xbbB\xf1(\xa7[A\xbd:\xc0O\x86\xe43\xb2\x11\r\xd9_y\x86\xe5u\&#39;\xbe\xff5&quot;a\x9f\x00\xee\xf5S\xaf[P\xd0\xe4\x9d7\x9bo\xe5\xeeu\xb1\xb9\x10\x9a\x10\xd8\x98mVb6F\x11\xf7L\xfaa\xac\xb7\xb0\xc1\xdb\x93\xd5\x8f\xa7|,\xb4\x7f\xe2+`I\xf6\x13Y\xa8\xa9\xa5\x93\x03b\xb3\xf4\xb9-\xf8\x8d\r\xf5.\x05\nBt\xcfq\xa9\xe4\xc3\xcf\r!\\Ge&amp;s6zP\xcd2+\x19p\xb8HM\x8d\x91\x1f\xba$\xd5\x1e\xb3w;\xfc8\xaf\xc7\xf2 \xce\xb9\xd5\nn\xe1\x12\xc6\xc6\x1ex\x7f\xb4\x93\xc2@\xce\x99\xb8\xadZ\xaf\xc3\xb8\x13$$\xc8|\x89\xdc\xc0uk\x8f\r\xf1\x8eh1\xc8\x8b\x0e\xc1\x1a\x8d\xa8\xa7\xd8\x10\xa1\x14\xb0|#\xa4]B\x15\x04XX\xd0\x0bf**Kt\x96\&#39;\x12t\xe9\xc4)(\xc6PB\xd6\x87\xf5\xb4i\x1c0G\x8c\xc7\xc0\xea (\x0bA\x1a\xe5\xc1\x92\x88\x06\xd5 A\xaec\x06D_\x84\x92?`\x88s\xae\xb9\xa7\x9ffL3\x8fu^D\xf1\xa8F\x0b|\xec\xff\xffx\x08\xa8K\xfb\&#39;\xee\xf1\xbb!\xf7\x03\x9f\x04\xc4\xd2,\xa2\x1d\x1a]\xe5\x8c\x95wO\x97\xa8i\xa7\xab\xa0\xfb\xdfsy\xb6:\xe3\xa0\t&#125;\x16\xc0=Yt\x96\xb7\x1e\xe5\x9b\xef\xeb\xdc\x0b\x0b\xb0\xc9\x80.U-pShR\r\x9f\x9b\xbdv\xf0\xc8k\xb0\xad\x98\xb5YV\xd7J\xceI\xea\xe7\t\x92\xe3o/y\x13T\x88\xd9-!\x17\x87|y\xf0p\x9e\xc1-\xd3\xcf_\xb1\x80)\x9f\xf6\xed\x03f\xb8U\xaf\xec\x91\x17\xb2@)\x00\xb07.\xba89\xa2\x80\xcb\xcc\xda\x1c\xd61\xd4o\xfc+\xed\xfb\xa5/K\x89\x9f*\x18p\\\xd9y\xd2!\xc0UY\xc8r\x97\x83\xf5NS\\\xd4\x8e\x07\x01\x16P 5&#123;L6\xc3\xb5\xb8\xd4\xaa\xe7\x94(\xed\xf8X\x86\xd2\x19\xdf\xfa\xe0#\x9e\x84\xf2aY(W\xf6c\xf12\x02(\xec\xe2#4c\x96\xc3\xfd\xd0\xe89-\xe6\xab\x83I\xf9xR\xf1X)\xad\x80cW\x0c&#123;!\xc4:y\xce\xb9\xb2+\x86[$\&#39;\xfb3o7\xbf\xf8\xbb/% \x0c8\x9c\x0e\x90\x94&quot;\xd5\t3k\x97\xe7]\xa1\xd2Iqm\xee\xa49\xc5\xe7\xc8\xfa\xdc\xcd\xc4\x93\xf2\tX\xcd\xfc\xfb&lt;\xb5A\xa0\x9d\xb9\xd2\xd5\no\xc6\xba\x96t\xd5\&#39;\xb5E\x0e\xaa\xea\x01,[\xfa\n\xda\x8a\r\x81\x06\r\x82:yR\x08J\t\xe2\xd5S\r\xac\xbf?\xccHJ\xc7\xf5;\xd1\xe0\x11\x9c\xe9\x1d\x87\xce\xe5\x14\x19eM\xebVx\xe9D\xb8&gt;\x9e\xbd\x9f\x9a\xfa\x96\xa8\xc5\xac\xeb\xf9\xe3\xf2S\xd0S\x002L$\x17*\x8fR^W\xecBk\x7f^r]kn\xdd\xdd\xb5\xf9\xba$Uc\x1e\x96_1&amp;\x1cY\xdc,]\xd4;\xe7D\x8d\xf6D\xf9i.WBm\xc1n\x92\x98\x97\x84\xbc9p\x8cX!\xb3\x99\xde\x84\xcd;H\x9e\xc3v#\xf6\x1f\xc2\x1dW\xb2x\\\xa5\xe8\xa0M\xb6\x92&quot;\x1f\x13bt\\Xi$@w=\xeb\xaa1\x848\x06\xef\xa9\x8a\xa3-~\x7fDA\xfa\xa9\x03\x13@p,aDx\xc4\xf5\x0e&gt;40\x1e\xb37\x92\x99\x86\xfefN.\xd6\x9d\xb1\xde\xf7\x14\xa1\\\x91\xe1-\xa7\xc4\x8b\xdf\x1f\x94:\xd2\xef\xd0\xda\x1f\x13L\x19)\xa9\x15\x84\xd5\x8c\xe4\xe6\xdbU\xbab\xe9\xe1\xb9\x8d\x1d\xd0\xaa\x81\xf3\xa0Jj\xbd3,\xca\x0b\xfd\xfe\xf9\x16w\xc8)\x1d0\x0b\xcd%9\xe1\x84%\x9f\xdf\xfd\x95\xe3%\xc5\x8d\xf0\x02\x06\xed\xca\xee&gt;\x94&quot;P\x98\xa3&lt;\xb0\xbd\xef\xf8\xae\xc5\xb5\xa3\xe1\xe5&quot;4\x8d\xe7zJ\xdf\x18\x94\xd3Bd\xc8\xd0\xc2\xa4\xb5\x89\x84 H\xc2\xeb\x87_\xec\xb9\x1a~ui\xf4\xd7\x02\xf1y\x182.\xa3\x91\xa0\x91\xa0\tn\xed\x9b\xb2\x1adV4\xdf\tbW\x83[\xc6=\xcf\xa2\x8a\x0e\x03v=\xbf6\xe3\xf6\xb3\x14\xe7O\xfe\xf0\xedSg\xaa[I\xad&amp;\x17\xab\xc4\xd8\xc6v\xdf\xd5Y\x932\xbf\x97\x91\x9f\x14\xcbKl\x1a\xeb\x81\xfd\xe5j\xbb\x1dl\x82\xc56\xd8\x04\xf0\xb8\xb5\x92\xde\xd0&lt;53^,\xf3eE\xd9&amp;]%\xd4\x8d\xb6/\x14Z\xb8\xb4d8rb\xa27gU\x1b00\n&gt;\x01\x08\xa5\xc5Gr\xfa\xc4s\xcbkT\xa6,&#123;\x05;\xf8\x9b\xd6Ls\x9c\xe6\x84cD\x1c\n\xf70I\xfe\x9f\xd2\xfazJ\xb91\x1a\xf8\x02r:\xee \xe7\\\xce\x9d\xee\x7f\xa0\x98W\xe1!]\x08\x9d\xaf w\xf5\xf5\x8fYB\x90n\xae\x1e&amp;f\x1b\x95\xf4rX\xf5\x02\xfftP\xba2\x1eM$x\xbf&quot;[\x89\x1a\xb9aO\x85\xf4\xb1\x91\xa3q|[\x06Y\xc0p\xaf\xc3\xb5\xbb\x19m3\x95.\xaf6\x02\x1e\xe9\xc9]a\xac\x85\xf5~|\x05U\x87\x92\xd3d\xde\x98N\x98\x8e\xe7\xda\x0f\xbc\x8f42`(W\xb4\x15U\xbb,\xc1\xa4\xd8\x8a\xa9\xb0\xc2T?:\xf9\x88T\x9d\xfa\xe2\xc1\xba\x12\xcd\x92u\xb0m\xc7\x03we\xd6v5\x8a\x13\xdb\x82\x16s\xaa(\xce\xad\xedVQh\xd6#\xb4\xbe\x1f\xb2$/\xc4\x98&gt;\xc0\x88\xc0\x8b\xc1\x97Mb\xa7\xb1\x94\xfe(0\x04#C6,\x8d\ru\x80\x83\t\xb2\x9dw\x1e\xfe=\xa2\x0f\xe9\x83\x05\xf0\x9b\x0f\x0b\x92.\x0fR\x1c5\xfeln\xe8\xddiHe\xea\x87F+\xdc\xcd\x95\xb3`tg6+\t\xf4s\x02\xcd\x93?\xb9\xea0\x0bQ\x1e\x01\x8b~\x97\xcf\x87\&#39;\xf7\x9e\xe5\xc2\x05\x1a\x1b\x08\x1c*\x9d2\xd8\x01\x93P0\x83\xca\xda\x96\n\x8c\x1f\xda\x03\xdc\x05\xfe&lt;\x00^\x1fIL\xabY\xdfo\xa14\xbc\x96\xf5\x87\x85r\xb8\x92[\xc6\xbc\xe1D\x1c\xae\x02J\x01]b\xcf\xf0=\xcf?t\xab\xda4\x94\xf5\xe1;\x91aC\xfb\&#39;\x988\xb0+\x90\xb3\xb6\xc1\x1c\xa3ovq\x10\x07\xac\xcdM\x91\x16\xf8c@\t\xd4\x1b\x95K\xd2\xd4\x1eP\x8b\x12\x89vwd\xf4\xc5\xcd\xe7_\xf7\xba\xb5m)\r\xd7\xb6t6s\x98\xcd\xca?\x18my\x89\x00BBSZ\x96\xb2\x8a+\xd9:\x85\x96\xa8^\x94\x16\x13\x9e\xd2\x96J\x16\xc0\xef\xfc\x8e\xb7f\xfe\xb5D\xc4\xc4\xe4\x80\xc0\x18\x15\x9db\xe0\x10\xc7\xd4\xf1G\xa8\xa9\xd6\x10f\x18_\xd2\x9f\xd5\xa6\xad+\&#39;P\xcax\xb3\x95\x13f\x07\xae!*\x8b\x93*\x80\\\xd3(\x05\xcaL\x9c\xe4\xddP\x08\x0b\xb8\x10\xbdk\x96\x19\xad\x1c\xc9I\xdc\xe0\xc7\xce3&lt;\xaf\xfb?\x99n\xa5\xe0\xbf\x06\xf4\xd6mc\xcc\xa9\x9es\x86\xfc0#\x9e*\xc9\xf8\x15\xb4\xbcI-@\xe7\x10\xaca\x10\x12\xa0\xad\xa7^\x12\x99Q\\:6\x07\xca`\r\x90\xaeu\xe16\x1b\xe6\xbbo\xec\xf7\x95X\xce\x17\x02\xa1V\n\xa9\xa1\xe2\xfd\xf9\xf8\t\xa6\xcawP\xd5N@\xc0\x148\x048\xd8Ll\xb4\xab\x9es2\xba\xca\xd2WO\x9b8\x04\xfc\x85\xefm\x848I\x02\x1b\xb81\r\x8c\xbb\xcf]\xfe\xc6\x14\x9d9\xba\x88#\xe5\x9e&#125;1zTa\xad\xa2\tj\xa2\xc3\xe1\x06\xf0\xd2XG\x13\x1e\xe7\x90`\x92\xb6\x8c5\xa1`\xf6\xf1A#U\xbf\xfa\x83\xb1*\xf5\&#39;C\xe5\xc9\xa6\&#39;\x90\x81\xee\x9f&amp;\x12\x19\x8c\xd3b\x89\xfbu\n\xc2\xab&lt;&#123;\xaav\x8e\xea\x1b\xd6\xc7@\xf5Ym\x199\xe4\xa8\xa5\xd9\x965a\x065z\xf4;t$\x19+sX\xb2\x89\xa04b1\xbc\xcb\x1d\xf4\xc5n\xebh6\x86\xea&amp;\xb9|\x9c\x98\xa86#O\x91\xd5B,%\x9d\x02\xad\x18\xa6\x90\xe28,\xe6\xff\xf86AL)Q~\xa64\x8d&#123;\xca\xee\xc1\xe3O\xc9\x95\x16b\x03\xa8\xfe9\xfd\x97\xbaw\xe1\xd0A\x95\xa0\x8e&lt;+8\xf3b\xb1d\xcf\xd9\xa5\xd9\x05&#123;\x19\x08\x8a/u\xcbM\xf0\x9f9Rr\xa2\x12\x8f\xff*[\xe9\xa0\x00&#123;\xfe \xa7\xc4\x16\x05\xbe\xb3\x8b\x80\x1f\xc8\xb3\xc4\x1e\xeb\x1a=\x1cR\x920\x16\x90\x1f\x83Z\x85$9\&#39;\x8c\xf3W\xb7&lt;\x88Y:J\xa9$\xaav\xf8\&#39;\xa2\x03\x0f\xe2A.\xd9\x82\x8f\xa3\xeb\xf9\xe3\xf7az\xfft\x0f\xe0\xf9\xf9\xa5\x11@\x17\xca%p\xf8H\x17\xc6\x08\x1d\r8\x11\xb0\xaf\xe2?z\xce\x86\x902N\xf1 \x8bL07g\xa2\&#39;\xb3\x16\xf1J\xbc\xc9\x81\xc0bx\xca\x00\xee$-Q\x1cS\xd3\xfd\\\xa2=\x8c\n\x9b\xa0b\xf2Xu\xa1\x13%+\xc0\x8d\xed\xb2\x81\xc7\xfb\x92\x8eJ\xba\xc9\x1e\x01\xf1\xcb|\xd9%\xed\x1c\xca\x812\xf2o\x9f;y\xcaJXRK\x17\xa8\xcc\x01\xe8\x95\xbe\xd9\xde\x83&gt;\x12\xa4\xbeC\x95\x1bYi.\x8d\xb9g`\x0f!\xfd\xe3\x89\xee\xa6\x9eE\x1cv\x1d7Z\x13\x93L\xc0\xc9TE:\xa6M&#125;\xf4?\xb0\xca\xe90\x01xhX\xba\xcf\xeds,\rn~,d\xd6\xd0U&#125;\xb0O\xfau\n\xd3\x8b(\xfc\x89\x97.U\xb2\x95I\xe8\xfb:%\xe2\x07\xdc\xb0&gt;\xb1R\xc7K[K\xd5X\xc8x\x1b\xf3\xb0Z\xcb+\xf4\xe2v\xbf4^\xd7&#125;\x14\x9a\x0f0E\x1f2\x89\xa5\x03\xe8;\xb0\xbb:\xfd\x97V\xb7\xd9\xc5&gt;\x13#\x126\x13\x97\x0fN\xf6\xc3\x92\xc9\xde\xbe\xf5\xfam\xc4\xb1\x84]M\xc0\xb0\xb2\xc0\xf5\x14p\xb0\x87fd\x00\xcb\x9c\x9c\xbd!x\xd3\x9bmT\&#39;\xa1g\xe9\xb6\x93\xd1#(\x81S\xbfT\x05\xa9\xf0\xd0\xc9j6\x89\xec\xbf\xe5q\x07\x8d\x1bmjp\x1b\x10%\xa7\xfa\x98\xdfY\x9d\xa7\x96\x7f\x8c\xb8\xbb\xce\xb0\xf7E\x04P\xca\xc3.\xe8\xf0o\x89\xba\x10T\xaa\x90\xeew+\xe0\x80\x1a\xf5\xa8L\xb5\xcdh\x9b|\xb0\xcf\xbb\xb7\xa9\xdf\xdf\xdd[\xd1\x022q5\x80\xd3+\xd0\x90\x97\x94!P\x12v\&#39;\x90;]%\xbdP\xfe\x97&quot;\x7f9&gt;_\xf9\x96\xd5\x81\xb4\x97\xe5W&#125;\x97\xb2\&#39;\xf0\x08\xa5|\xf6\x1dZ\xe0\xcdx4mV$\x9eB\xbe\x1a\x7fL\xd8\x93\x05\x16K&lt;\xe5\xeeu&#123;\xd9\xb7\xe3&amp;2\x9a\xa4\xf5?\x1dc\x16\x05s\xb0j2M\x18&lt;s\xba;\xe2\xe1A2d\xf4ps\x15\xe3Y\xd8\xa1\x07\xb7\x9f\x1d7\xfdjm\xb6&#123;\x17X\xb4\xce\xb7`\xa2ml\xd5\xc4\xa1l\xfd\x92\x92V\x81\xf2\x9d\xf6\xc2q \x81\xaa\x93\xb5GEd\t\xf5\xc3I\xd6tu?x4\x80\xaa\xc1w\x1d\xab\xa0\x1c\x8cc\xf8\x0fBO[\xf0\xf7\x83cg\xff\x01\xefH\x8b\xe4\x93\x04\xe7@6\xd5\\\x99\x03\xd4\xcf&#123;\x80\xd3\xb1\xf8U,C\xf7P\xef\xab\xf1\xce\xfb\xd5ZnV\xa2&lt;\xec!o`U\xbb\xfco\xfbl\xa8\xe8\x9e\xb0\xd4L\xe9:\x99\xad\xdd\xb2\xea\xb7\xdaC\x1d\x83\xcc]X4y\xd3^\xa4\x81\xc4\\v\x9c\x1a\xe5Y\x94\xae\xbe\x08\xbd\xa1v\xc8\xd5Gd\x1bsx\xdcQ\&#39;.\x9dD?\x15\x08\xc5\xf8\xec\x93\xc5\xcaf\xd1\xf5q\xbd\x1bL\x8b\xa3\xe0\xfd;\xce\xdf\x1e\x92\xb4\x8d\xef\x9cZ\x8e\x98\x1c,\xfd\xbe\x8a\x94\xa2\xbf\xcf\x9e\xef|W\xb2\xa9\xceW\\\xc4O\xe3\x04\x88\xef\xdf\xa6\x13\x16\x1e\xb5x\x98\x90\xa6\x80\xc8\xab\xef\x7fX\x1f[b\x0c?(\xfc\xa7\x04\x1b\xfaQ\xa4\xa8\x99\x7f\xac$`\xefA)\xe3\x90\x89\x08\xd0G7x\xb8\xcd\x02\x9e\x98\xee_\xc3tG\xa0!-^[\xcd\x94\xcc\x02\x8c\xc4\x13\xd4c\x0c&#123;s\xce\xae\x11\xefC\xd8\xb0\x03&lt;F\x8a\x89\xd3\xc9\xd2\x16\xb8\xc7\x15\xe0+\xe1K\x04\xc8J\xe6\xd7\xad)K\xd6\x98\x13\x17\xac\x9b\xdf\xde\xc1\x13\xf9=Q\x84X\x19\xed\x91KE\x93\x96\x81\xb1\x17\xc9\xa7\xf9\x9e\xadz=,\xa0 6\&#39;dcIv)\xea\xc3(*\x95\&#39;\x03\xaeI\x90KCr\x9e5jw\x87_V\xae\xb0\xa6\xb2\x1bs\xfbP\xe0\xdc\xf9\x05\x08&#123;h\xe9\x82v\x1e\x06RK\xa2\xe4\x14\xb0\xe20s\x0b\xa0d\xaff\x17\x08\x9c]X\x8dL2Fj&quot;?\x8a\xc4\xfd\xf7\x1eHb\x01\xd9?t\xbb3\xa1o\x8c\x10mg\xd3\xf3\xec\xa0\xca\x9a=!\x81\x8b\xb0;9\xc5\x14@,&amp;\xa4\x1d\x1d\x92\xb8\xc6\x03k\xa3y!\x9a\x94\x88N\xdd(\xb6\x85\xeb|\xef\xde-+&gt;\xd2\x8d\x82|\xe4\x00\x91\xcf\xef\x9e\xecN\&#39;\xe1\x03\x1c\xef\xed\xb4\xe7.\x1c\x02\x96\x8c\xaaZ`k\xebyP\n\x0b&#123;\xda\xf7\xca\x97\xd0~\xf2\xd7\xf7\xb6\xa3\xfaD6\xf3\x08\xb2\xb4\x9d\x80\x1eK*\xebg\xa1\x1a\xb9W\xc2\x0f\xce\xa9@\xe5f\x13\x06z\x81~S\x98\xed\xa8\xed\x9e\x08h\xb2\xa8\x8d\xf9%\x1f\x8e\xa4s\xe1a\xdbr\xdf\x8d\xcdh\xf3\xd6\xf1\xbfls\x95\n\xebJ\x05\x08O\x0c;\xe2:\&#39;\x99\xe1\n\xa1\xd8\xa8&amp;\x05%b\xfao\x89\xdd_\x9a\t\x04\xcd\xeelN\n\x83\xeb\x1b\x10\xd3\xba\xbf\x1e\x89\xcf|&#123;\xd9\xe6\x9a\xbd\x14-\xa7\x8e\xdf\xa3\xf6`\x95\xe6\xb0\x86w\xa0\x90:\xfa\xaa9\x823\x9d\x08\xa4\xe4\xdf`\xa0NI\xabp\xa9\xbc\xe2\x91\x98\xffB\x81$\x1a\x83\x9dh7\xbe\xd7l\x84\xbd\x1ebQl5\x955E\x14\x93/\x90\xdd\xf3F\xeb\x9d\xd0\xaa\xe5T&#125;%\x82\x93t\x98e&amp;\x96\xdcz\xc6ZE\xdc\xe2\xffM\x95`\xc8\xa0C\xc0\xb9|\xe9\x7f\x02p\x1d&amp;\x8fk6\&#39;\x81U\xfaf\xa3\n\xab\x16\xb7\xca%\x81\x18\x15\xd9\xf4\x7f\x9fX1\\\xc7\xd6\x1bk\x9eoS%\x15\xb8\x87Is\xd4\xc0\xef\x07B;5|\xa7\xf3\xbaJ +\x1a\xcb\xd2\xc8\xd7\xdc\xf5l\\8\xc7\x85\xdb\xa0\xe7S\x02\x9d\xca\xe7\xfd\xfdQ\x97\x81\xb2Z\x8f\x9a\x88\x89\xb7\xcd\xf0\xe2\x01\xe7\xdf\xbf\xe8VS\x03\x19\xfeJ\x97\x94:\xcb,\x0c;\x08(.\x16\xcf9\x18\xc4;pE\xf6;v\x1b/\xaa?\x82Jx\xed\xef\xdc)\x82\xbeplk\x1bw3\xa7\xe1\x7f=\x82\x14.(!*2\xa2J3E\r\xe0\r\x00\xc8\xc0\x9d5\xb4\x93wv\xf5`\xdb\x8cOR\n\x95^U\x10\xc6\xfd2I]\xa1\xdczF\\l\xb0Q\xcc\xb4:\xba\xa3U\x92\xd1\xaa\xda;E\xa1Ui\xef\x10\xba\x866~\xb8c\x9a\x9b&#123;\xe1a\x1d\x0e\xef|\&#39;(D\x8c\xbe&quot;\xf9i\x8e\xe1/%\x00\xb3\xb9\xd5\xfd\xed&gt;\x10\xab\xfb!\xc1*\&#39;Tiq\xcd\x8c\x81\xc1T\xf7\xdd\xeaV\x93\x08w\x18\xd1\xe4\xa9\xa9\x17\xea\x81G:\xa2\xc9\xc6F\xef$\xfa\xce\x13e\xf8l\x16\xeb\xa8\xbd&lt;\xa1\xe53\x1c\xc9c\xa83\x04r.\x94\x85\xe0\xfb8\x118O\x97;\xd6\xc0\x85\\0T\xdf\xf6*L\x86\xd4!&#125;\xee\x91@#\xb4\x800\xe2uT\xf0\xaa[\xfeAV\x93\x0b\xca\x87\xa7\xc5&lt;\x18jyz\xfd\xda\xb7p\x7f\xf1\xfe#\xb9\xbb\xbf\x01\xbd\xbb\x9e\x98\x10\xf3\x02\xfb\xfc_\x85\xdb\xd0=\x055r\xcc&gt;\xed\x9bw?\xc4=\xa7\xa0s\x05N\xbfd\x03\xa2\x0b\x93\x02.\xa5s&#125;\x93\x07\x86k\xd1\xd9\x85$C&amp;\x8d\x8e\x82\xcbQVH\x9f\x1a\xa4\xa5\rn\xcc\x17 \x83p&amp;u\xc5\x87\x829\xf1\x1f\x1e.\xb3\xe5B~\x127\xfd\xb1\xe9\xd8\xfc?\xc5_\\\xc2b\xca\x94\xf7\x82HEEh\xa6&#123;\x9fH\xb5\xf6o\x02\xab\xf2\x8c-\x16\xa2jG&gt;\xaa\x8fSM\xe3\&#39; \xd3\xdc\x82\x948,=V\xcb&#125;:\x97\x9f\x18*:&lt;\xe20\x8a\xae\xac7+\xaf2\xe0U\xd4\xd34\xc9\xb1J\xa3\xe2\x81\x87\x1bY\xcc\xd1\xcf\x7f&gt;M\xde_\xf94&lt;rG\xcb\x81&#125;\xac\xfdb\xd5`\xd2\xe5\x82\xba\xb6\xfa\xdbG\x19A\xea\xcc^U\x83\xf9\xdd\x84Ug\x86\xc8&#125;?\\\xca\xa2\x04-\xc6\x0f9z\xd0\x90\xcf~\tIM\x80f\x1e\x92\x01\x8a/\x19\xa3\xfa\xa5\x15\xe5\x91M\xcbiB\xb5\xaar\x82\x93\xc5\x98\xae\xb9\xab.\xa5\x84V\xbf\xbb\xd0\x8a1\xf74\x01\xf5\x94\xf7\xc3\xbb\x05D\xd2\xa6&quot;\xff\x812\xe2\xde\r\x1c\x08\xc8i\xca\x12\xdd2T\xfc\x1dLTw\x87~\xd1c\xf0DrL\x10\x02c\x94\xd7\xa1Z\xff\x1bQ\xabSp\x885\x91yP\x86e\xf9.\xb1\xef\xf5m\t\x91\xd5\xa8n\xa0I\xd2\x0e\x03E\xc4\x01\xc8\xfc\xc2LZ\xf8\x14\x8a\x90x\xe4F\xdet\x1fSH\xb1\x91\x95\xfb\x9d-q\xcc k\xdf@\x18vb\n\x0c,?\x99G*\xfc \xa3=\xe8(\x99\x06fX\xfa\xc8\xea\x93\xb7\xe7\x1b\xf2\x87m\x97\x82\xbb\x8a(\xf2\xf5\x8e\xdf\xb9\xb7\xc7Y\xca1\xbfB^\xd6\xd8yY\xb2\xd0/`aH\xd3&gt;\xc7\x17\x0c9\x89\xb8BB.\xa2\xbd\xd0\xb1|\xdf\x13\xa0%\x91\xdd\x06\\X+N\x0b:\x840\xbc\xbf\x0e\xf3D\xe5\&#39;`n\xa6=opI+Z\xcc\xc3x\xdb\xd6s\xca\xaf\x8a\xd8l\x1c\xcd\x17\x1d\xbd\xed\x92\x85\xac\xaeZ\xf4-\x12\xf6H\xfe\x11\x98\xfb\xc0\x91%\xd4\x8c\xd2#\xf6m\xef8\x8c\x8b\xc0\xd3\x8f9\xd7$\x10\xe6\xe5\x14\xb9Q$a\x17\xdc,\x0b\xa6\x00W\xa3\x01WP\xb6\x01\x10\xcf\x9b\x1d\xb6\x8ed\x9f\n?z\xae|el\xc7\xf0&#125;I\x1aj\xf5r\xbd\xddg\xb1\xf2\x00L\xc9\x0c\xb0\xae\x04;\x89\xa0\xd7Cd.\x99Q;C!J\n&#125;\xc3\x04\x8b:\x92\xde\xd5v-\xa75qo4\xd4r0Ov\xfe\x86\xd7\xafa\xf9p\xac\xd7\xb7\x01\xf3\xf4\x9d\x0c\xd9`\x0f(\xcfA\xf6\xa8\x90\xff\xa49\xc7\x19\xa3\xcb\xdc3\xd5V\xd5\xcc\xca\xff\x83\xf6\xab\x89\x16\xf9\xfc\xe8\xb4\xd6C`\xe6\xeb$\xd3\xd4\xbf\x81\x83\xa4LL\x10\xb4\x8c\xc7B\xa6:TH\xaa3\xca\xf0%\xd0l&quot;\xa8\xb7\x04\xaa;\x04\xf9\xda\xbe\xaax\xdb\x9cp\xd4\xb9\x90S\xb8\xacW\xbb\xc0\xab\xafso\x1c@\x0cR\xfc\x98|\xa8\x91\xf3\x88\x11\x1fE\xdal\xae|J\x06?\xa7\xfd\xe9\xe0%\xc8,\xc9\x14\xb1\xf0\xc5\x86\xd6\xa2k\xe2\xee\x98\xd3\x08-\xb8x\xf1\xb0\x9a\xe9a\x10\xae\xbc\xc3\xa9m\x0c,a[&#123;\x18&quot;\xb1vbl\xafB\xe9+\xa62\xc0\xca\xbeC4\x12\xbd^u\xc8\xc2\x1eR\x85\xea\x01\x9b\x1f\xc5\xffug\xcd0%\x9f;B\x8b\xa7t\xfd%\xef&gt;\xae\x8c4\x96\x9fi\xaey\xaeg!\x85\xba\x0c\xad8\xce\xc6\xc0&#123;\xb33\x13c\x18\xe3\x02w\xa1\xc7\x90\xba\xf1\x86\x7f\xb2\xa02\x1d\xcf\xc2\xb3\xd6\x8d\xea\xfc\x11K\xe6C\tg\xaaq\xad\xf2M\xae\xc1.\xfe\xff\xb8\xd0\xa1\xae\x02\xa83p\xa2\xeb \xca\xee\xc6\xcc#:G|\x88\x8d\xd6\x8e\x94\x81\\\x85\xa4P\xa7\x80\x9d\xd7F\xf7\xac\xf8\xa7F\xa3L\x1a\xd0\xcc\xe0&quot;q-J\xc8\xdc\x98\xb4\xbe&lt;$C~\xca\xd1\x80\xad\xe9)m\rCM\x9b\xd2c\xeb\x9c\xa60\x08\xdd\x8e\xdb\x7f\xbb\xf7&gt;\xe9\x0e\x9f0g\xf6\xeei&lt;.\xde\x08\x1c#z\x86\x8a\x08\x1f\x973t\xa3\xc7\xc6\x17\x05&#123;\xa9H\xe3\xe1.\x8c%\x1f\xc9(\xaeFz]\xf4\x97\xacY\x91c\xcbC\xa5\x90\xa4_\x86\xb0Q\x81\xf7x\xeb\xce\x8bm\xbbX\x10\x9f\xd9\x01\x90Y\xdb\x08\x0b\xa7M]\xbc\xf6\xbdpG\xc8\xe7\x92\x91\xee[\xd9:-\x8a~\xddI\x8c\xb0U_\x15\x8aO|\x88\x81%\x87\x8b\xdfI\xb4\xe0VS@\x93\xa0#X\x98S\x1f\xb6\xb3\xf5\xa7&lt;\xd0\x87\x02H\x9c^\xc2LM#\xd6\xe7\xa6j\xa4\x16Nd\x02\xc4&gt;\x8b\xe9\x95\x05\xba\xf0\x93\xc4\xf5\x83\xe6\xf1\xf8|\x97*\xc2\x81\xe7\xc0\xc0\x10]\xf7?@UI\xa6A\x06[V]\x1e\xe1\xba\x96\x8e\xcfz\x04=$F\xf4\xdcn\xf2\xde\x93ids\xc2\xae\x11\x9c~p\x9f`M\x86\xb2\x03\xed\x99\xf2\x93y\xb2\xfc\xa8J\xdf\xb5\xe9\xaf2c\xbe\xb7&amp;DK\xcd0\xe9#\xb4K\xfa@\xbe\xffS\xee\xc5i\x8c\x8a\x92&quot;\xb6\x83N\xf0C\xff\x04\x86\xd7\xb7\x10ocfK\x9c\x1de\xa7]S\x9enF\xd2\xb5\x9d\t\xc5\x1e\xfb^\x89\x15\x92\xbe]1\xcd3\x04\x7f\x81t\xb8\xae\x08\x8d\xb7V\xb8\x1d\xb7P7\x7f\x06\x12Jk9\x8e\xfbAg\xd6\xa0`\x9cH\n\x96d\x17G\r\xd4\xe9\xa7\x8an\x8d\\\xb0\x9a\xb8\x9fG\xc4\xb3\x0f\x01\x8d\x86\x10\xe2\xecE\x0fix\xc2\xd6=\xc0\xe3\x0b\xf2h)\xf8\x9c\xfd\xb1\xa4\xcf\xf1\x1d\xa6\xe1\x8d\xf3\t\xe6b\xa2\x02\x16c\xbf\xde\xa0O\xb5\x00!\xbc\x815\x7f_\x0fD\xd0\x14\x99q\xe4n\xed\xbb\xee\xf6\xa9&#125;\xefs\x9bmox3\x01\t\xe8\xeb\x0b\xd3\x96\xa6\xbaA`\xd6*@&#125;\x90\xc7\xd0n\xf6D\xaf\x05\xcf3\xa8\xed\xef/6\xc7\xcd\xb9\x08\nA\x14\xb4\xb0X\x86\xb7\xbf\x8bO\xbe3\xc8%\xeeq-qm\x11=C^W\xc5_9\x98m\x1dg\xd3\xf9\xef\x7f\xc2y\x014DOT\x9e&lt;\nz\xe2\rb\xd5\xf6|\x05\xb3\xe55\xca\x8as\xb1\x18\xfai\xa0\x83\xcb\xb0: (|\x05\x85\xda\x90\x86\x08\xf2\x92%\xeaQ\x1a\xae\x80[\xf7/^\xd0\x80\x11\xc3c&#123;\x83\xc8#\xc7\t$g\xaf\xfcE\x8d&#125;\xdc/u\xff\xed&gt;(\x83\xed\xd3\xeb\xfb\xbc\xa0^\xe5U(\x9b$\xdf\x8f\x9f\xb1\x85\xac\xc1[\xbf\xbf\x8ez/\x80+,\x19\x1b\x91C1\xae\x98\xb1\x13\xcdJ\xcaq\xbd\xb9\xce\xccW\xed \xfe\xf1\x8b\x95Z_\nL\xb4\x9a\x9a\x83\x08\x0bh\xf21\xe7\x83\xdb\xc9\xc9\xfaz\xaa\x9b\xb3p\xdf\x99B\x8b\xff\x059\xef\x82]\xbf\x85\x16;9\x8d%\xd2\xa5nN\x97\x87\x7f\x84\xc76_\x1e2\xc9\xbe\x03\xab\xedB\xbf\x07\xbd\xbb6\x99\x7f\xc6/\x80\x9a\xae&#123;\x98\xd4&amp;\xde\xe6y\xd8b\xd7m\x98\xc67\x04\xe0T\x94f.\x8ch\xec?v*\xab/\x01,\x00.\xf0Z\xfa6\r\x82\xec\x8f+\xd3\x96\x18\x10p%\x1a\xe1\x8d\xda\xb8f\xa7(^F5\xb2N#,\x9fJ&gt;\xdd\xb2\xb3\xd7\xd7D4&amp;\x05-\x80\xbe\xc4\xf0o\xe7\xc0\xd4(\xceo\xb4\xefKw\xa8\xdbO\x96O\xef\x97\xd6c\x03\x8f\x19[H\x03\x1d\xf7\xadI\xedv\&#39;\x99\x86t\xba\x9d\\\xdf\x179P\xf6P\xa3Y\xc5\xd4\x05\x0f9\x9b\x9d9L\xfa\xf2\xfaJ\xde5\x8a\xbe\x8f@\xf6\x15\x9ej\x87\x0f\x90\xc8\x97Z\xdf*\xce\xe5\xfe\xb6\x1a\xee\x9fD\x19O+Ry 5\xad\x82\xbdT\xdc%\xce\x1b\xbf\x01d\xc2\x08\xff\x1a|\xe7?.[\x91\xee4*\xe1!\xb9\xb1\xb5\xfcg\xa8\xeaI\x06e\x01\xd5B\x93\xfdP\xdd\xf6\xefz\xeb=\xdd_b\xd0Ig8\xd0\xf1\xfc\xf8[ms\x83skl+\x9e\x1d\x03\x02&quot;`\x04QW\x93\xc4t\xe9\xd5\x1f\xc6\xae@\xfa\x97F\x0f\x93\x0c2\xc3\x98E\xcd\x1eW\x03\x05S\xec\x8ew\xf6\xd7/\xb3J@\x0ew\xb8P\xe8\xa6\xa3f\x85\x8b!\x80QP\&#39;\xf9\xf9s\x08\x94\xf7\xa3\xbe\x858\x87\x0fT\xf5\xdb\t\x06\x03\xa6h\xc0\xf4o!;\&#39;\xb1\xbb\x90\xd8\xbbH\xbcV*\xa5\xdd\xb7\xe4rC\xe3\x8beh \\\xa61\xd6)\x8e\x1bS\x91w\x17\xce\xbb\x87\x15H\xd7f\x93\x7f\xc5\xb2z\xa7\x8cvn\xdb\xf9P1\x07\xa7\xe2\xafz\xd7\xcb\xbd\xdev&quot;(\x99\xb4\xbe)\xbe\xceW\x15w\xc0\x03&quot; |:\x06\x9di\xe0B\xae\xfb\xb8\xe4\x92&#125;\xc8$\xf2\xd3q*\xf3\x8c!\xb8F\x9d\xb2K\x1c;\xf4\xd7*\xa8\xdc3&amp;\xb0\xccG9\xa7qi\rEPc\x82`\x18\xe7\xf1\x16\xb6\x877z\x12\xb7\x04\x17\x94Y\x82\x91w_\x81\xb4\xe3\xa9\xf38\xe6rw~\xd7\x196\xb1N\x8a\xcf21ZI\nF\xce\xa1\xd2$\xc07\xd9P\xcb\x1a\x12\xff\xd9N9R\xa6\xc2\xf0\x8f\xe5[m0\r\xcf-(\xcc\r\xde\x92\xaaN\x9d\xd5?0\xa6%\xa3\xfbK\xbaD\xf9*\xcaB\xb3\x00L\xa1\xaa\xb9\x15\xac\xee!\x96\x0b\x0b=\xb9g\xe91d\x84\xbcJ/\xa6)d\x84x\x00\x18\xbf\xb7:\x86=\x84\xcf\xf4D\x93\x1b\xf9D*\xd0\xa9\xcf\xf0\x9d\xae\xfa\x06?\xf8\x0f\xb4\xd1H O\x15\xd5\x11$\x88\x19\x03a`\xe0\x90\xda\xa3\xbb\x1c\x9c:\x1c\xa6\xabU\xc6u\xf1\xf4\x04\xd5\x1a\xfc\x8f9\xd4\&#39;\x1dy\xba\xb2\x9d\n\xac\xbe\xf2\xddc\xcbb\xa3\xc8\xe9\xe2\xb2\xe9=H?\xf7$i\xa0\x92\xd5\x83CF\xef\xc3\xccS\xae\xd2s\xdc\xad\xc7\xd7\x904\r&gt;\x0c\x08x\xfev\xf8\x18\xcf\xf7p]3\x1fc\x8b\xd1\x8e\x0e\xc9C[\xd1\xeb\x99L\xccrYW\xc3\x08p\x863\x9e\x13\xff.\xfc\x847b\x15\x9c\xf2\xc2\xaf\xd6\xd2-l\x9d\xe3e\xecO4\xb0\xfeD\xe7\xfc\x80\xa0\xe6\xaa\xa30\x99\x86/\x92\x95\xb0\xe2\xf7w9\xe7&#123;y\xb6\xff\xb9\xfd\x13\xea\xacn\n5B2\x0fW\xf6\x04\xde\xa2\xf2\x7f\x7f\xf8\x95\x80+\xdeD\x10c\xde\x9b\xa5\t\x7f\xd3\xe0\xc0)d\x9dM\xec@\x83O\x02\x18\xb2\xe5\x8b\x1d\xe9;\xaerp\xdd\xf8\xbe\xe6\x14\x12\xcf\xe3\x02\x05\xdf\x1f\xeev\x13.1l\x80Uqk&#123;`\xce\xc8\xf7y=\xe8\xa7\xdex&lt;d~\xd9fh\xce\xa8\xe6zD\x19\xbf\xff\x17\x8dA;\xd2\x8f\xa1\x8c u[h3`\xb0\x86\x17d-\x10\x06\t/*\xf0YIA\xa9zP\xfe\xe7\xc5;\xdb\xa9\x14\x06laA\x831\xc4\xa3\xe0.\x13\xe6L\xc1\xb8ows\x1cY\xfa\xd65\xe6.\xado G\x9c;#6\x01\xb9\xe0\xa2g\xb7c\xdb\x1e\x93~\x1f\x98]Bb\xf9//\xefi\xa4\x1b\xea&#125;F&amp;\xf3\xb9\x9cH2\xe3A\xb6\xd3\xb8\xf1\x9b\x80q\x1d\xbbl\xcf\x80zY\xc7\xe7v\xfc\x96O\xe1\xd0\xbe\x9d\x13\x9e\xb0\xaf\x97\x1eF\xb3\xcb\xa2\x909\xf6u\r\xf5a\xb2@\xe1\x15x:\xff&quot;\x95\x8d$\xe51\x1f\x06\xb0\x8d\x0c\xd11\xe18\xf2\xd7\x89\xae\xc18\t%ukC\x00\xf3\x89q\xf2\x00\xe7?\x1b\xd2e\xf11\x85WO\xb6&#125;cA\xf5\xc9p\xef\xe4\xee\xb5\xed\x10\x9b\x1bLV\x97\xe7\x96\x00i\x0cqX\\.;\x8f,\xa9P\x11P\xd4\x9c\xdb$\xd3\xec\xcd]\x81\xe4\x95\x8f\x16\xa3\x1a\x89\xee\x15D\xf0\xe5\x19&amp;0W\x03\x03\x88\xcb\xa1Z\x8e\x93\xce\x18\xa6\xdc\xc6\xf1G\xa6x\xd4u\xac@9\xb5\rr\x84\xf2\x97\x94\xc4\x93\x83,\x96-5F \xa6G\xb2\x83\xd7&#123;`\xbd\rJ\xbes\xcb\xc7J\xc3\xbb,q\xcd\xbf\xc3vR\xe8`\xfeN\xac\xac&quot;J\xd7\xa6~\x0c\x8dk\xde\x91\x0b\xf1\xae\xaeMq\x0f\xe1\xd0\xd6\xb6\xde^\x17N_\xb9\x83\xfc\xfb\xe8%\xab\x0b\x01IXn\xba\xf9d\x93\xd4\x81JY\x8dn7\xd5C\xdae\xb6\x14*3\x03\x8a\xc3 \xb6\x05\x92\xcde\xdf\xa0\xba\x08\xb2\x1cZ\xe7\xc7\xb7\xcd\xef+L\xe5\x93&#123;\x85FN\x9c\xe7\xdd\xf2^\xd7x2`.\xaa\xc7\xb6v\xde\&#39;p$\x1c\xf1 \x0e\xaa\xd2iN\xcd\xe1Q\x01^x\xb9\xc3\xb5\x1e\x84\xd6f7\xf4\xb8f\x13\xa9\xde\xe7M\xd0\x95\x84&gt;\x05\xee&#125;\xe7c&gt;e\xccj\x01\x93\x05\x04*D\xc0U\x00\xcc\xa2\xb7&amp;t\xf5\xde0\xed\xa7J2\xc3n\x1a\x88T`9:\r[\xb0\x8dY\x9fz\xa6z\xb0\xa2\x9b\xd4\xdb\x19\xe7\x89\xd22\x9c\xa1\xb32$\xfa\xb6\xc1\x99P\x8f\xc6=\xf1\x8bu\x97\\\xb7U\xdd/4\xd9\xcb\xed\x06\xb9\xb8p\xb4$(\xa8j\xcf\x8e\xef\xb3\x81\xf8&amp;\xa6.\x10&quot;UL\xdawo\x9d\x15f\xf3\xf3\x03rc\xe4\xfaPL\xea\x83\x18\x1c\x9eA\x80\xea)x&#123;;\xf6\xaa\x81\x84\xc7\x1d\x17\x00K\xa9S\xc1I\x8d\xb2\x1ey\xc0\xe3A%\xc4\xeaC&quot;r\x90[\xb6\xd3&quot;|&#123;UC\xed\x82&lt;x\xf7\xcag\xb1\xbb\xf2L\xb0,o\x85\xa4o\xbe\xfb!c\xfd\x8eG\xfa\x95\x0bs\xca\xef\xd3\x0e\xa1_\xc4vC\xad\xa9\xb99\xff\x9cb\x14\x1d\xaa\x81\x89\xde\xdam\x10\x1f\xf6%u\xac\x0e\xb4\xad\xedlU3\x03b\x9dW\x17\t\xfe&gt;\x05!M\xf8Em\x1e:\x1b#\xbb\xf4\x90$\x16&lt;&amp;\xdaR\xb0\xa1$\x94cw\xa2\x95;(\xed~\xde\xff\x16\xd1\xedx/\xc2\xae\x1e\x8b\xb2\xabr\xf1\xd1B\x80\xd8W\xe0\xef\xef\xc5\xbau\xf4g\&#39;\x85\xb4\t\xfb\x00\xb4\x13\xf2  \xff\x7f/\x9f\xff\xcb\x9a\x9a\xb2Bv\xc8\x8d\x82\xaf\xecp8\xb5\x98f\xbb\xbd^iN\x80\xf6\t\x17vB\x18i\x0f\x11\x9e*=\x89=xi.*X\x7f;\xd1\xa9&#123;\xd7\xd2\xa0\x99\xd7\xddQ\x8d%6\x86\x97\x11\xd3Y\xbans\x01\x94\x9a\xdf\x86`\xaaK\x9e\&#39;\r\x1b\t\x19\x88\xa8N\x1f4\x81\xa2\xcb1\x0f\x02\xda/5[-8\xc5:R\xdf\x98\xd3\x93\x89\xb6\xc2\x00&lt;\xd1yvm\xac;&quot;\x1f\x9c\xab\xb8_0\xde\x0f\x02s\xb1\xdfM\t\xc2\xebb\xcft\x15t\xa8\xcd\x9c\xf5\x0fB\xc0\x8f\xd5\r[\x92\x86\x9b\x9c\x8f\x8bJ!\xdb\xd2P\xf2\xc5\xf2adjo\x82\xb5\xccB\xe4\xf5\xdf\xe7\x8e\x08\x8eQ\xd9B\xb6\xdeLADpyA\x1c\xa5\x90\x94;H\x01F\x8f\xbb\xaa\xf61jL\x81\xb6Ta9&quot;\xb2\xbf\xe22\x90\x1d\xbe6\xbf\x87\xb3mb\xab\ny-g\xa8\xe5\x16\x8fT\xe1\xaf\x13\xd3c\xe7l\x8a\x92\xd2\x1b3\xb3J!\x15&#125;HQ\xf5Ld\xe5\x8d\x9b\xf3$%\xb1\xfb\xf8\xd1\xbeU\xedx\xb7saj\xb7\xadK\xc7\xa9\x7f\xecj\xd5\x92\\\x10\xf7\xd7\xe0\xef\x0f\x9cm\\i\xc7&quot;\xad\xbc\xba%\\\xcb\xa6\xed\xee\xd4\xb8\x9e\x90\x98\xd0\xb8\xc0\\\xe4bG\xf7\xe6\xcc:\xd3\x96\xba\&#39;\x83&lt;\xbd\xe0\xba5=[j\xc4\xdc\x18a\x8d\x163\xba\x86\xf5\xbf\xfbW|\xb1\x14[u-\xa5\xde\xed\x1dM\x10\xdby\xbc\xb5\xa4\xa5\x96\x80a\xb94\x8d\x12b\xe4\x97\xb7\xf6\xac\x8d\x0b\xbe\xfe\xd7\xf7I\x98\xd6\xe7\x1bM~\xa0\x01\xa6\x1cY\xf3w|\xf9-=W&quot;\xb6\x1bl\xa2\xe2=\xcb\x05\x15#&quot;3\xb0%6\n;\x93\x8d\x9er\x94\xb94\x81=v\x14\xd0u\xb6&amp;\xe4=v\x11U\xb7j\xee\x15i|\xe8v\r\x12\x90M\xf6\xff\xda\xcb\xbe&quot;\x87U\x90-7?\x14\xd1S\xb9\xc2\xbad\x89M\x19\x0b\xc9\x03\xe6\xc0&amp;\xe9\xa9s\xfb\x01\x0f\x1c\xd0&quot;\xb7fP\xa2\xe6I[\xa91\xbbf\x04\xf4\xdcB\\\x01`\x08*y#xu\xa2\x7f\x9b\x08r\x9fD\xb2\x9a0+\xb1\xb6c\x85\xb9y\xe5\t\xf2T.|v\xbf\xae\xb6\xc2P%\xbeQ\xc0\x1a\xfe[\x80\x04\xbf\xa8\x04DY=;J\x970mm,\x18\xa8\x98y\\H\xe1/)\xe2L\x8f\x8f\xf1\xa9\x89\xc86\x92\xe0\xf4\x91\x853\xee\xc0&lt;\x83&#125;\xe8\xf1\xe3\x13\x11\x98\x03\xe3\xd3bi\x0f\xb6\x15\x0e\xfde,tm-\xf2q\xd3\x89\xda#O0\xf2\x85\xd2\xb0\xca|@)\xe3\&#39;\x03\xdf\x83\x1c\x7f\x12\xbd\xa0s\xce4\xd0\xae*\xe4\xba\xe4U\x8bc\xf0\xf7\xfb]\xf9\xb4\x15\xf5\x80T\x0b/\xdd\x84(K\xd9m\xc6r\xec?@\r\x18=3aa\x10I\xf5\x9f\x1c\x8c\x10&#123;&gt;\xd1\xd5\xfb\xcc\xc5\xbfUQTZ\x12w\x97\xf9&lt;\x9dr\xba\x91\xe1\xa8[etHxm1\x97kF&lt;\x9dn\xa4Z\xb6\xddO\xac\x81\xbe\xb6|\x9d\xf5\xe7\xfe\xdd\xba\\4&gt;\xa2\xf2S\xc1\xefDe\x86\xc7\xf8\xd3\xa7i\xdeh\xa5\xae\xb8\xaa\xfeH\x90\xfd\xa3]L\xa3,\x0b\xa6-IQ\xd0\xe5\xdd\xc8\xf6\xe3\x89\xdf\xb6\x1c\x16\xa3g[\x96rMQ]\xc5+V\x81\xe8\xd2U&#125;\xf8&#125;\xe6\xbeP\xedfl\xfa\xde\xc5H\x1d\x1d\x8eb\x9a9,-\xdf\xa4\x8cM8\xbf\xa691\xa3g\x99p|&lt;\xc9\xd7\xe7\xe4\x15\xb0\x9aTf\x7f\x99m&gt;.\xd0\x0c\xd1\xa8\x86&amp;P\x86\xb7F\x86\x9a\n\xd0\xce\x86\xf2O\xb1\xcbw\xf3\x00P%\x18\x97H\x88?\xa3\xe9\xed\xc7\xa0k\xe4\x949w\&#39;\x0bk\xf5R\xec:#\xd2\x04\xc7@\x9e\xde.\xf7\x95g/\xbf\x18&quot;\xb5\xe1.\xb8\x1et\xe8\xd9t\x97\xeaWpM\x05\xcdW\x139(\x89~W+\xbd\x96f(\x89_5\x11&quot;.~!\xb4 \xa3\x18\xb09j\xb2\xf3a\xa4Q\x88\x8f\xad\xc6\t(,5\xb8d\xd8a\x0f\xb4\xb0iVp\xf7Z\x91\x19\xc8&lt;\t)\xd4j=\x83xB:\xa0\x08\x99\xad\x9e\xfc\xf8\xb1\t\x93\x8d\xa3\xd1\x1a\x8c\xe1^ve\x99\xd9\xe7\xa8\xedC\xea\xc7\x824\x95)E\xecE\x9f\x08\x0e2\xc6R\xbc\xb2\x9f\x97\xe1\x9ao.W\x07pKg&#123;^\xbf\x98%\xe0f\x18\x1c\x1ep\xf0\xcc\xdd\x97\xb7\xf2\x1b\x97\x87P\r\xc3\xb5zQ\x1dd$0e\x16\xb7\n\xb5\x80\xc4\xc8^\x98w\xd6\xba\x8bvz\xb0\x9a\x9d?N3\xf1\x08\xd5\x0b$\xf3\xe6$\xb3&#125;\xdf&#123;&gt;\x8b\x96my\xf8\x99\x1c\x1b\x9f&gt;\\\xd5p\xc2\xde\xff\xcc\xe4,\xad\x0f\x11\x9c?\xb8,\x8d!\x91\x11\xaf\xc3\x16Z\&#39;KE\xfb\x072\x004\x18\xf5sR[\xa2\xc4l\x9738\x8c\xf6\x9c\x01\xfe\xcd\\\x8b\xc3&lt;\xe6\x1e\x84\x0c@\xd6\x1b\x8f\x1fy!@T|4\xbdy\xac\xd7\x04h\x92\x11H\x02\xa4\xbfz\xe2C\xfca\n\xadX\xc4\x1ac\x1f\x1a\&#39;\x84\xbf&#125;?b\xaa\xedG\xb4\xcd\xd9\x81pgx\xb4\xfa]\xcd\x92O\xbe\xaf\x89`v\x80.\t\x95k\x91v\xe9x\x01\xe2\xe8B\x8d]\xf3&amp;Ah\x0f\x16\xc3\x1fc\xe1\xab\x05\xb5\xd0~c)3\x96\xc1\x1a\x15\xfc\x9c\x08(&#125;\xb3\x14\x174)\x9fX\x1e \xf5\xd3k\x8aOy$\x7f\x80\xd0H\x17\xf4fo\xb2\xad\x84M`\xb5R\xbd\xa8w\x8f\x0fY\xb1\xda+\x9bQ\x9d\xaa\xba\xd8\xbc\xb7A\xee\x15x\xc9\xdf\xcb\x98)2\xb9q\x08N\xea\xbeq\xd85\xd5W3\x0f\xdbk\x80\xdf\xe9\xd7V\xf4\x92I\xbc\xa4\\:\xeb\r\xad\xa61\xac`~\x9d\x87\x0e`\xc1&lt;\x1c\xc9\x1bK\xbf\xc5*\xa5\x1f\x116d\xf0\xf1\x80#)S\xb4a\xca\x87\xfa5N\xb2\xb1Y`\x00\xf4&gt;\x1f\x97\xfc\xb5@\x93vC\x97\x8c\x92\x14\xed3\x15\xaf\x11,\xcdZ\x9d[\xfc\x06\xa7Gej\xed\xb8\n&#125;&amp;LVh3\x9d/\x91\xb4\x9b_\xfc\xf3wWyF\x95\x02\x9c0\xcc\x9bX\xeb\xe0:|2\xf7cR_\x9d\xa6\xc7&lt;\xd4\xf2\xc9\t\xcc\x04~WC\x9a\xe1\xcc\xec\x8b$\xac\x1f\xf4)~\x81@\xf2\xfct\xe2Z^/5\xd7\xea\xf8&quot;x\xbc\xfa\xdf\x11T\x1e\xf5\xb5\x8b\x9d\xe6q\xd6&amp;&quot;h3]\xebd\xf4J\xe2k\x04\xb0\x01\x19&lt;\xb1\xd5(\xd7\x16\xd3\xedD\xb4\x97\xf3\x1eW\xd3\xfd\xdf\xc9\xe1\x1d\xe6\xe9\x1f\x84\x9c\xde\xbf\xe4$U\xb7\xa3\x19D\x82\x03\xdd&amp;\xcc\x05\x8e\xde\xe6t\x10[;\xd4\xeb\xe88\x98\r\x1e\xc5\x83\xf7A_\x10(wH\xb9\xb4\xde\xd0&lt;\xf1F\xae\&#39;\xfak\xd8\x9eG\xf9\x82\xb7\x10s\x9e\x89\xe5NI\xa6\xe7\x81\xe5G\x06\xde0\x17BP\xf0\xa7\xe0\xa5\xea\xb4\xe2\xea\x00,\x10+pV[\x02]\x1c\xf6\&#39;O6?\xb0\xad\xcf\xe34\x02C\xf1)\n\xe1\xcf\x00\xaf\xb0\xc8\xd1\x9c\xd3W\&#39;:\xb24\x1ba\xdc\xf1\xc7\\s)$J\x06Y\x1c\xb4\x9f%\xc6\xc0\x0f$\x90\x94\x9a\xc6\xa1\xda\xea\xe5W8o\xb9\xbd\x10\x19,wP\x17#\x94\xc2\xbfl\xd7=\xd4t2\xe0#6\x10\xdb5bU\xa4\xd2r\xae\x01\x92\xb1\x86\x8d\xe9\xb8\xd53#\xff\xca\xd4S\xb6wa7\x81~\xaa\xf3\xfe\xd8bls\x04DI\xa4\xb5\xa1\x85N3b\xa5\x08\xf9\x02\xd1\xf9ok_y\xad\x04\xae\x86@\xac\x97\x88\xb9]\x9a\xfe\xb6\xda\xfd\x8c\xbaH2\x15\x96\xd7X\x82*\x0f\xf8$\x88\t\x93\xdc\xc1\xfb\xb2.\x85:\&#39;\xb45il\x85\xe1\x87\xcc\x84\xb8\xd8\x8d\xb9&lt;^d\x88\x98\x16(\xe3\xd9\xaf\x9e\xdb%\x86\xca\xe7\x84Uf!\xca\xb8|gT\x95\x8dV\x93\xea\x19\xf08\xde&amp;@\xa2Z\x8ca\x9a\xd7\x02\x92\xb6\n\x00\xd5\xd4j|\x95\xbe\x9a\xcaE\xe8\xcd\x87\xcbX\xa9\xa1\x90\xdc\xc2S\xf3f\x1bN\x9b\xae3\x95\x99i\x14^\xcf^\xafj\x0b\x85\x89\x97=0\xf2\xcbi\xbd(s&lt;\x9c\xdb\xe8\x05,\x07A:T=\x85\xd8`R\xab\xd7\xbaV*\x87Ny\xc1M\xa9\xa3\xcd\xc0s\xf2\xcdw&gt;\x0f\xa6\xc4\xc5\xd8\xbdq|d\xbdYc\x96s\xf3\x95(k\x9e\xb8)M\xc1\xe1\x03\x9an\x89,\xf7e\x19D@\x18\x93\xf8A13\x87\xbc\xc9\xe1\xda0\x0e\t\x1c.\xfb\xd62\xe7u\x14\x0b\x93\xbe\xf9H\x80\xf2\x11\x8b \t\x00\xbd\xb5\xf3\x80\x8e\x8f\x8c\x85\x00r\x14id\x86Y\xa9\xb3Rh\xa9\x99\x83\x94\x02\x95Z\xa5\xd2yY\x84KJ\xf3D&quot;\xf2`$\xc1\xe6\xe4 |\xe6\x00_/\x93\x01\xa0\xbe\xa8Z\xdd#\\W\xa3\x0b\xc4\x86\x94\xe0\x1c\xbb\x87]\x93\xfd1\xa1\xe8\x96\xc5bD\xa6\x1c&amp;B~\xbaQ:\xd8\xb2\x84\xe3\x0b!\xfb&lt;\xb4\xfd\xb4i1\x89\xc9\xc7\xe18a\x88\xd8\xd7\xea\x1a\xbbV\x81\xc0\xe0\x92\x7f\x87\xcfp\xb5\xee/d;\x8f\xa4\xe5\xa9\xbf&#125;\xf4[\xa9+\xb2_&lt;\xa0\xcdw?\x1e\xf2\xff[\xfc^\x1e!\xad\xdb\x11\xf0\xda5\x86\x17\xa8\x142vE`\xb5q\xd9k&gt;\x97\xc8\xb6\xa8\x08a\x00\xbb d\x91~v\xe7\xf9T\x1b\xeb\x97\xea\x12\x8c\xe8&gt;\x8cr^\x1d\xba\xf8Q\xdc\xfa.\x93c\xfbO\x07\x1d&gt;\x84\x9b\x99z,\x17\xd0\x18\xe9\xf1\xb1\xce\xe5\xbf^C\t\r\xa4p\xbe[\xc8-\xbe\xe0\xc2\xa4\xb1\xf4\xa7\xbc8O\xb9g\xd8\x98v\xd4\x06)vI\x84\x95\xbb\xf2E\x13\xb4t\xcd\xf9_\x05/\x03\xc3\x98P\xde\x8d\x9e\xa5TJ\x7f?&lt;-\xc7\xb7\x87%\xd8t\x17\xcc\x1b\x96\x13\x88\x85\xa3\xff\xf8T\xfd\xa9\xdb\x03\x9c7dQ\xb3Q\x1b5\xf3&gt;#\xd6\x7fQ\xbd\x9d\xf6\xb1=\xc9\xba\xed|\xb1\x06\x06\x0fBO\x00\xdcn\xe3~-\xbe\x04c%\\\xb1\xbb\xf8\x84\x90+\xff\xb4\xd7\&#39;iW\xa3\xddk\x7fg\x9dj\xe7z\xc5;(\x97\xef\xe7\x04\x90\xfe&lt;;d\xfc\x8b\xcc\xb8a\x03?\xa2\xfc\x02\x08\x04a*v9\xea\x19\x1d\xe4\x91\xeb\xe6\xa0,$\xf6\xad&#125;\xf2F\xfb\xbd\xe7p\xeb[T\x94\xec\x00\xa1\xc3\x12\x077\x96\x01\x86\x9c\x98\xdfl%\x07\xf4\x11^@sk\x90\xa4R\xa4\x83&#125;J\xac\xb7M\x07z&quot;\&#39;N\xd1\xf3\x1f\x02\x91&quot;o\xa3\xe3\xa7\xbe\x08\xa8n \xd8P\x84z\xf1\x1aqsC\xb3\xb1D\xef\x15\xf8\xf8\xd5\xc8\xc3A\xb6\&#39;\xb4\x8a5]\x0b\xb0\xa9y\x86\xf4\x83\xde\xb3r\x1b8@cM\x96(\xdc\x9a7\xf6\xd4B\x18K-\xa1\xc6\x9e4D\xd9Gj_\xbf\x7f;=5\xf2 \xb3\x895\xdfC\xc3\t\x17\xdenaQ\x8e\x15\xffk\x08U\xceD\xbe\xbaTK\xf6a1\xae\xe7\xcd~\xe1K0\xbf\x1c\xd1Pg&gt;s\xf4\x86U\x89\x82\xb1&#123;\x19P\x95\x99\x8f\x87\xe6\x87\x84Q\x07R\x87&gt;\xdf\x13\xf0\xdax\xe1\xf2&gt;,\xb1\xcf\xbbj\n\x96\xacYM\x9a\xd9\xa8\xd6\xef\x93\xcb\x80\x8b\x08&#125;\x99gI\x96@\xb4\x9fQ\x13%A\x86\x84\xd7\x0f\x03\xca\xcc\t%\xcd@4P\xd3P\x1c\x1ec\x9c\x17\xa8\x1f\x81\x1e\xe23o\x10\r\x18\xea\xc3\x1bJ/\x81\x8d@8\x0c\x0e\t0[y&#123;d\xe9\xc0\xe1\xc9EMZU\xd9\xa9U\xed\xbdE\x080\x1f\x11\x8fp\x00\xbc\xc5XQil\xa7\x00\xe5\x12\xb6G\x0c\xb15Kr\xf6e\xec\x8f\x8c\xbf,+\xd1d\x86\xca\x03\xda\x84\x10\xcf\x18#\x87\xe8\xb1\xee\xaf\x81F\x92\xd1\x86\x18\x05\x07\x05\xb2p\x9c\t\x94\xcac\x7ff\x15\xd7\xa0\xcbo\xfa\xfb\xbf\xb5\x88%\xbf\tr\x87h\x06\xf0\x0f\xe8\xefm*\x90\xdb\x9a\xfcR\x89(\x19\tUt\x91\xa2R\xfe\xf0\xc1\xe4U\xc1l\x07\xad\xa53OIW\xb7N\x1d\xf3\xf2\x8f\xff\xea\xb6\xf0m\xba\xb4\xe2\x99\x93\x9b\xc4\xda\xb5n\x8b\x80\x9f\x96\xa1\xd42\x10\xf4\x9b\x88 \xe3\x10\xf4`m\x1d=\xd0\xa4\xebcfY\xadD\x02\xc0\xe8\xdf\n\x8az4C\xddp&amp;\x02\xdfi\x88 1\xa0\xf7\xb1E\xa8d,r\xa0F4g\xb3\x03\x9bX\x15\x86\xc5)d5\xa2\x89\xe3\xfc\xfc\x0fh\xa9`\xec\x16\x0bW+\xcc\xb0\xc5lI\xf34\x93l\x0b\xe8\xf0DN\x141I\xac\xe8\xf0t\xb5\x8c\xa78m\xedP\x81\x03H\xb2 j\xc7\xe2h\x9c$\xc2Q+\x1aL\x17\x0e\xfc8_HQ\x9d\x1c\xaaM\xa0~\xbcR\xf2\xb5\xedf~bn9|%0\xc2\\\xefP\xc4o-\x05\xdc\xcb\x1f\xa7\xec\xdaq\x95u\x80V\xa4G\xb2`h\xbf\x8e\xb9\xe0\xca\xcc\x81\x97\xc9\xef\xb1K\x1b\x14\x12\xbbP\x07\xb7\xa0\xbe\xda\xf71\x12\xdd\x14\xafP&amp;\xd3\xe0N\xcd\xd7\x97\x0f\xf7,\r\x8d2.\x93t\x13K\x1e&amp;\xb8\xd4\xb7\xa5C\x10\x02\xf5\xba\&#39;jhp\x8a\xd7Y\x9d\xa8\xf8WE\xf5\xddgS\x8c:\xe5OB\xed\xa6\xffs-\xc4\xfa\x8b\xa4\xd9?\x98\xe7\xe8\x87\&#39;\xc2\xf1\xa0q!\xca\x06\xd3\xb8myCG\xd7\xef\x1c~\xd6\xd4\xbf\xeb\x82\xe1\xe5&amp;\xb8e\xee&gt;\x01&lt;\xfe\x00\xba\x8a\xa0\xe1/2P\x14\x91\xccS5k\xf1.D\x99\xbc]\xdc\xa1&lt;\xf5R\xa6\xb9\xc1\x08\xcbLt\xf9m\x99\xf2\x95\xd4:h\xdf_\xd7\x84[\xfb\x84\xcb\r\x96\xd1C4\tl\xcf\xf6\x13l$\x98\xa1&gt;\x84\x1a\x16,\xb8%Ui0aR\x97^-\\\x9f)\x12\xf6\x0e\xd6\x8f\x10\x9e\xab\x8e\xbb\xbcP\xfao\x9d)\x11\xa2\x8evoGv\x88E\xadI\xcd\x84\xe3\xac\xa5q0\xd8\x12\xf1;\x8f\x9e\xfc\xef&gt;\xd2\x9a\xb8\xfb\x90wE\x16F\xd3\xf9\x07\x1bl\xc9D\xf3?\xd4p\xd6\x10K\nxy?\x80(\x19\x87\xa3\xb0\xd8#\x89\xeb$\x8f:\x16\xcchY\x1a\xa5k\x0e\xa0N4B\xf9\xf0\x16|)\xc5\x9a\xfe\xd3.\xc1\xec~\xca\xa3\xe8n\xbf\xef\xe8\xe5\x82\xfc%(\x12\xc8\n\xc6\x82\xec\xe7\x9b\xd0H\x1a\xfc\x16\xad|A\xe0\x9f\xd9T\x89\x15\xe9\xc1\xbe\xca\x89\xf1~&gt;9\x93d\xd4\xa2\xb6m\x86\xb4\x80Y./I\xf9\xcb\xc8\x89\x95wI\x9d\xbd\x8e\xf0\x0b\x81&lt;t\xbc_\x9f\xaa\xd4h\x1d?\n\xab\x01\x80+(u\xc4\x87\xb3n\xcchP\xec\xbe\xb3\xc83\x94\xd3\x004rw\r&amp;\xab\x91\x8a\r\x07y\xc3\xd9\xbb\xa14\xdaX\xca\\\x82%zb\x13\xe4n&quot;\xa5\xeap\xdb\xdc\xdfER\xc3\xa9p\x15k\xd4\xfbg\x8f\xf0\x8b\x08a\xb1)\xda;A\x18\xf0Y\x19\xff\xcd\xe56N &amp;\xe2e\xd6\xdf\xea\xb1l\xeae\xa7\xfd\xf0\x89\xde\xd4\x82\x9fNMQ_\xebP\xae\x9b\xca\xbd\xb5\xea^L\xe2\xb4\x92\xd6g\x88KDj\x91,\x06\xda\xdbK\xc6%\xc5W\&#39;\x91^\x9e]\x91\x85\t7) V\x95\x83^\x93\r\xd15]V\xa3\xb0\x97\x9b4\xf2\x9ez\xbf\r\xb5\x9d\xe0\x8c_\xe9F\x07\xf5\xb6\x8fE:\xe3\xb0\xe3jl\xa7\x07\xf8\x8e\xab\x83\x8e\xb5E$\x82Y\x1d\xa6\xe2\xd9\x05-\xc4\xec-\xb1\x83J\x80jkm*\xbd\x18\xb8\xc5\xb9\xfc\x0e\x91\xe8tq\r\xda*\xaa\x9b\xba\x83\x04\x16\x01\xf3~\x88P_\x88DR\xc6t\x03\x0e&gt;[\xd9\xdfU\xef\x18\x02\xb2v@G\xc4Y\xf4\xf3j\x97t\xcf\r\xcdQ~j\xd1\xcf\x9e\n\x19\xb9AhL_;\x8d\xc9D\x9dg\xc9\x03\xc6\x1c\x8a\xb4\x8c3\xff-?\xe9\x16\x89M\x1cc|j1\x9ai\x8b\x0f\x1f\xee\x1fP\xd4\x05\xe3\xaa\niT\xb6\xa0\x19\x82p5\xbeK\x86o\x87\x0c\x08\x8a\xd9q\x10\x03\xa9[\xa5q\xba\xbd_j\xf11\xa5\xcdU^\xc6\x17\xa3)E\xa3\x8d\xd2\x07\xff\xbd&amp;\xc5&lt;z\xe7\xc6\xa4MT\xeaQ!\xd8\xe1&#123;\xa4;R\x07\xc2\x0bl@\xe7\x87\x05?ec9]\xb6y&amp;\x04\xa3\\\xdfM\x03J\xdafL\xaf\xe8\xe2h\xadt\xe4\x92\xa1\xb38\x06\xeem&amp;\xee\xa7H\x909-\x06a\x8f\xa3\xe3K\xbf\xfe\x86\x1e8\xf3]\xb4\x1b\xb3\xcf\xcc&#125;\xef\xdb3|\x8am\x1e\xe0\xe9\t\xe8\x84BK2\x90\xec\xbbz]@OAb\xe0`\xce\xa9\xd5f3\x9c\xc7\xad?)\xc7_\x9e\x10\xdc\xa8\xac\x04l\x02:u\x08\xa2\xa1\x11# \x08m\xd1\xfd&lt;uu?\&#39;rw6\x8d\xf4]\xea$\xd7\xfc\x04\xedh$\x832\xe8W\xdf\xfd\x99\x01\xab\x96\xa2&quot;,\xba\xe8d\x97)\xc93&quot;\x02\xdb\xac\xa8\x9du\x1a\xec\x04\x01L3r\x91\x06\xd9\xf2U\xd5;\xd7\xfb\x8eFV\x11\x99\x96\xc2\xb2\x0cQ\x0c\xdb\xc6\x18\x08X&#125;\x82\xb2\x1c\xed\t`(\xfe\x7f]\\\xb83HE\xfc\x05\xb8HZ\x03\xba\xde\xd4K~\x95U\x1fd\xa4\x01\xdeeQ\xc7\xba\xae\xd9\x96\xf5s\xb7\xa7t\xd3Vl\xf4\x01?Q\xaaB\xa8\x10rF\\\x02X\xff^j\xd6L\xedx\&#39;\xe9$\xa2\xe1/\xaeo\xf1i\xc7\xd1\x0c\xdb\n\x13;\xce(\xd5C]\x00vAnA\xba\xd1DT\xe9kNt\xcf\x07\xf8\x89\xc6\xd2\x9a\x1f2\xc3VO5\x16\xb4\xde\xe6T\x1c\xb5&lt;\xd4\x9d\xc5T1\xd2\x8bNP\xcd_\xb7\xeb\x1b\x03\x18o\xb4[`c\xb0-k\x91\xf4\xf1\xaa\xe5\xb8e\x80\x00\x1a\x98[L\xc9-\x96\xd8F\xf4\x87\x1azy=oc\xeb\xaa\xae\x1e;N\xbe\x8bV\xdak&amp;\x94\xb4_V\xab\xf1\xeb\x0cB\xdaU\xb2\xa0D!\xc6qG\xc6\x9f\xea\xe2\x90\xde\xe9\x08\xfe\x9a\xfd\xb2\xbd\xd1\xa8BQ\x8b\xb4\x0c\xed$\x11\x90E\xfdBB\x8a\xd5%p\x0e\tr\x8a\xcf\x83\x8b\xb5\x04\x88&lt;\x8a\\[a\xe0\xc5\xefwNN\xce\xf1\xa6\xd9\x17\x06\xe7H\x94F\x97\x1c\x03\x1bR_kr0\xae\xc1Qt\xc59R\tF\xbf-\xe1/V+\x9b\x1c\xc2\xb9\xeb5R!\x8amV==\xc9\x076l\xb4,\xd6\xcb\xa7[^\xfe\xde\x96\x8c\xee\x82\x17\xff\x0c\x18n\xf4$\xa8ap\x8bD\x8a\xe8\xf8\x17\x85a\x80\xee_r\x0bl\xcfw.\xfd\x95H\xb4I1)\x9585\xd0\xa1)\x07K(\xf2?t\xaa\x1e,P\xb2\xbeg\xa5\x08\xe9\x95\x80\xfay&amp;\xd4\x1c\xa4\xfc\x8d\xf9\xbcU\\d\xa4\\\x8b\xc0\x13\xfbo\xce\xa9w\x8a\xb4S\xa4\x00\x80\xeaH\xc6\xd9)\xfbZN ?O\x07*%\xa2wLG\xe0&lt;\xcd\xc4\xee\xc0\xc9\xdb\xb4\x00\x04FPt\xba\x1a\xd2\x149\xdd\x8b\xcft\x07\xe7\xfa\xa4\xc42\x14\xe9\xf5\x99\x1f\x11\xd1\x92S\xc2C\xc3\x81\x8a\xe1\x05\x04z\xb9\xb5.3\xd6\x02\x1b%[M#\x1a\\\xde\x14\xe60\x8e;\x02\xe5;\x9c\xa1oZ\x84J\xfa\x82\x1c&gt;\x0b7k^\x01G\x1b\xb2\x1a\x89\xaf\x0e@&lt;\xbd\x7f\xb1&lt;4\x0ew6\x17\x97\x82M\x15WZ\xd0$\xd6@\x13\x82\xb1\xfa4\xd8\x06&#123;7\x81s\xb0n\xc41\xc6\xec\x9f\x0fCY\x1f\xd9\xd66\x1fu_\n\xb6&quot;\xfa\x0e\xeb9\xb1\xb9\x83\xe4\xfe\xa9\xd5&gt;&quot;G\x0e\xba\xf3\xbc\xe3\x8f^\xb3\x9aX\x9dH4\x85\x93\xaa\xef\x86`\x15&amp;\xf3\x8f \x9dJ&amp;o\x80\xe3\xa6\x92\x9b&#123;\xa0d^0\xbe\xa1\x8dT\xf8oC\xc6=\x0ee\x10\xccj\x82\xc0Y\xb8Z\xda\x90\xe9\x98~\x82bS:\x18\xa4\x14W\x88:\x017\xbb\x8dl\x9c\xb7[I\x9cJ\&#39;2\x94\xffe\x96\xa9\x1bw\xf7\x05`\xa1\xd7\xa5\x10\x82dd\\&lt;@\xb5T\x89y\x8f/\x90\xda\x1d\xd7m\x80G2\x8bN\x99\x08@)j\x1c\x9a\xd5\x01\x08\xb1\x9fs^\xda\x03\xde0\x15\xe7\x84\x1c]\xf7\x1f\xde\xaf&lt;\xde\x7f\xd8\x99\xe7#\x8f\x94\xf6X\xa6\xff\x97\x1bg\x10\x96\xda\x1aS!\xb7)\x14\x0f\xab bg\xde\r\xf9\x07\xe4z\xd7L\xfe\xc2\xe8\xe8h|\xa3\xe2\xbb^7\x16\xc3(\x07\xaa\x01\x7f\xb1\x98Y\nC\xbd\xb5\x9c&lt;e\xed\x1c\xe9+\xa6\x93T@\&#39;pLV\xd9~\xc4&lt;-\xa6\\&#123;\xba\x0f\xab\xff\x03\x02O*\xea\x88\xb2\x7f&#123;H\xaeq\x81s\xca\x1f\xda\xfbp\x00\xca\x17\x8f\xb6B\xcf\x92\x9c\x96&#125;\xdf\xcd\xbd\xa0X\xb4\xa8\xee\x0e&amp;\xd7\x127\xe9~\xeba\xf3\x88+ml)*\xd1\x9a4\xe5\x9b\x0e\x11H,\xc56\xd9-\x93\&#39;\xf6_\x80\xdbE\xecA\x9e\x96\\\xc8\xa6\x9ep\xaea\xda\xd6\xcaY\xaa\x1c\xe8\x82f\x91\x96;?\xff2\x92]\x8c\x8d\xcc0\xaf]1\x7f\x920\x1d%\x11\xb2\x17\xdc#\x04\x94\xd88\x955\xb1\xe4\xce\x1cq-[\xd81\xe1#I\xa89\xef\xe3\xc9\x15\xcf2\xb3Qc\xe0\x1f\xff\x88\x171\x9e\xd8d\xcaU\xd0!D\xe6\x89S2x\xf2n\x97\x16\xa8\xf0\x02\xdeQ\xe4c\t+\xff\xcc\x90\xacv\x15\x96\xd4\x85M\x8c\xe7F\x02\xb6sP\xdb\xf5\xb5\xaf\xa5F\x92\xab\xae\x89]\xb6\x02\xf1\xce\xf3\x90\x9dK\xf0\xfc\r\xdf\xb9\x0c\xaff\xc6\x91\x8d\xc7\xc8U\x1c\x8e\x9bZS\x01\xc4\xbc\xd1J*\xaf\x98\xe6S&amp;\x9f/\x9f*&amp;\xfb\x1a\xc1\xdfFZ*P\xab\xac\x87/\xe3\x1d\xa1\xb9\xf8\xd0S\x94\xa1&#123;\xb6@\xfb\\L\xf0\xc0\xa6\xc8\xec\x15\x8dy4_X\x1dRH,Q\xfe\x88\x8cU\x8a\xab\xb6\xe2\xea\x8f\x94\x0c\x17\xabw\xd4\x11k\&#39;Ya\xf1\xbd\xdb_\xcf\x16\xe3@\xb4\xec\xf0\xa6J\x1a%\xe0NR\x0c:z\&#39;&quot;n\x85\xc4\x17I\x94A\x8e\x19&lt;L\x94\x1a\x1b[\xdd\x1b]&#125;3w\x838\xd6gg\xcc\x1c\xd5\xdb\xc2\xe4\x04\xb8\xf1\xbd\xa2Q\x86\xe4RC\x00j\xcc\x94\xfepK\x02\xd6\xb8\xfeJa\xf3\xa8~\xc9&quot;=\x07\x8c\xc9\xa8(\x88\x88\x156\xa9s\x19n\x15L\x8b\x88\x04\xc3!Ll\x93\xed\x99Xb|]g=\xf8\x9cd\x8b\xf2g&lt;\x81\x1d\xd4\&#39;\xa2\xb9\x81W*\x17\xc0\xc3L\t\x13\xbbJ\&#39;\x06\xfc\x9f\xdeW\x100y\xe6\xed=\xfe\x8a|\xeb\xb2\x17\x7fG\x84\x9fC\xdf\xa4\&#39;\xc9\x80\x9e\xaf\xf8\x9d\xb1\xda\xdc\x9a\xf8Z\xefH~\xc3\x98\xd6\xe6\x1f\xc2\x0f\xa2\x8f9I\x11\xf9\x7f\x93\xaf\x14\x82U\xca\x98\t\xac\x80\xe9\xe2]\x9d&quot;\x1c\x14\ndB;\xd5\xdb34 0\xb2\xed\xb6A9\xf28\xc9\xbf\x1c\xcb\xaf\xe9\xd09\x08V\xf0\x1e\x07\xa4\xe0\xce\x01\x08o3\xe5\xe7\xc3\xcd\t\x83$*\xa1\xcc\xe4\x07\xdc\x11Q\x91\xe92&gt;\xecm\xdf\xe0N\xc5\x03&amp;\xd0\xb5\xb3\x97\xf9\xb1\x9a&lt;\xf8\x12i6\xdb\xaa\xfbgM\xd6\x0c\xa5\xbbn\xbcm\xa1\xa2\xadi\x82\x9f\xc3\xe4\xe0\xeeU?\xdbF\xdc*[\x02\x85\xf1\x94\xb8|\xd2[9 t\xd0\x15\xf6znb\xcd\xd5H\xcdSr\x8d@\xdd\xfbn\x0e\n\x90t5\xba\x00\xd8\x1a\x06\x15\xa6`=\xc8*:\xe5\xf4\xfa4&#125;\xa6\xe7\x122\xce7\rx\xb9#\xab\xb8\x94\x8e[\xd8^\xe5C\x025pVc\xbf\x87\x80\xf0\xd5P\x05\xdd\xbb(\x97\xfb\xb9\xa7\x17\x85\xe4Q&quot;\xc4\xd5%\xb4`\x89\xec\x13\xdai\xb6\x06\xb8a\xb0\xc7\xa5\x8f\x16e\xf1\x1c\xbam\x92\x82]\xa4x\xa0_Cd*\xcb=c\x90\xc0y\x16\xd6\xce\xdf\xa3a3w5\xd5\xf7P\xebw\x8631\xbe\xcb\x91\x9d\xceM?\xa6+\xf1~\xe0g\xca8oJ\x8c&lt;\xe6\xc9\x044\x99\xd6\x9c\t\xdf\xdc\x9fv\xe6Q\xf3\x18l?q]\x81\x7f]\x9f\xbf\xccq\x84\xefehf\xa0\x82\x87\x11*\xf3,\xc4:\xabm\xd9\x95\xdc\xa7\x19P\xa5c\xfa\x94\xbed\xd8\x15\x1f\xa2\x00\xe5?\xb6xw\r\xee\x01`\xfd\x93\xbf\xd2\xc3\x9e\xeb\xfe\xe7\xbb\x17k\x87E\x954q\x14w\x9eH\x98`t\x8fs\xf2\xb6)\xda\x85,qy\x1eS\xac~J!\xdf+\xd1\x8eX\xff\x98\xc5F\x1a&quot;\xca\x8e\xc6\x13\x0bG\xb9\x95*o\xc2_\xdc\xfc\xc6\xe2\xb5\x83\xf4\x9a\xec\xf7=&#123;\x97\xee&gt;\x96\x872zR\xf6\x89\xff\xb6\x87\xbc\xa3\x9a2\xe5\xf5\x17\x1a\&#39;\xd6+\x86Z\xbf\xbc\xcf3\x8e\x1b\r\x81\x9b3\xc5i\x96\xb0Vs\x82\x0ew`\x94\xfa5\x90V\x1d\xf4\xad\x02\xf3\x89\xdb\x00QC\xfa\xb3\x8a(\xdd\xac\xd5\x18\xe4\xf11\x87\xd7\\\x841O\xbfw\xde#\xd4\t\xb7w\xf0\x197f\xf7\xab`\xb2\x02&#123;\x19&gt;\x1f/v\x87=Q=\xa3\x1bkL\x0e\x92\xa6\x92\xa7\xbcJ\x0c\x8f\xd9To\xf6c\x92\xe5\xb8\xd1\xcev\tUa)\x91\xba\x05k\xb0\xbd\xfep\xb0g\x88oZ\xaex\t!mo\x91c\xde\xb6g\x04e\xc7u\xebZ&lt;\xd9D\xf85A\x1fN\x10T\xe3:\xa2tg\xf7T\xc87\x7f\xd1\x05\xf3\x11&quot;\xc7a\xab\x89\xeb\xc8v\xa4 \xf9\x04\x07v`\xc1R\x93\xc7\xc8f?\xd8\xf9\x044\x84\x95\x83#\xcbG$\xb5\xc9n\xad\x85(\x0b~o\x0c9\xddd-P\x05X.\x91\x82[L\x95\xf6\xbf\xbb\xd5oA\xcaM\x92\x0b\xa2\xf0\x17&lt;P\x04\x03!\xb0\x10p#\x80\xc2\xbe\xf3\xe4\x03\xe3\x8cE&quot;\xd8R\x12\x98j\xee\xab\x05\xcd\xdaSx\x11i\x83\xcd\xa7K\x02\x91\xfe\x0cz\xca\xad\xc3\x90/\xa6S\xc3\x8eV\xea\x80\xfa\xa6\x15Q\xb4\x84\xbe\x12\xcc\xe3\xa7\x82!\x8a\xff\xd8I\x7f\xcdk\\3\xf4\x06\xb1\x0c\x15Z\xb0\xcd\x00\x04\xc5\xf3\xf4C\x9d\x02\x1d\xf8p\xf6\x14V\xfd\xfd\x1a\x9d\xef\xb0\xc5\xc3\xea\x95\xa7:3\x86%uO\xf6\xdc\xaf*\xe66\x84QmY\x1e\xf0\x82wX\x1c\xfa\xfb\x16r\xadz\xdb\xc9-\t\xda\xee,\xfd\x1bv\xa8\x1c\x00\xe1\x98H\x0f\x85\xf8\n]\xc6\x07\xad4\xfb\x88,A\xf0\xfeeH\xd2w\xe65\xe9\x94\xb5\&#39;\xbb`[\x96\xbc\x7f\xf7\x8bLqh\&#39;\xb6\x0184j]\x0e\xb4\xeb\xc2\x99\x86\x922\x9c\xabJ\xa7\x87\xe1\x8c\xdb\xea[\xefM\x18\t@\xb0\x03\xd2R\x15os\x8d(G1E\xef\xf6z#\xb6\xea\xc9\xbc\x91\x1e\x142\x19\xb39&quot;\xab\x02\\\x80\xd1\x87\x8c0\xeb\xd0\xfa\xc5\xd0kTQK\xe5\xd6\xe0\xff\x8d@&#125;\xec\xaa0\x13\x0f$\xd5r=\x87d\xe8\xbdJ\xd8\x17\xa2&quot;\x15\x82\xa8f7gK\x00\xa6\xa1&quot;\x82bo\xa6\xb9\xbdZ\x86\x85X\xb0\xc0\xf6\x12W^\x19]W\x89 s%\xf9\xc0M\x90\xdc\xb2\x9f.\xb2\x06\x17\x80\x99~\x0f\x18\xeaQt\xfb\x9fH\x9d\xdcaSF1\xe3Y\n\x9b\xf5\xe7\xd7C\xc8\x1dp\x88L\xd5I\xb2\xac\xfb\xafN\x97+?\n\x0c\xc1\x88\xfd\xdc\xdb\x1c\xba\xd3\xbf\xbbMj7\xab\x92WZK)\xaa\x0c?Y\\O\xc7\xaa\x1b\xaf\xf9\xae\xb8\xecU\xd6\xa7\x10\x1dt\x1byAG\x1d\xf6\x16\xca\xf7\xe2CCmh\xc3\x14*\xef]\x0fj_\x12\xbe\x15ry\xbd\xf5\xad\xce\x17\xa2^\xc7=\xfc\x8b]\xc7\x8a?\xef.\xa7\xea\xc4iG\xbc\x9e\xe7\x1e\x04\x06uX\xfe\xf0\xdb\xc7\x83;\x1e\\\x06\xf5~\xd0\xeaA(\xb8\x9b\xd7\x04\x86\xdb\x92j\xdc\xdb\xae\x89\x02\x03\xf0\xa7w\x17\x07\xbd!/6\x90\r%%\x1f\xe2\x1b&amp;\x7f&#123;\xed\xac\x1d&quot;\x98@(\x84\xe7\xaa\x8f\x05\xbd\xaa\x8azV&gt;X\x80\x0f56\x9a\xbd\x17\xf6\x8a\x10R\x05\xca\xe1aIR]\xad\xd2\x11)+t\x84\xe8\x90\x83Z\x85$\xb3\x89\x8f\x9e\x16\x05\&#39;\x86\xa7\x086\xfe\xacE\xd8\x85\xe0\xf7r\xa8\x07i\x07\xb1\x94\xfb\xb4\xeb\xbbt&#125;\xf2\xdaT\xdbA\xa2\x9a\x13\xa6\xb8\x05G\x83[\xde\xd9Ak\x08G8\x99\xdd\xb7\x95\xca|\x0c\xd8h\xa7\x9cV\xe4\x97p\xd4/\xd8\xaa\x0b\xdd\xee\xf2\x14\xd2\xe2s\x11\xe9K!\x197\x94\x1a\xda\xf9\x8d_\xa1\x16\xde\xbcg&#125;\xd4\x95\xbd+\xae\x83c\x07/~\xcc\xf1\xaa\xb6\x12\xcc\xa1=gI/\xe7\xdb\n4\xbe\xfa\xdb\xbd(\x92\x92\x0b\xaa/\x1b\xe7\xf7\xac\xf6tH\x01t|\xfdh\x18\xfcY6\x05+A]\xe9\xfb\xb9\xb98\xfb\xc4\xf5p\n\x1f\x9eS\x11c\xb8O\xf2\x92\xe2\xe4\xba\xfbWd\xfc\xa6\xee\xbe\xc2l\xd7\x93*\x0b\x12D\x82`\xf5\x8f\xa6\x8dV\xd5\xa9\xe6\x08\xa9\xeb\xdf\x9c\xac\x83\xbf\x91\x8f~\xd8\x9e\xde!6\xe2\xaeTh\x0b\xe7\xe8\xa3\x8d\x17XZIRi\xd7\x1e\xa5\x02\x1e!\xd9\x81\xfcu\x1b\xbd5\xbb[\x98\x16\x94\xae\xcb\x08?q\x8e\xb9!\x08\xce\xa7\xd2\xf8nn\xc0t\x16\x12$]&quot;.k\xd4\xc5x\xcci\x8dbw\x1c\x9a\x1d\x8d\xe3\x13\xa2H$\xdaS\xd3\xd6\xadn\xfd\xc4\xe4\x8e\xcf5\xe8Y5,B5\xb9Z\x7fjM\xd5K\xd8\xa4\xe8\x19/\xd7\xc3&quot;\xe3\xc9\xdd\xb9\x98\xbca\x8a\xc7\xc1\xae[a\x05*\xf7d\xed\xdc\r\xccN&lt;\xbaw\xd4~&#125;\xadd\x1d1 \xf9\x12\x1b\xe6\x02[+l94\xa5\xa8\xcc\xfd\x19\x04\xd0\x0c\x1bv\x94\xe9\xc9&amp;\x9e\xc1@\x96\xa5\tZoI-\x97\x98=\x95\xfb\xee\xbf$v\xcb\xb1\xecQ\xe8\xafx,A%t\x8aA\x19&#125;N\xbe\xcbF;1\x14A\x1anS\x0b\x01@\xd8\x12\\\x00\x92\x07\xea\xfd\x9b&amp;\t\xb9!o\xf2\x00[\xf0\xc0\x8d+\x0b\xb3JZ\xde\x05\x02\xcbN!\xb8\x1d\n\xe4alkF\xd86Yip\xc63\x02=\x0f\xe9\x1c\x8e\xba\xa3&quot;\xc6\r\x9a\xaf\x8c\x99\x1bT\xf9\xb2\xe6\x86\x97\xe2%\x96\x93\x94\x9b\xfc3\xcc\xbb&#123;\x17\xcc9\xae\xa0\xc9y\xc2\xd4\xb0\x11\xc5\x9b\xc9%\x8b5Z\xa2S(a-\xe4\x984f\xca^\xd4\xf9_VjQ\xa6]\xd4\x18\xfb$&lt;\x1e\x19\x95l\xe7\x07\xd5&#123;\xfe\x82\x9a\xc2\xa2\x0f5\xc2\xd8.\x1d\x10\x02\x83\xa0\x90\xb4\x1a\xb0X\xdb8\xd3&lt;\xca\xc6^$7\x85\xa4\x1a\xb7\xb8d\xd7;\x07\xf0\xf1e\xc8\x96\xd5&#125;\x05\xfeiB\xe29\xb8&lt;\x1a+\xa5\xfb\x95&#125;\x82\x93Y\xc9\xc4\xe4\x93\r\xc3H;0.\xcd\xfe%\xa2+R\xfasf\xf0\x1d \xfb\x18\xdcN\x17$\x9d\x04\xd8\xdd+\xc0!U\xf1\xd2\xd1\x16\xe3I\x1bU&#123;\xec\xe9\xb8\xceVL\x9b\x9fi\x9d\x92\xebb\x05\x13J\x95\x16e\x08\xa34\xa8\x1f\xd3\xd2\xfcS`\x17F&amp;\xc3\xa3\x0e\xf3hT\xe8\xbbC\x9d\xed\xaf\xdd\x1eD\xd1p\x85\xb7\xff\x1bX\x9f\x1c\xea\xdc\xc8\x9c\x85\xb8\x1f\x19\xc9\xe8\x94~\x95K1\xfa\x94\xae\xa2\xd2\xc5\xc9`\xc7\x80\x7fC\x8d\xf0\xf0\xd1&lt;\xb8\xa1\xf1\x05\x03\xec\x00\xb8\x1bP\n\r\x15\xecX\x89a\x8b\xa9\xc9\x7f\xdc\xc2\xe9%M!\xe2\xa5\xe7\xc5^\x07O\xcdn%*L\xa28\xa1\xa1\x82\xe2\x7fT\xd0b&#125;\xd3/\xc8\xd9\x95~\x12F\x81\xd6)\x19\xcd\xf1\x13\xbf\xd0\x94\x89\xf2\xf9&#125;\x1c\xca\x93%;\x13\xd8;+k\x89%\x16c\xa8\x06\xca\xf6\xb2\x97*/\xb3X\xdb`\xb0\x8b\xf6\x01\x16\x0b\xd5\xcf\xe3f\xfb\x82\xf5D\x8d\xbd\xd5&gt;9\xa6Z\xeb\xbe\x9f\xd3L\xa0fM\x17\xd9n\xd0\xeb\x08\x06G\xfc\xa5\x07nF)\x9dH\x01YGk\x96\xd8\xeb\xe8\x158\x86u\x17n\xaa\x1e&#123;\n\xc5&quot;\xec\x15\x9f\xf0e\x1f\xa1\xa0\x04?\xa1\x9e%\x17\xd4\x88\x18\x97\xe7\x83\xbe\rZ24\xaa5\xe1\xcb;\xd0\xc54\xb5&amp;\xdd4\xe5\xbc9K&#125;\xd4\xff9\xe6\xb7\xc1#\x8a\xed\x1d\x9b\xb9/RR\xf3k\x0e\x98\xbd\xe0\xf8\x02\xd4z\xa5\xae\x92\x0c\xad3\xfd\x7fP\xd1n\xeek,^\xce\xfei\&#39;!x\x19q\x86|\x05\xb0\x82!\xd4x`\x9cE\xb6\x9e\xf2Z\x08\xb2KQG\x8f\r\x9e\xa1\xed\x84m\x1el\xa1\xfb\xbe]\x8b\xb8)m\xe7\x1d\x14\x02T\xf8c%\&#39;EB\x83\xd6\xc3\xceW\xd5\xddoa\x93\xf9\x08\xfa8-\xc6\xfe#\x9d1\tHMt\\\xb5|x\xd2A\x14\xab\xe2\xf69\xcd\x9d\xfd\xfa\x91k\xd6s\\\xd0\xebc1\xd9\xa6\xbay\xfcDp\x98g\xbfq\x18m\xbcY\xfc\x9cV_$\xd4\xdb\xd2\xf9\xfc\x95\t\x1f\x9d\xb8\x84$\x1d\x18*\xab+0\xee&amp;\xc7\x99\x87\xa2\x030\xe5O\xa5f\x18S\xbf\x80\x87X\xc3\xf9\xc9K\xcb+\x1e\xe6\xc4\&#39;\xad\x19\xe0\xa3\x14!a\x17\x06\xa6\xe8\xd9~\xc28\xb6\x98|\xaf\&#39;\xb8\xd7\x95\xf5I3\x19Lf\xb6\&#39;\x91]0D\xde\x08\x0b\xd9r\xac\xa9 dpMlxa^\xaf\xdb\xd8\x8b\x97|W6\x07\xfc\x0b\x13\x88g\x81\x88\xb1&#123;\&#39;\xb0\x8d\xd0~\x87\xc6\xa8\xd89\xdck\x8f\xb9\xe7\xf8W\x18P\xde\xba\x1ck\x7fJu\xa7\x07\xdcJ\xd6\xc3\xed\xb7\xda&#123;B\xb3\x89\xf9b;\x9a\xa1\x04,\xd7\x13\x9bZs\xb6\x8b3\xac\x85E\x19\x1e\xfae\x84\xfd\x0f\x10&#123;\xcfjJ\xd9\x9f\x97M\x7f\xf0\x85\xe4N\xe0\x9d\xf6\xe8\xe9\xd8\x84\x02we\xd8\xab\xbdFb\xb7\xb6O&#123;\xb0g*\xe6\xc4\xb9\xc3#\tZ,\xa1\x86B\x8f\xdaK\xbde\x0cTB.\xf9\xce8\&#39;\xc5\xcfA\rj\xa5\xb4\xc3\x93%\xb5&amp;\x0e\xbe\x89\xe5\x03\x07\xd8V\xf6L\x89\x1855\x8cU19W\xeaQ#H@1\xbc\xe2\xe76\xd0j\xb1\xf8\x99\xbbQ\xed:\x7f\x13;\x13\x07\xceD\x93`N\x93\xa5o\xc4\xd0\x83\xfakn=\x88\x99\xaf\xe5g\xe5\x14\xe0\x0b\x8a\xea-Q9*\x89\xf1n\xa1N&quot;\x16\xc3\xef)\x85I&#125;6H\x92\x82\xcb\xed\x86\xcb\x9c8\xae\r\xcc\xf2S\x9c\\\x03\xed\x857\x05b\x8aRzsoI\x98\x06\xfcz:Q\x80@\xa2\xff\xafR\x17\x98\x16\x971\x10\x02H\xedF\xe566\x88N\xa1(\xb2\x19\x90\xa5\x0b\xe28\x1a\xe4VLWEf\&#39;4m:\t\xc0r\x90L\x02f;\xd7AA\x8c\x1bfPTjVDi\x1d\xc0\xe2\x07\xad\xc8\&#39;2\x0c\x9d\xe4B_t[\x82?\xe7@\xcfV\xae\x13\xb9m?j\x99\xdbo\x9c+\x18n\xfa\x83\xee\xe3\xfc\x82p6D\xd6\xea\xf2\xe3\xbf\x83\xe3\xc0\x0f\xb5\xc8\xee\xb8\x0b\x94w\xb1tgs\xa4)\xce[\xfd\xc7V\xd9\x1f\xd6\x83\xe4__\x80\xfb5\xb5\x82D\xa4\x00\xd3)0\x1a\xae\xb7\x88\xd4\x85Z\x03\xc1\x18\xd3\xa8\xe7f\x15\xdb\xeb.\xc6\xf04\xb0_\xfa\xa97\xb3^5C\xaa\xcd\xb3cR\x0b\xe3q\xff\x8c\x96\xd0\x8a\xd4\xb4\x08\xf2\t\xe05\xfb\x1a\x8f\xf3H\xe9\xb1\&#39;c\x90bw]\x1a\x9ct\x8dg\xceY\xebO\xb1\x05\x96\x9f&gt;=@Z\xdd\x03\x16Af\xb5B\x89\x0c\xf3\x8co\x1bY\xcd\xf7\x98\xc5\x182\x9a\xb3\xf16\x89\xb6k\xba2KGB\xae\xb0\t\xdc\xbdtZ\x82B\x06g O\xd0\xb48\x8e\xa8\x15\xc9\xb4\xea\x13A\x1c4\xee\xb7\x90\xdbw\xac:\x0eL\xf2 \xcf\xefm(\x18\xc3b\x03A\xbe\x08\xfe\xe1\xa2\xd5l\xcd\x0e\x11,&gt;\x0e\xae\x9fA\x84\xd5\xd0QJ\x92\xf3R\x81\xb2\\\xb8\xb2Q\xb28.D\xb9\x9e\xde\x17\x03\xbdo\x12-r\xaa\x17\\,\x12nx\xd6\xd1\x95\x8a\x8b\x1d\xc0\xcaCn\x9b\x17b\x88\xde\xee\xa3\xa2c\x8a\x0eN\xdd\x98=\x1c\xf6\xb9\xebX\x01\xbd\x0c4\x8a\x90\xcdt9&#123;qo\xce\tq\x1c?\x8dlDd\x86\xf9\xa9l\xc6\x9b\x02\x06\x01\x91\x0ca\x91@\xa0\x86\xa6q/5\\W#\x0b\x87PR\x02\x97J\xb4\xb0\xba9\x07\xa2+y\xd7\xfe\xe6\n\xd6\xf8\\;&#125;9^\x08\x1b5\xdc\xef\xea\x8b\x83\xe4[\xfeH\xbcKkK\xb1\xbc;\x10\xbd[\xe3\xdb\x03\x80\x05\x11N\x89ca[\xab\xab\xb7)d\x0cZM\x1cz)di\x90\x9d&amp;\xc9l\x0f\xdbM&gt;#\xb3\xb8\x11\xb5\x17\xb3\xe0\xca\r\x97\r\xc8\x0cQ\xef,\x05*\xc0\xed\x87=\r\xe6\x8b\xcf\t6\x8d\xae(\xc2\x95\t\x94\x15z\xf5\x18\xa0!2\xc2 \x0e\xaf\xe4z23\xb8\xba\xc8\xc5\x17MOo&#123;\xecC\x02\x0c0\xa9whQ\xb2z3A^\x02$\x82\xdf\x0f\x06\x1b\xa9\xe0\x84\xd5\xe09\x07\xd7;|\xac\xa1vb\xff\xb3\xa4\xc2\x8f&amp;\x18\x85\xbc\xcd\x17\xd4\x12\x17\x86(\xbc4\xd9\x9f\xff\xc2\xc0e\xf7V\x02\x15PP\xfc\xeb\xaarT&#123;\xd4\x83\xcei\xa5Z\t];\x0e&#125;\xc2\x85A\xba\x03\x9d\xb30\xa8\xb5\xc4\xd7\xfa(\x8bj\xcb\x82V\xb8\xca\x1e4\x19\xf9r\xe0\xf6p2\xce\x99T\xe9A\x0e\xf5\x0ed\x88+\xba\x92\x11\xf3Y\x99bOR\x91G\xf5\xf8zwb\x82\xad\xd5\xe4\x19\x16\xb8i\xf6\x10#\xd9\xcc\xceS\xc5\x92\x05,\x86\xa8\xa4\x88F\x1d\x97\xc7\x82m\x85x\xe0I\xc3d\x9d\x80*j\xa1(\xe2\xd9\xd5\xd5\x0e\xa8\xb2\xc60\xccS\xbac6\xd3A\x1e\xf2\x06\xeb\x12\x94\xf3\x11`(8mtm\x8e\x1f\xec\x8e\xe4\xa9\xe4\xfc\xf5\xfcl\x8e3\x0e\xf8=\xe5aM#\x86\x8c\xa3!\xf1\x1f426\xf3\x07x\xab\t\x13u\x14\xef\\r\xc6\xfbh&#123;\x073\x91\xe7\xb5uA\x97;\xa7\xdf\x96\xa9\xa5w\t\xf4\xf2\x9a]\xf1\xe3V\xe2\x07p\xa3\x1e\xdd\x8dkN\xfd\xee\rG\x82\xa8d\xb8\xba\xb1]\xd4\xda\x11\xfe\xa4\xba\xe9\x16\x8e%\xc7\x95?h\t:\x81Y\xa1\xbf\xc3\x85\xbb.\xea\xe0\xa7T\xbcv\xce\x128:Y6\x8b@\xed]\xfa\xe7\x8a-\xdd\xbb\xc8\xcf\xd6\x14\xb2\xac@`PgX\xae\x06Q\xd0$0\xad\xa2\x9c\xff3\xafL\xfb\xe8\x0f\xf8\x12\xe0\xda(FA\xc9\x1b\x07@\x13\x96O\x9b\x83\xf9\xe8T\xb5.\xf8O(\x7f\xf0\x08s\xde\x8c.\xfei\xb4\x00\xb2-\xe7\xedF\x06\x9d\xa3+\x9a\xd7qMh\xac\xc2\xfb\x8enw\xfd\xc7F\xd5\xd5\xaeEK\xd8\x92\xe4\xe0\xa0\x06\x80\xd1\xdd\x8d\xc3\xf5\x83&#123;\xf6\xb2&quot;\x89+\xaa _x\xd5\x93\x84$#\xc2N\x01\xec\x9c\x84\x03\xbc\xd1(\x9aL\x91\xb3e\x10\t&amp;wx\x83;\x93\xf7i\x18oM1T\x82\x15r8@:f/\xa5S+\xf1\xfe\x16\x95[\x90\xb1\x08r\x96b-?\xf2\xb9\x95\x1f\x18u9YzF\xde\x94\xe4\nx@M\xaa\xb3\xaa4\t\xaedq\x89l\x07\x86W\x93\x96\xfdu&quot;\x19\xfaB\xcd\xee\x9d\xc6\x19||\x06\x82m\xcdB\xd3\x8dh\xe2H\x97\xd7@\x80\r\x84h\xeeYI\xbc\xf5\xa9\xed\xb30\xec\&#39;S\x9b\xdf\xfd\xc8\x8ey\xc6&amp;#\xa5Kj\x08\x85\xa3\x0b(\x01\xf9\xb3\xca\xc0\xfc\x04`J\x00\x9b\x1d\x7f\xd8S\x96\xa4\xaf\xf8_\xb9\\?\x05\xcf^\x91t\xb5LJ\xc5\xac\x8c\x9b\xb7\xa9E\xfb\xd0\xea\xc5o\r\xd7\x98\x15\x98\xdb\xcf\xb3\xed\x8f\xc7\x1b&gt;X|\xc2\xf6\xd7Ax\xdbW\xd9\x08\xdd\t\x92\xb08p\xa0\xca$\xaf\x84q\x88c%e\xd4-&quot;\xb5Ebr7\xb1l\x9f\x0f8\xb7\x9bk@\xd9FA\\\x83Ip\x19\x1cb\xa84\xc9\x99\x99a$\xce\x9d,vo\xb3&#125;\xed\xcdiq@\xbd=\xae\x19\xe0\x15\xcd\xa1\xb0`;\xefZ\x8a\xd5~\t\x8a\xd9\x86\x80\\\xc8\x87^\x1f\xc4z`Y6-\xe1\xa8\xde@Q\x7f\xf7\xb5\xaf7\xeel\xef\x1f\x8cV\xfb\x83\xc84\xce\x1b\xa92\xb5~\x98W\xa1I`\xa0\xd6M\xd0\x0e)\xc3\x11\xc9\x8a\xefb\r\xa0l%\x16\xc4\x1c\x81\xa3q\x82a&quot;\xc4\xd6\x94\xe2\x8d\xa3R\x85=\x0b4d\x8bJf\x120\x0e\x97c\xda\xc0\xea\xcc\xfc\x0e\xf3\xe2\xcbI\xd7E\xff\x00nc\x9b/\xd3]\xe4\xe9y\x86\xa7\x17Z\x8a2\x8f8C\xea\x8fC\xa9z\\k\xfe\x1eo\xaeX\xdb\n\xe7E\x1b\x0b\x9c\xe0\xa4\xc5\xc5\x91\xc5\x94\xb9~/\x85\xd1Y\xfcB\xdd\x1cW&#123;\x9f\xdcA\xc4#\xa8h\xc3\xe9\xc2|6\x99\x13:\x83\xbd&gt;\x8a\x17\xec\xcb\xa4\x1d=\x0e\xed\x0f\xec\xea\x87\x89\xa5\xdbQ\x08\&#39;\x06\xe6\xbb5o\xb7\xa1_i\xa7\x1b\xf6\x0e\xbc\xf5\x1a\x12\xe3\xc9;8\xf2!\xd59t$\xa7\x05-\xc0 P\xb4\xc5\xa9\x82\xd4\xa5\xff4\xe4\x0f\xb9f\xae\xef&#123;!\xf4\xe8,\x15\&#39;\xd8\xfe5\x8a7\xf1\xbc\xa2\xf5\xa4)\x0e\xee\x95\xc1\xb3\xc6\x0c\xeb\x08\&#39;\xad\xb9\&#39;\xd7\x18Q?\x0f\x12\xe0\xf5\x87\xbd\x1b\xd6\xf2I\xcb4\x83\xd4\x80\t\xf8\t;\r\x93\x07\xaa\xe5+\xd5\ncg9\x83\xff9\x9a\xdc\x9a\xcb\xfb1\x922pW\xd1\x0f\xe3u\xefW\x8a\xc0\x96+\xcaZd&quot;\x96\xc5O]\xdb\xbf\x10)m)\xb3yv\xfa\x90\xaa\x12\xadb\xcb6\xd0&#125;|_\xc1&gt;.\xfaG\xa7\xa7T\xfel7\x82\x08Y\xe7\xf6\xa3(N@\xa7\xe3\xd2\x81\x84\xd6\xc6d\xfd\xb4\x0b\xfaM\xbfVy\xa1\xe5jX\xf7V\x9fO\xcc\xee\x85\xee\xc7\xf8\xf3\x7f\xcej\x12\x1f\x96\x07\x11k\x8aD\xdd\x12k&quot;\xa8 fF\x05\xa7\xb5/\xc2\x83\xfc\xf9~\x91\x1e8\x04R\x19\x16\x07\xb4\xd4\x9fu\xdd\xc3\xd8\x91\x90;\xe4\xae\xa6\xacd\x14\xe0;\xff\x07\xe5m\xf5\xbb\xe5\xae\xec\xea\x90\x98~\xdd\xb0\x94d\x80\xf08\xd2B\xd4\xa8\x14!O\x89\xfb@\xb4\x9b\xe6*\xac\xed\xe9\xdaM\xab\xba\xdc(\x8b\x12(\t#hU\xd0/[1\x80\xcf\xaaSn\xea36\x8c\xa4Is)\xa5\xd0I\xe7&quot;3\xefl\xc4/VH\xc68MS_\xbaD\xbf\xa3\x01\x1e\xb12W\xd7\xb0\xc4*\xf7/,\x80\xb1\xd2[\xbd7\x96\xab\xed\x01b\xfa\xb2\xab\xa9\xd6F\xf5\x06=\xe6&quot;\x01\xb8\xde3xNrT*\x14xwC\xech:\xdaHXf\xa8\xc1\xf8.\x19\xce\&#39;x\xcc\xba=O\xc6\xc9\xf0K\x1f\xe6+\xd9\xf5\x9dW?\xa0\xce6A \x19\xff\x07\x96\xd7\xf5\xb6\xf4bX\xcbU\xcd\xa3\xf8\x92\xee\x80\xd5\xcc\x7f\xd1\x1d \xfa\&#39;\xf5\xa5k\xd3\xa9\xeb\xeam\x9a\x18\nJ\x9a\xc1\n&amp;l\xa2\x1d\x8e\xc13u\xad\x86\xa8/[+\x7f=\x10\xce\xd6z\xf4\xda\n\xf3(\x91^bX\xca\xa9\xfbmJ?\xaf5\x99i&quot;\xd0\xd1\x1d\x80\x96&gt;bB\xee\xc1\xf6gY\x8f\xa4b\x8f\xdb\x95\x0b=\xb3\x02\x1d\xbab\xacZRl\xf6Gh\xc5\xc8W\x06%\x95v\xbd\x96\&#39;\xa7\xd9\x1e\x00\xceg\xaf\x0e\xa0a\x07&amp;N\xb54\xaf\xb3\xff\xaf\x18&#123;J\xc8f\x1a\x89\xa86\x06\xaa\x0f\xa5\xef\x18\xf6\xcb\x1b\xa2t\x8a\x14\xbcu\xbcT\x01S\xe9\x08G\xbf\xe2&lt;\xe8\x06%\xb5n\x9aa=c\xe9\xbf!EQ\xc1\xfcq\x90\x83;i\xd9\x89\xf7\x8e\xdd\xd7B\xec\xecg\xd1`\xabJ\x13\x90\x7f\x87\xf5\x88PE\xd5t%\xba\xef\\R\x93|\xab\xe3_\x8c\xefK?\x96\x90\xd8\xd7\x0bi\xc8\xb2\x1d\xbchhgF\x85\xb1\xad&#123;3e\xa0\x16&lt;UW|\x89\x1e\x88\xe4h&quot;\xca\x85\xd0~\xcc\xd3v]V\xdblqiz.\xf8h\x118\xa1\x1c\xbb\xdb\xa5\x14p\xb8^i\xa3c\x04\xcd\xdbyY\xd1\xcb\xdf.\xd8\xfa\xf5\xca\xbe\x90*\xdd\xc4\xd7F\xac\xbf\xad\xfe4E6.\xca\xa2=\xc3e1\xc9^\x10&gt;\xcd\xc1z\x91\x98&#125;\x86E\xccU0\x06\x16\x88=\x00\x1d\xf4P=v\x8fA\x80\xb6\xc6\x9b.-\xb6\xeft\xc1w\xcb\x0c\x9a\x05\xbd\xd9\xb9f\xe4\x80\x8br\xe62\x85a\x0f&quot;\xa9\x7f\x97\x818\xa5W=\xe8SU\xc8\xbf\xa5\x0f\x03\xc8\x1d9\xd9\x11\xca-\x88j\xdd\xb8\x9e\x1c(&quot;\n\x10\x1e\x1b\&#39;a\xa8\xadne4\xd3\xcb\\\xf8\xce\x1e\xeb\xe9d\xe4I\xe5\xb7\xdb\xc0\xda\xb25L\xd5\x84\x96\x1c-J5\x84\xea\xc4\xc1\&#39;\x8bm\x10\x9f\x95\x9c\xb0\xb5\xf2\x06rW\x06.\xc1C\xdbl\xd3\nIs,:x\xf3\xa8&#125;\x8e\xa5n\xacq5u\xe8\xe2\xd4\x14\xe4\x10\x89\xc0\x02\x00\xe5]H\xc2\x03R^\xd0fv\xcaLt\x13C6X\x91j\xb8\xb2\x876y\xdf\xb6\xfd\xd3\x19\x02\x0b\x81*\xc9\xbd\xff\xe7\x82@&#123;\xe1\xcfHo\xb7\xe0:\x8a\x9f\xfc\n\xa9\x14\x82\xce\x19W\x8f\xd5\xad!\&#39;\x16\xfc\x01\xad\xee\x95\xfa\x10=\xdfa\xcbah\x16\xb4\x81\xeb0^8\xf4S\\\xe4\xfb\x9f\x9dO7\n\x11[\xf3\xe3\xce\xe2C8)w\xd0\x8aa\x104\xd2\xa1\xaf\x02\x0f\x11e\xb5V!E[\xd05\xf1\xc8\x98N\x99\xce\xda\xda\x19\x8cs\xfb&#125;Y\xe7\xbaMt,\xd3\x06[l\xf4\xb4\xcb\x17\xb6\xc7\xbb\xf8\xcd\x0b\xbdP\x8c\x10\x16W\x181m;\xcd\x0c\xbc\xcf\x84\x8a\x07CD\x02n8\xad\xd0k\xf1\xe2YY\xb2\x00\xeb?s\xdbj\xb7\xa9xET\x1bb\xbd\x9e\x1e\x9b\xc9U\xdb\x9c\x9f\xdc]\xa5\xc8\xfc\xc6\x0eng\xc0p\xa2\x0cM\x19a\x93\xe5x\xb0\xd9\x1e\xf4\&#39;\xbc\x1fN\xf8\x8d\x9d\nF\xdb\xd9r\xf3\xc2#J\xcc\xb8\xefE\xef\xca\xe4\x11#0\xf11\x15\x07\xe1\x18\x98\xcc\&#39;\xdbJ\xe4U\xd4[\x08\xad\xdeK\xdb\xd0\xfaw\x82 \x9eO\xd7\xd2~\xb3K\xc89(\x1fw-\xd7\x1b\x8aV\xdf\x88:\x92s\xe7\xbeuk\x02\xf2\x95\xb3\xe3r\xee\x1fm\x0eEG\xeft\x8az\x98\xec\x9c\xd5XN\xe2\xd2o;xJ7X\xd6d\x9f\xd9I\x85-\x1f\x0bY\xe3\xaek\x91\xd5\x13H\x02XQ\xea:\xe2\xce\xc9\x11\xe2\xc12a\x1b\xdc\xaa\x9e\x1c\xdf\xdbjag\xc7\t\xa1&#123;\x11RL\xe5B\xefts\x86\x87\xea\x9c\xf3\xb6&gt;n\x98\xff\xc4\xb6\xd2\x1c\x930i\x17&#125;\xcb\xe7/`\x1e\x1f\xa5\x8e\x90E\xb1d\x071I\xee\xba\xb0\xd8i&#123;\xa3&#123;\xfbj\xa0\x8d/\xaaN|fp.\xa3H\x1d\xcb\x1f\xee\xba\xcdJ\x0c\xc6\xfe\xdc\x80\xd7\n\xe4D \xf1.,\xd7\xb0\xec\xad\x86\xf8\xbaK\xbf\xc2\xb61\xc5\xe8%\x12n!\xb6\xe4W\x0b=\xb1F)\xaa\xeb\x17\xe2\x8e\xdaJ\x846\xbb`\xf8\xfe\x0bT\&#39;T\x14\n\xee\x8c)\xa9\xcbE\xab\xc8Y\xean\xbc\xec\x18\x1fEI\xf9\x01\xbd=RH\x80&lt;\xfc\x0b\xbc\x16b\x83\x18KX\xa8\x84-\x97\xdd\x11x\xeb\xd2\xfb::\xa1\xd0\xe6\x86Z\xbdD\xce\n\xd4\x9d\x87*\x13\xb1\xd2R\xb0Y\xa66g\xaa\x8e\x1b~\x1e\x08\x18\x8c\x12\x16Y\xf8\xaajV?\x14\x89S\n\xd7/+\xf2#\x15\xf9tv\xcaP\x0cZ\xd1\xb2x\x94A\xa5\x06^\xc81\xce\xc3\x08\xe8]\x81\xf8 ),\x83a\xfc&lt;\x9c\xac\xda\x04\xe6\xe2\x08\x8f\x0c\x91!\xb6sT\xf2\xfa\xcc\xce\xd2\x84\xd1\x8c8\x98=\xee\xfd\x96\&#39;W\xe7|\xbf\x9b\x8d8ja=\xe1\xf1M\xa6\xc3\x93\xe4\xf7\x9b\xee\x081t\xbf\x9dJK;]Fq\x16\x90a`\x99\xc3\n\xa0\x04M\xee\xd4l\x0e\x7f\x98\x11\xb2\x97\xa2\xcbNO\xea^\xee:\x8d\x16J[F!\xbb\x05\x0e\x06\r\xca \xd8&#123;\x1fH\x95TK\xc4\xf5\x91\x1b):w\xe5~S`\xe8\xb5\xf8\x9e0\xea\xd1ZW\x0e\xeaF\xd3\xf9%\xf5\xe1\x04x\x8ft\xb4\xd6ixlr\xc7TM\xdd\x8e\xfc\xedO\x8f\xb6B\r\\q\x8d\xb6\x8b\xc2\x0cIO\xd6\x0e\x87.\xe9\x15nE\xad\xfc\x8d\x18E\xfd\x82^aB\xea\xe0\xfb+CD\x9a\x96\x89Gp]I\xe7?\xffH\xd1\xd5X\x1c\n)[\x7f\x85\x9cz\x87\xb1\xdcL*\x03\xe3H\x1f\x04\x87PN\xd9p#V*q]:\xeb\x0eY\xa6\xaf\xf8\x07&quot;9E\x1b\xc1\x14\xaeR\x0f&gt;\xd5&gt;\xba#\xf8V\xc3\x90\x8d\x82\x0cT\xc3\xdf\xb2\xff\xda\n\xdf\xa7\xd4]\xbe\xe6Imi\x87\x7f\xac\x8a\x81\x98\xeeS\x9bJ&quot;\xc4\x02a\xf2!8HG\xd0\xd9-R\x80NB\xc4m\x97\x9c\xdb\xc6Y\xa6\xb5\x15J\x9e\xf3?\xdc\x18\x80Y\x98&#125;\x11q\xe9xa\x86\xcf\xecr&#125;\xaf%\xc1\xd1\x9cP\x17\x9b\xe8\r\xb2\xe4+\x88&amp;\xf7\xc9\xef\x139M\xc7E;\xc3\xb8\xebxP\xcbu\xb7K^5\xac&lt;\xb8p#\xea\x15\x85\xee\x111\xfa\x13\x10\xcbr\xc6\x01\xff\xe5\xa0\xa6\x11\xe2\xbd\x92\x8aT*\x18\x9e\n\x0f \x8f\xd6\xfe\xfd\xa2\xd2\xd1\x19D\x9b\xeb|\xc37W\x9e\x87\xd3i\x85YSH\xd5O\xbd\x1c/\x93\xe7&#123;k\xb4&amp;^U \x93+s\xd3\x08\x90ZyH\x18\xb5#\xe4D\xe5\x9e\x9d~\xd3\xad\x17_7\x85\xbb\xbef\x91C\x9b\xb0\x19aD\xd0\x805\xd04\rU\xcb^KB\xd3\x18\x0e\x9a\xaa\\)5(\x9a\xc5U\x8a\xd9\xe8B\xd8\xb2\xe21\xe5\x98\xba\x98r8\x0fx\xea\xa5\x97\xa6W\x07\x00 \x9a;M&gt;\xaf\x9e\xacB\xe6\xb9&gt;\x83\x1e\xc0-\xecz\x1e\xbd\x89&quot;\xf8\x03\xf5\xbe\xb6\x12\xfc\xf6 \xefT\xf6\xa5UR\x96\xbb\xf2\xc1\xa7\x04Q\x8a\xc5QA\xd4\xe1\xddG$\xf7ve\xdd\xd8Y\xd9\xaa\xc0V\\\xd0GO\x02\xeb\xc6\xf4G\x83\nr\xd4z\xbe\xb3\x96\x08\xac\x9b&amp;\xf4\xa0F\xfbI\x8f\xd1\x0fJi\x8e/d\x0by\x9d\x1c\xa8\x14\x8eC\xa3\x92D\x1b\xa7\xecC\xff\x06\x82gF?(K\x9e\x1c\xc65\x95\xb2\xfe\xe5^[BsG\xd7\x82j\xca-\x9e,R2\x89\xfbm\xc3_\xa0\xd3\xde\xdb~5\x15b\x11\xdf\xdf\rE\xd6\xde&#123;O\x1b\xa5!\xd4\x0e\x9fZT:\xce\xa4\x18Ir\x8f$j7Y\xe5\xa7X_\xc9\xeb\xbc\x7f\xb7`SC\x90jTg\xd8J\xc2\xb1@\x8c\xf7\xf6zJ\xba4\x06\xfa\nM\xa9\xa8\xcc\x9f\xd4hp\xcd\x05\xf1\x88]\x89\x1d\xf1\xae\x97\x85\x1e\xf2r\xfd\x05\xc9]\xf1\x8a\xfdf\xf9\xeco\xfd\xdcq\xd4\xb9\xbd\x16&quot;\xf6\xa4$\xb6\x9a\xe4\xabr&#123;h6\x80(\x0bat\x1a\xc2\xa7\x84JY\x06\x17\xeb\x00\xd4V\x18-\xddbm\xa2\\\x16U\x1a\xa5\x90\x11\xce\x9eRkT@\xa4\x1b\xab\xa5`\xa2jn\x01\xab\&#39;\xec\x03\x8b.\x06\x8f\x9c\x93\x08]\xc1\x0b\xa2\xeb\x06\xce\xd6\xaf\xb4\x9cA\xd31hpH\t\xea\xd7\x94%YU\x83\x9c\xdf\xed\xb6\xa0\x80zC\xd5\x04\xacM~\xfb\xad\xbc\x1cR\xe5\x81P\xa1,\x86\xb9&#125; \x17\xad\xa5\x1fX\xce\xcd%1\x05Y\x9d\xa7\x92L\xed\xc9\x0eL\xd9(\x02\xef\x16\xd6-4\x0bO\x1f\x08\xbbc\xf0\x90\xcb07X&gt;\xd71g\xae\xdfA\xb5\x85\t\xeb\x8f\x05^\xab\xb4\x84\x83v\x1a\x0cj\x9a\xcaF&#123;\xb6\xbf9\x88&#123;\xe3\xd93T\xd3\x00\xbb\x87\xbc\xec\x05\xd1\xe2\x9a\x00s\xe4\xc4Bp6\xd0\xd4\xf9\xaeJg\xfb\xa2\xa6\xa6\xc5*\xdaZ\xde*\xdc\xb1\xb4\xb5,\xd7|\xae#\xf4\xa3)\xec\x9b\xc4\x90\xc1~\xc5[e\xea\x01&#125;6]c&quot;\x82\x81K\xff\x0ff\x83\x0f\xd2\n\xb6\x16\x88\xbdH\x1eS\xae1\xf2\x823;\xb6\xd4\x05!\xb1KU\xa6X\x932n\x1eH\xe0\x08.\xb1\xfe\xa8\xad\xe2\xf0\tL\xe9-s\xa9\xaf\x1c9~L\x96\x05\xbf\xd0\xdf\x12\x92\xc3f;\t\x82\xca\x19M\xf6\xa9\xad\x94f\x0b\xee\x85\xd7]Y\x8e\xad\xf9\xf0\xbe\t~\xab\xe5\xa5\x93^\x1a\x90\xeftH\x9e\x1c/\xd6\xed\x19\x13\xc8GX\x0c\&#39;\x04q/?\x83\xfa\x14\x14\xcd&lt;RZ\x9a1\xa8\xbd\xc5M\xde\x17\xf49&gt;G\x86\n\xa6\xba1Z8\x1eh\xfe\xd1%.\x8cb\xef&quot;\xad.g\xa2\xb08y\xe9\xa1\x12\xbf/\x93\x8f\xb2\xb5\xabC\xcdp2\x17\xb9\x80\xc4\xb6\x88\x1b\x9c\xfc\xa3\xa6\xa8o\xfa82,T@\xd3\xa6&quot;h&quot;&gt;\xe3\x9d$\x15\xc2\x02\xe3\xbf|~a3\xc8\x00y\xa1\xcc\xb2t\xc0y\x04\x85\xd00r\xb0\\#\xc8*\xedI|\x84!\xabCd6\x87\xb4\xd5\xb8\xf0\x03G\xab\xfdi\xd9q&lt;\x9d\xda\x1a\xc1]\xb4,,\xa0\xa2\xdeQ\x8f\xdc-\xfcu&lt;\xfe\xeay\xeaYI\xaf\x8fc8&gt; \xf1\xb7\xb6\x1c!\x8a\xf3\xf6]dc\&#39;2\xe8\xb0\xa6\xcd\xdb\xb7\x14\x1e]B\xa9\xd3R\xfb\x06\xd8:\x82\xe7\n3\xb4_6\x9e#\nU\xdb=\x9bD\xfd\xe5\xe6\xed-\x82\x12qo&lt;\xe9\xe0\xd2\xb2\xae\xec\xefl\xff\xcb\x13%\x95\xf5\xd0Q\xeax\x9e\xb7\xcf&#125;\x17.X\xdd\x81\x1d\xc2V 4\x85m^\x89\xdb\x15CqFI\xd6(\x11\xe8\xf6Z\xbc$&gt;\x96v\xb8\xe0\x1c)m\x8e+H\x8ef7\x1dE\x1eN\x013\xaeF\x08\x8d\xcd\xb0\x7f\xe8\xea&#125;\xf8\xb0\x8f\x1d\xb2\xc5\xa9qI\x87\xb2C\xae)\x07\xf0H\xc0\xb8\xe3\xf3\x03\xe8\xf7\x91\xad9(\x84\xac\xeb\xffs\x9e\\\xb0\x8d\xfa\x00Q\xb4\x80\x91\x1e\xb6H\xf3\xa9\xf5R\x88;\x84\n\xb8\x0e\x9a\x19\xe2\x88\xa8\xceaJ\xe5\xf6\xbeV\xa7\xfcQ\x15\x91\x9d\xd1|c\xa3G\x19\xbb\xe0\x9f\xb4\x14W\x16\x02\x1eZ\xb1y\xac\xb6i\xe3\xd7\xcb.\xe2&#123;N\x9c)\x87Z\x84\xeed\xbf\xb95u\xbbWX\x1e\xfbwkG\xb3L\xdd\xe6\xb0DM\x9d3\x85\x9d\x8e.\x9c\x854\x9e\x8dG*\x0c?$\xed\x93\x8d\xb3\x0f\xa9\xe1\x97Jt\x93\x1bb\xe3\x03\x9e\xf4\x99u[\xc5\x98\xb6Of\x17I\xc9\xa3\x8e\xe4\xef\x934\xbf\x11~\x18\xec\xf9\xad\x19\x07MBl:\xce\x07\xc1\xe3\x9e\x9al\x927\xc8\xef\x19\x1f\xb4\xe8j\xd3\x02\x82\x11\x1dS\x19\xbb&amp;\xd9@v\xa0\xefM\x18\xa3\xb3\xc1p\x93\xb2\xefw\x19-\x04;Kagu\xdb\xe6\xa8.A\xe5\xc6\x88e\xd0\x00\x8fV\xda+\xc1)\xe4F\xda\xc6b*\x0c\x07\x99\nw$\x9b!\xce-\xab\xacH\xb0\x1c\x8b\x1c5\xcb\x19\x1d\xff\xbb\xc1v\x9f\xacaK\xde\x06\xe1)\xfe\xa1\x9bl0\x08\x19\xe9\x81\x80Y\x96\x96\x1a\xb3&#125;=\xbd\x8aoJ\xe8 \xeb3&#125;\x15\x9fp\x0e,\x96\x99\xff\xacp\x03\xb2\xe3K\x00L\x87\xee\x16n\x8a\xc9\x94.\xb8@+9\xbb*\xad*`&lt;n\x1b\x8d\xcb\xf9\xdb#!y\&#39;\xc3\xa197\x84\xea\x05\xabkm&amp;\xfb\x19Nd\x85f\x1d\x8f\x8bR\xc8\&#39;\x9e\xd8\xe7\xbd\x94oC\xc0d\xb6\x98\xdcx\xfb/\x10\x8a\xb9L\x9d/\xa4Z\x8e\x0f\x0e\x9d&lt;\x8c\x96\x9d\x8fCj\x8f\xd8i\xba\x04\x0c\xc1f\x9a4\xdf\xf83\x1a\x1e\xb0\n\x89\xf67#z\xff\xf8N\xec.\xfa\xf9\xd2\xc3\x93w\xa9&#125;\xc8-8\xd4&lt;\xa2vXH\xe5\x8a\xf3\x86\xd0\x0b\xfd?\x99S\x9f\xef\x1e\x86\xc1GI\x8d\xc9\x94\xcal\x15\x15K\xa6]c\&#39;-\x0c@\xde\xe1y\xeb\x8f\x83q\x8f\xb2\t\xcc\xbcE\xb8\xb0u.&lt;&lt;\xc0\xb1\x00\xeb`\xec@k\xbb\x87q\x07\xda\xeal&amp;K\x03\xf2\x00&lt;\x12g\x996\xe1\x9bF\x1ckhM\x85\xfcm\xd1\xa1\x8e\xd9;\xf4\xfd\x96\xea\x84\x89\xf1\x95\xd6\&#39;\xa4U\xaa\xder.%\xd3\x94&lt;\xf2\xd7\xfb/\xf8\x9d\xcd\xef\x8d\xf5NH\xdf+-\x82H|&#125;\xe2\x7fgn\xed2\x0c\xd1E\x04\x8f\xcd3\xef\xd8\x94a\xb4\xa4\x909&gt;\x8b\x94 \x15\x08\xfe\\\x8ap\xfe\xc5\x17\&#39;r\xcb \xfc\xd7\x08\x90\x99\xba\x8a\xde\x18\xdao\xabB\xd7L\x86\x8a\xef\t\xf1J\xfbi\n\\\xfa\x8a\xad\x02s\x87\xd4\x93\x17\xfax\x97W\xa8\xad\x90\x1c\x03\xa2\xf4*\xd3\xb3,\x97\xd7\x10`\xc2\xb43\r\x8d\xda&amp;\xca\xe3\x12\x97&#125;n\xdfw\xea_\x88\xadR \x9c\xc4\xc3\x00\x8fQof\xee\xfd\xaaK\x1f\xa9M\x95\xbfiE~k\x19F|&#123;H\x932\xfb\xac2\xb9)\x82\r\x1a\xf7S&lt;\x93&lt;\x92\x03\x17\x13\xf6Q\xf3\xc8\x8f&lt;\xc4\x9cO3lQ\xdb\xcb\xd9m\xd4(\t\xf8\x82u\xad\xb0\\\xc8\xff\xbd\xa0\x01kF\xbd\x11\xb5\xe9\x8an\x9a\xf9\r6\xfb?\xd1\x12\xa3\x1f@lc\x8dX\xac\xba\xde&lt;#\x97\x8c\xfc\xc0\xdc\x0f\x8d\x01\xe0/fB\xcb\xe3\x00\xb0Q\xd7m\xcb]8HA\xeb:\xf0\x15\xbfo[|\x8a~Bv!\x81\xd02\x12\x16$\xb4\xef\xdc\xc9\x11\x18\x197\x91\xdd4\xb6\xaa\xfb\x84\xe4\x0b! \xac\xa5`\xa9\\\x9c\xcc\x89&#125;\xb1\xd1\x18\x00\x11\x1f\xfb\x8d\x9af\xa3(;W\xec+A\xe4|\xc5\xa5\xd8:\xf6fE$\xa6\x9e\xdf\xe5w.\xf4\xe9\xb7?V;HFJ\x8ai&lt;\xb3\xb4\xfe\x9d\x18;Z\t\xd9\xc6\x01\x18\xe5\x1c\xa2n\xc4\xdcc\x03\xc5\x01q\x80gA\xdd\xb7&amp;R\xc1\x166kp\tK\xb7yH\xb8\xdd\xce\xbb\xf6\x8cqS9\xa1@\xb3\x8bV\x14\xcd)\xfbe3#\xad\x89\xa9\x18\x1b\xdb\xb8\n \xa1\x8ee\xbe\x19\xd6k\x80\xa4\xb1\xbb\xd6g\xb4x\x9a\xa8\x192e\x84\xd2\x92\x13R\x08\x01|\xc8j\xc8\xbbH\xfe\xd3\x9cUA_sL\xa4\xd3&#123;z\xde*^\xd5\xcf\xa9\x89\x7f\xd0&#123;\xcd\x9e\xf5nb\x10&lt;y~\x00\xe1\xbb\x04!\x93Q\xe9V\x0c\xf2\x8b\x9cJ_\xe3\xe7\x17Y\xbb\xc7\x92\x07\x1d\x98F^\x17\xe1R\xe22G\xc5\xed\x06&lt;X\xf5$\xef\x8d1\xb3\x03\x99\x0f\xd0\x8b\xc9\xf4\xc3GgL~wW\xa5\xad&#123;\x1f\xd0\xc6\xcc\xe8\xa6\x87 \x91\xa0\xa8jL\x06\xe5\xd2\x8b\xfd=wO\xd7\x84\x14\xf1\x1cd2\xe11\xd7 \x93\x1a\xb9\x80\xed\x8f\xde9\xe8#9\t\xa5\xb7\xc3I,--\xe0\x17L\x95&amp;\x12\xbfy\xe1\xb1\xedS\x06\xc3wv\x80\x15F\xe0Q\xcd\xc6\x97E\xf2\xa9\xc42\xb4\xcc\xff!\x9e\x8c\xe9\x0bU-\xc3\xacnt\xe8H\xbe9\xe1\x9c\x83\x92\x84\xd0&#123;YeE\xe2I\xa6\x9bQm\x0f\x9dT\xa1\xd6\x83Lt\xa7\xd58k\xad\x0b^\x83\x07\xba]]`H/\x0f\x83?\x01\x9b\xe2\xef#\xf6R\\\xbc9\xe6x\x89\x92d\xb4a\x01q9\x94\xe9=A\x85\xf3jpW\xcd\x89v\xd2K\x86\xa9\x03\xaa\xdd\xf1\xf1\xdd\xbbB03\xdaWMM%1\x05\xd7\xc0\xa5\x00\xc8\xaaCt\xb8\xa3N\x86\xa6W\x0bf\xf1U\x06\xc3[\x0b;)\xb4\xd2&amp;\x7fT\x00\x9e\xf5\x81\xb8B\xd4\x13VrGg.\x8f\x9e8w\xc0$\xc7\xe9V\xff\x7f\x13\x8eV\xf7\xcc+\xf6\xcb\x9b\xcee\x02W\xdd;\x08\xcfu\x05U\xf4\xcen\xcd\x1d\xfc\xaa\x12\x9f\xb6\xb1\xbfB\xef \tE\xb5\x05:)\x05\xb5S\xa45\xd8\xe1B\xc8\x10g\xb5oI\xc4\x86\xd3\xd4\x06\xffL\xc7\x07WCl[a\xc3&lt;\xa5\x01\xef\x81\x8c\xaeb?d\xb7V/F\xdc\x06\x03\x8a\xb4\xb2\x12BDT\xb0\xf2\x10\xa3.\xe1\xdb\x9c\xe2U\x83\xed\x0f\xd2\x11H\xa7\xf1\x82\xe4\&#39;nd\xea`\xee\xf8\xbaE\x8d\xcc\xbe\xe7W\x0b\xe7\xab\xcb\xfat1\xde6=\xc3\xb1&#123;\x17\x0f\x0f\x80(\&#39;\xa9\x0f\x18\xb7\xc3\xb6\xe1s\xbbH\xa4\xd8\xd1\x03\xdb\xee\xce/\x8c\xf3\xda\x92\xc0\xa1\xf8%Dp7\xc5\xe4&quot;\xe8QW\x1b&quot;\xa2\x80\x97\xc1\xe74\x1cwL\xc5(\xbc\xa0\xad\x04\xd3\xcdJWF1\x17U\&#39;\xaeF\x85;u\xae\x0cd\xf8)\x8b:R\xf6m\xff\xdar\xba\x80_\xd9\x0e|\x92\xf9P\xed \x15p&#123;\xf8\xf4\xc6@\xf1G\xab\xf9\x90-\x80~\x05\xcf\xa4\xcd[T\xf3l\x98*\xee\xe0h\xef\x12H,5[g\xd3U\x87\x82H\x0e\x87t&amp;|h\xd8\x9d\x085\x08\x84\xfa\x8b15\xa2\x97\xc8Y\xef\x93\x12\xc6\xc2\xb2X\xd0\xed\x08/\x84m\xad\x90\xda\xb4\x9d\xd64\xd53\xb3\x15#[\xd3\x1f\xbb\xa5\xe8\r\xc2%tV\xa3\x88\xa6\x1b\x0b\x123\xb6\xcd\xe0\xcd\xdbB\x90G\xb2\xb0\xc20\xa4\xe2J\x937\xd2\xb0\xf6g\xe8\xd4\\\xd0(I7b\x95\xa5\x8e\xc4\x0b\xc6\xb0o\xd9\x1a\xdc\xae\xcb\xfe\x88\xcea\xe5\x9c\xc4\&#39;V5f\xc3\xd7\x98\xa7\xc6\x92cg\xb2G\xf1&gt;\x0e\x82\x01\x142\&#39;\xd7\xfe~\x04\xc3\xa4w\x9ct\xb2\x11\x0f\t\xc0I\x81b\xe38\xbb\xe7\x8f\xdeh&gt;\x88\x97\x86\xb3\x82\xe9\xd7:;\x96\xda\x14&#125;\xf9l\xfe&#123;\xb3&#123;\x06\x16\x88\xf5u\x9c\xf4\xe3_\x88\xfc\x0b\xdc\xc7a+\xf3es\xd7\x03m\xb6P\xeat\x1c52\x85\xb65\xccT\xd3\x9dtM\x1f4\x13\xe6\n7\xbe\x05I\x9eh\x14\xe6\x18~a\xe8\xa50n\xfb\x81\xf1\xef\xe0+\xfe\x8c\n\x9f7\x87\x92\xa9\x1d\xb1\x12VtS\xe7\xba\x05\xbf\x96\x86s\n\xe7\x11\x9cD\xe9\xaaa.\xd7\x9e\x0b\xd9\nG6k\xbe\xfd\xa7\xdcVe\xa4\x85 \xd5\xea\xbds\xb9vJ?\xc0\x0b\x08\xa3\xe0\xbc$\xa0\xd9g\x89\xa3\xc5\xb8\x91K\xf7U\xdc\x1b^f\xd6\x15\xc0\x9e\xb3\x89\xf8\x83\x9f\xed\xd2\xf4\x9e\xc6W\xdf\xab\xd9\x96\xb4\xd7A\xd2\x96\x1a\x86\xc7\x134\xb6\xb1\xb5\xe2\xd2\xcbWhD/\x1ec\xb2&lt;jh+\x0e\xcc\xc1\xd7\x86N\xbd\xd9\xee\x93%\xe3\xe1\x13l\x1d\xf0\x1c\xf4\xafJ_\xadK\x9b\x82l\x0b.\x99&gt;\x04\x87*\x1d1\xd0\xba\x9a&#123;1(w\x84\x99\xbc\xa2\xeb\xcf\xe5i\xc4M\xb7q\xd9b\xa7J\xf0\xc5\x864N@\xb1e\xc9\xbe\x03\xfc\xc6\xe9\x02\xe1SV\xddE\xdbV\xbfksO\xd3\xe6]RL9\xa2b\x84\xa9\x8d|_\xc0\xc2\xa7\x99Iz\xb6~\xdc\x9c;\x8f\x94x~\xfc\xab\x8e\x9e\xd9\xc2\xf4\xad\xc6\xab\xfd\xbd\x8dS\xcd`\x0c2\r\xc7\xbe\x08B\xe8\xfa^y\xdb(\xb1\xed\xb9&#125;\x9bF\xad\xa8\xfc\xbf\xad\xc4r\x9eZ\xdbk\xf1h\xc8\xeb\xb5\xc4\xe5\x1dt\xdb#\xe4D\x08\xf5\x95P\xa1X\xb0\x16\x0e\x847\x80I\x15\xd6\xc1\tv\x02\x04J]&amp;\x1e\xd0CS\xbe\xb5\xaa\xc7\xfc\xc7\xed\x91\x92\x05~)\x997\x82t;\x18\\\xde\xee\x0f5\x15\xfd\x7f\xf0\xaa\xb0\xab\x8b\xb7\xbc&lt;G\x9c*\xa1\x14\xd6\x9a\x9f\xf9\xe33\xdb\x95o\x9f\x92\x84\x00\xd7:\x91U\x8bb\xbc\xc7\x1f\xca\x05\x80\xb9\xe1fD\xfd:\xb0[\xcf\xcb5C\xb8\xe7c\xff\xeb\xce\xech\xd2\x8c\x08\xab\xfa&quot;\\\xc9b\xee\x7f\xce\x81\xf3\x9c\xac3\xf7\xe7\r\xed \x00T\xe5\x13\x8a\xd5\xfdn\xbd\x1aJV!\x82J\x014\x8bj\xcf\x0etp\xe6\x90\x84\x1ex\xe1\xfe\xd0\xb3\xaas\x04t\xea\xbe\x0c\xb3b\xe8\xa5R\x95 \xf4 1\xa1\xadp\xe6\x9f\x16N\xac\x96\xf8hE\xd1\xe6(\xe2\x10bX\x0cMZW\x16Kq\x1c\xc19\xc29\x80\xfcGH~3]Q\xdf\xf7\xbd\xe2\x02\xd0\x9dv\xbe\x84\xcf\xe5\x8c\x00\xd3\x91pxZOk\xf5\x96\xaa\x9a\xa2?u_/T\x91\xbf\xce\x03q\xfe\x0fR\x0c\x12o\x8d\x1d\x83Na\xd6\xc7Tj\xa6&lt;\x1d\x06n5J\xe7\&#39;\x8f\\\xb0)\xb9\x95T\x98@\xbf\x93h\xb5hFUuI\xaf\x9d\x1c\x01\xfc\xd4\xbd5\xed9\x95]\xe6&lt;J&gt;N5X`\xc1\x96\xc3\xb6F\x7f2\xe8\xa5\xb4\xc7\x82\xd0\xff\xf4\xb0C\x12rSo\xecj&amp;\xb0\xbawB\x99\xfe\xe4\xe1Sy\xde\xeb\x0b\xafZ\xbd\xfav&#125;:\xc9\xd8a\xc8\xbc&lt;\r\x9f.\x88\x1e\\\x8c(\xec\xdf\xf85\x00\xfa\xf75\xf5V\xe1\x04s\x1fu*\x97\x12\x1fP#+hLC\xb6\x80Zs\xcb\x8ey\xe2+\x8e\x9e]\x97,\xfb\x8b\xe2\xbc86\x19\xf5\xf9\x0e\xb2\xf8\x8d\xf3\x819&lt;\x19-&gt;\xa1j\x9b\xa9\x07\xdeXP\&#39;\xe3i\n_?\xc5\xeb7\xb2\xd9\xb3\x9c0\xebw\xb7d\xdf#Rl\xda6\xa3\xe6+S\x0c\x1c\xaf?z&#123;m_\x06\xe3a\xb5\xa1\xec6\xdb\xb6\tx+\xb1G\xe7\x19\x01\xa7\xad\x06\xb7u\xfdl\x00\xf5^\xa5\xb6\xf7\xd1\x0e\x9a\xb2.\xa4\x99\xf1\xd63\xe9B\xa1\tot\x80tL\x869E\xbe\xd4J\xbd\x0e\xb9\xfe)\xd8+\xf2\x10\xa1\x17\xb0\xf6\xadXH\xb8\x01\xe3\x92\xdb\n$\x11\xf2\x13\x06\xd3\xc9\x8dM\xb8\xbb\x9dHv\xc4\x83\x96\xb7\xed\xe8\xb4\x05\xc0\x9bu8\xf9t\xf8\xc9[\x9f\x0e]\xc9\xf7\xce\xbd\xaf\xd7\x82T\x88T\x94\xd1\x81\x82D\xd0u\xab\xcd?\x07\xdet\xce\x90\x02\xba\t\xf4\xa3\xc8\x82j(\xcb\xa2\x89_\xc5K\xa5\xaa\xa5\x98\x18\xe3\xde\xae&#123;\xda&#123;sU\xcb\x03n\xd1\x82\xd4L\xdd&lt;i\x89x\xe5?6\x83\xbf\xa7\xbe\xc0\x0c\xb8\xc7^X\xb9O\x8f\xa6\xf90\xfd\x12\xed\xb8z&lt;C\xa0&#125;)\xdd\xafv\xe2\x86A:\x98\xd9.\xbbi?\xd3\xe7\xee\xff*C\xc5\x03\xf0L\xac*\xe0\xf5\xd5\xd1a\x92\x9b\xfa\xbf\&#39;r\x94\xd1\xd8n\x9a\xecO\xdf\xf5RM\xe5IL6=Y\x82\xe2[(\xe2\x8fsM\xb3&#123;\xb0\xa4\xfc\r\xeb\xc1s)-\xa1\xe8\xc7/\xda\xa6F(ol#T\x0e\xa4\x97\xc5\x94\x8b|v1G\x87`\xc7\xf7\xa8\xd9e\x1cV\x08\xa1\x07\xd5@\xee5\xc2\xce\xba;\x8e\xfc\xa7\xa4yL\xd8\xa6LC\x8a\xc55\x96\x14\xa4\xc6S`\xd9\x1c\xba?\xb8:\xe6\x92`\xd3\xec\xa2\x945Cb\xcf\xae\x1e\xf3)t&gt;\xf4g\x8eU\x9f\xc4\x9a;=\xcc\x15\x00Rg\x80w\xec)\xe9\xbc~VRA\xbe\x99\x0c@\xac\x93\xa1\xed\x7f!I\r\xfe\x1f\x85S\xfd\&#39;\xc7\xe5\xe5\xf5\xef\xfb\xdd\xfc\x910\xdd\x01v7\xad\xe0Q%\xe6\xee\xf3@\xc51\x14\xb6ny\x0f\x13\xe7\xff\xcc\x85\x9e\x16i\x86\xd4\xff\x007\xf7\x8e\x9c\xc1p\x06C\x95\x0e[\xc6mjCP\xdbc\xfc\xe37\xe4\xe7\xb4\xc0\x8b\xdeV\xd9\xed\xf3\xc0~\x12\x9d\xe5\xc4\x86B\x13\xc7\x95\x8c\xec\xbf\xcaK\xb7\xe9\xd1\x0b=[9I-\x8c\xeaR\xce\xdb\xc5\x01\xaf\xdb\x84\x06\xca\x92\xafV\xcf|\x82k#\xc6\xde\xde0&gt;\xbd6\xf3s5\xe8\x83\xb3\x86\x0c\xeb\x8f\xbc\xd4\x97-\x9f&#125;\xf9\xdf\xdf\xb3Nd\x8eJ\xd3\nnQd\xef\xa7\xf2\xa9\xa0,\xfb!\xb4\x947\x8aqe\x00\x93\x05\xd8\x80\x81\xb4k\xf1\xa3\xef\xd7\xd7\x1eZ\x86\xfb\xd1\x9f\xd0\xe9\x89v\x83PE\x9a\x80\xef\xd0\xd9C\xb2\x85\x9a\x82\xad\xf9\xa7\x1d\xf4\xbf)\x99d3cf4L\xdc+%\x9e 2\x98\xd8\xce^\x8cZ\xb6&gt;\xda\x98\xac\x89\x17a\x88d$I\x95/\xa1\xd6\xe5\xce?\xda\x01\xdf\x1b\x9b\x05s\xe4f\xc9\x96\x1f\xda\x1f[\xff\x11\xe0\x00\xd8$f\x7fH\xbb(\xeaL\x10\xc4\xf6\x14e\xd2\x1eF\x01\xb5\x88\xf5yi?\xbe\x00\x9b\xaf\xd7\xd45\xe7\x90\x19\x8d\xbc\x15\x06t\x97\xc0\x88\xae?\rw$\xc4\x0c\x028\x83\xaeXGl.\xf8b\xe2\xe0V\xdfI\xc3\xee\x00Uc \xeb\xbb\xca\xf5\xb8lA\x08g\xca\x842\xde\xea_\xd1\x18\xe3\xf6\xb0\x9ds!\xa8\xd6E\xca#_\xd7u\x9b\xc0\xe1[~\xd0\xa6\x1f\xea\xa3\xf3\xd9j\xd4\xe9c\x93\xa1\xd0\xa6\x81@\xf6\xdb[\xe59p\xaa\x04\xa9\xb1C\xc8\xad\xfen\x9bP\x02\xa1\xa8\xc3\xec\x0c\xde\xa5fnFM\xaag\xfeR\x0e\xaaw\xe2\xc1H(\x98&quot;\x07d\x88\xc9\xc1E\xf9\xca:\x8a\xac2\xb6\xb37o\x91W\xe9\xb9\x88r\xef\x0f\x96\xc3mA\x93\x19\x80z\xad\xc7\x83\xdbO\xbe\x16\&#39;\xf1\x1f\xb3\x94\xa1u\xc3\xc2\xfdo\xc2l\xe0\x92\xe34\xa9\xdf#\xd9\xebW\xe0\xffT\xde\n\x1bMi\xaf\x98\xd6\x02G\xbd\xdbN\x17\x84\xa6\x86\x97\xd0&quot;\x96\x9e\xc9\x0c\xcc\xb1\xe9\x8d\xb6\xb3\xd7M\x1f\x0e;\x0cCw\x05q\x1b6\xf4\x8aw0M\xe7\xcb\xb5 \xc2h\xaf\x89\xc4\xc5\x0c\&#39;V\xc8q!\xcf\x89\xc1\xf1c\xea\x9f\xa8\xad\xb2\xe69\xb9\xb0\xe1V\x1bs/i\xfcA\xeb\x01\x14\xc3U\x01/\xb6a\xa0\xa5qm\x06\xb5w\x83=Ia\xdc\xe0ltkV\xbfwC\x13\xcb\xc8&#125;3\x0eY@\xb5\x14*\xb14c\xc96\xafrzK\x84\xd4\xfc \xd7`\x1f3\xaa\xad6\x9d\x8f\xb3=\xac\xc0\xd4&gt;\x01\xad\xd9lq\xca/\xf0\x04\x15\xb76\xd0\xf2\xad\xb9\x05\xc5;c\xf8/&amp;f\x08\x11\x02\xac2\xaa\x7f\xbc\x00\xe1\xed\&#39;\xeb\xa7\xb4d\xf9\x8f\x91\x18\xb0\x7f]\x7f\xd0\xc0\x8f\xef/\xa6*E\xcd\xc8\x94\xbf\x807\xdb4\xe3Sz\x93&amp;\xdd\xf8\xdc\x05\xa8\&#39;\xc9\xe2\x96\xbcZ!\xa9\x11\x8f\x17&quot;5\x9f\xda&amp;b\xf3\xb5\xf0\xf2\x1e:\xbf\xc7R\xf6&quot;\xa7Y\xd93I_\x18\xa2\xbcl\xc4fw]\xd9wn\xc5\xfc\xe2\xac&#123;C\x95u#\x85|,\xd6R\x8a\x19\xf4\xc5\x97\xa8~f\xfdAF\xe2\xee\xf1\xc3\x8brk\xea\x18Gd\x87\xbb\xba\xf7\xf0\xa4\x9cB\x1e\xe0jk\x83I\xed9\xf5AM\xcaS\x90\xf8oZG\xear\xd6\x1c\r\xbdR-q\x84\xc9hf\xed\x18\xcd\x84FQ\xc6\x1f\x07\xce1\x0ecC\x99\xb4\x1f^0\x0f\x81\x9d)\xf5sf\xc1\xdeyVP\xe0^3x&gt;\xa9\x03gc&amp;7\x18q\x1c\xe7e\xcf\x0bo\xb2\x1cU=\x06d\xb2mM\xbbw\xb6d`\t\xd9\xc4\xea\x8dK\xf2R\xa8\xadF\xba\xd4\x96\x82\xe8\xb3\x8a\xac\xe0f\xf6\x1e\x00h\x14\xda\xd3\x9c\xc2\xd0\x84\x1b\x14\xca\xe3Flh\xa3\xb4&lt;\xea\xc6\xb0\xe7;g\xa23\&#39;dMb\xf1\xaeY&amp;Hl\xd2\x89\x8d\x90\xef\x8a&amp;\xb4\x1b\x02^\xe7R\x7f\x92\xd2\xc3~2s\xe7\xe7Ww&lt;\xe2K\xa1\x1a\xff\x84\xa4\x1d.\xea\xee\xc9l\x83\xe3\xe6 \xea#\x13X\xedo\xcdi\xb3`\xc6\x1f,\x9b-\x99\xbft\xb8\xe2\x9e\x89N\xec9\x88\x8b\x06\x98\xde\xf3s\xe1\xaaU\x18b\xaev\xed\xed1`\xd5\xfb\x8f\xb9\xd2\x8f\x18\n\x12\xecsX\xe2\x13\xafP\xd3\x91\x95\xc7\xd2\xec\xaf\x1cm\xfeC\x05\xe7\xb1\xfd#\x03\x8f\xd3WQN\xe3\x8a\xf2\r\x10\xee\xf2E\x08\x17*c\xc1\xc8,y\xf5]hg\x13_\xb6%\x0e2\xa7\xa3\x89\x0f\x97F\x9b\x897\x1f!\xc5\xc7GO$\xd8\xce\x9f\x8f\x85\xc2\xbdQ\x87\x9b!j\xf9\xc44\x9c\x96\t:Y\x89\\&gt;\xad&lt;\xc0\x0b?\x0f\x15\x03\xd7\x8d\xf8\x17\xf7\x06\xbe\xa9\xefyw\x89\xf3\x07\xa0\x94i\xad\xb4\xa0\x14\xf9\xa1\xdb|\xdf\xdbo=\x9f$\xde\n\x01\xa3\xce\&#39;\xc9V`w\xb7U:\xf5\n\xd7E\x0c\xc3V\x1ba\xe15\xabl\xff\xdd\x85\x11N\xf1\xee\xf6\x08@)\x19\x94\xa2\x0c\x8b\xea\xcbI\xa5\xc5v\xf8a\xbam\x81\xd3\xdd\x1e\xd0\x1b4\x0c]\xd6\x06\xf7\tca\x9f\x81\x96\x16D\xd2\xc8s\xc7\x0e\xc7\x81\xb87I\xd5\x06\xf0\xf9\xbe\x89\xeb\x86\xab\xc8\xdd\xc4\xe2\xd6p\xed\x0b\x1bk\xff\xa8v&#125;\x92\xec\xd9\xa6\x95\xaaX0\xfec\x0b\xdf\xb8\xcc\xe4\xaf&gt;\x1c\xb2G\&#39;T\xea\xb3`(D\xec\xf1\xe4l\xba\x14\x83-\xb1\xf3\xa091\x81P\xde\xc7&amp;1#\xd8\xe2/^=\xdf\xb2\xd6q`\x91s!\xba\xdbg\xaeD\xbc\xf12\x1d[\x9b\x19 \xa4\x17&#125;\xf6\x06\xc2p\x1b\\+\x80\xf0\xf8\xd2\xb2\xe3t\xb9\xf4p\xed\xfdk\x8e\xefwJ\xd9\\\x02\x08\x11\xf0\xba\xa6\x9d_\xec t\xd3\x8d\xf1\xffN&gt;\xc5\xdb\xa7IM\xaf\xcb\xfd\x18&#125;\xd8zq\xf2z\xfc&quot;cg\xe3G^U\x9d\xc5\xa3\xdc\xc1\xd7\xdf\x86q\xe1Axp\xd4\xa9\xe5\x9e\xc9\xca1\x8b\xfeir\x8cZ\t\x01\xecFP\xfd\x1f\xdd\x8a\xb3q\xbb\x12\xa1\xd9\xce\x88\x19\xf4\x0b\x85\xe80\xce\x88\xb5\x81\x1bp\x92\xbe7\t\xdb\xb9\xe6\x147\x0f\xcc\xfd|\x96\x15\xf1&amp;=\xeb\xd3#\xd5\x17\xd7\xb0\x1b\xa5\xb1\x85\x9eJr\xa4\x1f\xb7\x1a\xf7M\xbewl\x11\x9b\xe6I\x9dQF\xa1\x872\x00`\xc9p\xf0c\x17\x16b\xfe&#125;\x94\x0c&gt;\x8e]\xa1x|\x17\xeb\x8du\x02\x8f\xe1R8D\x0c\xcbIS\x9f\xa1|\xf1?@\xdd\x12XdYm\xd0\xff\tV\xc0w\xc4\xfd.4\xa5\xde8\x06\x1b\xb2\xdd\xcb\xcc?\xa2\xa0w\x1a\xa5\xa1@\x83\x96\xd6o\x10\x97\xe0&amp;\x95Yg\xfd\xbaV\xdc\xbc\x9b\xedj:Z\xe7\&#39;F\x06gK\xd4m\x80c\xf8\xbe+\xd6e\xccb\xdfD\xea\xe1\xcf\xb1b4S\x8f\xde\x97\xe6\x86\xd2\x05\xe1\xe5]\x815&gt;\x96\x97\x80OKM\x9d\xcb#*\xf5\xbc\xe6\xcc\xa9Q\x90\xfd9\xad\xffk\xc4\x80\xac\rmC\x08t\xe3\xff&quot;9P\x9dM\xec&gt;\xa8\x0c\xbc\xe08D\xc9O\xf0\x99\x8e\xe0t\x14o+Y&gt;\xd7l\xfd\xba\xa7\x1aP\xf8r\xd1\xb86o\xdb%\x05u`\xbdl&quot;xFx\x0b\x83\x04\xba:S\xa0\xe7n\xf4\xfc(\xd5\xaf\xcb\xeb\xc0xt\xda\xf8\xbc\xb2\x9e\xb9f\x9d\x8a\\\xe5\xa6\x07\x9aE\x1f\xed\x023]\x11\xa6\xc7\xa7\x96E\xb52\x1a\x97\xf7\xeby\x8a\x8e\xfa\xe9\x1b\xab\xa0\x1e\x84~\xf8\x07\x04X\x183\xf7\x8fGC\xadz\x144rGGu\xd6L\x94D f\xd7Q\xc8\x0eOoSi\xc2\xf7\xb7\x1c\x99NX\xac\xe7\xb9|\x95\xd3\xdb\xf3@#M_\xa11*S\xe3\x80\x12c\xc4K\x152\x86\x07c]5,\x1f\xc2v\x01\xdf&amp;rR9t\xe6\x85b\xa1TDY\xff\xb0&#125;\x11\x93W\rY\xf0\xf5\xd71Dt\xc0\x0f\x1c\x92J$\x0ei\xdb\r\xe9\xd8\xd3\xb5m\xbc\x01\xec\xd1K=o\xd8\x1adwL\x98\xfb%\x0b&quot;U\xd7N\xba\x9d\x0cBZ#/\xaf4\xd7\xd8\x0e\x95\xbc\x8e\xc6\x1b&#125;h\x82\x92\xc0\x19 \xebq\xb5+|(\xb5\xcc\xe0u\xbb\x9c\x967M\xc1\xa2i8\x0b\xf6d\xcd\x02\xcc\xd0w\xc7\xce\xbe\xb7\x88\x1f\x9c\xde.\xea8\x0b\x07\xa2/\x88,&#123;\x83;\rj\xca\x9b\x15\x91]3\xcd\x92D\xb8\xd8\xf32\\\x01\x95\xdf\xdf\xca\xda\xa8zh\xd6\x0f\x06\x84\x81\xc1\xd6\xbd$\xdb\xe9\xe5\xe8\x90X\x85\xe6\x8c\xa2\xba\xf8\x91\xfb\x1b\x19B\xa5\x1a\x8c\x0cn\xcb\xd9#pL%\xc2\xef\xf5lm\x84\xd4\x8d\xf2\xbfT\xa1\x1b\xfb\x95\xe5\xda\xd9\xe8#\x87\x9f`\xb0-\xcd\xf7\xc6Qo\xd8\xa3\xf4&#125;\xbdE\xee\xdf\xdf\x95b\xf7\xfe\xcd\x1d\x96\xf2\xf09\x7f2\x1a/\x194)\x0b\xeft\xbfc\\\x9c\x84\x95,\x1fd\xac\xba\xae\xf30,\xd0\x13\xee\x86\x1d\xde2\xac\xb5\xb5\xb1\xb9\x03\x88\x16I\xf3\xb0\x9f\x1c\xa3\xe0\x8b8 m\xbf\xe1%\xb5\xb9\x16\xb4\xbd\x89\xe7Y~0DgsXk\x18\xdc\xd4\x03\x06\x10\x9f&#123;\xf4\x1d\x7f\xa3\xcb\x9e-\xa1\x07]K\xd1E15#(\x08&#125;\x95\xaeV\xee\x14vV^\x1aQ\x9d\x97\xb3\x17\x9c\xb1\xa0\xe6O\x1f\xc5v\x95\xe1i*\x88\xd7@\&#39;\xc4\x90u\x04\x89\xe2W\xb0\xf0\xcf\x89L;\xb8|7\xbah\x93\x06\xfc\x14\x06i\x1d\xc8f\xf7s\xdc\xf1\x8a?4b8\xea\x9c\xa1\xe1\xe9RG\xbcS\xd9\xf0\x91\x82\xdd|\xa6\x94 ROf\xa3[\x1b\xe3M\xb0\x87Y\xa8\xb93\xff\x11jrI\x89\xce\x8d\xd1&gt;\xee\xd4\xa2\xab\x98\x86\xd0\x89\x0cg\xea\xc2\xd3PZ\xe0d\xfbS\x04.\xac\xc7\xf7\x9a!\x9b\xafc\xf5\x84\xa5\xf32\xe2\xdc\xb4/\x17\x19pQ\x7f\x18H]\xde\xd3o\xdf\xa4\xf46&lt;\xf7D\xe6:Z\xecV|L\xdbt|U\xbf\xe4\x03\xd5*\x10\x9f\xc0\xd5\x0b\xd0\xd23\x83\xf6\x96i/\xf0\xa2\xeaY\x1c\xe0\xf6\xa0\xea\xca\x99XB\xf5\x84\x10\x17\xe0\xb5p\xa9z^\xa2?C\xfdCaZ\x8cu\xc6\x97\x86\xce(\xc2\xeeE\xaf\xdb,\xebR\xf0A\xc1a\xe6\x8e\xef\x87\x98\x99\xcbt\x0f8\x1f\x91\r \xe4v\xf4A&#123;0\xaej\xb6\xd1C\x06\x8bR\x1e\xdb\x15\x08\xa3\x9f\xb3\xd5(\xeb\xf2\xc5V)\xb6\x9a\xb8\x8d\x0fQ0\xa1\xa1\x85\xabL\xa2\xaa\xe9.)\xf6\xcb^\x08\xe6\xef\x1d\x92\xe6\xa5\xf6t\x85B\xccR|&lt;\xabB&#125;;Y\x8c\xd9/\xe5\x91\xcf-o\x8e\xd7\xae\xc5&#125;\x91&amp;&gt;\xe34\x17\xaf\x84@\xbf,\xe0Q\xe9\x04\xed0\xb2\x9eEt\x08\xdcT\xa3F\x9a1(&#125;\xbd(P&amp;B\x868\r\xec&lt;\xce\\[\xc5\xc7\xc1\x96\xc9\xd6&#125;\t\x82\x95\xc0\xcd\xa6\xcd\xea\xa3O\xa2\xac\xea\xc5&#125;p\x12\x8f\x89\xc0P\x12\xe7- \xc3\xf8\xcb\xfb$\xc0\xce\x02-\xc3\xe3^\xe51\xdd^J:\xca\xb2.\x82\xc8\x83\xeb\xae\r\xa74\xb3\xad^\xd0\xa2N\xdcQT\xa0\x03\xc7\xf4\x8c\x06\xc9\xb9\x1d~\xea\xa0\xb6BK\x10\x15\xdd\x9e\x1b#\xe5V\x7f\x90(\xbf\\\x9a2Ga\xb7\xfc=\xa7+\xceO^\xd3C\xf0\x92\x8b\xd9\x9c\xa6ZG.\x1dUg&amp;\x14\x99?\xf4\x19\\\r\xc89\xe5\xb3\xf0r,\xcf7\x81r\x9a\xf8\xd7\xb4\x0f\r\x8e\xbb\x93\xcd\xd7\x96r\xfe\x01\t\xb1\xa2\xcdV\x85O\x82\xd7E\xad\xc2\xea\x81V\x1d\x80\xa4L\x8b\xc8\xde\xff\xa9\x1a\xa3U\xb5\xa7\x02P3-\x8a\x96\xd9\x91\xee\xabu\x83\x05\xcct#\xe6\xf7A\xaf\xe1\xeb\xbe9\x83@\x05S\xc5\xaa\xc5\xf9e&quot;\xc0\xbd\xa9J*\xb0\xee\x99\x96\xd86\xce~\x12\xd3\x9cpDf\xe2Q\xb8&#125;p:4Z\x9bt\x8cVmXM\xeay\x9a\xf5n\xb7#;\xb2CkOH\xdct\x19!$\x80\xc1\xa6\xd4G\xc3\xe9\xb1\x9aPu\x89\xce^\xf3\xfd\x0b\xb1\x8d\t\x9a-\n\x1b6\x91u\x89\x98&quot;o\x17\x994y\xf1)\xea%\xf4\xb5\xc6\\\xef4\x12\xef\x1a\x05\n#\xa3`\xa3\xef2\xf2n\x91\x1a|\xce\x96n\xbc\xf3\xf0\xfa\x00_LG\x19\x9d\x1c\x97\xe1[\xce\x15\x8f\xf4\x90\x0e\xadt\x85\xdd\xec\xd1\x91\xf4\x8d\xf8 i\xe7OR\x95#B\xd2\x88\x1f\xa2\xfcH\xe9\x1e\x94J\x8a\xa2\x87\xcc\xcf\xa4\x95h\xa6\xb7\x1b(\xe1&#123;\xaa\x8fxv\x83\xe9\xf5\xa8D\xb9\xf4\xb8\x9f\x1b\xb6GY\xa2\xee$\xc6\xc9\x8bx\xc7]m\xf2\r\xa7_6\xd3\xe6\x88\xea@\xb5\x06\xe8\xd2Lj\xc2d\x18A&amp;\x03]&amp;\xbe\xae\xd6&amp;\x04\xdb&amp;P\xf0\xee\x9enK\xf7\xb2\x10z\xe5=\xb5?#\xdc\x85\x19\x93$\xc1\x8b\xb0\xd3\xce\xc1\xba\x03\xf5\xe8y\x15\x11&lt;1\xe6\xc2\xf8S\xd3j\x97\xd0WZ\&#39;\xfbC\xdb,\x95\xa5\xec\xe5\x17\xa1K\xb3\x95\x99\x92\x16\xc8\x1a\xfe\xd3\x8b\x1dV\x00\&#39;\xa9\xda\xca\x19[\xd2o\xa50\xde\x85~_\xc2R\x9f\x1d\xd5\x7fZ\xb4\xd0\xe1\x98\r\x06:\x91\x11w\xf6\xefVIW/\xd3\x16\x81|\xd7v-\x18/\x7f\xb9\x94\xf5\xc3r\xa1z\xdb\xc6\xf2f\&#39;\xb8Es\xf0\x99(\xe1\xbd\xd93L|\xd1\xd5\xad&#123;\x93\x10\x02\xa3\xfa\xb2\xc3/\xb5\xbf\x16\xae\xdd\xfd\xd6\x97d\xd3\xe9:\xc5\x1c&#123;\xab\xe1\x19\xcbF\xb5N\x1ed1k&#123;\xf9\xbc\x91\x8c\x04\xbe\xdfH\xa7\xf5,\xb1\xc5\xdf\xe4\xc4\xfeo\xfd\xf4\x01\xa8((\xc1\xe5\xd1\xdb&quot;&#123;\xa7\x991\xd5\xf3&#123;\xf3\xd9\x03P\x15\n\x96\\\xbf\xf1\x1c\x8f~\x9bj/s\xcb\xfc\xf4Q\x80_ \xfaE\x84:\xdd\x99V\xc8]\xc6wE)\xc4\x088\xf5\xf6\xdb\xcc\x1a\rpa\x98N\xb3\\\xd36\x92;&#123;\x02&#123;\xda\xf4L\xf7\xc4\x14\xce\x04\x00sM\xe7\xa5\xca&#123;\x9c3\xd3\x97\xea\x111\xc7\x88\xf4\xb3\x998\x87\xafMg\xfao\xcf\xd4&#125;n\xbdk^\x80\xfdo\xbb-n\xd3\xfa\xa3b\x08n\xcfh\xa4\xf2\xda\\\x14\x81\xdf=Y\xff\x05\xb8\x0b@2\x04\xad\x92\xdb\xa02r\xd7f\xea\xc2Ch\x1aJ.\xc6)8\xdc\xc0\xcbW\xf6\x90B\xf2\x81\xd1\x93\xd01\xaa\xf6\xdd\x81/v\x1d\x11U.F\xe8Q\x05@\xd6\xbf\x8b\xd0E\x17\x88dC,\x1a\xf7\x00\xd5\xed\xb8\xb8\xcf\x03\x8aO\xf1\xe5\xd3p\xf3\xe1\x9b9\x97O\x03a+g\xa3S\xa1\x80\x08Z\xe34]\x93Br\x94[E\xd0k\x02\xa8\xba\xe8\x12Zf\xcc\xdaoA\x1el\xd1K\xfbX\x9d\xb0\x9f\x08\x92&amp;\x1a\x89\x9c\xda\x0cu8\xee\xc9t\xf4\x91\xfe\x05^\x96\xb0EG\xd6\xb9&#123;\x08\xff\xa7\xc1%WQ\xa1\x81\x0fl\xd0\xc8\x80\xf4Uk\xfc\xccZf\xc5\xb3P\xb2\x99\xc6 \xbb\xc7!\xc1\x8b\xeb\xdd\xd7Y\xdb]o\x08?2\xc2\x99.Z\xb6EU\x9b\xade&gt;\ne(j/\xce\x9e\x0bM\x1dYdJN\&#39;WBu\xaa\x02\xe7\xa9\xd4&lt;d\xa8%d+S\xff\x98\xaf\xefu\xe8\x84.F\x83\xbe[\xfd\x02\xbee#\x8f\xdc\xb5\xf1g\xfbTA\xf0\x11\xc1&quot;\x97\xab\xe6\xa3\xbd\xb3\xa8=\xc1\&#39;EWr\xd3$9\xca\xc2\x88\xa8\xab\xb5\x01\r\xbf\xc3\xe4p&gt;am7\x1f\x93\xb2\x8f\xd6\xd0Lo#8\x82&quot;\xde&lt;`a+\x84\xb1\t\xd9\xf2\x12\xf7\xfcQ$\xd7$t\xc5&gt;\x05\xdb\x89\x8b\x8c\xfb%JS\x14\xe3M\xd7im\x895!+\x9e\x84\xbc\x84\xd1\x8c\x9eX\xe9\xbbc\xf1f\x12\xcdk\xc5\xf9\x1e\x06\xa9\x1dp\xc2\xc6C\x81\xd7\x9b\x06\xd9\x1b\x01A:\xfehO\xa8\x07\xcei\x81Mj\xbez\xcc\xce\x86!\xd6\x85\x0ei\x92\x9c\xe1.\xbf\xa9\xe8\xbf\xce\x08\x87\x0fd\xa7\xdfp\xd7\xec*\xcc\xc1J\x02\xde\x16)\xe8v\x86R\xceJ\x1f\xd1\xd03\xbf\xacC\x8c\xf3\xa6\xd7\xf7\x8d\xd4\x1b\xcb\xf8\x1e#\xe4\x96\x8bD\xe9\x99Q\&#39;\x9f%\xc4f&quot;\x12\xf3\xc1k\xa1\xec\x1d\x8a\x14\xb7|?&quot;=0+1i\x86\x83\x93B\xe4Z\xd9\x9d\x92h_\xde\xff\xcb\x9a\x89k\x0fI\x9fr\x193\xdb\xf0\x134\xf8w\x14:\xd3\xe3\x10Q)J\xa9rx\x88\xf0\xe6l\xf7(\xb8\xfen:\r\x15\xcdx\x9c\x85\xc0\x11\xcd\xb2\xa1\xaaiK\x13\x8d\r\xdbS\x813\x02\&#39;)\xb8\xcb\xca\xa0:\x01W-\xa3\x12\x9bq\xa9\xc4\x91\xa1\xc6\xd9\xc6\xb5w\xa3\xc0|&#125;\x81F\xcc\xd1\xa3\x173\x8f&gt;&#125;\xb7\xf5\xf5\x0c\x0e\xa82\xf0\xed\x81\nQ\xd7\xc9\x9a?\xc0:\x15\x12\xed\xa7x\xf6\x86\xc9\xa3\x9d3\xe9l\x8b\x9dJ*a\x8ct# \xedB?A\x10u\xb7\x00\xd9\xb9H\xaeB\xf3m\xe1&#123;(^\x8f\xc8U\x90D \xf0\xcaf\xb0\x16T\xf1\x0c\x15\xc5V\xf5\xef\xbfr\xb1[\x9f\xdf\xa8bv\xc7\xd6\xf6K\xd6\xe4\xae\xa9\tb;\x8fX\x13\xa2\x8a\t\xf9\x19uic\xc6\x9f\xae\x9c\xd6\x03\x99\xc0\xbc\x9b\&#39;p\xba1\x12,\xc8\x98O\xf5\xa5\t\xe3\x94\x06Z\x91\x92?y\x01j\xb7\x94\xc5\xab\x0eA\xe8\xce\x14\x056ff\\\xe4`\x9f!-&gt;\xfa\xba\x0bu\xff7\xf1\xe0\xfb\xbb\x94\x08\xf0\xac\x84\x87\xdae\xace!l\xea\x1e\xe5c\\\x00\x9b\x87\x99\xf6\x92@\x17\xeaqgCb)3e\xae\xac\xf8\xdd\xc4u3\x9c\xa3\xbc\x14\x88i\x14\xf2\x08&amp;w\xae\xc8;\xadA0\xc5\xc5\x9b\x95\xcd \x1c\xe0\xbc\x1f\xa1O\xc4\x0ewsw\xf7Tx\x1f`\x17\xfc\xb7\x8e\x0b\xe7\xc5+\x07\xe1\xa9\xc2rq\x9cnT\x03\x1dc\x18\xcd\xd8\x88|A\tJt\xf2\xebw\x8f\xde\xb9\x87$\xe9&lt;\xab\xb6\\1\x11\xffz\xc0\xa3.\xae\x81\x7f\x1a\xe7\xb1\xd9\xd4 =\x87R\xef\xe5\xa9E\xbc\xefE\x05|\xb3\x05\xd3y!\x13F\xb7Z\x17\x02&#123;\xb5&lt;\xf9\xa8ky\x8a\xa2\xa1&#123;\xf7\rv\xe9c\xc3\xfe`\x1f\x88\x80\xfd\xad\x83tv\r\x9b\xcb\xe7\x1dZ\x87\xbd\xddf7\xd1\xf8Gx\xef^\x0e\x9b9\x05\x8d\x19\xd3\xf5\x88\x84(&gt;h\xb1\xd1\xf2\xe5\xea\nh\x0c=&gt;_h\xe3=\xb6&quot; 6\x1d\xf0\xb2\xb7/n\xf7\x08\xb0\xd6h7\xe3\x1f\xc5\xc6\x81\xc30\x01\xed\xef\xbf\xbf\x1c\xe2j+\x97\x00;&lt;\x1d\x05\xca\xbd\xe1\xc9\xf1\xb1\xf8V\x00\xa0\xf0G\xfaiL2D\x0b\x86\xd9\xc1\xbd\xbaA\x07\xb6\xa72\xbf\x1bH\xd8\x81MoO\xe6\x1bJ\x98\xa6\xfd\xb3W\xac\xe6\x8e\xd9\x85\x87\xe4\xdd\x0fX1)\xef\xb3\xabc\xc3\xb9IDSL\x13\x84\x8c5\xbe\x1e\x95\xefH\x1a\\\x9cw\xdcX\&#39;\xed*\xfb\xdf7\xe8\x15\xaa\xfc\x96!\xc1\xd8!\xe5\xcb&lt;dj|T`3\xb7\xe6A\x1d\xc7\xc8\xa2\xa0\x84!]74\xba\x13\x9db\x08\xc79[V\x1d+\xa9\xc6[\xa7\x17\x0c\x05\xc1\xa4\x04\xba\xd5\x0b\xdc$\x1d~\x0bx\x04g\xf5&amp;M\x95\xc7\xb5 \x10\xb7|\xa8\xfd\xd3h\x10\xaf\xf2\xdfL\x8ael\x07u\x03\xa8O\x04\xba\x14\x99\x05\xc1\x08\xbc\x88^w\x1bd\xb6&lt;\xd1q\xe2\x1a]l\xcd\xf1\x06?\x07/\xe6\x9d\xdcG\xec\x85B\xe0\xb0\xa3\xaa\n\x9e\x07&lt;\x15\xd2q\x0e.`\xba\xf3\x934\x86\xd1\x17\xf1\xe0A\x9f\xc7V\xbf\xe8gT\x96\x14\x08-`\xf5r\xb9\xff\xd0\xd2\xfeqf\xf3\xe4h$P\x10\x85\xe3\xaa\xc3V@\x05\x16W&gt;\xd6`\xd9W\x87\x12f\xc4H\xb9\xec\x7f\x9d\x8e\x0eELC*\xa3\x92B=`;\x82l\xd3?x\xb6\x9e6\x0e\xb2\x82\xd1K\xe2\x0b\x7f\x051\x10\xd85~\x98\x10\x1a\x1f\xe7\xa5\xd3\xd0\xcd\xe8\xdb\x84\xe5Q\x00\xd9d\xf0mI\xbbX\x8b\xc4\x07\x98\xca\x97a\x95\xa8\x8f\xb3O\xdb\xc3\xf2\xf1\xaa\xd1\x12\xf3a9\xd7\xee\xe7PI\x1dlI)E8\x0e\x08\xcaU\nP\x89J\x12\xfb\x97\x07\&#39;v\xc0G\xbacy\x08\xc3k\x83\xfc\xb8\xa4\xa3\x91\xd2\x1b\x8f0+\x1e,D\xd02\x01d~\xd1\xbf0T\x9a\xb8\x0c\xae?\x88@\x06\xa0\xe3g\x05\xcfqA-\xa2\xe6\xa65\xf4y\x96\xd4\xf8D\xa4\xd5\xb7\xde\x1a\xc1\x80(\xa4\x17\x16\xc4\x80\x94_\nU\xbdl\x9eh//\x8fRg\x95\xcc\xc9\xc8\x8a\xa3#\x7fvy\x04 \xbbX\xdcF#\x93\xd6\xfc\x9dc\x85\x94\x9egzR\xf0\x15\x08\xc7\x06\xa4\xe5e:\xd9Q/\xffx\xb8;!\x92\xc0l\xcd\xf7\xd2\xcd\t\xd4\&#39;\x9eN\x91\xfa#\xc5E\x03\xf3n?\x99(\xfb\x93\xd2\xa3M`\xef\xda=$\xb0&#123;\xeb\\N\x1c\x16\x8b\xf4\x98\x16Xj\xbepX\x10\xf8\xc7\xc0\x01\xd1$*V\xcc\xbb\xf3(\x98qV\x99\x8b\x9fEP.ej\xa0-\xb7vT\xf1\xb6\x0cL\xe0V\x14\x01t\x94\xb9L\xf5\xaf0)&amp;\xeb&#123;%\x84\x8a\x0c\x04 \x97\x10X|\xe7\xd4\xde1)\x082Mw\xc9\xa6\xe1\xde4\xb8\x95\xbe=|&gt;\x8d9\xac\x1c\xfbf\xd2Y\xf19\xddz\x88\x90\x95\xdb\x0e9\xf9\xfa\x199,\xb4yIGz\xb9\x07\xf1\x16^\xe86\xb8u+\xe0\xea\xfa\x05\x96\xeb+&lt;N\xb0A\xdaY\n[\x1dD\xbb\x9c\xac\xaa(\x19\xd0k\xf0\xdba\x83\xe5\xb9,\xe6\x8e\xcd\x97\xf9\xf6_,a5\xdftz\xbd#\x1b\xb0\xee\xc1\xbc8\r\xb8,-\xa6U^\x1c\&#39;Zm\xcc\xe6\&#39;\tQ\xed\xb3\xf1\xd8\&#39;[x\xd0r\x1d\xa6\xb5\xfe&amp;l\x15\xa2\xefZ\x14\xf2[ Z3\xc0u\xd7\xb0\xcf\xab\x1a\x9a\xa5\xb44\x0c\xba\xe4\xeb\x8bt\xe2\xc9,\xaf\x15\x009\xbe\xca\x86/\x86\xc4\x1b\x89V\xe9@\xffpL1\xd6cMu\x98\xcf\xddx\xfe\x9ef\xed\xdb\x19\xa8\xcfg\xc6lT*\x1f\x90\x1a0\xd1\xbd\xbd\xef\xdd\x12x\xfd\xd2\x8aE\xa2\x05-\xa2\xaf\xec\x87k\xfe\xe3T\x1e\x10qR+m\xe7E\xf2\xc3-z\xc7;\x1b\xfc\x02Pa\xa75\xea\xc0\xae\xf1\xa7\xa5\te\x8eD\x8e\xebx\x07\x1b$\xbb\td\xf0\xbb\x99o\x0c\xcb&gt;\xc1\x0c\xe40\xf2\x9e\x04\x9b\x81U\x8c\x7f\x0e[\x1a\r.\xd4R2\x9d\x14ND&#123;\n_\xa27\xf2\xfa\x97s\xfbQ\xed\t\xa1\xe54Nr2mi~B\xd5\xfatEf\xc1\n1\xe9\x12\xedG$\x88O\x90\x0c\xdc6\xfd\x1c\xd7&gt;\xa2\x95\x06\x9f\x1by]2\xf38&quot;\xf1\xb5D\xf0\xc4\xde\x82=i\xc9\x0e9&amp;h+\xc33 \xa8r\x98\x8bb\x8fJ\t\xba\xab\xa3\x0b\x85cG\xc0A\xfb1H\xed\xd1\xac\x8eat\x1b\xbc\x86\xb1\x16\x87\xbe&gt;\xfe0\xb4\xc1\xe6LLF\xa2\x99l\xef&#125;\xd5\xc2\x17\x8eW\x91\x19\x816\xd6|\xfb*)\x8d\xc6\xc7.\x99\xcb7\xa2\xd6\xaaA\xb4\x114A\xde9\x08Q@\xa2U\xf3(\xba\xb1\xd6$\xc6A2AJ,\xf1?,k\x9f\x85n\x89J\xf0\x19\x05\x7f\xae\xccLByj\xef\x19]K\x16-\xedr\x19]\xadK\xbf\xfdS~\xf5qb\xe6\xc1\x0b6X\x98\xcd[f|50\x99\r\x08\x9a\x11\x1by\x94\xfcb\x90\xbeE\xeb:r\x8aoVN\xbbr3 \x9du\xd9iT\xaeA\xd3\xa1\xa1\xb3\xab\x94\xf4\x95\xd0&#123;\xf8\xda\xca\x82\&#39;\xc95^5G\x13&quot;(A\x00\x9d$T\x00&quot;\xae\x15\x90\x97uqW\x95\xe8H\xa7\x05\xd4\xa5\x91\x9d\x16\xe5\xa9\xec\x98*l%?\xc2r\xdb\x9cht\xc8\xa7\x18\x84\xe8N\xe3\x8c\xf2\xd2&amp;\xd1\xb8\xa4A7\xeeF\xde\x86f\xd7]\xbe\xdb\xef\x92\x9b\xbd\x8c\xaa!\xdf[\xd7\x02\x06\xab \xce\xb2ie\xc7\x0b\xfc\xac\xb0[\xd1\xb1\&#39;^\xc9\xb3\xb77\xaf1\xa6\x14\xb2\xf7.C\xa1\x94\x99\xb7\nz\x84\x8f\xaa+\x958\xa8\xfdg\xed\x9e\xfd&quot;\xc8*Xs\xc2\xd3\xbe\x86\xa9\xd7\xd7\xc3P2\xe4o\xad\x95\xb6\x1a\x05\xe1M\\\xa9\xabf&amp;\xfe\xbb\x87\x14\xf3\x00H\x93\xc3\xcc\x0c\xe2W&lt;\xd1y\x1eMS\xa6\x1aX\x0e\xf0W/\xd8\xca\xae\xb9\xc5\xacd\xdbe\xcf\xdb\xb57]*4\xd1*\xad\xedi\x1f\xe7\xab\xc9b\x8d0\xd8a+]\xf8\x87M\xd2\x02\xee\xa3[Ly\x8c\xae\x02\x9b\x12t\x81`\x16\x1e%\x1a\x84+Y[\xaf\x96we\x15\xf6mR7&amp;jx\xc5l\xda\xf5\x03\x92,\xfe\xf6\xb2vN0=\x07+\x1bv\xba\xfa\x9c\xdc\xbe\x06\xee\x88\x88K7\xec6&lt;E\xf9\x11\xb28\xf0\xf4d\x993\x1a\x14?Y\xfeH7\x9e\x9cV\x1dQ\x81\xb2bX\x0e&amp;s\x17Q\x039\xa3\xbd,\xe9\tE.\x10\xb7\xdf&#123;jW\xce\xf0UA\xc0J\x87\xfaDy\x80p\xd2\x14G\xcd \xd1\xe5\x1b\x93\xe2\xe3C#4\x0f\xb1\x9b\xdd\xf2\x01A\x82\x9e\x9c7\x85\xed\xc1q\xe2\x85\xe3\xf2`z\x11\x99\x15\x0cm\x99\xe9f\xb14\xff\x84A\n\x01&gt;\xb6\x04\xca\x10\x952\xc3\xca\x1b=\xa3\x94\xea\xdf\x1e.\x81\x15iR[\x9d&lt;\xee\xcf\x94\xf7\x9c\x0b\x1f\xb7\xe2\xbc\xac\xf6\xc4\x07fR\x14hS\x89\xd9:\x959/\xee\xe0\xf6\x95\xb2\xe8q\xe2\xc5\xc7\xb3\xff\xc4$\xa6\xb6&#123;\xda\x16\\\x16&#123;|@|.|*\xdfGiW#\xc0\x8e\x03\xd0\xfb.c\x10\x99\xa2\\\xb3D\x0f+\x9fFe\x88,\x81\x02\xa9\x03\xd3\xe7L\xcaTo\x0eZ\xdd\n\xff\xd2\xf3\xbf\xaf&amp;;\x1d\x11\x90&#123;\x8c\xd7\xc57\xa3Zf\x1be\xcaq\xf7\xf7\xcb)zS!F\xa3\xc1\x1ck\xe0\xe3\xd3\xf9n\xe4\xb8m\xa9\xa5W\t\xb2\x18\xdfT\xba:\xbf\x12f\x01\xa4g\xb6\xbe\xc06:%\xcc&amp;\xb3\xd9\t\xa2\xe6\xaa\x95\&#39;\x1f\x13\\\x85\xff\x96&gt;\x0bf\x0c\x93*\xb3\x8a=\xa6\xac\xa2\xc4\xe9\x13\x1a\xc7=\xa5x\x17\xf1\xc3qd\xbbd\x14D\xf5\xe6\x93[\x9f2\xb11A\xccP\xcb4\x87\xe4\x89\x84\xb8\x81e^\xcc\xd9\x88C&lt;CG\x7f\x0c\xa7\x8c\xb6S\x03!\x81\xa7W\x88\xd7\xc1\xed\xd2\xe2\x80Z\xd2\xd1\xf6n|/\xec\x14\x94X\x12\x87\xc6+\xccW\xe8]\x91\xb5\x82\x12!\x1fv\xf0\x94\xb4\x1e\x15xM\x1b\xa8\xe4\xef\xea\xbdb~\xa6\x07\xae\xc2~\xe1\xf3\x8b\xe5\x81f\n\xaa\x08\xebgM\xd1\xc9~\xc6\x19[?\x13i\xaa\x10K4f\xec\x92\xe1\xc1\xd0\xbe\xa2\x18\x17D\xec\xa7\xf3R\r/J3;\x14\xf6:r[\xea\xfa\xca\xc59\xc5\xf40\x96\xed\xb0\x17\x8f\xda\xe8B\x03\xf82\xc9\xe3\x8bx\xf7\xff\x94\xac\xaa\x15&quot;\xe8\xfc\xaa.\xea#\xaa\xf4T\xcd\x18\xb0&gt;\xb5\x16\xfb\x89\x88\x1eFq\xeew\xee\x14\x99\x9c\xbd\x1a\xab\x01\x88\xae\xc9\xd9\xb0\xb9)y\x92R\xb4\x9d\xc3f\xf0\xff\xf7o\x91\xd1\x86\x03iP\xa2W\t\xd7n\x8e=\x10\x84i\xea\x892D\x9a\xb0\xcf\xf8\xbf\x14\x8a\x81\xf0\xbd\x83\x8b(\x17\x94J\x1a\xf6q\xfd8\xf4\x97|\x81t\n\xe4\xea\x02\xd1P\xc3F\xa4&#123;&quot;Z\x05\x89\xba\x01z0\xa8\xee\x80\xc6\xbd\x18&#125;-\xd2\xf8\xc8k\xdd\x1d\xf7i\x0bKK\xac0\x80\xbc&#125;\x16\xd3\xf8\xba\x17I\xaf\x8e)g\xdf\xb3\xf1\x14%\xb0\xa7R\xa6g\xa3\x8fE\x0e\xbb\xae)\x0f\xbf\x0f\x88\xf4?6i)\xac\x98\x14$9)m\xc7\x8e\xeeQ\xdb&gt;\x8a\x0eV\xe6\t\xeb/\xc2\x85\xf0=\xd0\x87\xc3I\xa6\xa4\x0f\xa1\xf2\x08\xa6\xafPBt\xf6\xa0\x01\x8b\xd4\xd8\x0f\&#39;\xc7\x88rQ8\xb7s\x1e:\xf6\xb4\x89\xac\xa8\x9e\xfbY\x9eC1\x7fq\xb6\x02\x83E\x89\xdc\x05\x93\\\xd3\xac,\xb5\x9f=\x8f1\xeb\x88\xd0\x83HCt\xf8\xafwa\x9d$\xde\xa0\x81\xbeE\x0e\xf2\xe4Lq\tL\x0c\xaa\xf6|\x14\x8dZZ\xd7tCD\x7f\x15E\xadD\xd2\x819\xe9\xa9\x7f\xbb\xff \xbd\xab\xe1\xe5Q\xcf\x12\xdd:P\x9d3\xa8]\xb4\xb1YW\x10c\x10\xa9nRg\xb9t\x1dE\x8b\x98|\x86gA\xa9:*_X\xddN\xa9$\xef\x11&#123;=\xfe\xc8V\x85\xee\xd8i\x83\x9dr&quot;d\xd10\x06\x9c\x1aU\x86\x9e=\x92\xdf+N\x1e\xfaC\r\x1b\n\x10\xbe\xe3J\x00K0\xec\xbdv\x9f\xa8\xeb^\x17\xfd#\x13\x8d\xb8\xbe\xc45eK\\\x03w\xd7\x1b\x91\x99\xe3z\x02&gt;\x0c\xf3\xce!z\xeb\x8d\xad\xfa.\x7f\xec\xab\xb0\xb1\xfa\xb7O:\x80)?\x8d\x12,-\xb8\x10\x8a]\xee\rx\xc9\x90\x9f\xa7=\xa1\x94R\xad\xc1j\xe2\xf5\xddB:a\r\x90\xe6\xf9D\x0fO&amp;@Mu\xe2\\\x81\xdbRV[L\&#39;\&#39;\x06\xdb\xd2\xfdK+_\xed\n\\\xcf\xd0\xe5\x06\xa5\x8a\xed\xcb@\xe86\x81r\x99\xaeB\x97\xe6\x98\x8c\xd3\xb4\xb0.\x82(\xb3\x82\xdcI\xf8\x9al\x87A\xa5:\xf6\xf3\xcf\x1e\xb3\xcb\x13!\x02dP\xfbaE\xe5\x9b^,p\xb4c)\x94y\x99\xa8\x1c\xf7\xe5\xa9\xaes\xac\xe6(A\x16\xae3\xc9\x08\xf1)\xe7^\t\xc1\x00\xa5\x93S\x08\rX\x17\xc1t\xb6\xbc\x0f5\x18\xdd\x1a\xa0\x87o\x81\x02\xa3\x02\x07\x8c\x86\xc4\xdaV`\xc8\x91\xb2\xa6\x1a\x0ff^K\x15\xca\xc45&amp;l\xbeq\xe4nvG\xb4\xf2,C\xca\xfe\x11\xdb\&#39;\x8cr.X\xc5\xe6\x814\x8b\xa2\x91\xa8\xea\x82&quot;\xf8\xea05\x11p\xf2\&#39;\xc7\xf2\xf7\xa7\xb6`\x19X\xea\x9e\xb4\xebj\x16q\x1a\xf0^jW\xe0\xdb`\xbc9qQc\x7f\xbc&gt;\x99\x12\xb8\xb2\x1dO\x00\xa7\x9e\xfb\xa9M\x8f\xe0DW\xc4\xb3\xbc\x1ck\xa5\xca\x84Jj5\x9f\xea\r*\xa2\x8b\x0b3\x94x\xa7\xdf\xa0\x02\xe8\xc9\xbe\xa4,\tCG\xc8\x082\xfb9\xcd\xee&gt;\xebMQQ\xb7\xd5\x17\xc5\xe9\xe0\x8boz\xf1\xd6J\x8eF\x8c\x8aX\xbe\xc0\x12\x9d\x1aN\xb53\xb2\xfe\xfa\xb4h\x13\xc6U\xfev\x05\x16GG\xbf\xa2D\x9c\xf1\x8eKe&lt;\x00\x03\x17\xad\xe5\xa9\x8d\x11\xd0\x95a!\x93a9\xb4F3\xbc\xb1j\xe6\x1d|\x81m\xc2\xcb\xeay\x80\xb8`\x08Q\x88\x84\x01\xab]~\x1e\xa0\xf7\xb5\xc6r\xa90\x91\xee&amp;p\xc5/\x02g\xf8sB&lt;-\x0f\xa1^&amp;\xd9&quot;\xe1\xa2\xfa\x8c\xf2\x83\xc8\xb5\x1a\xd9\xe2\x0c\xbb\xbf\x18\xa0\x1b@lq!ck\xf2v`\x18\xed\x7fN\xa0N\xa2\xba&quot;\xbb\x0buo\xc6_\xb2w\x81$\xfb\xce\xbd8\xc2\xb2\xc8\xa3E\xcai\x9b\xe5\xb6\xf8\xaa\x1a4w\x96\xb5\x86\x9f\na\xb8\nH\x11\xd8F\xaet\x93*\x07z\xe1\xd3\xe3&amp;\x87\x1dXB\x04\x8b\x00\xf6t\xa5_\xcc\xea\x96*\xb3\xdc\xc2\x18f\xf5MH\x8f\xd4\x8a\xaf\xf9\x8d\xea\x89\x9b\x05\xca\xf3K\xe7c\\d\xd7z6]3&amp;n\xd6Fg\xe1\x89\x8435dThSy-\xea\xd0M\x8a\xdb\x98\xb1\xc2\xdf\x17\xd3@\xb1%A\xefPocx\xe1e*\xd9\x19R7\xad\xd5\xf0+\xcc\xddCl\xb8\\6^\x8a\x03\xd8\x1eeq[\xfa\xf3\x8a\x16~\xcd\xef\x81\xfd\xe7\xaf\xf2\xef0F8\x1c\x8a\xb6\xcbi\xb1G\x9d|l\xef\x9b\xf6G\xba&amp;8\xa2\xa2j\x01&quot;\xaa\x9b\&#39;\xc9]\xcc\x8a\xcd.$\x03&lt;\xb6(\x9d\xee\xcb\xa96\x07\xb9\xc4\x1f\x93\x0c\x0f\xed\xc3v=\xa2\xf7\xc0\x9fNcm\xb9+\xf3\x1b\\\x19t\x1d\xf5eg\x1b\xda\x01!bm\xc9\xd7\xd2\xc0\xc8*\xcaZ\x0b\x15\x8d\x99A\x98\xfa\xa5\xdb\x81\xf518\r\x8d\x9c\xd4\x98Q&#125;\&#39;\xd6\xaf\t\xe4=\xd1T&#123;\xca\xe4Tp\xc5\x8c\xa7z\x9cQ\xd1\x06\x04\x05\xfa^\xb6o\x86E\xab\x80\xd3.-)\xae\x1bh\x81\xcb/\xf6!\x83\x105\x89\xfb\xac\xf3Q&amp;n\xc8\x1aP\x16\x11\xfd\x16\xf5\xe0\xb8\x1e\xc4\xf6\xba\xb8\x02\xa7\xfd\xfef\xae\t$\x0fI\xe3u\xa8\xf6\xa6+\xac\xce\xcb\xf8@\x91u\x02\xecI\x0c\xe0S\xe3\xbb4&#123;\xfe\xbc\xea\xd1\xd9\&#39;8\xe2\xd4\xf0\x1a\xc0\x05&#125;\x16\xcbc&#123;&amp;\x1bc:\xe3\x02\x1a\xdc\&#39;\xa2a@X\xd6\xf9A\x85 \x89y\xc38\x1d\xa2\xdc\x95\xaf.\xce\xeaV#\xdb\x12\x07\xd3\x87d\xc1\xc8y\x90\x01\\(\xaaVy\x8f\x8da\x85$4\xdc7\xfdl\x01\xbe\x1f\xef\xd1\t\xc7\xe2\xe6\xfb\x90\x7ft\x93J?\xc8\x04iO\xd8\xc5\xf5\x7f\xe8\x1a\x81\x19&lt;9`\xc5\x83\xe6L\xa6\xefT\xfc\xc3\xe8\x00\xdbl\xb2\x01\xcf3e_\xb2I\xf8W\xf6\xc2\xa3\xc7\xc4\x8fL\xc0B&amp;I\x89\x8bd\xae\x05#\xdcHG\xffN\x8c\xeb;I\x00\xa4\xa8\x96$\xaa\x8d\xa7\x03\t.\x19\x16$H\xe1\xe0\n\xc0\xf7,G\xce#\xc0,=\x0e&amp;\xedB\xd6\xf6\t\xc9P\x12\xf7V\xbaVq\x0c\x0f@\xe9\x9a\x10@\xae\x0b\x9aM\xaa\xd5\xbed\xa9v\xb9\xff\xe2&amp;1#;)A\x08\xd0\x08FN\xe1\xb3\x06sd?\xe8h\xd8\xbe:\xb0\x8c\xfa-\x1c\xbbB\xbd(\xe6\x94\xa2\xb2\x15t\xc4rhH\xe7\xa5\xa3\x1b\xe7\x93\xc3Y&amp;\x17\xcd\xe5\x8c\xcbi\x93n\x94\x0b\xa9[P\xa7\xa0\x7f\xa1\xe8(\&#39;f\xb4\xcd\x19[&amp;W\x7f\x0cb\xd9&gt;Gp\x7f\x1a\&#39;\xb8\x91\x11\xb7\xbb)r\x86\x82\x15#\xe8\xe0\xcdcwPM\x1f\xc0B\xd0\xb4ftngW\x92\xc4s\x8eSe\xcdv[&gt;\xbc\x8e\x97d\xd1\x84\x194\x82&gt;\xd1\n*\x88s?\xc4\xb0y\x05\x99\xa7\xfb\xad\xf0@\xf8\xed\xbbh\x14h$y\xc8\xbeR&quot;\xa6.\xb3\xd4\xc2\xda\x1a\xcb6($\x06\x93u\xeb&#125;a\xd1\x11x\xbf\x83\x9c\x89\xbf)\xadC|\xfb\x19kyI\xec\xb9\xbd^\xf4\xbd?]\xe2\x02J(&amp;\xc9?\xfc\xb1H\xb2\x9aL\xe1\xff\xebsf\xd9mS\xed\x87\x91\xc7\&#39;[\xf43\xb8\x16X\x82\xfd\xbd\xa2\xd0\x1eL\xeb\xd52\xab\xbde\x7f6\xbf\xd6tw\xc6\xbf\x865M\xb7\xf5\x83\x96\x9f9\xbd\xd9I\x89\xf9qdW\x1b9\x1d*A\xbf\xbc\x8e\xfc\xfd\xdd\x1a\x12\xe70_\xe7\x97\xa7is\xb9\x1a\x15\xc2h\xb5hI&gt;\x06\xb3H\xad\xfd\xc3\xa9\xda\xaeJ\xf5\x0baR\x1f\x07\x7f\x18\xc7%\x1c$\xba\x1c\x1e\x1ao\xc5\x970G\x12(a\x00\xb0i\xcdP\xa8&#125;\xde\xbda]s\x9ak\xbe\xbe\xf2_\xd2\xc1 \xde\xb7)ir\x99\xfd\xd7p\xa7\x8cE\xc0\xd6\xe9\xce5\x9b\xfc\xdc\xb6\x13\xa0\x91\xba\xda,\x1d\xdd\xb9\xad\xfd\x90\x1a\x11\xfd\xcf\xaf&amp;l\x8d\xa5&quot;]p\x1b\x95\xa6\x0c\x9bD\x04\x13\x96\xef\t\xbf\xadp\xb5O\x1d&lt;/\xfa\xbb\xfa\xc2R:#K\x1c\x1a\t\xbf\x8f\x1bSd\xbb\xa8\xa9\xb0\x83/(\xc4\x84r\xdd\x1a\xbf\xc7\tuzA\xf8\x89\xd5\xa0\xdcLg\x96(\xe6Mo\xee\xba\x8b6z8\xc7\x9a\xf3\xff\xa2\x02\xb4\xb3\xf9\xe3\xbe\xfb\xed\xdb(\x02\x88-\xf7\x1dM\xbdz\x91r\xbb\xec^\xf1;*\xa0\xcd@n\x1ch&amp;\xea/\xda&gt;V[b\x0bx\xe6\xcd\xb2\x87CO\x8b&gt;\xfa\xeb\x85\x1b\xf6Q\x94\xc5q)&gt;\x0b\xb1E\xc6\xd4\x16F\x87\xd7\xb6\xed\xf4Y^2y#O\x9bv\xb6\xbe\xf2\x1d\xd2\xd5li|\xcd@-\xc7\xf3,\x96&#123;\xd0\x10\xaf\xf40+\xae\xd7\xb9\xb4\x92\x84\x16\x94\x81\x8e\x1b\x8e\xce\n\xc6G\xbaU\x11\xb9\xd0\xc4\xf7Jvv:a(\xcb-f\xbb\xb7\xf8!\xae\xf4\xa0\xf9\xfb\xc0\xe1Q\x0c\xab\x1f3\xad\xf6\x15\x9eQ3 \r\x15\xccwL\xee\xa8\x99\xe3\xe3\xce\x18vF4\x86\xd6[mup\x8c6\x93O\x81\x10L\xb9@\xc9\xdb\xda+\xb2&gt;\x83\xbd`uz\x17\x16O\xea)3\xd5YP-\xaaOs\xce\xbag_*\x7f_\xffM\xaf\xc9\xef\xb4\xdai@\x10\x1d\xc5s\xc4\xae\xb3\x88W\xe8\x8e\xd0I\xa2\xffl\xa3\&#39;dr\x92ma\xd1W\x83\xe7\xbc\x14\x006#O%EH\xe8_\xd7\xb5\xfd\xa8\x8c\x81\x07\xdb\x98\xc7\xb7&gt;t&quot;\xf5G\xc0\xa3\x8e\x19QYZ|d\xbf&quot;&gt;\xea\x89\xcc\xb5\xea\xaa\xc62\xd6e\xac\xe9\xfa\x1c\x98\xb7\xfb\xfd\x15|\xb1`\xec\x1cO\xa4\xc0\x0c\x94\xd3.\xec\x17\x01P$\xd7\x95\xd2\x9b\xc0\x04o\x1d\xce\xaf\xd8\xe4_oS\xce\x8c-\xf0\x06\xc6v\xd2\xa3\x0eL\x11\xedC\xc7]\x82Z\x06\xe7\x92\xff\x19P\xd1\x02K\xc7a\xbd\x14\x8a9O;.\xa4,\xf3.N\x10\x10\xe1\xd6\xfcx\x94\xbeAp\xb8(\xdd_\xf65`\x9f\xa4#\x19a\xe8gC\xf0P\xba\x00\xb0\xc3z\xdc@\xad]\xb6\x0c\x8dy\xc8G\xc9\xf7q]\xaf\xf1[\x88\xba\x0e\xf9\xb2\xa2\xb5\xc7\x87\xce\xc9\xe3\x87\x1b\xad\xa6\xa5-,,~\x94\xea\xf9c\x99\x1d\x8aD\x1f\xbaH\x87.o\xed\xf8\xc6\xfa\xc7~\xa1\xd0\xc2$\xc5EU\x93 \xb5\x17a\xac\xed-|v\xc4&#123;]+9\x88\xda\xed\xea\xa0 \xd7z\x06\xd5\xd9`9\xcej\x8d\xab\x00\\\x88\xa8\xdf\x0e\t\xa2\xa9\xfe\x99y\x03p\x16\xb3I\xe2[\xe1\xbe\x98\x14\xa1\x15U\xac0\xca2\x19\xc1\xa4\\\xa1&#123;\xfb\x1a&amp;y\&#39;\xdd\x91h\r\xf0\x11\xf0\xc1\xe1hz\xd6\x80\xabH\xad\xf9f\x7f\xd5\xfb\xe3\x8dZV\xe1\x1d\x0f\x90AT\x05\xd3\x016\x02W\xb5L\xda\xff\x04\xb2h\xc5\xe4\x84\xe8y\xb4X\xb9\x07\xe7\xf8\xc5#SDG\x02+\x97\x83\xc2\xdf\xdb\x1c4\x94\x81\x99&#123;\x1f\xea\x99\xef\x11o\x10\xc0\xb9\x7f~o\xc0B\xce\x8b\xb5\xeb\x1cO9\xd5\x1dj\r\xea\xf6|\xf1\x0ev\xd6\xad\xc2\xe693w\xa2\xd7$\xbb\x97^F\xee\x12fm\xb9 \x03\x13 \xb7\x9a\xd3\xc8\xba\x10\xa7:\xc6\x8d\xffzQl\xb7\xb4\x85I)V\xe3G\&#39;\xb8\xb4n\x9a\x10\xded\x8d\x02\x11)\x05:\xc1|I\xa4\xe35&amp;\xc8\xdc\x988\xea\xce\xf9)\xa4\xb8\x95\xeb\x17\xc6\x94\xc5\xcc\x19\x0e\xda\x06\x9e\x90\xc8OZ20l0*E\xd0\x8f\x1b\x853l\xde\x1b\x8d=-\xe9\xb9\xfb\x89\xba\xe7z\xda\x92\x0b\nT-\xce\x9eLv^2+\x8ay\xd9\xc6\x89\xb7\x86\x02\x08G9\xe1\xe0\x9d\xc5l\x90S\xc6\xc8\xe4\xcf-\x8c\xb8\x99!^\xa9\xe7\x8f\xa7#[\xe7\x87|5Hf\xb9\xfea\xd6\xd49\xf1S\x7f%3\xef\n\xf1\x86De\x87\x95\x1dBpg\\&lt;\x80H\xe7\r$\xb2\x96\x81\xf9p-\xb9l\xe4\xa8\x9a@\x1d\xfeg\xa7jR\x1e\x1d*c,&amp;\xe5;\x83\xd2\xccK\x0e\xde\xcf\xc1\xe6\x8cjR\x1e\x1d*c,&amp;\xe5;\x83\xd2\xccK\x0e\xde\xcf\xc1\xe6\x8c\xddA\xb6\xe6\x90\xb4]|\x07\x92&amp;\xd8\xbe2\x85\xc76FsFe&#39;
&#123;&#39;length&#39;: 1953349632, &#39;name&#39;: &#39;ubuntu-18.04.1-desktop-amd64.iso&#39;, &#39;piece length&#39;: 524288, &#39;pieces&#39;: [&#39;ba20b5a72d3025bbc7abb458797663be825f524c&#39;, &#39;8b1bd4c458bf92f0eb55b83e89e3d9c56cbdc524&#39;, &#39;b402c3cca99ff7ad60f8e8e781be8c8fadba157e&#39;, &#39;298891d676f7852782b805b43e66686bb6ad1207&#39;, &#39;d964641c05cf1a78b250c66865de29b064735910&#39;, &#39;c0be2dd7f11fbcbb1407e3b1146ebcfcc3292359&#39;, &#39;6a19eb52f1d01390572c93f7f4472b00540ce490&#39;, &#39;13c87b2d6d3494fdb276766c95dfc1b91777b6f1&#39;, &#39;c1890adc119c9672807953a55eebda75e3a4bfcb&#39;, &#39;00b5ce78e20d78656a6ba4bd7016d04397d7e180&#39;, &#39;0120ce2e795e02ccbf61a4b53c836ab9a716d851&#39;, &#39;0ddcca436320c6cc8c04f462942563bcb4598f5f&#39;, &#39;02b4b435db3e7a27e33d4ba1fa2e2078ef835736&#39;, &#39;4908fe49aff3fc672d836179fa8553d8a628dc7b&#39;, &#39;f8da27d2b4193ea26a46d8f87c9ce8cbe3f3fc46&#39;, &#39;5d982db7d29f7d41149cea527740e8bd6e862ac0&#39;, &#39;4b43839b15e386fc215c1bc44a901d718546dd0e&#39;, &#39;600229ad519e3db46588f1d9c29c26251110a3b1&#39;, &#39;61491fd792a9f21d5d4acde769dd3741d5120fd2&#39;, &#39;1b64e4f725e21d84b64da61de5449f9888986da3&#39;, &#39;efb4c6e22dc4a7973ca658f5b1a2794f45b5fe2e&#39;, &#39;5f70d7b55ff989c1cd8b2b977627776b3b490a47&#39;, &#39;1124368e311d61cd3c6bfd31d6f425c536318924&#39;, &#39;6934c2cb85874273ec37726df5b42146b6c3728a&#39;, &#39;9efd3f79880005035ff8a75359f68849f48e9c50&#39;, &#39;5533c3f1635a8deda39420eac02bebbcf259df14&#39;, &#39;c80592bfd02270ae9d1b41d497639b18b1d20b8d&#39;, &#39;d4c0f403daf35ef32f120d4656d04e80b4bd1192&#39;, &#39;4523f0d463715c5bfb3626d015cc7b676787487d&#39;, &#39;22fa9d570779e61d7821f1dbacbb84fb43cf6a67&#39;, &#39;0335b7fb777596698469bd4fc00a684462de083d&#39;, &#39;cfbb7a5722a608545762b94835657fbd44fc91e7&#39;, &#39;f17836f934ed026bbfe91fcc2dbd103cf69318b1&#39;, &#39;158205413cdfb99650ca5b557c4979bd215f8c99&#39;, &#39;7187a401a389957c74075b320f54ec83e97d9d35&#39;, &#39;31c2b7ddb4e410a8cceab8fea0ac2b9faf7852c4&#39;, &#39;fc9d5e0e9d0e4b0d49c4dbd6611cab38d25cb35b&#39;, &#39;04c2a30266508d90b1bb8345abd18d74136490b8&#39;, &#39;ce94b180a9189597b83b0b4fce92c36471779d53&#39;, &#39;ce764fd91238133f0c708b1b88335c302abf1e87&#39;, &#39;494205a07e752dbd59bd037c7922fc2f5b665014&#39;, &#39;7d13a47fc8656c7aa142e94ea232dcc8691a665f&#39;, &#39;2da281c39e056188d35b2a78854a79aa8ee7be92&#39;, &#39;a0b72788b0ffa1e0e85239c08a130e0c2c9caff4&#39;, &#39;1b6aac8a50b111f7386f029bbc551c396b3d088d&#39;, &#39;0561279675e967d31e74c44e25390ab7ead0eaa1&#39;, &#39;2b19121c3d380d8fdf7580781bb14c2b511fa0ae&#39;, &#39;6d13b6ee7f1923f9d7a57310e3c1ca5ad53ece4e&#39;, &#39;c29933509f5371b6821bd79b24b4f58ffe0333d8&#39;, &#39;6a5b9c4f394a1e9f72158a00ea08e3ea47aa71fb&#39;, &#39;19c4676e9a1091a9bf9d0756a64bb702da7a5751&#39;, &#39;82067001d9d85a142b3778c33fd6eb0fb7aba499&#39;, &#39;5c56470016d30bb34f464efce23461a7373040a7&#39;, &#39;4144ab26531943f69eb505acb53de37e82711f0f&#39;, &#39;be73c958ca3833681522ebe6bea3f97e55dc9d8a&#39;, &#39;9f46a8e0ec4addf7271fd2b3f90b5942b3cdc356&#39;, &#39;267fbcfb576cee86fc20628564613fd074267fed&#39;, &#39;63c82c554e3fd0f8d9ea2e1ec8c7c36d6b6d65e3&#39;, &#39;7ab49b69bd189ff683aac45d3f6d1b7da9583a9f&#39;, &#39;d6c730b4585beda39b464c7f776f06dfafbd3ce0&#39;, &#39;59fc22f1e819280620a49ab46b5bb9c9bcbea586&#39;, &#39;f093062140d5d37bc5a79272663e4bc66a49e03f&#39;, &#39;f722cee0229245e16dbd3c5d6a0f32a5adf5ef19&#39;, &#39;a363d764cf69a411fbc9ff88dff2ee3461b12fe0&#39;, &#39;03e0714d4bdfc5a3af901d40da51c12e2c8dd207&#39;, &#39;6ecbef03949fda425e5089c6ee9acf6323617596&#39;, &#39;78170625df3bba54a28bcfdd8ec4772c0a9a3848&#39;, &#39;5ddc2888825b2287793e6674256c778020bb93a5&#39;, &#39;f4ea17eebd0a0c57cd4db2ffb96d5167a8b0aa8f&#39;, &#39;66aece7c31634090a97613578dcb1433e6cdd359&#39;, &#39;f8af6733fc4581686cd49e5b3c0d5b06ada8122b&#39;, &#39;f59d062ba9bcefe5f05fac29099539eb890b4e7d&#39;, &#39;f2ba6ff184af783309a1211b2c496b3379695da4&#39;, &#39;e509abd80f368127d44f4537c9ad8d6772a1bedd&#39;, &#39;8d37b51ab629553ca9431a581ef35166fa2a2300&#39;, &#39;c5ea100dd518c44c09a9d8bd18dd6f5bf7509c1b&#39;, &#39;c3e6f71857b15f7301ff52826534ac9f78db0985&#39;, &#39;35909ffc83f472ee4d1fdcd6f7726c76adf79ce0&#39;, &#39;71403b6c4c1a832144a6b9ddd5402b4cdc6e703d&#39;, &#39;e6372fb3617ab13c0b943e305c3e914130ca969d&#39;, &#39;556568d01a97e6cb198d81aa05a794b9567eb3e0&#39;, &#39;9ce128ffec47626e6c8153038534f43a6e14aa8e&#39;, &#39;4cfdf99abeb333f9b4c0ed07210f0190238df1c1&#39;, &#39;4f128b5556a0141b66de5cf9b0c9b18b9dcae8a9&#39;, &#39;a7cb2ff33792a6ca2cbda51bbe22831cd0d86722&#39;, &#39;bbf596820c05c64ee4cb059c86e8222daea1a917&#39;, &#39;b14c1a7edde499515cb7a8c4c40c324d8702bd0a&#39;, &#39;29298ce236b0431c040ef3dbb4d44e67c9dd08e0&#39;, &#39;7d5ce79b15086437574fe4ad77e050a9ec1f951e&#39;, &#39;377433da06e3a3530918f4588bb809e086ad950c&#39;, &#39;af720220a7313778277409e666ccd4a184c367a7&#39;, &#39;5896b17de1134292d959e3903fa1ea5de1ae1d2d&#39;, &#39;f679a4b918dde102f09043b530c0815f31a9c5f2&#39;, &#39;c790e2cd289d00ccb46baf130b46007c2eb18e30&#39;, &#39;2636a09078ecde5cb428eefdd527a05beeebf195&#39;, &#39;fc931ba272fd95ac45e3cb2ad4664a5cc9736256&#39;, &#39;dd6ec44b9b671bdaad69a9592462883b03a77305&#39;, &#39;5772a32174c4846698316a5a9b45e3b5e97592db&#39;, &#39;13ad647e428a00fdcf303e42749cfc5bb4399258&#39;, &#39;599dfa76981ba2456a34f129ba867d3ca22ed0c0&#39;, &#39;d9db0e5a39168c9beafbf29792fb80c6fda87dee&#39;, &#39;406901e52eb72857a643badd5a3472ba5df4bfc8&#39;, &#39;a19558eb9fc011ca41c836e5440584938541bfcc&#39;, &#39;89991b435aa574ad43a2526d076a0a49f38930af&#39;, &#39;909577d3f9dba84afd6b5f0a3fbaaedf48442185&#39;, &#39;e6b9ffd32dd3c814f6a340f327106b53c3b5db51&#39;, &#39;b1c85cb0c0a8f214f62939e3491682a814d0f696&#39;, &#39;0b6459ff6932852358bd07dcc961ba788e23d207&#39;, &#39;936c0ed40c2df2785a1f30538eac92bc6116ba5b&#39;, &#39;3c5a3a4e40ddee0a727fe19415a601f7f3e99f93&#39;, &#39;b5c2c3e3e73ce579a0e77b477a1bd7f07552de9d&#39;, &#39;c6c1d2115a2aeeab6895d8a325796b6f1c7d0026&#39;, &#39;3550006520559ad8ff83494ffa8a4da6f00d8d8b&#39;, &#39;53d4908e7c8600f8a80f507433d713785542e1b0&#39;, &#39;7628468bb8f3dd19d1975bb47184e9a6a037e80b&#39;, &#39;97be722888e67cabf2e91308bb1da42ba6f44b57&#39;, &#39;cb93df5bd644b7afd1846fd7fa658a0fa32c6d3b&#39;, &#39;37fcdebadc0235d590013be0e52792aad981d911&#39;, &#39;9725c4f2ac0cb9d0eed531aedf1b383dd07fb7a5&#39;, &#39;af1f50a4aec58baf0465c4c2ff3cf8b1779d4a98&#39;, &#39;708c38d259750d41cbd7c3ce2579597affdeddba&#39;, &#39;e1c6029b5ac8aea4f6e084f23a0c9c5566a2db32&#39;, &#39;48708fd0ed650e410337ae045add5ebb2e3ca28a&#39;, &#39;2e0a9fb60cf69ab2cfbdd452e2504a7638d4ec6f&#39;, &#39;26d1dedc34e7b5809a394ed19dafdc0b4a329f05&#39;, &#39;87adafff116df69908518f931dd1c5aa812b2453&#39;, &#39;8c1e8847de50ab3e683b872c3519dc5ebff775ba&#39;, &#39;a0c76766dc90b8a41716af7359b1bdbb6d3a18d5&#39;, &#39;eaab532927c5ce289b4ed40e0ad36cb85db12fd8&#39;, &#39;8f828651652484a8460317d58871cd714a4af593&#39;, &#39;8351d8c129ab9055ef5fc63a8eb9a716bc1bac8d&#39;, &#39;e1c887c86cb39902b2b089c1f1f5e40ad53f5c95&#39;, &#39;b2b333f48fd08944ec88083902a862bde019236b&#39;, &#39;910c67c9498e8b48274d38581de17ff20aa4366d&#39;, &#39;b4686dbac4ac285706dc93fd497b4364689bc9e5&#39;, &#39;c3085871ed629b58845b952072261e59eea7d7b4&#39;, &#39;ad045c22d316b126df0b468df1b356ab893561f5&#39;, &#39;7a2afe346a5cb925ea6e9a502848b7c49ec36634&#39;, &#39;af8f7003b11a70d27e7d8d9a8486820efee73a56&#39;, &#39;20a5bd4382eef0a1aa3569c78bab929e25212ed5&#39;, &#39;4aadf4e51dae94552947c72db6c781168a263024&#39;, &#39;af2c2a16c63e82b348d221c6ab5e68b01ccbf33a&#39;, &#39;f6cbd3f7c05061811ea090986bbcb682db3bf722&#39;, &#39;02fd62aee00db2d4e3d932a9b6ff5e3ece217a64&#39;, &#39;d72c871b2ceb35f6ecceb81a9f28e5769588bc2b&#39;, &#39;7a725ad328e39b7726af2877722b5289a3ea0372&#39;, &#39;c4ce9ae3e0caac447b6c1c0f9f51de533bb63166&#39;, &#39;23b216c20ce403a8e2085e51f06c2da18a3e2064&#39;, &#39;c655b0fb413bacf2d7c4ec9978eff5f07c90663f&#39;, &#39;6d4623529fd29bfd1816c6de10357fc5bb9b29a3&#39;, &#39;fbee8049077dbeb27131f1b5a7ae0c18d3197714&#39;, &#39;65cc269b867e4cc57957383c1244854b9ab62ce8&#39;, &#39;b7a38af9301c69008141d9801498a683f9c59ba5&#39;, &#39;250cfd0a48c0c98f02beb9c60d1924f5581be7fa&#39;, &#39;5020424566e0ec56cb699b19c413d09ff6330dd4&#39;, &#39;dcd1c991432bbf2677720cc022681d39de0289ba&#39;, &#39;dca769e57d6962836f343ef836ee4ab5efeaa0d0&#39;, &#39;4f3489861654a1eed3cbef0df20cfc043651656b&#39;, &#39;f09cd15b39327ac299a25539af6dc15d8d533e26&#39;, &#39;f6fe4be374039f83a9c66dcb54b65f0aec83f297&#39;, &#39;48ba14a7794f87864e9c81a437e862ef2d4d2849&#39;, &#39;07da93be63100a01b1063ccc96bb050af6c05872&#39;, &#39;8f7d0b2deeafd14a0dc76d2aa81c759526ce0af0&#39;, &#39;bba4a82d21a3119f74a86c8ad322b3044fa4cd81&#39;, &#39;1b752027ae35f2cc02bcd7e3d4e72c9a859f2e56&#39;, &#39;753f7900577bcb0c668c8271039ebb340e221ee0&#39;, &#39;78a6fbc3d7bfddd99c691275f7a77fb611af1e97&#39;, &#39;f7cdc1ea33ae05e094e08b3bf5a3684ee5cebeb2&#39;, &#39;97cc08e498bb9c717c8d50876dfb3cf111d68f42&#39;, &#39;86ee76543cb1efa8c5360db333423509d10e3e4a&#39;, &#39;68ec0a38878d5317e668269b83c858bfebf43d39&#39;, &#39;1f3350fd467b29b592eb0c8f15364a6cd271d252&#39;, &#39;13636a94d974b2cf770cf31d9774e55218be3ec8&#39;, &#39;f0ebd531089b0d2e452c3903962b2fd00039b3aa&#39;, &#39;574b9d14ab040e573725d7d71a335c1843c560bf&#39;, &#39;7f423554bcd3eb60a7b727d6a1e271bb967bad92&#39;, &#39;d08ccd01cb924da74f316815c88e99233697a8a7&#39;, &#39;cd47a190af40e57c94ad378ce850e14f60d7db98&#39;, &#39;cb08b0defb133a064cc2fb8530f31cd8fbb3a15e&#39;, &#39;cf50968e0b6ecf6b83a870b26b5fe74c2e78dfd1&#39;, &#39;35e57b39e306ecf2b65ea872b471dca5184661f0&#39;, &#39;8d8623bd5f4adfb280511a90a60dbdc2379602c7&#39;, &#39;360faa4f6eecf75059e7eaf5a0c3107bdd781a05&#39;, &#39;23120d947e446b4e25d651a85642ac07ae8a1607&#39;, &#39;3f101ee3eee77920b022636a860e1ba3bcabdfbb&#39;, &#39;89c72a4d93749da129ecb5fd398500d05f7ed10a&#39;, &#39;6f8c3e7e37f407ab9ce88d4668d42b9ee161d768&#39;, &#39;986217cd4e5d44539a4b31d744bc77bbd3ba303b&#39;, &#39;6f4a675b9817347040c3714b42bfc3e5e001582f&#39;, &#39;839470676b9405f84cb27113018f982e51873ee6&#39;, &#39;ce1420b20f3f08b5271566ff2e89aec17493c2fc&#39;, &#39;9b89717a2379267dc036a74d73de42f78142b53f&#39;, &#39;1674049a24d46f837d25d7f0039f90add243c2cb&#39;, &#39;3fa9465b410bd601c993c02efec1f7a333b2f28a&#39;, &#39;5f502a04e1f3a01f2f15cf329b60621ded409668&#39;, &#39;34f377e48640ac13a1615771a96f68c1c1658c90&#39;, &#39;17b6f1a7a9d29e728496e7023b606618e4c24147&#39;, &#39;b2c5922a7bfab15a06c97ffc022bdbf232cdb958&#39;, &#39;6b6e99a0992ee4469f7d1aa0795d9d88aaa08079&#39;, &#39;c6cdecd63a958499c9cfb7110ef3748304690a28&#39;, &#39;90511ab0114d82bcfb36257c3c3d0addf26fc81a&#39;, &#39;e4e124b08e792ff46ec24a0403be3704d01b0dd8&#39;, &#39;c4511379d50e485ecf62564273cf286348bc02fb&#39;, &#39;56b0bdb0a66cc7c177503e7c7d78cebf18f34b3b&#39;, &#39;f61aa76bedf8fa2cabd226634932effd9fe2153f&#39;, &#39;ed07d5b02c8ec14e6cbe871cfe6f87c0e28843ad&#39;, &#39;d0ea253b20614c0f3c8f1e63ae03cfa7988c8260&#39;, &#39;8805cbc590d760fd5a83026f4fe53eb7ff5190ad&#39;, &#39;548322a0a89ae0c2edf9594178192b95199b72f4&#39;, &#39;663015f796c3da64fd50e835283877a79b3890d4&#39;, &#39;25841efc224f9d5d675a2a3158f7856028d55e95&#39;, &#39;e01f784166fa611dbd472dcf94522d6dce2842d8&#39;, &#39;f5eb27a535bdccc43d793c14a8c4c9bf23ee24da&#39;, &#39;4f7e913f3f8048e4d7afb18fb58b5dc51da8b6e2&#39;, &#39;eec6404e370b0ca39bee8e14cbe8fdf0b64ef062&#39;, &#39;3d287d7f69aeb446e4e6025a3ae0bce2cd202280&#39;, &#39;64f9b4e8e1d1d047f52ae41467560e34eb63baf7&#39;, &#39;fdeeb3c0a2ff4b2715ca66e822af1ca9d43a2785&#39;, &#39;814d3c5e966dd0491e2025c89ab2dfb22ed3fdff&#39;, &#39;4029c918a3acc11424bcdde6a48d5d324688f663&#39;, &#39;a8d75f4fc9ceee278a489985226ec2ee9124ea80&#39;, &#39;dcc76c71c97951866c9180457e500d54fd3eff93&#39;, &#39;e4a4099abbab25637ab1b5f3810ad6f5724ba5bd&#39;, &#39;b9d72d9324d2eb336e7cbcc25b758d05e70f236d&#39;, &#39;779ebdebe4428130eef6eb5182b73a5ed16b3ad0&#39;, &#39;5913c9aea9b066ccbac85c81c52e46a51aaca08e&#39;, &#39;54d46652bac891b467c07612da0849f57f9fef59&#39;, &#39;25e707fe989ae767abac88e612c23ed63ca7fed0&#39;, &#39;1ee735872e1c2b9e78942707d25bbf9f83b8aafe&#39;, &#39;2b9449639f1d9c674cb6403688284b9430e2c020&#39;, &#39;d5243f092d711f9b934a6dfd12bf2545177c0969&#39;, &#39;0730456cace43b367a39dbbf5c1129a326a06023&#39;, &#39;3deae0a31d4a7cd7efa53425cc1242ed737b47fe&#39;, &#39;3a697e6ec116d5d5fe6f5427d0bf358b97432f29&#39;, &#39;54e8675ea5b613456c557fc81c4d54bda4d3b035&#39;, &#39;c2731675934e13880f83c4b673900bdb3f6ff7b8&#39;, &#39;cbaafc09c26a53d64f834e77f69649e7a4b9700a&#39;, &#39;751a315de3a4aefa2bbab4b765d994aa0a6b9078&#39;, &#39;b1e025194531af8de399227e221af688a74b7a8e&#39;, &#39;c1f5e0cceea2f4820753a22b5ae6cedb8e588831&#39;, &#39;d0284ae3b74f7ecd849b835ff5f570eb7bfc5518&#39;, &#39;9da6d47ccdc79961eecef0691a62a104e0005a25&#39;, &#39;3374a9e1561284b81492f68294cd914d071bbb86&#39;, &#39;396ece79018e9b5f048c7df24993e7a12290eef1&#39;, &#39;be77a06cf11f1f1cb9918c006e73a030db7de9c8&#39;, &#39;e8ec7cac5537f3641ccd0d5197c4d70d29c9ff79&#39;, &#39;b53a4aa280828030f9fa72f1099302e049269caf&#39;, &#39;411516940f7f6d8a0487920dc755104df6ec2156&#39;, &#39;90fcddf596e411518be65d047a3debc74d00c87a&#39;, &#39;776eaa02274ae486f1cdf83e3565b82590718e00&#39;, &#39;b4d87d6b79fc56d6d782d599c8a0307a83d09a9b&#39;, &#39;8f4b9ef83a7056a0cc6e80cc5a89d8593a73aef7&#39;, &#39;938578f5c80764a052d6ebdea7971b1043b9434d&#39;, &#39;23c53ac352162d6895b236ff97d9045d36ea2590&#39;, &#39;13ec3f1af3d44c3cbc46f5a26dbe824f91da840c&#39;, &#39;65d4ae789c6250763d43fa1bbf8745b115d62b8a&#39;, &#39;69993c5a6656c7356d0603918f49cd6e157265c4&#39;, &#39;9ad3ce486ce19bd5b3ed5c4ad2057ecab9241fd3&#39;, &#39;d9ff334c2ccf7778c4c81c241f92d6c3045758e2&#39;, &#39;1026f43072d21f8a7bb57ded88cda13cb41b271c&#39;, &#39;a3f19cc9ec8081a6b29d572d79a26c3dcaccab4e&#39;, &#39;767607bc80ad543bb9183541c6a9e3eb2c4b2b77&#39;, &#39;fb7d5d3864281e85e2932f94dbb68b158f237071&#39;, &#39;a1f98ab9cb893dadf3f6dd00b952f39d896529af&#39;, &#39;c04b943805ccbb4b8a47e2efb06cca70b5fa8dbf&#39;, &#39;64a920534f2d3c2793f728f842aa703666c859a6&#39;, &#39;9848b958cb08eceb0170b1e7b6a8ff9aa5639ff0&#39;, &#39;d1bf89fd20a334128f514f328a140d7149ea195b&#39;, &#39;7506e6fca7fba43bb6dac1c18e9bdf018bc7c875&#39;, &#39;8ad873ae455278b791751e8965db854ceb465497&#39;, &#39;2f3a4f6470f0683c5260b929f1ab1bedcef3730a&#39;, &#39;eefd40ca567e50d9cdecc7f04b53bef60161f4f8&#39;, &#39;9526ca3d2788cb04164ee29845c27e2dbf74353c&#39;, &#39;6e9e15f7f5c9d60da2f2bc9aa1a1b5285d207409&#39;, &#39;7312136c8a3915aafc19fd840d6874a7ef7c5738&#39;, &#39;558795f5085597b587bf2de5b7ba76f473010cbf&#39;, &#39;4e0dcf8dcd05a14d9dfe5b86b2c9a8bd9081a74e&#39;, &#39;d5650ebc6086fb67684a1cac399719afac7f747c&#39;, &#39;bcbbfe5c9fba7e52db970e32ab3ba45270972e04&#39;, &#39;13f3d95b8e12260e975cde6b8b4111179cdbdc67&#39;, &#39;5881c3264d089f750221b6d656b6b148b07cedd4&#39;, &#39;e8c6fd77f0b42ff769af4a857222f77127c2049c&#39;, &#39;06fe527eeab3e59e08f639c9f14f9289d3e65f29&#39;, &#39;d594ab65d54bde8b21a3928dc2115b7a58212bb6&#39;, &#39;7ccffd0621518843fb36dab09967a002a6ddf76e&#39;, &#39;08af4ef58704c1a0ed19b24cb94c609157ddc6ab&#39;, &#39;4ca735e5e100acf92a9471b9381e484450eb66b0&#39;, &#39;7693531baa4937b83e4208e3689340fa4a9bf3f6&#39;, &#39;bf1d2e26f8e790c8a820f138d0cfa6a5d16503f0&#39;, &#39;349cdb73032cf850ca978c04e252ec901a7a7463&#39;, &#39;1278eefe9702cb53070c2978c44aeb38eeb7d4ba&#39;, &#39;ad75d7fa7d100f385538e6669628275eab43e346&#39;, &#39;d0c48b32163ed7cad97b85a43de91e816eafd727&#39;, &#39;a37bb38250d4d91cf35a7d25fb063ce92f62cdd9&#39;, &#39;0f56c2dfb2fad1a49030550ae3caa63d6291c865&#39;, &#39;ff3d36ea81b5c95f97eac1c29c357a3d5e5360a3&#39;, &#39;0dda2ef11bd1bb5786b00d41551a73c4a593eda4&#39;, &#39;3604c851a6c6d36fa8f2c1db0f5370e8a55a3435&#39;, &#39;4029ff0aa495bd8ccc936e6a85833fe7047f3460&#39;, &#39;fd454ae737c1a3c7834a4fea5d76f835671235d3&#39;, &#39;56fb6d84ed2d1b1f2f42d97064eb73a660ec73f2&#39;, &#39;b5d382371a7206a3f34c257841a5f495f78d3460&#39;, &#39;319cd17037594ce78e4a7aa0f04e46620c75da31&#39;, &#39;0d1bb0e86272330deba089646c401a40659a1203&#39;, &#39;4bd2f39e15386944d85e788058393adeedf46eea&#39;, &#39;eca8165eb95dde951a26d8843dc6f18b8d1c99a7&#39;, &#39;88bbfbd8384380ea25b3b1cff140e5b5ddda75ea&#39;, &#39;e1949372a0d3436cd7e959011ebb5acf0e0e6af2&#39;, &#39;3458c81ce78629a88dd908beb07103f1d4911526&#39;, &#39;ec28b6da34956f1c48786915d72867c8e4d910a8&#39;, &#39;29449f4a868ca48b7f376052b2db9e90ae85bad7&#39;, &#39;587b31ae8f122dab8a69d742b1eea14fb13419d2&#39;, &#39;e204ededa19300e0681bff8a8560392fa3df129e&#39;, &#39;9cf01ded42a94a1af39e095ec3153e2e0725d1a1&#39;, &#39;37f9d058dde25a36fe96c6332af7544d40aa9f86&#39;, &#39;afa3476e9f7ea9687303bd22d9feec895c067959&#39;, &#39;fcc79e5283e8a030b2f02872a428e9908ad5fd21&#39;, &#39;d61583b9d1747451d9cf851ac14ad488312aa785&#39;, &#39;a63ebc921799a6024782095b493f75e6e01e5e74&#39;, &#39;c76d1fe5185bf7705756d592890aeb54102a4191&#39;, &#39;44463cd4c4bbc9ed55b886cde62e48c4b4b09d83&#39;, &#39;e72c78c0355efda08b584ed561f78e0b9f58b33d&#39;, &#39;15425e956afc0a816493692f1b78a6dee5f70f26&#39;, &#39;70014ca157597be6d702f20b8f0bb47c7eb8bed5&#39;, &#39;bcc4cde0f6683500b0743561607fe453dd056bac&#39;, &#39;ce80cc5495daa5e43f3c3e7950bb525e8146f0f2&#39;, &#39;5cd042097d57dd407f6bbe2e0839e04a3960961d&#39;, &#39;d8c450dda817c37882c2ec26868fa4f90cc5c264&#39;, &#39;57dc8d930f2cd0e5638218a10663349a90a32d46&#39;, &#39;4081e06bc2bfa1aa4a22111fa629b4b00b61d911&#39;, &#39;b198d87ef1de7e857dd4ac56633d6d9cff264fec&#39;, &#39;3ca744487e47e99bc5b42b05697104d7a942b050&#39;, &#39;4792e1f819007e4c5481aabb32ad24ff22f8c2b6&#39;, &#39;a1988aa18bb2061e94a82838729edf56a5b3c1d4&#39;, &#39;90da29ed9ffdd935c687eaa3f3ac79cd9e355c01&#39;, &#39;4bf348998f1b06ea36ee734cdaf9a005423c96e1&#39;, &#39;bad883c22b2943d2b886055cac98a0cb999861d9&#39;, &#39;b5fa949b347a58247418a004ef957e7be0d6a811&#39;, &#39;51bed945d5876a66989b1be828696e8c1d22d537&#39;, &#39;7d887f4147b0098e65398c8ab9054fdd046311e8&#39;, &#39;be3e6bc59871823da03d6cbfd43fc521c04f18c7&#39;, &#39;38ae06e2c08b1eb927547b8625369df31247e662&#39;, &#39;d53325419d50b08a8628756370021fb2982a4d72&#39;, &#39;c544184c565bc581cb89dbb9c27ee6a17baa4895&#39;, &#39;196925a370587c4dc64fdbd9d912cc7c1dc1dcbc&#39;, &#39;b60a98d11a3cba05006871acf0cf281cd5c3afc0&#39;, &#39;b4ae547826ce2131bc688ad95ee843f6db2f4261&#39;, &#39;410cf76022580ad3bf35e18bdb8c3723044f3e33&#39;, &#39;5e5afad51ad3af8237978abeaacea03f59e9f945&#39;, &#39;96d5d666036ea7701fab5cbfd05498eb636bfc8d&#39;, &#39;cab83971013610dcb2ffd5b1b57b14a91d376227&#39;, &#39;a8c499dbb0288d226afbbcda2036c9b762512867&#39;, &#39;4d7cf2e9c6580fac82ec951899c01e78c412fe96&#39;, &#39;a52adbe89402f057aeecc3195973ca73a21e5c77&#39;, &#39;2822a5a01bfeb991dc4efe6ed5de3e7bdf5caced&#39;, &#39;85ab493ae69f115c49039be230cf854a615fd584&#39;, &#39;8ec36f9202df22782fe985de20f623179612d080&#39;, &#39;97a0e78d65ca8779d8065b50255ab86ffefef55b&#39;, &#39;586b52337c0189c7d87b81938d1f243ceb3bd5cb&#39;, &#39;d2c97d48b789d0357c73a369681d7303a6a3f549&#39;, &#39;74957cda36dbed11a51ef37af6b06d2187adc960&#39;, &#39;8ca8a439519b48c2ad2a2c755518c21d2ab479f6&#39;, &#39;a46f4ffa4ae92b7dee46867b9f1e8f4a29638198&#39;, &#39;c37578567654e8c8c91c669cd033e7dcee6469fa&#39;, &#39;3b716bb9609f1dce596a5c1a034b614f385d7083&#39;, &#39;db042dba5768ca151e4b7db6fd24496b754101e7&#39;, &#39;c8d3be720fbe72ce9ee130c499318358efac9801&#39;, &#39;8099752656067cb3e51abd1cccb521c2552889d4&#39;, &#39;d663d4e6b410785b7ca904905908d650ffd5fe7c&#39;, &#39;e8bb73895a307266665a5e559ec24544ab6c3ade&#39;, &#39;ec7626dd0fee167576250c15d2c48c11ec0cb21b&#39;, &#39;01fad6444e623308dd1205905a26c65e851b0b41&#39;, &#39;b5c9e3783cd1902bf297b40de7c4c0fc477157d2&#39;, &#39;7cba6220a21788bb35295060de2c85e5c06d4f10&#39;, &#39;744c2958bb949f36b288c93c42cd32d538a26cf8&#39;, &#39;efee434421462440d80f9c3945aa35f9ab476c9c&#39;, &#39;70c2dffc5ac3730dfd5897b2492e7fb2d6010031&#39;, &#39;98346dd94e41e713dd2c594abe671401627eb95f&#39;, &#39;de938d8584b9cfc18ebab03dbb0873a35eedd30e&#39;, &#39;d84eada3aba472904b4b155fcc1bb74bb7ef9e3f&#39;, &#39;9e99e4a5332ec0049171bb894a1a1c375be0351d&#39;, &#39;e2f93f789ce4b5259ee46420c94540bbc40fc32b&#39;, &#39;e39561e09ddeb8751ef071c3581fc946897ac52c&#39;, &#39;2285658691f9315f6c856a99665b658ca03ed529&#39;, &#39;30209d9a37bf8bed680aa8a6838bdf98f59d531c&#39;, &#39;4c1815170117f91b02b22cbcaf036ed17c84b856&#39;, &#39;abeca2ceba0a03ead4df91611e2ee18c7d37a8af&#39;, &#39;6cd481d4329266b3413cb40869423aa420d84ab1&#39;, &#39;8185762ae8e2d6846231363e599b6a003a4dd744&#39;, &#39;b5cfe87f3b837de2e91939c4c5be1a3bdb2bcf47&#39;, &#39;aa24e89ebb562034f131ccd2035a72a2b4d51274&#39;, &#39;0c313c50763b5f2ce196d56ddc05b081e06f8b19&#39;, &#39;dd5aa686167f240741413eec6b3aa900423adf4f&#39;, &#39;8111ac137ef25de3ecbf1da4f75fa0345dd8a8f5&#39;, &#39;3fdd8b0ec30a83db514efe86d721423ec2905f5e&#39;, &#39;0ae4bb789f2543558088d9b6eb26608f67d687b6&#39;, &#39;6e1387db9fd5cd4352a139701082b03334e59bcd&#39;, &#39;ea63b405d3a1c401bdc7c7974d5c2ec19334f6f5&#39;, &#39;4674384f23a24cf211a470f8063444e1069f7ecc&#39;, &#39;c289c3d1cc2b654b47a085671215b78711e76f65&#39;, &#39;39e0997a378a3824d6e2acf0bc059ef9ea26bcb4&#39;, &#39;cdce867a3be2a536d626fe311d4b7d37c751a910&#39;, &#39;dfe8e5610b7e1f99ef3e2984d91628d72754ee4b&#39;, &#39;06ee7ddb6acb40731a25fec3439c1c9bf08ba8fd&#39;, &#39;113824ca5af8655f1a349b943a72b0dbbb124ade&#39;, &#39;c2ed679ab532434d6d8e0081ae8d16ca0ae1857d&#39;, &#39;2610575a8c4d3863ebce6741e0212a6bdc39e576&#39;, &#39;5aba8801c2bcad57cf73cd6af64d4eb12069367d&#39;, &#39;38b6c433b3bef0b622e845f46e9137c6bbd739bc&#39;, &#39;c029ea94bcdec3c9c230bbded753dedcf8b1d6df&#39;, &#39;f2046760d2dd37f41414b09d9a2ec8197a4dbe84&#39;, &#39;a84177067d5f7a52b768dd120867961af1b08f8b&#39;, &#39;247b9a4c7ecea402eb3247bc00ec74d254a75188&#39;, &#39;88a97322f4eb9efbe744271c95bf45d33c75404b&#39;, &#39;41cf4b31448208623f89d6903a9f16a468c4698e&#39;, &#39;81b920baf630f227744ab2264282f0a7abc20298&#39;, &#39;b918837c317f0d8e16a41c0006a2cc34a1d9ad98&#39;, &#39;cb45415f436975980cb649c58be968fccbc32395&#39;, &#39;20ecd40ec403e13456fab1fd1048e795536358e7&#39;, &#39;cea4e82502bd2fdc580381d16614ab2fe1cde9c7&#39;, &#39;a650f4c67e56f98f42b56b0786018ecfc11eb279&#39;, &#39;502fa29e8ea524303a451349a8ba45c7a9f00c91&#39;, &#39;7f354291f22319dae0b16d237a1b8f805ba1c043&#39;, &#39;cfc16fe5ef526841741e4c8876f8fc224f8eb608&#39;, &#39;39cde0dea5d576a87ecc52dca2ef6bd52b2b29f3&#39;, &#39;6a4a6ba44bcf07900a1ef8e692428886e7e2df26&#39;, &#39;0ba0fe598a0067e78117f632a93f0fe619f3cb06&#39;, &#39;9cefc84287e1ff6578ed67decba757790502e461&#39;, &#39;e3b6a4e38a9ae5694c2ca1f60f550e9da5fb9b81&#39;, &#39;6fc12571c5603d9fd2071dd0f65710c611b6f9ea&#39;, &#39;2951fb803b8e0d12439220502a2d3ec962b6e186&#39;, &#39;cf7c98314b763f54eaea0a917fc8662d07f06563&#39;, &#39;2991b2822548b50e12a12a1392f217e78d174c1d&#39;, &#39;6e7869d4d9db9bfc256d673cdf54a742ec37f101&#39;, &#39;a28a5505f80e19afb966e0a7fca74be18228a576&#39;, &#39;579c6abda0f702dfa612f8d580d0a866f0896949&#39;, &#39;9282d7c2606a14a3aafd3f2ff47c256c997e95af&#39;, &#39;b2e912db37800a929f7488392cea4b82620bffd4&#39;, &#39;3bed111935a9527badc237490b3d964699915aa0&#39;, &#39;dde6a6ad801fbc9f43e198afa14798c5da66e16d&#39;, &#39;5c624f2bb103d1621b36b2065c9a9e7a25588033&#39;, &#39;0c0ddc09f308abe8a4c39e271facefed02676d57&#39;, &#39;6c472f94998099a13066d4759fd3a3fc4794a97c&#39;, &#39;5e783fb3fc98a2f9e171a1250a47dd36d897c899&#39;, &#39;587a48624bd8002f070bdf2e415673a6c5e9d681&#39;, &#39;bb764e3613d6b06ebb00fff682b08e5b50c59c2e&#39;, &#39;360ead7d9f1198894f5f1a02c18c2d9099a0eda4&#39;, &#39;4c1bddf890c62cf67b94826062c33a308a17f489&#39;, &#39;18e4dfa12dcfe95b13ec27f3c940e0898c3a7ddd&#39;, &#39;0da5afbfb16aedb51e70c47a0350b8d4f44dcdb9&#39;, &#39;438d184a034ffa626be6650e674f325df84b9d43&#39;, &#39;c2c2eb7319a1e601097b10cf231d12bd6b1765ed&#39;, &#39;1eb5a2f25e74f8186771766a2b1917bef09f8d80&#39;, &#39;2fd3c27ccf2049ce5f8ac8f97a6ad85248a09362&#39;, &#39;148f3003dda7fd8df7a6f0c6dde94effc905d0e8&#39;, &#39;2da6cc42ca7b1829466d7867a2245a2a000f85ac&#39;, &#39;a00b792665b168717c83384dd0cf5ca8f22b58c0&#39;, &#39;836d33198eecb4c5a09d4afaf7cbb13c5ea7e3c7&#39;, &#39;220e1fe367208c184c85b963ee9b1ff5cdbd188d&#39;, &#39;7ea2b9abd30fb3485b70ee0a44d559f380f80c49&#39;, &#39;cf0e608638192ac3c761eb7338ebf1156c8d5aeb&#39;, &#39;728fa60fcdf4278b138e367d0cd71935d5198fb4&#39;, &#39;4f08996f22796b41e1d18e612acd490c8d57e359&#39;, &#39;aaa6804981ed431b289267c2a88f5162ba7ea786&#39;, &#39;7b986cb948ece10d55af800e6921aece61613378&#39;, &#39;b1d9ff69d976a92fe818ae58d51090271c3aae3d&#39;, &#39;d0e08439890d3a6aa7d69608c946361dadb58aaf&#39;, &#39;1be7b32e947f0f9ab2b3288a3220069539e2fd29&#39;, &#39;289f6f438c5d74a878409ad2312b8471bff43498&#39;, &#39;b2427b3b46403eb816e964d4aef0116b1046d331&#39;, &#39;7416191be50fe8e5ec772f6ebc017e32eabfa7fb&#39;, &#39;e122532ec2066f33d32d6e2dac5a23cf4bf55609&#39;, &#39;aac18a2944cbba23dbb7cce677e655ef1ccad826&#39;, &#39;b78f2d2b1f267d1c31725a8e2549750552c6bee6&#39;, &#39;a46ac011dcc6ff098552abdf41aa47df8ee7baba&#39;, &#39;a3b469f56239faa6fefff02cbb10412274743253&#39;, &#39;e8c7aff5ee9722ec0ce27aed62454d5280139700&#39;, &#39;f8d643438644bdf0dea8f4e584a4cd478edc6260&#39;, &#39;6ccd19abf9051c1f4f8654562b0d5b5beec5abec&#39;, &#39;1abf1302502cb0429fd8654cd3554fc7b512dd84&#39;, &#39;0ac9781acdb35620a61ddaa1dcdb5c50a44ffb57&#39;, &#39;a019f5acc494e69f8d8931ad90a01e194d6e00c7&#39;, &#39;acb9cf3cfb7270d15de186bb764eb4ab8c89679b&#39;, &#39;cab7dbe81f559dca2225331baf48d0e212bfb585&#39;, &#39;41748b02da616f5af85dd0e383ecca0273da1e87&#39;, &#39;082420ea14af05afd871436428222773be2b3f2b&#39;, &#39;9ea636d48c643f8dc0c71734525cc46435ca438c&#39;, &#39;80a8589374ee0bb34c9639b8292f34df4cf92252&#39;, &#39;513c9a9d7cf675bf4413b0f848f805c5a61370b0&#39;, &#39;c672301a4fad9ad9feebbdb4434f7c8d3289d21b&#39;, &#39;f07d5212551eeaaff503998b4b9cebd8fa30e75d&#39;, &#39;aedc6338419fa0ffe580aec46432469e3e6f995b&#39;, &#39;e1fbe4a8d7f6b820e2fe1a4085822063568dfe97&#39;, &#39;9d3e6a56b884efadcfec87b6fb2e466b792f5fd1&#39;, &#39;f7d5b38b75ebdd0214e1171db75a8467d32473c0&#39;, &#39;109a501027d7cfd575679e60ccf3c4b9b34a77a9&#39;, &#39;4996cf735afb10854aed52c63c5993a1fbc03ce6&#39;, &#39;9f9b6298ddc3bb743510a1807027d3cad30d5213&#39;, &#39;136a53e5aac5be14a863a7ecb030e044401f45a7&#39;, &#39;af0360466f8b3066be1d494b08f8b7490ccdb1ee&#39;, &#39;1dafc61a9f510307b96abad993f5903fe19e639c&#39;, &#39;406fb0c83a9d953976876ae6fc198b59e8cf4865&#39;, &#39;4c6a5114e54068fb59bc2ab424cfec409ef9376e&#39;, &#39;43fe1c39188f201a80661b05b35e5285dda8e219&#39;, &#39;5103c9ffe1ee7691371a8cd59f98700257998c23&#39;, &#39;e5834a84a4d2e2fa5fc2152fee2143468355b664&#39;, &#39;dae6b74aa2057ffcb443faaee3e9d934ddd93c36&#39;, &#39;e263e5a7e0c4ff3e59fc0d845c1c0b0df1275c51&#39;, &#39;d204f0e01507cff63f071b163eae3f99e77f4e93&#39;, &#39;4260fe7d88121f791800771555b0b8b69141bdcc&#39;, &#39;1f542ab546a901f14cb34e3b875323c42f61325c&#39;, &#39;e647a6ee304272c82dbb3920d7520942a9ad73f9&#39;, &#39;1a85f4c7707696dc23107370dbbaa2f46cfdcd0c&#39;, &#39;a538b3b0f70968e338aa46fdda8fc2b5dc943246&#39;, &#39;eadb59d894be0b50e80e7fed1a71aa198c5209d0&#39;, &#39;aa17ee8227abb4fcda166830b6b7b922d6aafc0e&#39;, &#39;735137e9531190507bafbb4f134a4ca01f870ac5&#39;, &#39;8dfde8b821ae87e0c21d9d44aae413d7030d86a0&#39;, &#39;4004ef6c7d8dbd4380000c0aea357eeaf594edc0&#39;, &#39;12161dac6c26973a69eebd7a9ae8d5956d590ed8&#39;, &#39;5e3d55ec1486fa51417e998752dc49353819a6a3&#39;, &#39;e490335c9569b80467676da9fdffea2642df1856&#39;, &#39;3cbf4cfe63c206226461bffe6c0d58a68f714fdb&#39;, &#39;b87ceb48b931f36e13b405adcf9b8aeefcdbbc32&#39;, &#39;da5f25aef070bebcc229c80ee64defcf11f8434e&#39;, &#39;be8aa8835835e24874716d2a5d25c70554c63403&#39;, &#39;f73147c16de5cba92319059d49a5afd5225b5ce6&#39;, &#39;c4e3cec97bb88cdfc47f5a5864422d47e4a33bac&#39;, &#39;c25fde5c9ba570967d35ae2d0941114da9610867&#39;, &#39;ac275e05cb4517ae5a174ed14984f07a91e5bb36&#39;, &#39;b5dacef79706d867b23dcf6ff022637b73f43cb0&#39;, &#39;de5e9cafa4af2c78f154bae6ac5c8ba68738567e&#39;, &#39;0a8a808b7573c9aa6d8776315e440f0a01d92099&#39;, &#39;5729e7189fbdd652a8d9320749ae1f3329499de1&#39;, &#39;648b011b0eaca5129c1ba4d2d628c49f80b48a2b&#39;, &#39;e140a61e42457930414c7014ae93134c639ab361&#39;, &#39;9cb34269f1fd702c62ff0b0626fe4f5909d1c374&#39;, &#39;1a0714e9ed87a7781fd37f78e24aca42479d0366&#39;, &#39;9b073fd1a7b45e6c32f4eeb0bfdb0ee190d8d932&#39;, &#39;a8adaaa1454d9cb1154ce7542b6f4a6323354fc4&#39;, &#39;ae02588bb8408efa142224e22d0c249291406456&#39;, &#39;8353633b7650d4bd0791c39c7700130171893913&#39;, &#39;46e41c5b0fa99c307fed72f3897fa95e1c00e99e&#39;, &#39;a860e453cef50a6da0ffb2f6ac1c5a1a3a3f9b99&#39;, &#39;f56bd17dcff9b1cee993bf876008c77d82697374&#39;, &#39;54b301fc9a4f230cccf943a804e5f6813b2c4a70&#39;, &#39;ba164b2d1150de7490efff5f89325390c94254b4&#39;, &#39;9e5c07c6b2a62f53fda9f02898f3bf171e9d5b70&#39;, &#39;20b77b20d3f1c3c0f6d94ba8d6c72d71f772ac1f&#39;, &#39;52e44a9e326c1eeb817921994302767339961180&#39;, &#39;922c137b1fe865308051cbef4ac05a74716d7ecf&#39;, &#39;9e2c9d5226c4ee5f7c4ae863657ea0d205c31564&#39;, &#39;786fee11a78a4893c5731e58569df50d9523e159&#39;, &#39;04205eec31bdd3979d0699265679f1a285a6a783&#39;, &#39;0663c7a9f9db239193d0ded59fda69719fe212c2&#39;, &#39;4b4fe5f7c95d4c008338796b19e8b6f2cc82b92a&#39;, &#39;39d2f189adeb03e4360e9f8f0343a89b043ab283&#39;, &#39;a51780079924800e31df354b68a9c92143cb9917&#39;, &#39;eade43e265f9d92aae6043cbe64b8ac090832ffd&#39;, &#39;901f30ffbb32c789a24011653161fd7795a8716d&#39;, &#39;c96c967a7123b9ea1ef81d936c8d428284d2e73d&#39;, &#39;c4eb4437434243dae8e5c608fec465db35b38ed3&#39;, &#39;f28b0b0dc9703b7c1e1946c52e858427837fa215&#39;, &#39;b31967bb676599174aca08f62c37d2017f61f881&#39;, &#39;dcb7450696855f0f192e3999106e0a0186fc1537&#39;, &#39;c0a358b7f2efbbc36e927004c6e3291b77658d23&#39;, &#39;72831a3d928e802607aa2ef088da5b0c3777f7e3&#39;, &#39;9aadc5a566fde4cfb7b80fba1f05a7c2bb8f19be&#39;, &#39;685cbdc4b9160509a8f7365336b7d2a4868d30a0&#39;, &#39;a1ba7c116925d1820e409fd97e856b81b5fc7230&#39;, &#39;b78b64131b4f15dc7fc9d88d70f64d68e5e6a716&#39;, &#39;51a16234a8b03665d9a266a20e35f78db2115948&#39;, &#39;9f3aa129a56e1e9789ba1784e2dc2ed4cbfd8e1f&#39;, &#39;6f6885ded19431e99b979a408b934a454962c9ee&#39;, &#39;f69e2afb1853826a9a671c1ab998585b85a39412&#39;, &#39;b7c3a83327da02a32a4551e168e15b8ee2c622f7&#39;, &#39;4562ba76ab87c098d720a8be1c5e0296d450d030&#39;, &#39;13d5d5963d95be8cdb643c77546ec05b167ed533&#39;, &#39;5434ff4a774ac94b185c50545eab45ab49f776df&#39;, &#39;fe88c6b79aaa62816d6a05d80f03ab2d431cfb53&#39;, &#39;b2493dbd2aa97bf216cc7138c22426eca520be85&#39;, &#39;2cd0520aa852a5a55f28b08fe1a58b45b423c08b&#39;, &#39;97f0a0dcc521ae150c7ccc1931db0255e6edb4bf&#39;, &#39;ed0d7be537884ac6bde5909b994a6bf3be58bee7&#39;, &#39;65d757ea9b7a6726b5df0090bfb05dbde921de8a&#39;, &#39;6bf20a6f91a879dc0e0c69b4707960cc85280ba5&#39;, &#39;0835b3771cbf57e9d9d0c1fb31fe7417ad8c91bd&#39;, &#39;d76d22f8dcf2fb00a9d7f26e54b3a1c26714439a&#39;, &#39;6129646055c411dfcf2c1609e170d6b54bba45e5&#39;, &#39;250d5da61dc57994cf31afd857e4ecf18118a08b&#39;, &#39;a73d1de46442f2739dd9d6c2cf23261ef0cf4091&#39;, &#39;92c0ba25bae9b23e56b904d1bebf340752e15231&#39;, &#39;cb85afa520b518e7b434eb9595b1a1cf49e9e9e8&#39;, &#39;97c6ec1c658e8f59517159be632449550041494e&#39;, &#39;7018bb6c2a0e69f130191f5e984d91fa43bfeaad&#39;, &#39;38a150108bcf9018b3bd0e40082be1fcac16dcb6&#39;, &#39;e3c37657f00dfbfa31ef3a7970dd2b1af7b4565a&#39;, &#39;2cfab519c32db4701a182f14612421c6ea911362&#39;, &#39;2d4d9e748600c4f19e4fd9dca0750ce949f31def&#39;, &#39;256bb8957e202c4297c12faf845e1f29fbb97b9e&#39;, &#39;274c9c1722f4a5364b9dbce3015b2017b5d83360&#39;, &#39;853e204225e3fafed56b6f5516f1a4fac481bddd&#39;, &#39;ba714614eda04a52becf5f39f154561532db98c3&#39;, &#39;410b4d9f8c6cc9694503a02e9ec357a4a72af900&#39;, &#39;7fea16743f3ba7cc17ca6473ece1a4fcc884f52d&#39;, &#39;a7cafa8bc90787faceae550cabb45123ddb1913a&#39;, &#39;4619b5e3afcf02a208c6859afab35d9c6b813cea&#39;, &#39;e51517adc72b2ee1cd5de53d90f04b0fa8e3caf7&#39;, &#39;e763b6d8788ddb2cba214f94a00e0f7ede7ef2f6&#39;, &#39;e0553d819164718a27d692e67e3109749ea5ae68&#39;, &#39;21cd4ab1b37196f07bfa0b105d2ace22ffd4726b&#39;, &#39;e9f71d4b20b8d689fc6aa0f8d882a2ed97be6f6d&#39;, &#39;9cd6d6eaf61d4e1c011da1ae09d7d14fd813cf2c&#39;, &#39;9a17bffedf754213e3a8643a5275569861414d7c&#39;, &#39;a5397d46a25b5d05fe6566e39268f1c29761cca3&#39;, &#39;5a222ab65fffde75ad52f00e0e89171820f0e87d&#39;, &#39;422ca07bd6bd11fd69e24bdeb73ca4281ac65a96&#39;, &#39;0adce9822921f4276051735fece81823cb486f21&#39;, &#39;5478ce1a7f6076291544c9fd45e57379858760f8&#39;, &#39;a85b1dd9ce650e87d11afacf41f9e60f53ecfc23&#39;, &#39;d7d7331c3dcbcb9d43bacb038abbb51cf15053be&#39;, &#39;145bc360bd87276fefdd4e8910fdc3c4af711765&#39;, &#39;0f60558e35190f5ba2290d0ca9c271bc539a705c&#39;, &#39;92e9162b0a9877f7294d53ecb1a95cec52c10313&#39;, &#39;e780e6f8e16e7a3d5110b21c12a7ede09ea74389&#39;, &#39;a8d44e1fe4c1f2ddbe4a9ed31ca745457e1a24ea&#39;, &#39;5c98b8e82f05c096d936026c75464235678344ea&#39;, &#39;5e31642591e101e8d3397f0237c6581a74cc4553&#39;, &#39;b92973b772fa0cf65744520a3720637b8befb0b2&#39;, &#39;75bdca31767124a1b7a9a47829ac113a5b3ade65&#39;, &#39;c14a4c7f0b7dd4d8e73fca2b8685d1bc8298ad66&#39;, &#39;47aa231818578f91d370227756c9fc924d16507e&#39;, &#39;79f2607636e4ce20c8d331bb529b562ba1d9c416&#39;, &#39;efb846f1d5f263fbe9a253b8879c90ff8b197087&#39;, &#39;3604e2f93e86e3b8729e275c89ca5d7a7c31e86c&#39;, &#39;a0ecbdc5f9d76182e811f6f48429dbdeb67425fe&#39;, &#39;a279c77a668df8ae8791a65720e2939f858c67c5&#39;, &#39;3325b31b0a74cedc5fcf8cfd49e93392b8e78f40&#39;, &#39;feb80a5ae6821051b79150c4d36f972a1154ff65&#39;, &#39;c184532aef858e76573879fe352339caac8d923b&#39;, &#39;e4a8d5dd0167f94ae2509ff78d3826ed13fdfcb8&#39;, &#39;1be1489b739dbd3216210d648d53299d2220ef86&#39;, &#39;f027d6eb3ce4c612062adfb665345f64c5c9a230&#39;, &#39;dc8561987ae745cdd65ac35f753dad3c5de5bf15&#39;, &#39;8897fb616c7a29da18bd9e3c355464723220f0fd&#39;, &#39;cba7deeaaf1bc3f2409995813fbce49f0be10851&#39;, &#39;dcbae6a11c280d31f6ef95b3c6b96939c5aa5b67&#39;, &#39;f514643e443b6fd78c566a8ec42995968c7958f0&#39;, &#39;e5e0b52f3a9e52bd4fcdb2706e1742da5207151b&#39;, &#39;71ef35704231f58c1761768db674e10aac5ac390&#39;, &#39;edc25bc67f838471e96570d3e3a6160d947289f0&#39;, &#39;b2257178ef6502967666e2ac712450d0eeb77337&#39;, &#39;9d9324ce7d003d8bcbcb864bb61336bcaccc53ff&#39;, &#39;9e350f4fc2e05161092815d2f271ecc46b30d0e9&#39;, &#39;af107abbd4c50bed509016ad81e708f98583e362&#39;, &#39;4e50ff3b1ddf88993c02bb1ed5be7fbc65c6ea21&#39;, &#39;32b50b6bc51ee3a0c25af91a008132f000748842&#39;, &#39;b587d663a45706202fe25b33d591ecdbb7589ac4&#39;, &#39;d4c61a055287f9904ce804ce02bdbde73d959388&#39;, &#39;70495042469549715b97fb6caa9f46230f203132&#39;, &#39;ad792313bc0e781f8566d99e7a5c7b65633fb823&#39;, &#39;eb4ce02a8b4cff98617adb78565b8025766b1b5e&#39;, &#39;92ac98508fbfc778f5c7a043ae592c1b5fa334d9&#39;, &#39;8ecfd1e2fb99517cb2b0170139962dad5638a596&#39;, &#39;b71956b192a7b39a61649ab57731b01e38243809&#39;, &#39;6e0cb2d368afc3068de99bfa091f7785a2159017&#39;, &#39;c9000d60c4d38bf908eba33085b2bf66de7dbf99&#39;, &#39;a6d06ab3b5516d52001e693edc04d49e6978cc6f&#39;, &#39;4491a7b7730d6f18dcaf84981764c599455bef88&#39;, &#39;39c7b848126fdcbeda4ce9dc25fac68a63cdcbce&#39;, &#39;dc618619e19d63820811ad759c9f32fec124bc98&#39;, &#39;b8e4fbdcd5d11dd07c70921fefc69994e218ae7f&#39;, &#39;f0f4a21423ae4d204029144e3543ce79896da125&#39;, &#39;25e11148b7c08eb4ef2171728e2bff9106f9de43&#39;, &#39;826c7e8fe109821809737ff6d0be3875da47d785&#39;, &#39;6f86b13f1b98d2a78fa0b16eed21e562f028d507&#39;, &#39;b0bd0a4aa7b52d14770fb56ef38085a7f6849ab3&#39;, &#39;fd013724d6fb62331d6c24ff05e45ec4410e12c3&#39;, &#39;28d5df8189791a774694af3ca942f966e2cb79aa&#39;, &#39;307f1067de1f783b11db23e1a8e97febdbbbfba2&#39;, &#39;289cd267a48429575f47e4c2d1882a8104f91b6e&#39;, &#39;e64a5db3518e3082d69e4eb33e1f2beb5566e448&#39;, &#39;4b9eb1907f9cea4d9c1288c44cb0be9f2bad5806&#39;, &#39;dd64b813892e71db3a8156540aa214a3404186b0&#39;, &#39;d5aab5920758f83ed95bd7ad25558abdf4b86394&#39;, &#39;f0532dbd6e5e84d02f324850d7f834055ac67030&#39;, &#39;0e52a27083b550879497a00910c7caa44e08b099&#39;, &#39;8fd208466dc07791ecdb1cffe29856a7a4dc4826&#39;, &#39;fe1858e32ffddc68e8e9d9697615cdf067ad02d8&#39;, &#39;9eb5f0163985d77eb199ae19f1ef531877e0c8fa&#39;, &#39;cf478dab4d829497e7ecd79e442dd4c306248f78&#39;, &#39;2c49b7b5f0fadcd28844a2d59d091ee1e2f5656f&#39;, &#39;8182c53c70b0e22c1abb55ff40d21a0350069061&#39;, &#39;ecde54f04023ec1337185aec7baf643f21dd56c7&#39;, &#39;178a883ec366b0cab64e344be7c9eacd7b6b2416&#39;, &#39;3df43f64ee521e5170130bf7b8ebdbd5a696ff36&#39;, &#39;14663e9662c6a92429246d9eac12daa4c35725c7&#39;, &#39;d32c15c24683cb8b75b1dcd00825bb05881d16ce&#39;, &#39;95fc531aefeb69a7647ff138aae063997f04236e&#39;, &#39;5eeceb2f8cde7a499d62aa98d92fbddab7d215e8&#39;, &#39;4d0980f9a4d8bcb2c29922cae3cdd63f844878cc&#39;, &#39;a537c7d356ff6d27588167d21a296681baa63a65&#39;, &#39;39ba20b01f1967a481db3377682e20184248ca83&#39;, &#39;222f2a04c9cc15dd4b480330f01ab868025a104a&#39;, &#39;33995491d169438573b822534a6628cea16f915a&#39;, &#39;2673c9c0df86b4a0af13acc953531a8936fc1a0f&#39;, &#39;750bda82fac98a862fe76f21f96e45b9649131fb&#39;, &#39;8a3435b7da009f5fe009252cd7a8ade193416a25&#39;, &#39;b5dff9adab88fa13027120484e9bde04d8702dd5&#39;, &#39;c721f9385c28c9293ea2ec41b05337a87cff3d81&#39;, &#39;2c893524c2edb641897dafdc31ae39af7d450777&#39;, &#39;caebe5d16ddc610fe7415393bc7bd182484dfc3b&#39;, &#39;a677293ed0b60fcde12b59de57ebae277f906539&#39;, &#39;423959ad45f89dac922f4d33cbbd5d7c2c0d7d13&#39;, &#39;c40995135cc2207deb40a006bce0b0a6a541d100&#39;, &#39;3a700f213d77585719eeb0625a65dda58b2a0c5a&#39;, &#39;881e93636862e6732a259c7d67d2932805839648&#39;, &#39;b12f5e6a2aa8dca21f2e795329b41089c8d16a08&#39;, &#39;8acff2a6c3042361d4ae50dc670a30e60b505144&#39;, &#39;288f8ba6793c7d6a19477acf6488c2b3aa4b7116&#39;, &#39;d926239f4abcf11eb8eded5f002835074b970960&#39;, &#39;f64aa9de02f94c450574db157f49d87910189298&#39;, &#39;6de2437c1202ea1f6a059d3469888f664a317d93&#39;, &#39;d771cd6b1a935cf57cace4b29a0fd36b7fca4c42&#39;, &#39;df06d6ff2ab7eec9ed7f0c97f39e2ec03275492b&#39;, &#39;1ff2aed6b7fbb3071a5e290b3c2f2a55e20ad4e2&#39;, &#39;d6244e2853a621a925f3ae7e92376de8090895b7&#39;, &#39;c0e2b2c2d935dd090e78be21c6e1dfad813ed699&#39;, &#39;1ee8a7594bf4a0d3ed66f425846212e9a2f35923&#39;, &#39;1f173f8ba7151697a2bd7f354a41549a26a17a87&#39;, &#39;c53d920bacc1fd1b36bc850f940f47ca02ec3017&#39;, &#39;959199188be578116f7f4ba551a1860e8c9c8e41&#39;, &#39;b5a1aa8bd00736a003a68e31929ab464447d5098&#39;, &#39;4803acb5a6f6f9db7ce06df3b0bbb10b4d4164cc&#39;, &#39;aad405f87fc542d0d2f0f0d149ff6ebe45adf25d&#39;, &#39;3fde661d78c828c107625a2618a6cada83507aa4&#39;, &#39;f315d028e49ff0fb43013e52529cd51f06f6552b&#39;, &#39;006697e1d6d28c4fa4480bbf9cfed7a53d0bc7ec&#39;, &#39;6819af1db8be4e42b1dcbb7914f53153150d2ff0&#39;, &#39;ce144be3d6959d5dae04e9007c56ccfa3d6fe711&#39;, &#39;9857a51a536bdcaac619207db9df69a926d4b8a1&#39;, &#39;7db295a3a983df9dfaa97c56575d0cc78abf9887&#39;, &#39;24a4b7ca2e6daf0fa171bc75c37f5c2fbade206d&#39;, &#39;b8278895d120763f25887de135c694d9ef4533cb&#39;, &#39;23bc114a6841602cadf184add8a1b96cce024bf1&#39;, &#39;fb492586cf9ac11870231baf9153fbc000f7d724&#39;, &#39;21edcf24fb7b9b287ceb7b448c9204ed84edc4af&#39;, &#39;2c8615b5c4b2645b63d5133c941568e49471d86b&#39;, &#39;7b3ed36ed1a93f0de52112b4a212675b84046e67&#39;, &#39;c73d7c8954cc28b8ac0dc87e1a9532b67ea14566&#39;, &#39;5803e75187ba250d001889cc14b9ab64e00048ec&#39;, &#39;a02dd0276814ef33d1732d3b83be70b9ea6d948c&#39;, &#39;081de7a94365cfe3aa65682c1367e8ad2273308d&#39;, &#39;f3c76df258ae5e1a0c80f89b65a52411e842cf88&#39;, &#39;ce794be1050c9fefb3f39b647009b2953f6624a6&#39;, &#39;5875726ef102d587b06e1de39ee05ecb9fddabfb&#39;, &#39;14e5b461666c3675732116e3ca51f3ff13ac7baf&#39;, &#39;54d9795e12236c144faf1ec5c2621021c54f644c&#39;, &#39;b8b4448aa8c951c6dc976d2e3a6d49d14ad99234&#39;, &#39;636ca2d19c874fc9caf2a4caedca1c7c7cbf1b80&#39;, &#39;4dcbc77c16a14fb6fe9b707202024c476915323e&#39;, &#39;7371ee185a0a677a15f9bc95f5d0ef5a37cd4834&#39;, &#39;83980572884b7eed05a05973b31b46d6828fa023&#39;, &#39;b68c7774ff3034a5d7ff89e836d983284f60a564&#39;, &#39;9c6778c8e79123fe1fa01e85ba012516553fce8a&#39;, &#39;5af16f7a3a20009f559284d7b364fe7698d46462&#39;, &#39;e944fc7e4a778dfd314f0baad03c18d4239624f5&#39;, &#39;de0ec211df079a8fa1d6d70d71a3931b4acd3b41&#39;, &#39;44c8b029b2a960a86d672ddaccf0b982625b7c73&#39;, &#39;8a114b5ce3306c659a9993dfc6cd9ba1969b968b&#39;, &#39;abfe106e958de99e338e7898ca41b0417f2f66e4&#39;, &#39;30db21d379531d2ad645445999f8c90e283d1fce&#39;, &#39;9f055af24ccae832f091058e3dc2b68da71a9e54&#39;, &#39;196cf32572c15044949b47258b516d0fed339206&#39;, &#39;2b93618380f0201c64a92662a3dfbe59f9df8fa6&#39;, &#39;8b47b2a05985bb8eed569caccd396e37a18690ba&#39;, &#39;dee586df0aac2d10f6a628462bab94d3e4f5f594&#39;, &#39;5a056f12369af1c17225eb3aee4dfbc741de9442&#39;, &#39;ece817b37144d230bafa4e463325b3c994d87fea&#39;, &#39;b86b1fe637542487bb21e4ac64cfa9b30b32df1d&#39;, &#39;b5371112d4305a7f971858a2a4d950c76a349f77&#39;, &#39;53d3c91d902a6dae0028e603de2d136cc2c1fb90&#39;, &#39;58d74a7221b576c6650ca2f917c22184c4f965b8&#39;, &#39;0afb62cb42878625281b0bb7d3597bdd523ebc3b&#39;, &#39;2f056c6ddc10053f571b46a9d6a32895bf821aca&#39;, &#39;77efdd8acf1e11e207bad457876cba3ada398f36&#39;, &#39;dfe3246de535a2e338497dde2a27c221758602fb&#39;, &#39;3f3f2f7d915cef5834d91a80125340c8a152c590&#39;, &#39;871633097e654fee7d2d6a902cebf239926064cc&#39;, &#39;9de71065d63aa70d47e976d659089322e6b72940&#39;, &#39;307316550983e89d2f2d10e7217f5e894b5e00b8&#39;, &#39;7f902581e9ad55c3799da810213c2ad8c34f870c&#39;, &#39;9d35ea31c2522bc013ad61d3fe6a0fcd584afc82&#39;, &#39;358ab90acec6a0dcfad3941b2fc605f7104dd9c3&#39;, &#39;28170c1d974335230b1ba784b4c3af0bf260fdcb&#39;, &#39;723f3d9f64d8181e11b6bb8b9ae39682a399ed46&#39;, &#39;19cc291d01c7c79789dd0d0c3a260def8d8f61ad&#39;, &#39;5ace4ed56988d5dbcee7ecc1f8da13f62c7a48df&#39;, &#39;0f528bb1158ec724b5743101f4a1965438d4530a&#39;, &#39;323c7b19cf65ac2bc9f1f9a7858d2f7c8983601e&#39;, &#39;15155f19142cae5872ecf9ab8cd97ce74c4819b7&#39;, &#39;f27c9c0d967010b8588305c6c4025a4e5cad1a5d&#39;, &#39;22b02c4cd8fa857ea2d34b256685d309f5782460&#39;, &#39;8cde5b615515ca4a6703b33c85eb1b699929cef9&#39;, &#39;90cf9fa94f7e772572c5a1ea057eeeb0f7db3214&#39;, &#39;bd812377800b3315b53fc433963aa2847253ea57&#39;, &#39;77fd0e7f42b8dd064a5d563fd585555b3f466887&#39;, &#39;011bbffd8c724c19c149a7742fdf99259d102c4e&#39;, &#39;d029d785dc77978014c857d41d0ed487f49ddfcd&#39;, &#39;7c96badbb63730260895c02b8d0b5e88196dd163&#39;, &#39;e3a5e24b4ce09b4346db82dbbc904c9ac36faa0b&#39;, &#39;264559583eb8ca1d6b5ebb48d827814675536747&#39;, &#39;c390e00bdebaadfdec4ea7302fc45044d543e0cc&#39;, &#39;e7aa5f51ccc69772913781f0ba9d07dd1136d22f&#39;, &#39;e83779d2414f9ea6206445bb8ea27e9a6db51f56&#39;, &#39;f341f249aa318e474c2e07ff4ba6165c8127213d&#39;, &#39;204bcb20f64fd9b7417db423b9bff931e026f7ab&#39;, &#39;0d312127c09abb7fd015eb915f0f97947ddb67aa&#39;, &#39;55e0faa99e2601f16039f7525033808b88b283c1&#39;, &#39;93d20ac4378f4645c184dd62033bbfba9b313f49&#39;, &#39;095a976de08fc2ab298f09bca6493e8fcbdfb0da&#39;, &#39;61a95d05b319fe8b402e663c8015b6a7a31313bd&#39;, &#39;e03c5be33fad092fac4432801317dd78fea2931c&#39;, &#39;c7c57501590ae6d8b4391d14c2f9456ddea2a5f3&#39;, &#39;821aaee20421a08cc503387350239d8c8ce38600&#39;, &#39;09ff6546b194824995a7f83fa11a3a6a7006e4d3&#39;, &#39;2fa3bc7d5dd14de7cf65acef54cd2d11a523b997&#39;, &#39;d5918e4ce2f617fa9665959c95fdb7ecdde9a1b6&#39;, &#39;36381836ae6b289c67917357623d7b9312ce8381&#39;, &#39;7e58332d723f6b11c2f801e3a887ff3b0cbb9ae2&#39;, &#39;360de6d7c3f4127945a136c9bfe7735f7b641a87&#39;, &#39;920b431fb3dd39bc9ce5740530a394a9359e5c08&#39;, &#39;a50c5bf4b74dc8117e2dbfee30b88927ff7902a6&#39;, &#39;3b21f28c03eba12ba45b7e9ed341755b0925dd98&#39;, &#39;01a86e2d1f918e37556ae5e8e67c919c35215772&#39;, &#39;9004d8fb4d3d6f550d2650c93b655fae408210d8&#39;, &#39;86efa762d51b7865731566fe9bf7cb6b30957f03&#39;, &#39;bbe426c7b9ac36bae842a361f1ae0dfe1407d4ed&#39;, &#39;a2563c3ab5fde392654feb9e671129f189686170&#39;, &#39;e0f5f1fe913396a201078868c77dc1f1b72ec1d8&#39;, &#39;3727616bd86f356bd5e9669a62e7c33950306144&#39;, &#39;37f6f7a34500d888d504c69860f385d1710f22b3&#39;, &#39;3ee8770c2fd847d888316178663ce125b27874fa&#39;, &#39;d7e2092562b57c658005fbd9fe4057fa79751401&#39;, &#39;846e7a0217c8466bd5859618e6a98c435dcfae68&#39;, &#39;b040744e8012be67ce6087b10238996360732d5e&#39;, &#39;e18c8019e02aeb482170a9d5680a133a5ad75009&#39;, &#39;2e811ba2cf3f54e920b35f4cba43e79d4af1d6ec&#39;, &#39;bb006e974046ca0e17213fee635bce7fe3e476db&#39;, &#39;a8b757389e1c66a7e0a8abbb3caf2ef1e3305c32&#39;, &#39;09d155294127ded63891c374d190710672cb36ba&#39;, &#39;c41464f13f26fcaa3d3dcb8223fc7bd50ef290b1&#39;, &#39;a16e4de083b2cfe62c8145badd8c9eb95ebcf25e&#39;, &#39;bfd9700b6f9f446006cd0f08c57969d6f470494f&#39;, &#39;4ba5e257955910bd833edceea07b511ced9448ad&#39;, &#39;dc484d5cea78f4d34b35a903263770c09c4298ce&#39;, &#39;9828e06445cd0a1aaf089b6a87ef8f0a704d8fd5&#39;, &#39;1e5bdc3abcf519b67e6cba44271897f3b05dbdb3&#39;, &#39;d4736e34c63b9d0f0ea1b761179928bff66c67e9&#39;, &#39;9b3a0be24b030198ad62d039b44fa648961948fa&#39;, &#39;3f5fee314ad9b3aee380cb07839225cc1e16c787&#39;, &#39;2a873773c4f3a8805d10dc919169106c7f5d03c4&#39;, &#39;3ceb4de35f48a43562fb1d34397452a01c058d8e&#39;, &#39;fe0a06584dc9df961faed8d5b40e2ebc07d9afec&#39;, &#39;6e2bf8873ccf8e8542b2203ceea5cbd7018d9c80&#39;, &#39;3f6d550ab621afbfcb60591847a434b7172ca409&#39;, &#39;00eb29bf4aee9126023b9953b032df7578991de1&#39;, &#39;04529c511471e65f848cddfd3de612aed68aeb3f&#39;, &#39;cc7501b9033df909c3497abe4bb00c12b4491e07&#39;, &#39;1e04d26332c1fc80059786ca829e2684d1136468&#39;, &#39;6e5d1f792f15e710954d487c0a1db0d8307e75e5&#39;, &#39;41aff4e8e654b6b153efb3838d34e40a4bb80cfd&#39;, &#39;891c664b3e157fa53d2c06c656c2ef99c34f99cc&#39;, &#39;914a5c9ec02e5644b1c184b72fcb1153daaa92bc&#39;, &#39;8982c9e89b59f70c1f1afd785909efb018e980d8&#39;, &#39;c5292b451aa87eef4abfcd8264e03e1d787b3f8c&#39;, &#39;c3e76137c516aed8f82b06fa92747ccf062d5bd8&#39;, &#39;9a2e04e3990f42aadf38ba3feb557a0254aae5d1&#39;, &#39;4321b2cdc71d9797a4f92638503fa782efc8220f&#39;, &#39;269627afae50ed7bf4cdc51edb72a6ad56677a8a&#39;, &#39;68eece79cb854d6922e239f2d0493fb32585a035&#39;, &#39;dcad767b1dc43a9ddcc4372774af13c312cc8556&#39;, &#39;7a685c22cb0b964a0216b67b1e84bf65c5a4edc8&#39;, &#39;9c080b1a090902640413c0bca57e1bb71a81ff33&#39;, &#39;0e6be200d63a3d7b3d7e09e85560ccacc7c0282d&#39;, &#39;e10d196fd47c4b16592499f8008d598ef96aed15&#39;, &#39;5faaf1aaae708ee590070a3099642c8e3bc3640c&#39;, &#39;31a0a7b3c5d8b90b42969628fdcc7adf58ae15a2&#39;, &#39;aa339f4b841c25c3b2a3384caf1289367ff8a27c&#39;, &#39;56b5add25fd154b7ebadb09a1aad0dd20d4d81cb&#39;, &#39;c57788baaec9453b92dca578719ad86fb2143fdc&#39;, &#39;b1dce3272d05a90d7aed86ed81b4ba86ac883c35&#39;, &#39;28239aff012a9cdd16a02e37241e0065cdd8fe37&#39;, &#39;550e4c2ce2663dcc43caf68d81181732b2095c76&#39;, &#39;048ffbe8db0f993ff66a1b9eda291db66af312b7&#39;, &#39;be835034cf0f32e74323a390d97f2a245c8d69a8&#39;, &#39;27c28a13dac80a9978025ed7b4a65be336cb6be9&#39;, &#39;c565f6de5a62046b9bbbc467468b527296553595&#39;, &#39;ec4ccae753f420b6b3624419d2661b055085dd71&#39;, &#39;903cb052a1243839ddaf6bf558647a1924f80165&#39;, &#39;75fe511dae496dae362f414cf41b5bfda7996787&#39;, &#39;f5491039836ede84196553e156edaa6cd958fc8a&#39;, &#39;61316155e55be30fcde98ffd06ad8c9f11ee6b1b&#39;, &#39;0e501e6157bb4beba438c57290f46e509251ab4e&#39;, &#39;dbdeb5560eea693cae6ef6254b0acd9e6f58725a&#39;, &#39;d3ddb37d07940754c3fac5d598272f21d94717b1&#39;, &#39;e749868c1c79723ba40d7f8ccc7c2a726ee8c0a6&#39;, &#39;70749768df241a3a96dd313f8d6f526515c380c8&#39;, &#39;db0932d4563a553ce89184a4599068c49e31d693&#39;, &#39;9b93e6a77140cc0915f9a069aa1bd1f686fb0d1d&#39;, &#39;44da8d9834f22ce7ace76f6fdac42c397f0e264d&#39;, &#39;080d277946b77dabafac34e8b67fb8f1435b2142&#39;, &#39;a9942a9187ad252099f99f85e623126a040cd57a&#39;, &#39;86e8409c3f0b64423fb32e56b3b6e0eab5b05ea7&#39;, &#39;3052d928a4642ee33622bd2dc0ce94056f46518e&#39;, &#39;0534e09009e2e2e7da6d1fef03382bcc3cfe6791&#39;, &#39;a649e592189819ca60a1abd523dece0e5f248818&#39;, &#39;cb2671fa2930321738b08f0ee4486a6cf1cd43ee&#39;, &#39;34d43a94ac9b68e54298a3c81d9f277ca5a210ce&#39;, &#39;239930a5968ad3f7d3bb9c0141d3726a64378448&#39;, &#39;b3c7c0528a1ddfd0245034e4608e3a267f869a12&#39;, &#39;aaf43ec9554dc2eef2498d0ee226f74026a68365&#39;, &#39;810446524beedf22fc19d5cf8bc01d92c79d773c&#39;, &#39;5a5da9be22d257db8324b0c77e32b9dbbec29771&#39;, &#39;744b658cb267447cebf36a3ac008a0a666f8c132&#39;, &#39;b5b60ca5debc7a0602ee088e76f6a40d9f2114f0&#39;, &#39;b1f2dede7ea1a0284fe9b2d40096e335292b7eff&#39;, &#39;5be40a5e4405cdf87cfbe30361346722f4c902ce&#39;, &#39;b92fef775ba9a2385751898306b41bd9a58f582e&#39;, &#39;3ca4182a92260683e84c900dd32d6daf75d3c22f&#39;, &#39;3eecca4febd8e345d59ea509bc9fb76298dc45b4&#39;, &#39;654dd8ea8713b73f150f3a7893b57e1adee0ae9c&#39;, &#39;fed6cadaf1fe30e173ebc455e22bbc4e7bedc9d3&#39;, &#39;eefab0aacf3cd5dbde6dc7d2aa4e7fdd1b89f34e&#39;, &#39;be7e594ba9a1db1c5b637750fb816c8c78d368ca&#39;, &#39;2670f8f3717797703e2763fa481b85b884121e85&#39;, &#39;75643a23de04a76dcd402a88b536c705836e5f39&#39;, &#39;94bd5985872626893872557fa111a022039598c2&#39;, &#39;0cc5262412c1a1555aefa0ee7a351e84f7764b56&#39;, &#39;fba5797eac27ab2e015318fbdbb6c6a7e4ac3516&#39;, &#39;36464a4ea8f74c7aca009c1ce93a84d2e0581b8f&#39;, &#39;21bbcde7ff87c4371a3b5f7a0a5f168b931458a4&#39;, &#39;2ca822d0bbee2f6d544c71a906e0462a517a8892&#39;, &#39;628fbb7d13d14b4e162ee6d1020b5f679226a2c6&#39;, &#39;4b08935a50e0a6a7e9c8fdaca4d683b535c17fcb&#39;, &#39;ad98af6952a9cb6d65bd33d90d57dae95a78dba5&#39;, &#39;3156b7233bcb3f5b7454c4de58951c0655dccb51&#39;, &#39;a49852a0dbad29f451c7166be5610570346b6f7b&#39;, &#39;a5c6eb861d491198defe9a7a0c040086f824145f&#39;, &#39;e79c208f6824c4e9659b96b727fbfcae7b8b5144&#39;, &#39;729a0c8b5d8608cc794011b5fed17d71b0c2a9cf&#39;, &#39;200bd86271c97b406ecbb2e276db39ae768345dd&#39;, &#39;bcd94b0cdeaf266231447d895ca1de78e24cb98b&#39;, &#39;f9571c909700d40887c52ff08ca817e93e5b6136&#39;, &#39;b2769dd4875b659144ae5cd81f197126dde5d852&#39;, &#39;85035127884629ce4d6be7a46e3a9bec3e510a65&#39;, &#39;0adaf17987a51579ce056c06a9486b6a5d228427&#39;, &#39;fa6712e8d72803d1db199901f4ee19192346c5df&#39;, &#39;2f5ace8408d04db6f3347d0d4ef24bee861bb345&#39;, &#39;c775acc5ab981625c5b76a80a67c23fab354b087&#39;, &#39;e02d61de3d7ee85639bb91a11ad2e768b808f43c&#39;, &#39;6cbf300c5bf28d09957ec0e84a9e9551af4bf98b&#39;, &#39;a5dc795ac3d5b823557796cc28fa31c0431fd03f&#39;, &#39;11f31e8d57fc8b7a7d9b04ca3969deb047589e27&#39;, &#39;c71feba6c227d375cb226ceb45b5d83b5381ca7a&#39;, &#39;2a07eb9c0bd47062af0da12d366d3d6e422b309b&#39;, &#39;97e370c23064fc8db86e42d5cdef78f16d676113&#39;, &#39;325f6f1d2987d34cacd81f3d62c009f03b571cba&#39;, &#39;66b1cd1ee8253e859f7c6d703440da59a37a82e3&#39;, &#39;bab405a208a30a29d244fd9710ba0076536c160d&#39;, &#39;7ffe976a459fd70a5a407ebd31f204f4ff297822&#39;, &#39;0880ac71018897b31f8ec500d36b8c57708f6da8&#39;, &#39;d8869a3fc2039968b69dfc910014e28b7bca30d8&#39;, &#39;7b4d0f42af47a9be1e137a1ba4aad7bfbfea729f&#39;, &#39;e295e7b1ee34d2546f1f0df2c60b0c5a46130ad3&#39;, &#39;8184883be5b11983bec22a8aed4e670178145962&#39;, &#39;f398cb0ec76428a9a977552752d8da7bd08c69ec&#39;, &#39;ab4749fae2fc3a5e62c6866f697c86c4d8e8e9ea&#39;, &#39;c751d171a2b32be1ef090cebb3a467901755f91f&#39;, &#39;419180a2701ca1b497ab2ef591488f42bdcfc19a&#39;, &#39;687573ada83158325b6601a9691da01e140f778b&#39;, &#39;b68c6ce7c2e93877fcb8f8950864800d1ad89e20&#39;, &#39;5f99b9868890993bc50e7dcd8a9a248c59c5b050&#39;, &#39;9ab57a880417025493ef8813ad965c1cedaedff2&#39;, &#39;5a1072dbcf7161df81858434bbedaec04ae29928&#39;, &#39;ab3a30e240d5a3485c16e20ec02d1a3548d45ea6&#39;, &#39;ff11a3d7d205867e441ae37f4cc55287efbe473c&#39;, &#39;1b86b6c5f2ffa74348d48ce31a39d3166029bb1d&#39;, &#39;f98e7fe157d0d769321f7e902f3d18a61cc488d5&#39;, &#39;9f3f440a563ab10e82a4fbf2e35329db384e1581&#39;, &#39;8c7d0dbb3af4dae16c6d2e0274b0b38996b820cd&#39;, &#39;f3d98706e3eebee58ccb83414a2e50a2452872dd&#39;, &#39;bf882541c8c721fabe4edc142b18e384ebc3b761&#39;, &#39;f25ecb9499149d61496c22cb52e88a6eb4acada9&#39;, &#39;fd76c3eb53ce46a0b40e4eeb6f5785ac5c6e7278&#39;, &#39;c02a40663dbd52d7f51bb6affa7f002a569f43b9&#39;, &#39;94c8412a2467338175963955c9a5daec8c834659&#39;, &#39;53f7ac45da34de030419d95d2ed703671d6a0e78&#39;, &#39;98412781fdd89b6cf0a6f0876485ccf7df04b414&#39;, &#39;468f02a6fc657fe01bbabe8506c6c7ec2f49501b&#39;, &#39;14d0c35ef47abe0f738137e216243e8edf9b065d&#39;, &#39;2018f07ce8b8fba3be86af428aee50915e014a04&#39;, &#39;dcfc25871f66111ed5625e8d04534756c3bf5f6f&#39;, &#39;348565a73b0c4651b339a6744cc8ed8f83d44875&#39;, &#39;fc5ff866ba8455426fd0ed60e60f8d74ff7dc335&#39;, &#39;350b7da822f658ba543d8e3408ff7f80599b6dc2&#39;, &#39;6945cddb4389533c8c0ebb4403bd53f044780e38&#39;, &#39;baa44e0fce121a29176e4001ba14d5cffa049932&#39;, &#39;a2c0ed370d6729c7a387f2495450c6cd5d4a3094&#39;, &#39;c63f1e6237fde4f2b1625f4b7bb093f3fb4405fc&#39;, &#39;920044475d545375183038996c7c82c04dc24efe&#39;, &#39;4955da4064e21e15f8d5bf2f2d6691470ec91acb&#39;, &#39;bffd48ff5480912834d063f24cb0b7648b97e3e1&#39;, &#39;71a9dd38bfce9b5777a35d6e0be8b9c57546f7dc&#39;, &#39;f5ec4807e6c848ba05833351977aec690748278e&#39;, &#39;15108491bf4a654c517ac58f47ddbfaebead85bf&#39;, &#39;6a0cba910c8461674a371ed72ed4326892b37f93&#39;, &#39;3942c2b39ae2ecd1039422f28cce95a9638a8211&#39;, &#39;42beb3df3d322c22dcad974dbeb2e2401f58d6ca&#39;, &#39;722dad3cabb69dd6af649c09fbb5fb69e8a2e1c6&#39;, &#39;a0dbb0944cb48b682a794ce5c1c7c47de050962f&#39;, &#39;6f69c218cc8e987963877e7762631b3933f4ff8b&#39;, &#39;635b4b51db54716b81fc889ca3b404e388836a47&#39;, &#39;babda2ebd98d9f8c6f9913b71e9d132bba27b81e&#39;, &#39;96cd546c9636a0b6ed808613cb71bd3faf749133&#39;, &#39;e3b5acd3b83dc014ec59e3247ef740825dd3ae4b&#39;, &#39;fe0cba75da9ca9bdaed8b58b271ca9dee80c80d3&#39;, &#39;78f4a0a0bdf7c8c38499ec7176a7861e07db5f4f&#39;, &#39;01dfd5d87e7f1beb5882fc8de2dcd3709512c06f&#39;, &#39;c4dbdd2a22a195e14483a0a981e82616fa717b41&#39;, &#39;bf60a02d7d4b40944c687e198faba8f6fb4cd073&#39;, &#39;a53e8bf18de18c70c15673c9d7c0442de5b33cb2&#39;, &#39;85e202295da93faa23d907a10fa84b7c9f0a1224&#39;, &#39;303cdbae46d531b838a4393f5c3e941427be0f90&#39;, &#39;1219b6bfeace3b422ee112ffc60fffffb24afb28&#39;, &#39;490065dcaf37d3535543e673798626f87ffdf34a&#39;, &#39;cbb52cd68e7991edc481ba08d878659231a80057&#39;, &#39;de5d8ad4b43169b23404d0398a3520afc919a488&#39;, &#39;ac6ed015ea381d246c8ef13aea803af5150c97d9&#39;, &#39;6597fc785f203af35da7b8fff440191528740419&#39;, &#39;dfc806fd77c752e1d4fb8452ffa63a875cd845a8&#39;, &#39;afb820d4873d80397ec32795ea53b35d12dccc9d&#39;, &#39;2e5a0f00d6d5f8dff735b903fb0b774d09a57ce7&#39;, &#39;91c9a11f67f97335856f24e04618a4b31480c8af&#39;, &#39;07605950694c3101de8c298db7dab4cdb4d0d39f&#39;, &#39;9c8e6785852e21d282af8671b6a0596c315bd425&#39;, &#39;13c0b96645154d163a35563b19bd356b9448376f&#39;, &#39;0ce2f70f739fd3f79febe931585de01009d5fcf3&#39;, &#39;67ac9e2fd217a44012a6cad1460872051411fa98&#39;, &#39;f2ef05a98d72dc97faba51701ebbefb0cd078099&#39;, &#39;03bab63257f9d03febacb12037437155f0f0336b&#39;, &#39;c53035e2032a5dfc1311890431b995e511557b14&#39;, &#39;1eaca9f9257e0363e609c886098a1f3a97482137&#39;, &#39;1142a96051c3286d642cf182f5dbaa5b2fccbf65&#39;, &#39;085b508d1fabe097dc6265039e6e3f33cef31e61&#39;, &#39;443aacb29e37932be0120cb91c7e347b64d036c7&#39;, &#39;021509183a65446638d54665a37856a0f9a40580&#39;, &#39;7b42c4dd29b3ec2666a1f6adfb1f2df9e911af52&#39;, &#39;37fdc29adeec1b1526343f48cf167bc9154d3d1d&#39;, &#39;28912e6deb4c3b68306bf50c655f691806d483b4&#39;, &#39;82d275f569ad3af9a608b2dd53756e7b1fc61f0d&#39;, &#39;44b4ecedae84fa85d61803704689527a2a33a0cf&#39;, &#39;c0f268da14cae6ec2f72ea5aecdd03d36585aa23&#39;, &#39;c08c98cff9d4c5e4fbc7a3b4179fb87bf1ca3cbe&#39;, &#39;c522b4259d81a09f2bdb4d69dffcf7a89306d70e&#39;, &#39;14ea6ab6a4a1e272044b2bb3ec02facff13f9749&#39;, &#39;0d3dffad6ff05bed072e452aac9bb5da064c083a&#39;, &#39;d6b5b5d97673915cd9e6926a2dda7f99f728e11f&#39;, &#39;bdf1aa453532856f0ce8396c209bab6811032233&#39;, &#39;1ccdff51da102e11ecaf77513936c5935383348d&#39;, &#39;b31f6dfbcb29eb87670912ad3835677542000c2a&#39;, &#39;0b794cfd589622fc833c29dd5b39f0f155ab6b39&#39;, &#39;ab902cffe96716d1da845130085d1ad539c5a0b1&#39;, &#39;2e47d50706a146fccf1640be4532741688da7e95&#39;, &#39;24974c20d4aea2ce68d27e34a48631a9ae513e25&#39;, &#39;562e5866e0bf5e975db12b441932c7ac711167f1&#39;, &#39;16c81f314a85469a8197cb18d9dd58a3ad956799&#39;, &#39;077b681f6441c8bce8f792fb0c1ad27dd1975793&#39;, &#39;767a11c9b0f0ffd5ee96ac7d3970e6154f84bada&#39;, &#39;50fe25315aab4b52f262275f8aa4432065567bd6&#39;, &#39;f201a1c3ff99b5f133e8086e390fc057fc5ab3cd&#39;, &#39;304be4f1c8238a09fdf1d5b5543df008c089e31a&#39;, &#39;277c961d968586d5b217c91ac11dbd2f110f7f7b&#39;, &#39;8d7e51c057b38d3d0dc7d0bda85560bb84e86c53&#39;, &#39;a02d59aafc008e13fe6eb4a117ea86800be979cc&#39;, &#39;a42f090ad83875c0066ef58743f43f3a101d064c&#39;, &#39;53a30500a0c57928831b633b2fab0b4d9750f91c&#39;, &#39;8fb49911383e265096dfc8ae974513f8d6a275f4&#39;, &#39;f37c4ddbb1136ea7c3153a0e07e9990b3566bcad&#39;, &#39;5c2f6fb6b16b9e2749c1944819bf25555ad35e49&#39;, &#39;36aaaca9848325420ff06ff37c50ce79a83e375e&#39;, &#39;6c363fd908411f1708746f02e269d291d1e4d167&#39;, &#39;fe80f788ffe472d032b021b8c49286ebbfe68170&#39;, &#39;13111195c00a01bdcd4298724e1ea47c0e3cab6f&#39;, &#39;68ce91208b0a750284a0b762eb17ac0ea08b22fb&#39;, &#39;91211e174ca7a2a0323f4d2263a89d77477e082e&#39;, &#39;cdf004704538eebd0c503af40ca2cde95f003ce7&#39;, &#39;089001d5dae06802952209821659d371907bb1cd&#39;, &#39;dd1547aed1a9ecebf20cdb8012c1ffe5e0d80413&#39;, &#39;a8d7090666635338403414004e45ddde411ba812&#39;, &#39;1ac14b40c49c2a5f18b7612dc5e5d2592716a26c&#39;, &#39;9e70eccddcebfbf832f762feabb97dda73ff68b1&#39;, &#39;f75cec3fff800a642ccaa0926eb4d08bb193f3e0&#39;, &#39;5391891722034f2846ba3d0c748ad9b4ace4fa24&#39;, &#39;d9fba2f42577bc4ddd2ac6d9c5087565902479a5&#39;, &#39;f39d6ba0afb99dc5f4f806e881100c7fd2951da0&#39;, &#39;60c4b081f854466a7c9a2bd0eb2c0b47f589be1c&#39;, &#39;6d3f836a3847488e8ff644f63c91808595244d8c&#39;, &#39;8c6e1624454aa13d2db07432531f0a4f22c6743e&#39;, &#39;38002a53dd42d63238a523f12ff8d565b634a042&#39;, &#39;3b02c70d11aa070cb02d4a22146e5faec595ad4f&#39;, &#39;bf41bd13c79f8d7d1036870c7f9b62e25f1db987&#39;, &#39;07e095709c0bd08533facdd8965d64bb292032e0&#39;, &#39;0d4c280f7ba64930399e2834e1e58b61a9fc8778&#39;, &#39;bf14a8370382ded58f0de28161d6bc25b4135369&#39;, &#39;137312aae625006b3734dd1891ed1c2fd2baf458&#39;, &#39;07262d2501664d4cda80c9b72f80e09698c2e91d&#39;, &#39;8a9a14c27b65007b7cf22ac0aa2e2dfa501c4187&#39;, &#39;33f1e09b086662d255c60a5d124f317125d297a2&#39;, &#39;462b6d827c67799391f54694696bc3d6236c371e&#39;, &#39;3f5fee3436d3d433f036860c2b71ec4fdafdc893&#39;, &#39;7d503c7c6ab6b1c231d099ac35e7a3e3a169d9bb&#39;, &#39;5077fbe7b1d8f1b0c99bd923d43fbb94d5bf6930&#39;, &#39;a1d24441bdd979b6ccb1705bc80684fd1d0016c6&#39;, &#39;8ca70173113e912e2d9e0f3e56cb556745695576&#39;, &#39;3ad9e7d74fa1ac067d02cb8136ceaa81e1037803&#39;, &#39;5515663109cc5ba3a91e987e63e33aeac997a29e&#39;, &#39;d228e45c3ccc5b463f6af7a4e344877de578c731&#39;, &#39;0c77dc706fd614423684f6eb4adf369e3e17b4e3&#39;, &#39;bd1286f66005a6661d847a8bfdb41b09c16613ce&#39;, &#39;5529fa81654effae575f058be885ec1bbb05c68f&#39;, &#39;29b41fbd6cb1b108eaced732a432bb6c52a74132&#39;, &#39;042667d59f437fb83275eed3363b245e6dc3d3be&#39;, &#39;9587b6c080716f0a23c60c17083572a21c21fae5&#39;, &#39;d47a315a50e94e4159761400f3c4ea7fb8ebebc4&#39;, &#39;536b5a1f1ac624c8e11fd7b66c1b9017e6369376&#39;, &#39;1b31869336ee92e2b1a6b0dd82c49666cecede70&#39;, &#39;3d1f4110d7be3f4bb8a7c1c2ff274ec49c7f360d&#39;, &#39;ba29fdac0c6c020c754af5f342eb94785e56e2bc&#39;, &#39;d9c3b59be2b68baaeef27c78850ba3b75f32d638&#39;, &#39;39fa91ec0df50cb08699af7a944e2346638d7c75&#39;, &#39;2eeb29708a116dee4f7a78937b46d379e760e7e3&#39;, &#39;ead5186764e108b22b82a42982e2355b47ef7c51&#39;, &#39;048d63b9cb1b97a6cbeacf4b6d8a3d5c13e6c43d&#39;, &#39;2a4c29665502d9dbfd457ad7ddfe41f7e153130f&#39;, &#39;44423817711bd5fc39972b2402899b7d4f2256b8&#39;, &#39;e5fca8706a33446195bef7f4c223d69f22116875&#39;, &#39;d5ad715a4acd2ac4c8c5740dcb2029c619cccbb5&#39;, &#39;ab77b8cca069035153a81fde8d78a1336cd6a20f&#39;, &#39;c7b424482b5822aae083e89444c1579fd21f21a5&#39;, &#39;6bf98c80f4ffead15565deb11cc9344d3e97521e&#39;, &#39;8355b96246d4ecfd0de0b6c5b65277699c22c82c&#39;, &#39;07ccbcf978959dac799b7d3a03cd175f2dad9980&#39;, &#39;e87ef172f48192502532609015387269486b225a&#39;, &#39;92271da2176cb2939b0918c231e27496f434d9c4&#39;, &#39;2d0bb499cadfa4a06565089c5e37e92bb5db1aeb&#39;, &#39;e2385a03156ff7ff3cc902775ae24dbf823aa3d9&#39;, &#39;ef0cb45d466fef799065c54eb8e5924348ef1482&#39;, &#39;c033f340ff81d9f9d5314fbf0de165780d693add&#39;, &#39;4e06299c8692e819a9bb4288840fd51d706e2a40&#39;, &#39;ad652d88615de487bbbf8f2b851e7467295c1103&#39;, &#39;03651ceae19df608401859b7a242b1a0593cbf9b&#39;, &#39;070a8d489a380804973ab8adb0732efe33e3316f&#39;, &#39;970ccbdf8a0550170144d01b4088920ab8693fb6&#39;, &#39;8fa6cab925014715d2c7e93c393886aa9ce78080&#39;, &#39;338b81551063d849c487e4292921d7c909887b3a&#39;, &#39;e2bc6f1e5aabd1a4434f9b447423c31fa565b98a&#39;, &#39;1c46731411c79586c95007a3944c4a451a66669e&#39;, &#39;2963e9545442af07f02bc86c1bc70759f885483b&#39;, &#39;0950ee15e0b948c1c74b25b07d82b65c889ef815&#39;, &#39;c64ff509990bf4658ab320fc127e154dd9c3ab4c&#39;, &#39;f7845abed4f812638bf8013cf054be322cab0cc2&#39;, &#39;85a6586ee00e4aefb4f1aaf383ecbeb78b6f3d32&#39;, &#39;901127e4105545048d01a4421b1b885420c23332&#39;, &#39;a9b981761024688e7fc367d6b52b6673d702f017&#39;, &#39;506f6d0997959b4df767f23a3b3fc587b2f49ce4&#39;, &#39;40604c2dad9e54bcbba35f28a6b35a8f654624a7&#39;, &#39;b9de31ebe20cb85fc883b9d8e21132e5afaa5f40&#39;, &#39;55f53cab246b04c8213adc1a4709cd6c1d32e2e7&#39;, &#39;4e4910e6acf9f76dc96038b17baa0da6ffe7afdd&#39;, &#39;f8d23901dbf0d2434c8bb182b27c04d9abdb1e72&#39;, &#39;34454453c5921e688d253600baaccc7f94e63802&#39;, &#39;b85dc1202cc8d04923a3bcc187ad1d1d669d05f0&#39;, &#39;065c707ea18229cc7b011d0a427cb682418c8ef6&#39;, &#39;31b514489debbfb805cbc3d9bd9ef3119a30edbe&#39;, &#39;403c0f2076de911ebace375f1d4ff23098646505&#39;, &#39;273296b6f713c81107c9ae8c869a2ef5755d7d83&#39;, &#39;47c52e6d2cfc48fcf0bd8d001e43a5e3417cf422&#39;, &#39;83e81269abe87c824a2b2cb3ee268488461942e6&#39;, &#39;de03a9b2ee67c767328a3d3d6286c3dc7568b877&#39;, &#39;45898823decc20443a2e8fa02340de8bf81839ed&#39;, &#39;1f3740cc551d027ad95716d5810d6334a2c46ae6&#39;, &#39;d43f6cfdb6325776c0588d0a9a00339f2123d0ba&#39;, &#39;0b287609b77e056a00094d2a732dcea7db82e8cc&#39;, &#39;53d9da6a9224081485d1ce68fa6a10c2a02789b6&#39;, &#39;6bd666b6ee9d616ae56b97d4d6e4e3766bad435d&#39;, &#39;1ebc8f6f966f6bd5e4027e2d1ed42d3883fd12cc&#39;, &#39;deb0b6262b42e16d265b54df726c6ce87ce9bd6b&#39;, &#39;8294733570f8f8d3d436ce7a852f5d909fc3712e&#39;, &#39;ac26ad6a512110cdeb10a426e027c60524b420f4&#39;, &#39;5a72d5767aa150c6fb280c7414b9ef119b4e1654&#39;, &#39;ef1966161bc369a378c03101b24a3f1c1e2d9a4e&#39;, &#39;a95dd08794afb85f69ad11f4f50825d11e9d72d7&#39;, &#39;0ca45cba409001f935fe0bf220df4403c5256b73&#39;, &#39;740c6f8ed2e0e14de725e10b15fe4d53e37df9eb&#39;, &#39;97e894be617c00c800d23a12c800add05f536abf&#39;, &#39;389880ed798f9ac990a012fe94445f6cda43074e&#39;, &#39;4fb54dcdb3b40f0c1902f46b8e4c89b9c05b0c23&#39;, &#39;f707faffe53680f1d3019938f9a0fa281171275f&#39;, &#39;71e09a3792e3dcebcd146873257b0def1a4f9a52&#39;, &#39;5517c88fdfd3c9015bf332814d595f40654f3906&#39;, &#39;23ed17ea56143bd7ea7972bce1d7bca9ed2afd56&#39;, &#39;8e5db1554985b5ea6cad0e690cbe83870ffa1de4&#39;, &#39;626ffd4f26e74f92e793b81e31e4c719a0f9dd73&#39;, &#39;6de32b0688e14eb9bb5af178ac02c83c0b8f0a57&#39;, &#39;833ac554c52a1c4f7e154df37be7c2e65bc18bbb&#39;, &#39;291a84e1036297aef553bdb3dc15730becb57530&#39;, &#39;10918283013493a4b169e3fdf9f45d4265298b7e&#39;, &#39;d51db6dd810cb39355d69a7dc0f82e35b1597c02&#39;, &#39;dd8c8822ad4aaa5971b47dac34b49431a4a2211d&#39;, &#39;e8e15f48414fac4f85515f031ecb2272427e131c&#39;, &#39;a75eacd10348ff8b6bef4bc397dfc571be21e675&#39;, &#39;ce598a26dd81e578cc41db7e857bd22586f7248a&#39;, &#39;86283521a3f645bf539b63fe2e67280bd7b2458b&#39;, &#39;242d28e1d47aa0cd397cf3dc66b75770c08d472d&#39;, &#39;ac67fa3b2ab3d2e974f80ce5145731f8ef9f5b84&#39;, &#39;0f2e30da15d47249931be670962bed3d4ef6591a&#39;, &#39;230fc9f8329885eeb692352ef935c40a180ad240&#39;, &#39;b2b5020dce1561acb0317bdffbfed96d427ff873&#39;, &#39;36ae7b55f8554d7e51243614bfdbb5c473dc314f&#39;, &#39;c8359cf4687dae72dfce1cca831c830aa570d0ea&#39;, &#39;fb80ef221ae4ba0f57d2429d634b39cb46dbd5f6&#39;, &#39;83145db62c1bc9b70eb6f4721250e5f965fd3180&#39;, &#39;c89e3d3753aff3f431f1a416b5effdd66e0ba458&#39;, &#39;818f6d3a97e6a7a3a6ff554eacb837892efadfe5&#39;, &#39;9b09b90998821ef0df500021627d046995072bff&#39;, &#39;73b8d9cdca425eff5c8e4f844b338a2c7b5e7432&#39;, &#39;807157dc8d7b4e6a2ad13598d10a21e67ce74bf3&#39;, &#39;abb8aecac423732ec4db82bcdf86e82deea60da8&#39;, &#39;dac780644b578c463c66cebec70f40687d3a5917&#39;, &#39;f7e3fcfdd49fa625927ca10fb063834088b70847&#39;, &#39;9c6b3a1a69e1fefa112a0d4b5f7a8036b29a88e8&#39;, &#39;08b3148b617f2607ecbe52cdf252a1203d8d75a8&#39;, &#39;5f63a0ff1f04301f4c732e6770969549c0ed6ed5&#39;, &#39;4f022caf7862f6eb26582f7125e52a6c40c14bdf&#39;, &#39;2c355e8cbfec4d7fba56fb92400aec2f16067820&#39;, &#39;b4643bb2d0f83a5d3050476a7c7ec41a329c8a23&#39;, &#39;8360ebb8ff26a5d4dee1b4a25d3bffd7106f64a8&#39;, &#39;8602dea95957758e9c8eb8046773485c709e3852&#39;, &#39;2cde8b1ce652611f4e5cabc7634d9a0240af6843&#39;, &#39;19db54d038cc76372d8f7a8e97f1e8175afde47e&#39;, &#39;e4d16dd0fbb2de7d0c2c834bf1110fe409cd87be&#39;, &#39;ab7d41878b1a0f3dec42221dcdabda8b707f2648&#39;, &#39;9e153d4721cba6571fb0ee275c883a92556c4977&#39;, &#39;72d50e3dcf12ae8c836c002a27243081eb391918&#39;, &#39;0b0c8e68df4e63c33a07e9a4e66b657ec930c3bd&#39;, &#39;526687971c8a39fe4d15a11ad2cbb4c778dc0535&#39;, &#39;c172e3d7f21eb3913a5a05c2fc67e8f50052306b&#39;, &#39;62709ac5fc046fc8438176c25b8beb24f5d440f0&#39;, &#39;ec82b6d00b28d0ec46d9ec3d4b2202164ba7e7ec&#39;, &#39;03123d5b32676b7dbd709cebdef5f6aaeebf8614&#39;, &#39;1a745049c373d099ebfe4e8a5c11108d92be4192&#39;, &#39;21725bc6accbad2a083905a168367b5f83ff52aa&#39;, &#39;7692411df312edd70d56a72d0a802276ab78c09b&#39;, &#39;a1ef977abb114fff42c392bae82e102ed60addea&#39;, &#39;fae1b94754a2a6bedae784cb44bb27f5f6955578&#39;, &#39;3f3ecfd1a91462bdc8b13e0c28cbca744221ba77&#39;, &#39;457066fee55fd300a2df48ac405f17b16292df76&#39;, &#39;5e46d287d6ef903ece35e1d0eee5be7712f69727&#39;, &#39;19eef597351f552e5f8471f526f7d54bf10b7fd8&#39;, &#39;f4a91f4fd475d35f6389ded5c5717ac3f3ae71a4&#39;, &#39;ebafc58387f2d27788e9b1cd6b1e141b20ebfc03&#39;, &#39;42231be733820fc761729dafe47fe558d393cff2&#39;, &#39;104aa54ed44ac27912b444fbb5a60fa22513d19a&#39;, &#39;ff4537eb8e123641fdc6c28bb2b06c154ccb0cdf&#39;, &#39;19f95b8e3b94d2ea0fdcf2c70157089f4e618bcf&#39;, &#39;1d8b86e0d6ec47ebb617522620fc1bce7c07b8f6&#39;, &#39;d22a18cd3189c9eee9da33029377e504b9d8b683&#39;, &#39;d9eeec70d5660459080c525b87ca7df28d236a4f&#39;, &#39;3f683f8bcb5b313df13880bb6bd2cbc31fef31a1&#39;, &#39;433ecdad28b73a9b1970508ef47ab08533b11304&#39;, &#39;cfc5d13de9998ca7ded61a5b58692f8cbd9d29c1&#39;, &#39;d17422619cc292599c177430764806d4550e6256&#39;, &#39;aa7b60fd75585d80ad2ba77f9879ba6be272d0a9&#39;, &#39;5eac42091b38db129a79ca510da428a7110bbf07&#39;, &#39;21632731b1748fbd88c0533d32e8f7e598f8a4e4&#39;, &#39;48a15c1de3f4b2af222f77c7515e9e3b4149fc78&#39;, &#39;6766535f92d2abe2d8c43d22da3ac0429d37757d&#39;, &#39;3aa6a91f6ef232477b4f9125fedeba79d26f4430&#39;, &#39;2ac4517829d650e418545ae44158e8fa6aa8dc65&#39;, &#39;d96b108ea924842f024a770893df46700dc49729&#39;, &#39;33e226c03ebf6be24f2fa17e8a3bee06cf62410e&#39;, &#39;d89467a2d8fbfa5fd6f5cda3988619f0061fb0d3&#39;, &#39;050efe890a2cb732c8819546f02147fa00ddcd6b&#39;, &#39;95f3d6692bcde4160930d69524702868c2e62a94&#39;, &#39;74d168ce18d41c2f945ca4f5e97577c8b99148fe&#39;, &#39;247d5892a042dd3c580aa73efe8ad3c5fd100ed3&#39;, &#39;6261741755c0d9df3a7a09dc9ae88966e1b674e3&#39;, &#39;b578d9f4c101daece5efa17eeaa239d303504c43&#39;, &#39;c12acdd2bfb69b2b415dfc8817d2338d04d0e293&#39;, &#39;980ef6937e896db8adbcc4eadfa15e98524b04d1&#39;, &#39;71a1b134be36685e72e175a17c65f4cdcd819253&#39;, &#39;fd78dc8618a0f404a31b95814c3dcde406d3f032&#39;, &#39;41669013d459152ffff0b0a246e0307550cc7181&#39;, &#39;2ee17e49b58553522b97a4b6ca26410150cb794e&#39;, &#39;b59045029123c0a28a5b2a1b8c531a85d229d8d4&#39;, &#39;5abf64ae1188398d2e6022382b9db317d0469de4&#39;, &#39;f2c736309a0db336006ba02cdf41e7a8f303d68a&#39;, &#39;ac707ed6eb7af2e7f7cab2711d53d9799a50f63b&#39;, &#39;5caae3ca08cf70a10f89462bbc620fb2ea283d23&#39;, &#39;9e77fb5328d7e857d0be2bc381ae2c47de522c69&#39;, &#39;896ee60ad007d8905052c9882769d1bc22eab15a&#39;, &#39;bbb2954d0afe4a53fc647d7ff30527d39502c821&#39;, &#39;61e66c1ebfa83e4c349bf6584796c76415e6bb75&#39;, &#39;744cdcbf72405e8650268e50e63c7b423380cae6&#39;, &#39;b4705bd178df1612e14a5764c75da15e16732cd9&#39;, &#39;f141d5459293e8d21fcac7aecc42e261e941100f&#39;, &#39;30bfc56820085dfb1b312ddb38ad09f6ec48276d&#39;, &#39;2d42e4c95d8c1c7a880ab6b1ed855625dffef9a5&#39;, &#39;853702eff038c615f0c91ac097942db572938707&#39;, &#39;e2ad42daef26fe8c6a89d2144b0d83da6220cdd8&#39;, &#39;754fc363b03ac6a8307388fe76390543248e6299&#39;, &#39;6e98ec1ab6bd101e210ef9e3c55495df959bafd8&#39;, &#39;61c52bf6fe8467fb6bc51b0100e95fcbeedb88ad&#39;, &#39;df043930076d72f3a8d674b157405ff8da7e3962&#39;, &#39;960ab1035049108a1c9bc7491e4e7260b3511edf&#39;, &#39;624743260646669adc8a10b33f854a1ee57acf81&#39;, &#39;6ef4aa7045c40c282587a9c098f01df165884d98&#39;, &#39;c2d47532c28bd5ac0cf829d45595d102585dece2&#39;, &#39;f6ddc6cd9b246f3548fe6daabc8c5668be31774c&#39;, &#39;a8b077e96e6432961d8234509767cea16d2b02ad&#39;, &#39;7dbb4895e4123862b3306ba7a9c3cc1568b37a2c&#39;, &#39;952f38534183da385340fa96508ae907da8d77a0&#39;, &#39;3a28b84249ac0a3e279d63bc7fc4182434f76367&#39;, &#39;e38edd494f05f8191a0fb3c6f82357c3ce4d2d8f&#39;, &#39;900f929b5c66c48463069310e7f6b0791520802f&#39;, &#39;330041c31c58f5555525943ef4fa078c45943176&#39;, &#39;0124cf4f3cc1f09f14f16f20f3939ce1459b62dd&#39;, &#39;e6bc2a0305d79eb94ec7e3dc08d8c5a28f6803fa&#39;, &#39;e25a593a37c70e0eea492b6b652837d0f4560a54&#39;, &#39;e0be96fb07300d7f276e9460f177e8f13831e75b&#39;, &#39;069c6790c40182f246ad1cc36c352639decd291b&#39;, &#39;4d9215be55b595f9f0741fdd19675d659d7bbbc9&#39;, &#39;d72e527698f653b458b20ad343a6ef055f17b8c2&#39;, &#39;1308d4db5756a367009c72fd4956576f00a8dc3c&#39;, &#39;c2898d7392ed64f8d69b2aa339ff610683bfa96a&#39;, &#39;09426dc906f96ecdff091a218e0ecd123ad4f2fa&#39;, &#39;43143e13c86193018b3e1cade828840710844f6f&#39;, &#39;5ee74c3ecb27cf08ff909b01b50d71adb1ec2b46&#39;, &#39;2e9224829d851a562d25125a7c181d7482ed094b&#39;, &#39;97c2f2f59cbc38c632b9e2ae78496a848536ce3c&#39;, &#39;f6b8cae0293ed5a5f520ced62820e6e4bc3ae838&#39;, &#39;a2fbe2af3b1d6f27a7feb06f35dca53004c533f6&#39;, &#39;43a677560d52f434e3f33244ff8c32002d8a29dc&#39;, &#39;483c8128019fc495c78d0ded771f695dd8dfaf36&#39;, &#39;1225eff9cb322d8ae07f433612c59ae89da8a7b8&#39;, &#39;48ba918bdbc4568c1e2c657a23b7e1fe597fd444&#39;, &#39;3282f342e7ba6bd0ec2e0f9a20260d6698f924fa&#39;, &#39;3ce2bc3e5c698f19874bba5c8059cee886bb3af1&#39;, &#39;ef779882ad9bffa2f3d028328ccd5e8262f07274&#39;, &#39;45e6178180213a9589673e110b02d909e8dfbd06&#39;, &#39;b22d680749753662d62e9bd030d9c458719f061f&#39;, &#39;ab198ad1238493260282ce9ae1144db5f03e61e4&#39;, &#39;3234e5cfc526804059ea0ede1a4d7ef27c702fe0&#39;, &#39;c2bbceda54768a4dfd062ad6dd4022fe0832f573&#39;, &#39;4b0412a2cfe00af7a31e67966e71856a98831390&#39;, &#39;cac0d9e53cee1525792bc560bcb04c1fb61552f9&#39;, &#39;edd5d6c6893157f194802e4c82e926ff2a01412a&#39;, &#39;e9a0d7142e07c66e35a4a02a9309ffbb020fc293&#39;, &#39;43514c5ee90621ca4242e6112107928c56ba7332&#39;, &#39;dae279a297832db7107efb94fa5ad2dbd6eca1d8&#39;, &#39;662b43651b0682129565b53493029732707ce492&#39;, &#39;32220823bfcea07de99176f8d4d724b61d6d5152&#39;, &#39;a8c24cef93cd1cc0e1195679ad32e19d3bdb1d53&#39;, &#39;3faa9adfe3a48a5ad229cf5c8f83dd2d6d5d1250&#39;, &#39;c9792b8af6b6b1b216d0a621713b0179fc188143&#39;, &#39;b4f830178ef598891c04fd7765c73779bfff47dd&#39;, &#39;97cbaff77d41f63d64af83754807cb9ef03dfa06&#39;, &#39;ee8c24da9d7f5bd7813f0c2e813005b6f82e03c0&#39;, &#39;ce40a1be69e233d41fd69d3bc0185bb564230556&#39;, &#39;bf11050880a77c5e25fad6b8137ef63e1560f761&#39;, &#39;aa4a6742ed6933e51a132078d10100c74fa10ca2&#39;, &#39;1f59e344929b78522cedba87ad0b6841ada1a1e9&#39;, &#39;74e84396626c122bb68b9b06c81caec9b698480a&#39;, &#39;ccd989d70d0a8cd7bb76fa0f0c0008194ee32497&#39;, &#39;c4d589f7ab5d3171234edb45c668f3a52fc21aff&#39;, &#39;1a39066466bf4020564f84217b4b45f0a153fe35&#39;, &#39;c95593bd6b1eb54384968e26cba21c51d09998fc&#39;, &#39;73030b02f19bebacd216aade57dd2f159257f803&#39;, &#39;58540de5b169f0906c19fe89173db591f47f8055&#39;, &#39;1e47301062596d4a353218519b2db0b027222ed3&#39;, &#39;288cebfdb4d7d2f7afff5a4f256930903c265c31&#39;, &#39;a1d19613f11b8b1b0a8bcf3d6a2aae1cb29a6f2f&#39;, &#39;93f10928f260a94604c9d3aba7f303c2048385df&#39;, &#39;635b30dde6bc36e932af4cf61d028b1a62b0cee6&#39;, &#39;a74ebaa6c353f758b3c1d7b0a285a0cb0173b3bd&#39;, &#39;a9719f29ab111e79aa4d41843a9befe97abe4c5c&#39;, &#39;649fcf5c302adfe13e83d45a06328e8c26593ea0&#39;, &#39;51208f73d50a47ec87a07bfd1598403a711c7743&#39;, &#39;a68ef3fd6f469555d40049cc5854eaa61fce2a5e&#39;, &#39;41d7e91d49dde6ede683c9e7fdebd0f25b478547&#39;, &#39;289cc5c2ce6b2acf2aa8c625f3e8c9cdbac70d1f&#39;, &#39;3247b5fd231f29f4c5308a4cc25748b92a65c3a1&#39;, &#39;dc17746ff648315417adb55d772cf7a964aead9c&#39;, &#39;ab7e221ac16e4fd3ffcb428da003ffda51628e0b&#39;, &#39;f61adabc2cbc54e4cfc17a227b1329b37052586d&#39;, &#39;dce22cda27bcd8674ccfcd3c4d1eab61b537cbe4&#39;, &#39;3e7802d487b82aa5b48dfc161eb063ff932f50a0&#39;, &#39;2f57202fdc805dc055aa5e11b34cd73bc6cbd6fe&#39;, &#39;f5298e708641900707c2d8f0d261d7b987a69d1e&#39;, &#39;80f291dd04a71c6538706da8e1ced68b0f12f798&#39;, &#39;48d47e2b444f3321db57841a448d1d0e8847d25f&#39;, &#39;4c2b09f2b6d1b0190291bb13e7f2f2e388780d0b&#39;, &#39;de5dbc2b417dc4d355d79e1b367c94834e0f5e44&#39;, &#39;c64ee207066773d0ae3d4a82d706bf53ae459a26&#39;, &#39;2ba9e5daeb200a2cd909a8b48a7c8855bac5af6f&#39;, &#39;39cf4b4f6dbefbfceb49cb1bfcac929106ae70b5&#39;, &#39;566e9a65f84d608b2147160dfe1e0f50edfb1a99&#39;, &#39;d1dec291a003674eb5aac9807bab55a8482128b1&#39;, &#39;fc4a86a534b8294ca940947dae1c3dde5e2141b7&#39;, &#39;7819ac99ffbf9eb3e14a6f2f8c7a95ab59fc1505&#39;, &#39;769354ff1598f34f92ff03ef5839ed2ec2ab7166&#39;, &#39;32d27df2b25f909d23c2f407e0f35670f4dc870c&#39;, &#39;b7c0fbc3a018fffdc957b757793d790d504c70fd&#39;, &#39;8195ff4982bb17970397fbf909a86cd603f1cef8&#39;, &#39;b607fd8706314b06fcc42db500cb26efb10b361b&#39;, &#39;dd805b360c10e19685bc5bf2b1c7ed5578157249&#39;, &#39;0ca8937eac0a6af2ed6ede5913dbdce658439365&#39;, &#39;0e4700c5cd5ee36843f3cce23ff70a50c0dfe96c&#39;, &#39;45b2d39df527c18376e1bcb1aae9701602b73282&#39;, &#39;2887f0ba6d4f09ff23173baa1bbc460eaa4bbe25&#39;, &#39;6753bed55af748c8efb01018a56a2385abe0af3c&#39;, &#39;bd829446b6bca1ce6fb67e02dd9270c86c18c3ff&#39;, &#39;5dceeb42fdb32d31d8f633913dc76e88b647ce03&#39;, &#39;968141320ed5b93a4ebd4ce1487a54e79a2de397&#39;, &#39;84b5f2886d6fb47b958149c02e934dc29be5b886&#39;, &#39;dad982becbe61a209869469a4eebd6b6caa71cfc&#39;, &#39;b6476369e72e9ccaae2f6cb3dd16c168fd98a17a&#39;, &#39;74fdd5e6418d6f60decf1da82c47924155a3f923&#39;, &#39;5157c1abe6ae97e7cd9356b6e63825e47d94576c&#39;, &#39;72e5f6c885d2565229c568f9be174a159ac86387&#39;, &#39;b9d2a72ede0822fa998a45717870c57c17ad1834&#39;, &#39;407336e419489a9c0b473d6bf8e5bb7ead77e99e&#39;, &#39;8d3fb4f5aa26f3f3ec185508640a416b11b00abd&#39;, &#39;9e01a89289ec8c2fe562aa62c40bd7e853d217e1&#39;, &#39;fefc6c287d42c91da4d52de639958a89691b8792&#39;, &#39;5111c975dacb3be5a8a17ea8f054678dba53cb80&#39;, &#39;41ad46d6f53420f04ed1c10d86de9df02dae9d48&#39;, &#39;290f419edb545f5f94ca344c77ab0b7b2f45679e&#39;, &#39;2ef6cf2cca371ab42a6619d37af767d3988f2a6b&#39;, &#39;1275f3859d1d15726e7e5d5cd313527ada7e5b0e&#39;, &#39;d6b517d0c2ba5d18dfd8870c8414fcb06fc46ccb&#39;, &#39;3337b0f22e89353a62575458f794d2b53ff76708&#39;, &#39;348ad81e69813d0a71287288d31ff9ebe7f29c96&#39;, &#39;36e4d8bcf492558c47b002b07a07d74a7691fa38&#39;, &#39;5a338f9fe45305d598b1a5b304bea8e1521db858&#39;, &#39;c7ebd685a37dfa15562bce82f09a1c4ec4eef70c&#39;, &#39;66fcaac26d8a99452c7e5a21d1bc0c7e40209117&#39;, &#39;f333c24477441d88ebe93be30e87861147c54cbe&#39;, &#39;fe50c716ddb9232704cccc087954b052e7e47ad9&#39;, &#39;35ae1edd0167f89987d08cfefdabe782d72698ca&#39;, &#39;bce6eafaf8107c59cc6d738f1bfe0bbf15512aa6&#39;, &#39;b69d9b894887bf6e5f8d4ddb53aaa7cf428538bb&#39;, &#39;66dd54613c0e8f92caa349d9e2435cf27ee61ad5&#39;, &#39;09551982c0c08fcd63ef61e1ac626d42f214fc70&#39;, &#39;4d1f9549c8ef3db830baf1c6cb02358ba46d4989&#39;, &#39;59f9c11bfd74b61c6eb8a68e6c893514dc2ed553&#39;, &#39;f7fd88d6e2848dce88b8e839c42ecc092b7c1d42&#39;, &#39;c35ae684c8cbb2e0aa3562d57a81268e033df0b2&#39;, &#39;c569cabffef21137f5d0a0f8396c9ce007d9bd79&#39;, &#39;bb310ae02ef44299280820fa45fddaa6cebfdfa6&#39;, &#39;1985caa8a29b0dc3ac222b0a281eb57a7d47e2d7&#39;, &#39;189679260cb7b0a3d46ead7b88472b9505c2526f&#39;, &#39;9dd7f7d939ffce8f3509bc638ddbbbdc3355cb1c&#39;, &#39;037f324bac7ff5f8b7591a94ac01b46c30b719ef&#39;, &#39;bf1964e882de5ef3b641b089919c0ff5d4de7d14&#39;, &#39;e1279a8fea68a67a4273254544f10078b33ef3d5&#39;, &#39;c4b7153c2b47e3e957c01d3bcccfae0ce1c85139&#39;, &#39;59c2fd93dab50f466d485a674aed916bd69020da&#39;, &#39;d62c49fe903fc03f0a014a472a980d66273fa9be&#39;, &#39;aeb422df6de551d34efadc9e01bfa2bd887f85ce&#39;, &#39;4deda7eac89e80b1ec69b54a6d2bdfccbde0d3dd&#39;, &#39;4a6aca744c2dfb387bf706545e6c944887f8197b&#39;, &#39;a16fad42b0c629c837063eb307cf05d1b3757dd7&#39;, &#39;36ef3477fdf924845118bebc13228d50606e31d6&#39;, &#39;8308843a8dce065fcf386a1b746fd9938d5dd91c&#39;, &#39;c1677972ad4b2c8152b0a2928e9c0cb551d31da9&#39;, &#39;cf6b5f97fb48196bd8cc7242e90ba6d1cdfb1f0c&#39;, &#39;31f1002f634768338c318f933190a90bafecfcf8&#39;, &#39;f5278b9b044ee6f7728968c73c47a3d0aac0945f&#39;, &#39;c8491d0d3d87aafd01b9ffa871c3636794aab0bc&#39;, &#39;1f86ce248851ebad1c82bf19147d744924f7240d&#39;, &#39;9c9b901575c575ac613a712258661aa034e67deb&#39;, &#39;684348a935048f8225e9c41b4cb92da573c60a43&#39;, &#39;66bb1ff8cb0ac435b5ff9dfc8c0ea18929fbbf20&#39;, &#39;1af2c39940ae34a671c7c9a353148aecef73d2e9&#39;, &#39;9ca5c287afe1e3df935e1f349e63c5ba5b4f1ee0&#39;, &#39;8313a1daa70e4fcbcc974218828054bd25b7e76f&#39;, &#39;50683bceecd59ae90b14c46aabe56b16237f1d4c&#39;, &#39;9e64eea9647eef522a6c1ab083391f0c1e378ee5&#39;, &#39;ff4532ec44ee91710ec7119354da6f380687b008&#39;, &#39;c9b2f7f691c6c302d2d2f5bcda65d1a85715b8b6&#39;, &#39;83247e41d8f962ff5edc4456cd910ec8666251b9&#39;, &#39;c5f6852ec9b1fa6209b23ae59487175a423f5f1d&#39;, &#39;5b7a2f9eff99c5c3f451a3518daa0e8fc7602c8c&#39;, &#39;a65c6c2390d0acf8c8df1a5918f136cbf0be4f9b&#39;, &#39;94132981961f8a5bd0c6ed30747df19f44808755&#39;, &#39;e94c05a9d2e867645f1342698e927c32926b7264&#39;, &#39;c8c695305ee56b409d45c773f025015240486366&#39;, &#39;a1eeeb49334ba1e703908e50412462f5e803f57e&#39;, &#39;5f3102333e1f9e704f41a9c61d3ea054f1ec1f2c&#39;, &#39;e22e0a9532559c5ded368b49d86ab23afb9a2c9b&#39;, &#39;3cd5735cfb7248fb67ce78c1bc18045b3653b579&#39;, &#39;2fc30f48719cbf0514a8dc92f98b8734d10e2e93&#39;, &#39;ea82c56a7b4e05a4ba11d47f2aa2eddd61ac0e41&#39;, &#39;d3fe8e5953e4d313646e1b9fcdfe05bc0f7191e6&#39;, &#39;76c95ffa1f25c1f82dcd1ac2038e1b7f2370aa94&#39;, &#39;f982f365226b88f0ef6964d2e91e648a4924a13d&#39;, &#39;8c1da2bb597c490ac9047a4312abd45ca8f1bdb4&#39;, &#39;c72886740e1b3e85f1f2c9e6791447b897a011ae&#39;, &#39;71381b58ad8803eb3a8fc56ff19e903aad399bf4&#39;, &#39;d9873d16e419a5218c7816114f9b7960fcebcbb6&#39;, &#39;321f24ddc83edd8d8cc6f7c4669b245b5ff314fc&#39;, &#39;2e3e4555d6a76c36df44a3b2778041f77a673bc8&#39;, &#39;5b9333152812b71940dc7f8e9763baabd8dcdab9&#39;, &#39;c0bf6ca511bb8e345e03eff437bf7df7f50cb2e7&#39;, &#39;fbf35ff90a6924a9869512a95243a3d2cacaec21&#39;, &#39;86b42c60da9b389b53a60f9e2f3c8e8cde22f77c&#39;, &#39;77bcd200ab7a94b6d0d429b5f3e00dbf78a0dfda&#39;, &#39;a37824e2fb98dc89e28141b72db73a63e2b6f0b1&#39;, &#39;02f0abbe42cf9fc7100f1a4eff69a986dcb00f92&#39;, &#39;0976cf7f45f655bb115779db592a625c38020093&#39;, &#39;da9d312a79c8c90e4d22f7ce9b46570f6b41a9ac&#39;, &#39;54b6fb42de33f534f3997a729550422bbd3456fc&#39;, &#39;32f1094609522dece52d10879f1a58a22c7f2e24&#39;, &#39;cc9bdbe618d9fb2b001c54ce73568d201dc1d753&#39;, &#39;ebebec90419c5793422852f41f907157b89fc519&#39;, &#39;713cd29f8242fbabb878438a2cc6f853af8a20d8&#39;, &#39;67ab4577a8d3a995128611c666c69efd6f36823c&#39;, &#39;9882c7ee93ec4e8d43c0bb85ea0e20c7f41eb4de&#39;, &#39;a8ff16a552836c127484c47874e92b46a1d39ffa&#39;, &#39;a5b7724cbc12bedfe211d2ee213fffab9b01bc6e&#39;, &#39;5be8664c53bf8f0e3992f03f1f78600c40b30762&#39;, &#39;a4e0f84e70e548b7216e628e162d7e89c0fdc3bb&#39;, &#39;d069b55cd6be26c04a076a111c4a4d06c0e84c76&#39;, &#39;ed11f658c6cf570e7009254f03f894888e4a45fb&#39;, &#39;d45aec048cf2a0716275b8f6f9458ea964040efb&#39;, &#39;d1e1115718f2d01dd83c04b0c4cb5586a8d5c802&#39;, &#39;49aad47bcae5336fb70e94408853ed97eeed178c&#39;, &#39;4da358865aec4ba9e56f7becbe089d85e4cd2721&#39;, &#39;1f93f6567b687eb686ba4d079ec7c0c6c8f36923&#39;, &#39;e1f9a0d07a0c8830889a75b15045cd10a361a1bf&#39;, &#39;64236ac22a7d2685c5b062948a2881da12f0d0b2&#39;, &#39;82cc54a90d7633a8c2f6f935f3e35b1c63b3ed79&#39;, &#39;4efb8e27c41982e4ec241344d62c4b0110673cf1&#39;, &#39;5ff24df084b8f06d0c08b565b9b68b4d4d8e316a&#39;, &#39;82e2cbd5d104a7aabf9885833376d7161326993a&#39;, &#39;30088d3b757fc256d0a5312694290b08f2c112d5&#39;, &#39;4beb0f6640142108ad043e11003eca18dd00f2d5&#39;, &#39;858f30f780ba0e5dda7554ed4f6e1731a9867951&#39;, &#39;eb5461ddfc5d2caf167f4a31fc7f5d26d079efd2&#39;, &#39;7d5bfcc72b9d181128db54181864e202306151c2&#39;, &#39;56e03baef18d88966901f247a04396cc7aad0f72&#39;, &#39;2029ffb9d2016df569f782c3b283d320b30fc306&#39;, &#39;1938542aaaa3fedc222a19030e1953a1b06ae0e8&#39;, &#39;14eaab7c6402087a3b4e1320f9d399445aa67594&#39;, &#39;4008f1c67703f2d031202e628555adbb96e0e4fb&#39;, &#39;7a70834648830637b61160ba995a5dc22f787e86&#39;, &#39;721d7b148db244c5384679aa1158c03ae6e506c2&#39;, &#39;326784ffc8d6970e21d84024db670ec0bf94f835&#39;, &#39;24ce8d03fa5c1692a693d5fadadfe483301c7623&#39;, &#39;330aacd308576d5606df20a75ec6e7db6d21f59f&#39;, &#39;3605acc2424aab74b7630251963a83a7110c3a49&#39;, &#39;d431c58d339488ac8e0f5c8415e79876f7119877&#39;, &#39;fb55474c5405592bc7c343c0466e23d58dc5b688&#39;, &#39;d8a0c7e962ebc51575909546a9da46d75396f008&#39;, &#39;111e427359739950cfa42cbec11e3d97fd3b5d2c&#39;, &#39;99bce3ee977a9800a72757dd5f697f499583b1f6&#39;, &#39;64577131ef516ee5c79690928b5734212e79ab08&#39;, &#39;3ee0283c403dc181b8fcdb600ba5ed0baf1d718b&#39;, &#39;e17e229f2982378a4fab913870bae75b28aa140e&#39;, &#39;a9908aecd20f594bde1eca2969b04cac12008a2f&#39;, &#39;781b9d393d3706c9b8b83c99ef809a937b87a691&#39;, &#39;86bbeb570b0cfa9c9c7d4cbcf56f6a0e26dd792e&#39;, &#39;33f465c28ac17beac973d60eecbe1a2c34b72f97&#39;, &#39;80ea859b50888da2d1b1dd123dd232b62573bab8&#39;, &#39;c0cb85121de2489ee6a2767bba5122286ab9abcd&#39;, &#39;b2d788058369788d5f6be6560f3ed2fa0acc76e7&#39;, &#39;77f74645cb4d74ba77dd74e5dd4bd952ea562e70&#39;, &#39;2d9e423a0bcd590bd9f30d1e130d7c01e40ac0bb&#39;, &#39;fd7694f7e13de80adc3267cf26c2ffb6d491a2c7&#39;, &#39;ecd34c07491118af3ab5295e1c4e4f8e04016e57&#39;, &#39;fa63be00c0d7c455bfa4f6b2b4071d57ed6a4fa8&#39;, &#39;b64ca6a915368b14b683b968cf068f000e243488&#39;, &#39;94bdaa09ab21d5ff94ef1cef59b0605f95c2f1c4&#39;, &#39;f2834f31b829de8906da6dc8d4f8d9136abd5404&#39;, &#39;07b1797d9a9846be40b1fe38190c3f5dbe41ea09&#39;, &#39;37b141b650f754a456a914d336a1950981ae7f39&#39;, &#39;8a0d56c3af0c2f43acd79f65ed6df30d8aa50b24&#39;, &#39;e3d528ec81e1ae3ad6f49c58599ee5810c1c0bd5&#39;, &#39;e291b834035b22fd6126d6478562f0e62e919690&#39;, &#39;b9d9d9a0d6982b7b20910e88fc48f75920e88f5a&#39;, &#39;7531ba10444b7402705eaa2157dc9af6375b4a2e&#39;, &#39;3c9bcbd2c09e977c599c530387b2caa0f2c33371&#39;, &#39;0a6083789648d5dc82be981b432922c043fbb707&#39;, &#39;6b8cfd1866cff288e510165f8413450b928057cf&#39;, &#39;97b9321232bf1119f929a4c8876114c0633d4ee0&#39;, &#39;8e752cbcd3f2fa851e1562e2efa0a87d8d9ea2fc&#39;, &#39;5a44094924acee4112409cfaf24af85cd72fcc84&#39;, &#39;bb7c4b29bb9c7615f39fed7c974131112dd09a5b&#39;, &#39;0585c56422058cefea38ea318045f5c23927fc4a&#39;, &#39;ff270348a6c0e1b44fc8a9f6e22c481b6f75ccbe&#39;, &#39;522d130a5bfc046d14725cf32a1dfcbe71afaf0c&#39;, &#39;f6560541a79215b566cfcde68cfa0511f3fe4fe1&#39;, &#39;242084d280bb513a0769604dee780e0b56b60cf8&#39;, &#39;22c6465e94dcbce4195f3e3e07970f2b3601fe0b&#39;, &#39;82347db46b61b9035d671dd5e46d7147783bcadd&#39;, &#39;69432334a548d13a06c65d8f2734d58f4e86bedf&#39;, &#39;eb9f9820bc72e176f9a6601daef93eb67c8242ee&#39;, &#39;86d4aeeee993485387c1c6403bdf542af1d21f0f&#39;, &#39;4101b5a65308761007b0ce73893525099b6826a2&#39;, &#39;d461f8de5f090b62bba7edd77cc73935745db7d3&#39;, &#39;8775fcfa0386db466711aafacaf8e10504d96ace&#39;, &#39;cf716228927f0a1743473bc6aa447bb8bcb7ecd8&#39;, &#39;0ee432527b8f8631cb0969fbf7896ebd02ceef1b&#39;, &#39;1e3f43e2589e216f1dfe9f914e9d625e6cee5893&#39;, &#39;646f0ec90bfa05a55a6f5586bdfc5ddb5ed129be&#39;, &#39;b504f0f387b98e8a2d3d3c9f0fa31c3f6e348da8&#39;, &#39;d22957806c5cef2d259f866b8dfdcaaca6f9f624&#39;, &#39;2353f9539f1f2a8b659c55bd6983374174230285&#39;, &#39;6e92d0db2adf281018c48cd1c80777ceae9546ba&#39;, &#39;9b1ed84fffbd3d2e482b82c5170c1bc272042407&#39;, &#39;8f7ee06a102c960f57237c300bdb9a458137c25a&#39;, &#39;c5c054ef2da9621b24a4e797d80a85f44ce383a1&#39;, &#39;c820a0591ff94645b8a92e02c7dfd2d866df4010&#39;, &#39;2dd783b1de561bd2161af6461f503bd34dcf7340&#39;, &#39;4ea7e977ac2985d4d2cf38608245762c05d1e658&#39;, &#39;857355913a0cabf5ea34505451e8384f7caac791&#39;, &#39;b2c2e521fd7a39e0475ad615b14fca7daf3b1826&#39;, &#39;e68fd32a77bce7b9452c50e8c44e5fc7925f30a3&#39;, &#39;98d28c07e53fdc1285c70dc0b63a060dfde0029b&#39;, &#39;32f48c487d869c015bc1463fb60d548115c88032&#39;, &#39;724b4a4d2db8129d9215538fe392fa1ec6fc8b09&#39;, &#39;b07b57bdf3d40f0ce04f5b418ea9317e095c7cda&#39;, &#39;182e0cebbd06c34f1b5f04e969b8349426d93172&#39;, &#39;fd127248425ebf023c93f911f24ea80d6676aa28&#39;, &#39;32e5a5970c44ef3cc7081afeee1eae2e44dedd8b&#39;, &#39;b20d75cb16d7693a0b6b5dde79f83c2ef5bfeed7&#39;, &#39;e6405b977db52d4351e8ba4120213f746a3e4595&#39;, &#39;59c9b8355d64d120efa79ed1d241519c6f600b13&#39;, &#39;6dc843fa22a37f07c044a597851a5834e9910542&#39;, &#39;5a68de20d705ab2b85dd60f207fd26a31f5634fb&#39;, &#39;7e9171ffcc4f9a600b82fbeffb2d78be96a54622&#39;, &#39;0ec0cf847d81d376f3ed517b8282adb59bd87a5a&#39;, &#39;83b44c03caa044605a12d44da617d4ac5fbd1b9c&#39;, &#39;d462fcdf7e9c09305182d6307a13acd23fdf60d4&#39;, &#39;caad220187eec1b7d8708acd280db3b0bc6c0080&#39;, &#39;2db565798d99af73a5b215117311796bbfce6a69&#39;, &#39;18e4b7756de2197e796cacdb1e99c4556cf942c2&#39;, &#39;07fc0e04a5ed384001df5f1caf84522babbc0ab9&#39;, &#39;f4c130e93e275ab74733593480326bb05a159654&#39;, &#39;faae5f35307a6503019d0bb4641424e0c11f0524&#39;, &#39;b0c154ac05cbea9599a5c910bfc6bf93a9b3c7f2&#39;, &#39;f4a558bf2cf5f2f36632e3524c8501ea946afe2e&#39;, &#39;39f78d24ea80b22a77ebcf0540be94cbc7ef4060&#39;, &#39;c3903a7114e695fd4ab9328ab688301c2de28bf3&#39;, &#39;1073c2203201a42fc42b3a8c5a45286eaf42e2ed&#39;, &#39;b6dea26da5eeeba8ddad0a2c2f2873f0efc51f6c&#39;, &#39;0462fa5acd8bf7858c2b1dac8f4249252f5e3e66&#39;, &#39;18df4fb335908b2501198b7a9614f87bc5d27143&#39;, &#39;a9d79d815f2975b7a2b45fb3bed2a92e96467676&#39;, &#39;95e19b1e712b1670b3166ba1e4567e59723f799d&#39;, &#39;08d2b969d2ab0933f72f50e4179d978af7099852&#39;, &#39;ee1656303bc9b80a68b674646e14c08304f265b5&#39;, &#39;21613b4003ae32f33386739c930a202fdb18ca09&#39;, &#39;f4bd5a15469030123cd37db5e9ad17f2b9ed3f1b&#39;, &#39;4dd3a0c26d50471ac04d6a943c62404f033dde2f&#39;, &#39;6f2a974a9094b7c5984028d2788b27e1b5880883&#39;, &#39;a065a80d68c501280af46571b104395e14f33c5a&#39;, &#39;f5eda59b9b82958d6468cb0a9408c79215f9aa8b&#39;, &#39;eff34a70b390230ebced7f95fa3f76413866ccc7&#39;, &#39;4d988b381e7329cfc6c0ff6996544f63461a168d&#39;, &#39;84be3097d0bda4e0a33c9639e9fc0baab884316e&#39;, &#39;13d131950451ceba46603e1a4bfa4dcd04269cb3&#39;, &#39;28f0bdf0328aec3e599ca003c90c75c4c1c81a1f&#39;, &#39;95f8da34f7cbe7e7975cd59cd8f95ccfcc9383b6&#39;, &#39;4fbf485f818b90262cf410e046b7511902bb473f&#39;, &#39;caa06d51f8b332aa22e50ff800094a95aa6b38f0&#39;, &#39;74069f20139a06bafd70275d6d204cacfc9d0335&#39;, &#39;2e5efac3ad3cf8eba0d3c50276028a571263d285&#39;, &#39;c7cb83c28667fc1197398770deecfb0b1c3c04e2&#39;, &#39;21e7edb9bf2f2adbfe2ab19a9ea70071f6716d09&#39;, &#39;8deb1144514a0efaa77957ac7a0f9d8ba0aa4808&#39;, &#39;3c8218d7d4d188c514a2b0f6d4b17be2dfc1c2ec&#39;, &#39;a95c3d6627d49273cd2d63e9c1ad8d1b2588a2fa&#39;, &#39;9a3f6762b8789bccf949cc3326b53786afd2705d&#39;, &#39;30bd503c2a02edf4ed9d56ebf3e5814f2fc3ac7b&#39;, &#39;fc8044a482307ad4cab495a0312de723bbf4ed91&#39;, &#39;de172de0bf177f7c0aedce28fa3a196796c17ad8&#39;, &#39;42706daafac48d66abc727c3f3f7617ab8455849&#39;, &#39;4d474e191f825b8bad59d433cee5ab66b5fed7f0&#39;, &#39;ecb107b31f5a87f86fc58c4a519045cdd78680f3&#39;, &#39;f8ab9cdd65688742ce9bf2e7edf160b47a38e7e4&#39;, &#39;c98b8daf11a42d3738c0dc65b3fa1169bd9030d8&#39;, &#39;78354d2d0c0706079f7ec4054f3ae0f0fed40317&#39;, &#39;98b32ed48ef3c17ae5e225fc20d4f710522c92a5&#39;, &#39;b2bd556e5f49bcf1d3dd14b4e8c28fc61a48d5a2&#39;, &#39;1ffd5eac053d0be67a3e98bdc8d3c7fad5a325ce&#39;, &#39;00c03fb8e6fca716f2a83ff95180b6337146638a&#39;, &#39;ab52b3c84ad419a235dbf54f14e71df407eb4ec7&#39;, &#39;adfc96c8c07864eaaaa7d2284775ea933afe5ed2&#39;, &#39;0f826af7d426b79c8a1fb381d25870f2109fdd6d&#39;, &#39;74e4e1f948c222737d4e43917c8a490ed5b014ef&#39;, &#39;dafe1935229795c6574fbecf868d6bf14faf22b1&#39;, &#39;eeefb1e0a43cd16bf317821336cc01f2c84e2666&#39;, &#39;76f062aa635d2ee20da77e7775cedbce13eb4df9&#39;, &#39;466db5288bc08b4deae6a6744c5dcb2c6f064ce8&#39;, &#39;1afa7f2eb80ae190ac9b38c5d6d1a61931e64808&#39;, &#39;026325a1ee5e3ba5806377f1d68e7494a7af1e8c&#39;, &#39;468adc1b48594b2facb29792e907b480dad2ddb4&#39;, &#39;eef6f3bbbf61a006f2c297e31c15e9d010244d7d&#39;, &#39;9fd9aec32957c27ab2d94ccfaf79f4e8d66e8a49&#39;, &#39;68e6b8e75b250489811cea94b02629ff7a239ea7&#39;, &#39;b84f0a6818ca1adde12a62c9b65e71527157cfe3&#39;, &#39;2d6809fa15844bb348e3f925d51de65c92104638&#39;, &#39;b91635908a4663a3bc91aed3069320908b1c682f&#39;, &#39;679991878aaf76ec6ea4b0025bc46e0e0ec03666&#39;, &#39;0bc372993ea1123acaa16cd7ba646d84b4c6f36d&#39;, &#39;b345a09575f1688b5c9648f4ff727d17f0d20f94&#39;, &#39;cfbed0a7c039d3ac41b2267219488c65cd9eae8c&#39;, &#39;2b003ba3668f92e17820a310e6dacc77fad54271&#39;, &#39;a0ad656a4e8ab40006857c7586f9dcb7b0ce0471&#39;, &#39;993dba1b326d217a124add4410583028c89ee3a4&#39;, &#39;d8f8b4b538a8dcec96e07725d655285db188d0ad&#39;, &#39;66c578674bda1de1a485d93b4e196d813c73b8dc&#39;, &#39;a7748016b76f94c3d406f8f21903545647b3e698&#39;, &#39;967251777568388d22f25805118e0abdaa4babff&#39;, &#39;3ce70e609f20fa223f488e9cd0d7f19c97578d45&#39;, &#39;d15ec8e22a67d049ede7e65eb6854b489ac7acef&#39;, &#39;5c1eab392b744d43d26d2d964e49a2d33a6c5be3&#39;, &#39;c5035acbac00476bc8e573bd469acda2a5f2232b&#39;, &#39;48ed8644133ba79d596b0a408cb3be912861997d&#39;, &#39;63ac184f6bfd38834de4f4de9c501cdbcca4623d&#39;, &#39;87098357f59c87ea218a6071d2204d371213e313&#39;, &#39;142f408b0104a85353219b29f99163e23f739203&#39;, &#39;3461649cb920677d2fc3eee0b48b69a33e935711&#39;, &#39;c29cbe75566c36898e98df31e5f8285f256bcdd2&#39;, &#39;faf96a5383baeb898bf236e8e76fb4bd13e3acb0&#39;, &#39;b33d4418ac7e4f324782e1eae1d9b0b41fc5df43&#39;, &#39;f49b35513bbcf9a0ba7fe7cb45309376e88ac784&#39;, &#39;e126cf39706bb97cc1526b3fbd78ed8c5f4301ae&#39;, &#39;33c1693ec5d96b36b75801fc55936ea9a914fa36&#39;, &#39;decc95f101076ce9724bb478dd3e514a726aa71d&#39;, &#39;2e42edda4c5527e38896264f8c63ee7f085210df&#39;, &#39;5ebecfbc4928237ea63e5658350e448327e480ef&#39;, &#39;4bcbb51f2353cfacb1a691aac5073478a910c9ea&#39;, &#39;a9c4f47cdcb97c24c138047aa1492c3674046507&#39;, &#39;fb2dee694df260e15601070213ad794a6d480dbc&#39;, &#39;687b4c4f1fcd1678f1b7dfc0b9a242920f7bf855&#39;, &#39;5eaa5494b8ed15d51adedf384d6aef3bd1d708ad&#39;, &#39;1b5b3ca54180acee5db3e57e3be0f20732e4b49b&#39;, &#39;fff132961fa25e0bafb555c821b95fe4b4e7766e&#39;, &#39;8298fa8fdb7761308d4b0c9032d21e2be0f49388&#39;, &#39;548dad3e8d7f921c80510ff68c878087e0b93171&#39;, &#39;80207d05c05ba607678ee37131dc467d685273fc&#39;, &#39;374c8675e4c7129d0f07ddd1e5c5273a3eef9b57&#39;, &#39;75a9f3aa38bbc09afa307d4a9c28eccdc36f428e&#39;, &#39;e13302fb596eff77c8c47f68195fc297f0a1982b&#39;, &#39;f7037e438b8c21af8292a304d744c2e00b0b49c7&#39;, &#39;02cb3760352a1c19e52ed826ddc7771a8e34dce1&#39;, &#39;90427cbf7771a43eb9639eafa183ea929819ac8f&#39;, &#39;8c46a09d7d9f32623d9497ac722bced8678864cd&#39;, &#39;872f90f0dd9ddef8ee5d63af45b3864fce055990&#39;, &#39;c850afe3af6d82fe6710709b473338458dafe861&#39;, &#39;5f992009a3181e73dccc4ea061ede6e6b45439dc&#39;, &#39;33724b137b0cfddd90ee14eab945d5ad6132e0f5&#39;, &#39;6fcfdf368acbf6a960fb0225891a4363dedbc0f6&#39;, &#39;71d0d6e433441a40f7d5ae172fb921d39d5346b7&#39;, &#39;3dfb3bee7b43a83a1604059f6f78d8158fcdd278&#39;, &#39;19a8fc42b6444275b04558508042973a6bfe0913&#39;, &#39;246ade3144ac590f6ce4c1588e25b491b49eb71b&#39;, &#39;a68eca755759cdc18dd3165d29b27285dc55739e&#39;, &#39;dcb530b1b72fba1fa4d001303db71de452cea225&#39;, &#39;02d2d2193ddd8fe7e1b4b9ad928f9569443f6a2c&#39;, &#39;6d3cbb90703f97b311a2cb37a2dbd19c10bfa1c0&#39;, &#39;ba405da9b7a4405e8edcd4989eb08c2e2ff94698&#39;, &#39;6f6f92911a122d09550dcc046a9acb53feeea171&#39;, &#39;fdf0c56db7254cb1254cdc7cfa506ed87048377c&#39;, &#39;b27b4917e6dcba1fd8a5073df30b1497592eaf25&#39;, &#39;6e7fb0190e3175ca6c0a5256328575b5a2b7a24a&#39;, &#39;ab3f89e05e4eb3329cc15a13844ab63320e1d185&#39;, &#39;d6cfbb092fcbbbc08b9fdaf6f22330be9fcf1d42&#39;, &#39;d30de65173af971626e5c1611fe24c2353683f9f&#39;, &#39;318f69c954828b9d8b8377db7a8fb1203f4bfdc9&#39;, &#39;16969e06a8aaecd307d4ea9011ae1f0f13773d65&#39;, &#39;956ddffa1d63e4cf302ba3003d5b644163925440&#39;, &#39;c00444b97faab56d8141cf9846ebe7d9578467a3&#39;, &#39;8b809a5c0e5a94651094b0b5151fa7a8f0fed303&#39;, &#39;4fbcac55a3c3fd5da7aeced3ad1480c52a0db7dd&#39;, &#39;58efc1acd6437ee0228e0d43f7a0921cc072622a&#39;, &#39;7cd783af22eca3abc647323644cb65db5d90ea92&#39;, &#39;a10146224f4c9c27a2b4fb6730b432c4b512e9e9&#39;, &#39;a384c70503140c554192df059dffb88e8012ce4c&#39;, &#39;fb036a57e09015148253af106c2702c3a0094b13&#39;, &#39;807f513d7eca3e08d0cfd4be4e5706b1d832e556&#39;, &#39;5b963f586273254c82ce05cbb3f282b69db03fd7&#39;, &#39;f64835c9bd2b48917fc7ac9debb0a0694c2493e9&#39;, &#39;6adafb560dc859aafd99032447868947ea09f0bd&#39;, &#39;e870c379967a723835355d4c2c9e007e50fa788d&#39;, &#39;27353aed84309d775017c47e47818689a03dca77&#39;, &#39;08be41dbc661ccce90457916699d12de2ff9a611&#39;, &#39;53bbf690da6ce2b0f72e45575d4c65d03a521059&#39;, &#39;07847e668c8fe31debd1eb714f635756c67fd2a0&#39;, &#39;fad1f49cf6ee2777a466ace1e997862197ce7f02&#39;, &#39;5edad1dad26686ff9fa3a821964f9f2983985ff8&#39;, &#39;797b53c86c7209380b35c2061ed541d809831b8b&#39;, &#39;513005a8bf2edb46519dc5a5f0c181b54a0d1200&#39;, &#39;4cb0f1eb37b472163e58099b30732dd15243a961&#39;, &#39;9d235767159cb34efb53c25b7b138f782d65df38&#39;, &#39;a196ab0ec7fd7c967897d1261ba595089547fd4a&#39;, &#39;a0fb90656a427b7a5c5a4f48b231057724c5ae3d&#39;, &#39;20358821cd86144ead92f37452adeef5905df550&#39;, &#39;eea3abb8166731772aee13f1ac899bcb7d284a76&#39;, &#39;f2b54a5346b29cace63f2760dec902c10f72f48e&#39;, &#39;d5877714ab07d0ef66288ebc652de0ed9a522754&#39;, &#39;e1f9e89778fba2d8da78d271bbe04cf2fc407757&#39;, &#39;44a3c33a02b84eb83a46e774149e333959cd1c5f&#39;, &#39;7e1789cbeaef86240f67403e950502346bb08bab&#39;, &#39;51bb1bf709ca9ea6472b9b03eb63bb9baeac810e&#39;, &#39;b99d974cfb67ff86ea3ad862987008f1ef5d7f4f&#39;, &#39;cf7c06bf523b9df68ea3ac1d18426a1265d0587f&#39;, &#39;d31c623e50ffc8c0f99085e808fced7877d5f9fb&#39;, &#39;90a480488d602daca7daeb74ddacf12a15bdce70&#39;, &#39;c9eb40d1cdef1ae6acf2678cf0ae43400173042a&#39;, &#39;f1a580bff711cdc1304a67b4109aeb20c3953043&#39;, &#39;0326d2c313eedbf8ddf90390d5b680a7177c8008&#39;, &#39;3ad8ae1619a45bfb73c6a1726c4c94f4f5084dec&#39;, &#39;b7c1e82c7f135ef018509a36716abd969da591e3&#39;, &#39;f50e44f0134c17b5cf36baa40be0ad5aa11e4698&#39;, &#39;ee82b0567ff07cd67b4540f002f54908535f70b0&#39;, &#39;584007188fb3c34925fa7228b6818d5feeeee44e&#39;, &#39;e69c7d1e1fa06192ca6c76d15de94e8bebc81d38&#39;, &#39;70dfc9611a0f7c614e87124c6400eb6c3dfbad24&#39;, &#39;44361ee976e9183dcee98a6664a8be79fe7c9f2d&#39;, &#39;a4f606ace4950fb0af4fb727300e85ac36981c7b&#39;, &#39;62f3fd0c3006a922182a1e30efa1d385445fb81d&#39;, &#39;400fe3ef0a01a236203819b552c454b9269595af&#39;, &#39;72f0d33b228ca2fdc256f472960bbbac40a44d35&#39;, &#39;652cb30b263a052bc896cc7ba6e3d4505ca55893&#39;, &#39;e3b627f795bb41e7399f18f4aa420cdbc7487095&#39;, &#39;c7f318777976cd677b97068bbae3d24bf441dc88&#39;, &#39;6ed14eb52a4677ee80b4d7f29c21f12d31417383&#39;, &#39;63cac2e140c766954a3e00df7cb55cff1c6f4e6c&#39;, &#39;9f5275733f9a935c4a7e30f299db3037f790f93b&#39;, &#39;06b85b7cc82628a32bd787ef9049e15b28ca51e1&#39;, &#39;7e843e1d13ee74fe1a96fc312a44da01d09cdad6&#39;, &#39;754401ca66cb61c56f57da0388d56c6b466c7c71&#39;, &#39;cc45fef150e8d4b97b4ef73b7bce36ca3d3d5200&#39;, &#39;850ba1c7fc236a20b7a5963ac1a914a590108886&#39;, &#39;81e984af932a250515457d42f5fb0321f8602e0f&#39;, &#39;b04af8b5d22c742a24791de2f504c638c69811d0&#39;, &#39;e084de0efc896186fbf46ff041febd0903912148&#39;, &#39;b068b67e701c9635313d4790f2a77cf01e24ad05&#39;, &#39;26eb6aab88142675a8597612531297dfc054f122&#39;, &#39;543978c2b37005e85ef54e678e2d58d35ea40502&#39;, &#39;472dad3bbce99f6a0e751c6f56ed5b91dc947fb5&#39;, &#39;29f2b57696f7dbe3a4449b421eb1b8a16e64552a&#39;, &#39;01c65f54e9c6b3b8562c1526a4583e46e49304b1&#39;, &#39;c75f6bc7654675f7a8e2d0357eba62770a4436e1&#39;, &#39;9f6384c6e26d7fbf92043bc4ed1f58ae7fbd1f1d&#39;, &#39;6ed47f933935df47d5107ad164792176c97b86dd&#39;, &#39;b3ab5ace82d1e81c0366e34bcd479b61c3d82594&#39;, &#39;0c7adf0efd5966eff7a809a91f757536d3ea0bec&#39;, &#39;bd064149ad685ea560ddc1fa3ed51ac18f7b4a1d&#39;, &#39;9674857e8750f72203024397378f3a7c8ebe26d8&#39;, &#39;6a5fdad534bb6dc6eb8772c6b10e4b716fc78e0a&#39;, &#39;a6d16722d6167e98e0d5d6426a1fa57a1440a6e0&#39;, &#39;a5a5b127cabff8e6b7d95b513d7486bca74687df&#39;, &#39;4e6369def2691320a9b35f3fa2582a26ba75b5cc&#39;, &#39;c0d42e8ced5eedbc730917276164476b6315afab&#39;, &#39;2b7d50c3415dea41917615b4ea82a4dff0df5a31&#39;, &#39;f6c7d3318606220bbf896f42a7b0c677a3eb2d10&#39;, &#39;437d50e9b9e61e637ccd24ff49603dcdc54fe971&#39;, &#39;730b92e48f566b5d0a21c97ef31661806e2bddc8&#39;, &#39;3ec2f085d0f9be8740e7c1a8b081d232ce40c5ca&#39;, &#39;424fcc2c9c22993a4738e06af306a6ed0ebf6cd6&#39;, &#39;d4afff60d01382a493532c8836c9188bd38c1357&#39;, &#39;3fcde37f7e9efa125c52f17edd3569e7cee8d4f9&#39;, &#39;814f6969174a59c70f2e7919cd3483c477ed006c&#39;, &#39;ec6c850d41e97d8636bbb3adeef218c232386e8e&#39;, &#39;5173f4fec83e91ebe776eda490e0180d1733810e&#39;, &#39;c118d91e0629d87aa28cd40934c37dc14fb636f8&#39;, &#39;4ce56ba9900645b7a1ea47bf53bc86081cff9478&#39;, &#39;630fa16f0fc4255065fc7fe18dfe076f7334b320&#39;, &#39;c442d96a306efc9e089c8a475f5b955522f8f445&#39;, &#39;53c9cb566adf356189e905a07fd2ba63d092d20f&#39;, &#39;ddb87d3be8a61641624984d2f4adf61fe283e175&#39;, &#39;863de329e68ad242903bb67777d1ef4cf3909447&#39;, &#39;4697fad6e7906ecef3c4dce893fc04c53da4c6a8&#39;, &#39;0bee3e9b2fde6b82737b0f53f4cf53d29c991877&#39;, &#39;9b913932264ab8b844af9be7de5fb1ea3adc499c&#39;, &#39;80d52496a50dcb4fca82c7f21736995b2bd6b873&#39;, &#39;730a238f994bf1e26c4d8efc90d9275733e7839e&#39;, &#39;1b748e73e78945a2beffdc24354674b74d6cff66&#39;, &#39;07661bdfb68994128694e54ecf163e56ee66d538&#39;, &#39;7f94c1296cb6ede18f064ddcd774103255d85792&#39;, &#39;bffafa504fe65a137d7dab41c1599f41f611684e&#39;, &#39;0afad699d88182a70257342e647a0c1aedbf272d&#39;, &#39;eeafdc18326a8678cba8c65a8d7abc9182d5f254&#39;, &#39;cd1e371bcdc34edff4f74f338040647ef6eb0916&#39;, &#39;955a4dd40f4d9a46542f0dcc4a57e99e6930c755&#39;, &#39;7980fdde17ae480ce01c95ae4a62d8e66931456f&#39;, &#39;cfe795530441a08dc8c056452fb94e886ec83a38&#39;, &#39;c5a89712f3b8752843f6e50adfa0d485f741f1b3&#39;, &#39;0367347d176bcfcad5373398346753cab45cfee3&#39;, &#39;ef70ef8f2c2f710237dbeed12dce226f7a9da775&#39;, &#39;d6bbe3804cb0101c1e3b50fa209a99a846934abd&#39;, &#39;89447ee174af1ed0af14621cf5596cf248970fcf&#39;, &#39;c345e0399e408103ab1e06879d923ac4ddde9733&#39;, &#39;5f85863c74357d6625243ff520c1a095071395eb&#39;, &#39;0e04bd1cd407ec313bb7ef2603d8e9287744fb1b&#39;, &#39;51608485c3ca70c44c77ac373228d959ad1d247b&#39;, &#39;b8343b2794692cae3795f6b2d7ec6c221a46f198&#39;, &#39;84492be58f30d4ad1f5bc3c69722ced7b76403a5&#39;, &#39;b54612a60417883b84e507ad976700a97ec494c6&#39;, &#39;a8adfca8cda813520ad8dfb81efc8f43e29c89b1&#39;, &#39;32a9760028fc6f594155ab03f78b2f00c9a225c1&#39;, &#39;65994cc403204ea2d4598614139320cf40299b13&#39;, &#39;7552a2164a29a82fa4f63da05ef253e5d093b229&#39;, &#39;7faf3fd861cf218b679ad5368760b346873004df&#39;, &#39;49f4e5387538debdd7540227048c31ac224f4442&#39;, &#39;985d5dd301e5082ffe99875f212b154991b5b102&#39;, &#39;302f7f084cb3b9352b836b246fe17b9fa0f3786a&#39;, &#39;f82ff812a3af1537ecb6a218a88327ce53fb99d9&#39;, &#39;b9de1dd1e35c270aec9ad8b0061eab6636b68b7e&#39;, &#39;9894fe12f7e8eb85c3b90759b933f16f214b17ec&#39;, &#39;709f831cb9b751ef1f4f2b005bc2e03233817419&#39;, &#39;145f45a295b03d30194b5bb4dbe43585ae939185&#39;, &#39;23dc57ca3d31c63e27e335941a14e1f76f139f0f&#39;, &#39;74aa1e2c112fc45cfa9784be7090ae1d1ce00a63&#39;, &#39;8ffd33dcbfbceb2d406b6aa77374db1c82dd1d64&#39;, &#39;6b7c8a173a516d3153731e94a184de61496f62f8&#39;, &#39;38403d48e7de0830845354bd1707895d9bd6ac1f&#39;, &#39;62125299fe6e998f0650e2b587785d34a23e1d12&#39;, &#39;364a1b038a8437d5054475d2093a118199bb73bc&#39;, &#39;4be639f819b40883ba58294e95cd81f8f54cc710&#39;, &#39;093391cacc42574fad45186b10becee2bc00f1c7&#39;, &#39;0fb9899321498f535d3549edddacdfcff8d52540&#39;, &#39;bbd77dac653eacfb78053bede8a5e4efb123e81c&#39;, &#39;26e05dcfe296047fcc7d0b6a8417448418e3e77b&#39;, &#39;e5dc1c0f7ed413bea60d130102a0b187497a8336&#39;, &#39;f9f6b95babe50ced2f3bd351f1ef5f01d463a2b2&#39;, &#39;6087a4072cfc78bda55b4658bb52753c4f44626b&#39;, &#39;da74a3c7e519d4d0f67212e2eec09094af721654&#39;, &#39;3782bf128b3cf7252534c10d96df789d30dc4556&#39;, &#39;402caba1e8cc6abf25bfd1611efefc3455ba39f5&#39;, &#39;84327d5dc29930cbe43082bb5d04473a993d5d39&#39;, &#39;e79f18984394941ab4fcdcd9a499ae1de506a2c7&#39;, &#39;5e5f5678acd29691cb6b5d5389181915cd0440ea&#39;, &#39;d1ef4e0fde3e2ea24d024a7bba36671397443345&#39;, &#39;0d504f5df27f76b74e9a855c43e92d39d46cebfe&#39;, &#39;a0b2d2c262f93042e0cdf752b33020445cc4da59&#39;, &#39;f182fb9e443a7e271242881bc50748409b8f20fe&#39;, &#39;0329845cc51aecd0cceda4f71f388bed51124e3b&#39;, &#39;8ecbb71e963cd60af1bd606146437c8bd07357f4&#39;, &#39;4e959b987353ba456abe3f7626988c0a292c5f2c&#39;, &#39;480b723bab3dd4ff5327dba555f8bf87bd76d47c&#39;, &#39;713b51fe91723be8ee00b12905857d43bcbeb04b&#39;, &#39;5846dd8fdc58a4cab8b516f0f15c7fad7dbe6c2f&#39;, &#39;fc103710adf4ea3234f61681009ac5a787c9923e&#39;, &#39;1a0c5e246dbb7c19537015b12477e00afd979679&#39;, &#39;59529a75e3ffd05e748ee4eafac1429e6d0439e1&#39;, &#39;9ecf8469dd81573554e7354506c040710ac75d30&#39;, &#39;38bcc44472d9f69c2f7719ca039ba7e66fbb936a&#39;, &#39;36b4e79375554f26ccdb6928105c6e43de1996d2&#39;, &#39;38d47684be260a5824d85bd414772b947a693586&#39;, &#39;ab90e4f6f372a9bc46b1ba1a54a1f305f8aa0f9f&#39;, &#39;2ecc0be622f2b83ae672b622b001031150c3449a&#39;, &#39;2756c2c6a231927d2b574179c4095802d801a452&#39;, &#39;fecad9e752c791b66fa5db2a29497b26b377ce7e&#39;, &#39;6861a0d02fe982ebb05db38929f857d091141f54&#39;, &#39;3bbe329f578f6a26d339ed322b04c2c8377647de&#39;, &#39;721d8681fbaae2e0128660c8aec6fcd3703313d1&#39;, &#39;4cb2ab550ab799140cc70e7f8dc2ea4e56b1aebe&#39;, &#39;98fde4914c4eb8ac70d67b0622d9533580b8dadb&#39;, &#39;a09dfe4defcf25c90db61c79a7cea58f186db8d9&#39;, &#39;d563ad3fe7aa5a8ec023eb38a45334797d646b0d&#39;, &#39;f6364b4d384e4f1c199171036c6a98e7df03bc4c&#39;, &#39;ce8c11f57163e26f6e5af28a6b33bceb68af5382&#39;, &#39;41cf5b72afa7af50579d4cbd9d5b0c19a71f6eb0&#39;, &#39;061691a34544529a37d18e6bd7e250ccdc86a3d0&#39;, &#39;6195a61a7981f48dfa41b7570bae9ed7ef5a56a8&#39;, &#39;cf8ad3aabb23023921894a134a298857988cc08c&#39;, &#39;748334809b5a1ee04eba9ce7a9669802f1f0acef&#39;, &#39;a6486533dc72a7815c5098075ee56dbfd54f8412&#39;, &#39;9a75b125415871f27d255b3cf1ac68617c3ed0d3&#39;, &#39;4a4c6851a727d4af372b53e6c98f40fc774a0733&#39;, &#39;3e8710c09f6edbe1de57ae9028183b8dc1434b8a&#39;, &#39;928d5503ba42f2d28f6a601696ae87a45f1f7aac&#39;, &#39;c6b803d2d31a72d262371402bf71a135dfcee391&#39;, &#39;1a551601efea04419c80ef2981896337b93cb2f6&#39;, &#39;00925daa9b299cdc19efea39fc8efab2e4ffd495&#39;, &#39;3bf68889a0e5ef7d65a33b2420fd93a18beb94ee&#39;, &#39;386728ecb79a971846d0266ccb10eaffd6d61da6&#39;, &#39;a1b4e67c20ae8b3b0a5ffc8f93d10c9882f59345&#39;, &#39;f9c46ef4d632a4e426f25ac85881ee248695637f&#39;, &#39;b8e0abd8308743829caa3d039464e50f58139d68&#39;, &#39;31327ba9986ad1a89df29f03ae0b772cd87905f4&#39;, &#39;41c370b3b1822af3d2bdfeacdc920ececf3440ab&#39;, &#39;071b0ceb19e8eedfbf2344ab88f3628d6052ef47&#39;, &#39;e81b64b673c41198235d081a5f8ccb290f7cd725&#39;, &#39;e6d737b19dcc1973dc3e2df01bbd29dedf3bf6fc&#39;, &#39;bcddc36e286b6a329fe9e1d9f3ecf7714b742e9a&#39;, &#39;b38ef83c7506a91b7bf623ce4fe38a56cd1749a9&#39;, &#39;8c8b66a6c001726bb16a74f6433054b1336f1df7&#39;, &#39;8193bb05c89ba0605631325925228c2504c60acc&#39;, &#39;e12df4aae8e7c52357ce2a0ab3b731b463948a71&#39;, &#39;18a1591ac0235cd892a8f79bab6530f1b7f00307&#39;, &#39;a9abea677bbed94df080e5b8c2845abf50d28feb&#39;, &#39;4a2e589d89fb904494eed355c15c104d6a81699a&#39;, &#39;4618db79aff9f7015e9a3a9341e7e070d104c81e&#39;, &#39;f412c3e5d06255ddda6db715fb15aba0642a8611&#39;, &#39;e713c58a56f7cf00b77ed5d309bd1b6d3a9e168f&#39;, &#39;f405115ab690ec7bcaa0c49bf7a6068b78825b18&#39;, &#39;febc81d10b43187ebba08c7c3ad62e648de04625&#39;, &#39;f480155d0140c04169bc35b65393aaae30b8c172&#39;, &#39;241385d6e29e4906d852965326cae783026598e5&#39;, &#39;1ad834b4a6bb31b74be448b8325c4a8ec777ae58&#39;, &#39;f67697e3c1d4e862d25cc05bcb491d27add5f62a&#39;, &#39;9202a1a02ba7c1c8fab88b3124b07dc4a0636731&#39;, &#39;855c82ce4aad685c4e163325f4d3df1751788c76&#39;, &#39;03f852778cb9892e50a5c355fd438b4a66cc31d4&#39;, &#39;360b003cef7f84df845afec04111dcf3fdcf2024&#39;, &#39;223b19c13344f75b9f1bb839da0993114f29be00&#39;, &#39;8647633fb4d7f579bae5ef7581f316789b9e37f0&#39;, &#39;536b9785160f9ab90fefc9e0ef1a41438534a28f&#39;, &#39;da773d0db6698f98a965f3c315d3db12510d2bbb&#39;, &#39;ef740f7647fd2d268c491bab4adcbef4a4506eed&#39;, &#39;4a2c61b1ebaf7f12beda0d309527464d3b312f0b&#39;, &#39;f93cf0d20ab701dc555ccae5c97361c99bc503f3&#39;, &#39;0013ac66d70d7c75973f4cea46e439fb89bcc4b4&#39;, &#39;4c6d781573e60772218e0131295fe5a49978317b&#39;, &#39;335381f7e4b5dca6254b7b4ae4c90caf55e2e275&#39;, &#39;ba3972d374852d7bb7f79c18a0245c181d01388d&#39;, &#39;009aa1b918708a0ed104a347013e795ff6ef7ee9&#39;, &#39;c27840d7385b5e2b9c7ed803c7dd74bacaa03028&#39;, &#39;2fd3cd8d035e791b9ddd803efc43818c2fd0c8d8&#39;, &#39;d8fbbb772c0590e1924f08663dc705714d4b23df&#39;, &#39;ea12737d0a2782060db9329ef30994dd3fc08f61&#39;, &#39;7455471f750ed7d693d8cc48b0f564a3c8949b4f&#39;, &#39;d677f619821dd34c12beb9a0b8aa64b8fce50e49&#39;, &#39;43970ea50bfe9a51628787c196af88cca2423b19&#39;, &#39;d2c15f22dc873d622909a56d844eb320b6a93e9a&#39;, &#39;bd507ac1535a9bc2ab5d8bce2cc6e14a26b358b3&#39;, &#39;f55e84079b1cffb0bf8cd21cec49622e28cd6c55&#39;, &#39;9fd6699e70242008ca662cced994f26ae22db376&#39;, &#39;1c767c560c913867d8128bbbf472463626bde81e&#39;, &#39;a519004695b42336bc47d667e43ac2b1f00be398&#39;, &#39;1a1939dfa95a7e956b51a0f28035bb60544da75b&#39;, &#39;ddbf6b6d8db3bc1c53b066c4fb2063c234e87f0e&#39;, &#39;dd9170f3a48294bea0fce4ad928514feed0ec4bd&#39;, &#39;a6c75d4746022c181a3c910193c968f3dc3d2f11&#39;, &#39;cf8a9ba185569d65940e27c658055c7b6f6a4b99&#39;, &#39;b9491b1600331cd159dc330b9cc6e675ab3546fb&#39;, &#39;030bb0bcf993e98fe52cea4a72aef199e0461632&#39;, &#39;2797970cb598e4444c41c0f51462bf9368f06d15&#39;, &#39;5c20c9b2612b61dd9899291e059da347553074cd&#39;, &#39;aaa3faadc32cc629134d515d1b770127149c5538&#39;, &#39;d4bbbd47b64e37caf01acc1a117106b898956a1c&#39;, &#39;636ac834c02fae485ef6e7447faefe7b9d101e01&#39;, &#39;ffc8e873240ddbbc5ecd5cda8f0d45cf946ec484&#39;, &#39;1a07819a5da81f54e23d3eabf4631ab7c10f6f43&#39;, &#39;a240bf43356ec2c98c1c3c28c0e39541f07479d6&#39;, &#39;c247c4d9e86eb6f0ccb8e72c75c3bf2f5341793e&#39;, &#39;249105e182d4581ace06d586f8f6ed0fe7d00dca&#39;, &#39;d4041a6e2e22e7533147617496cee9dcfca4b8c1&#39;, &#39;3cb8171fc628ddf8b8a51fe9f5345e12245c0e78&#39;, &#39;cf3752dc1ab20d8dc61ff0635915af8254d6f330&#39;, &#39;a90b346ff0bb109fe9086c89a641b54a7fd83ad9&#39;, &#39;aee9592566f4fdfa8c50f05888cbc0f901cef319&#39;, &#39;e3ce43f0feebabfc57fb6d96669b410a47aa77c3&#39;, &#39;9f44c70ebb0abea716ab99b505f30a07ee58065e&#39;, &#39;10799ec1e4e1169590073afd3cd8a9a9c6e66f84&#39;, &#39;27f6483c824b53c997ef57b1b0747e5b07dfd7f7&#39;, &#39;b371d2e6b33af69b81405ec2f76f66f0df028af2&#39;, &#39;b502e29e1f6b71538e6d9dcc200d7a765c256be7&#39;, &#39;ee609332e6ca387d64246fb874abde819620d24d&#39;, &#39;4dbe42f7430d62729aa393bbc664cb8d64daa613&#39;, &#39;619c241f6d3bb95cea4d5e618ecce291c8f879fc&#39;, &#39;32d373b5ef9714fb5f1c88e3ce7cd540c0634a3f&#39;, &#39;a519c7e5f21d37c1f20b91ec285c5b785f56f15c&#39;, &#39;e363f488975c1b95e350ee075710361b419aff0c&#39;, &#39;76fbaa4445c57e18f1b804724f1202b71f3d51db&#39;, &#39;41b4c6c765cbe9c877fedfe5884a9c915d70f348&#39;, &#39;fb7e1a161ef1ebe2588abd801730f5bf1e1fbee0&#39;, &#39;519089a937939996a7becdcefb91608a7db7f620&#39;, &#39;fe286dbad990844c571314cebdcfc8d2fc23c705&#39;, &#39;2bb643d14e3c7349c80de8e5a984ba052924bc91&#39;, &#39;5e0f1d4a6acd2a4ef4af5448bb58fdf7ae064009&#39;, &#39;edfd891ff98af1ec3a26753e44eaa836d7f4db53&#39;, &#39;4f5cb8fab5cc63879f1b655b97cfaf31d6483c6d&#39;, &#39;e422024935eb93c7daef5527995ad721e331c75f&#39;, &#39;85af50a7b58bc634d02ad05108dc6bfa5e893ad3&#39;, &#39;a2bda66c7d646ef1bf863ef4f1c15bfd385ecf29&#39;, &#39;06654815e419e1a8118e8338289c8541775ca975&#39;, &#39;37124c4a7f022726796b9f8dc1fc01926c8004c8&#39;, &#39;1660cf7aca03752017fa194ad92fbf95b018348b&#39;, &#39;792569244aba1e0eec1c907a727185ce9fca25ae&#39;, &#39;02acf0c0a80149c6d55f97f7cc713826bc68f6ca&#39;, &#39;e1da16fe4c3e1957977b5800678d8cd9715f4cf3&#39;, &#39;874a255b146083e60cfd3ddbd25ffa05405ba34d&#39;, &#39;0504347c2d2d71393bb00a94987d4082b89f3916&#39;, &#39;d81fa16dc3f1b26e9fdb2888b422d3195baec5b9&#39;, &#39;eea2bd1d27ec101f59daee69afdbdd3d98fa302d&#39;, &#39;fc9a857fb421011e10f9a73223d0a9efa3c81853&#39;, &#39;fbbe656d9da7f030ca6c260c6a6eeda4f36de496&#39;, &#39;3483cb466a03428e107c212619af92d97f17bdc5&#39;, &#39;ce19792e9e098cfc835c03b89726982a0c40d9a9&#39;, &#39;f5ee83b29e03d54a3e6e34e45b0e36cb0711c856&#39;, &#39;0d8c23e90ae5a12c698f1173740c25be0460451a&#39;, &#39;2dfd2a0f5337a6de0f68c5c5859e5c425d57b685&#39;, &#39;f9284891c608af54463390680538e932fb754147&#39;, &#39;f62775f5667b70e0584a812f8f96113981f129a8&#39;, &#39;69fb56a6fb793579a2c98bbd60458e73544554e5&#39;, &#39;f0a771cdbb42f128a75b41bd3ac04f86e433b211&#39;, &#39;0dd95f7986e57527beff3522619f00eef553af5b&#39;, &#39;50d0e49d379b6fe5ee75b1b9109a10d8986d5662&#39;, &#39;364611f74cfa61acb7b0c1db93d58fa77c2cb47f&#39;, &#39;e22b6049f61359a8a9a5930362b3f4b92df88d0d&#39;, &#39;f52e050a4274cf71a9e4c3cf0d215c4765267336&#39;, &#39;7a50cd322b1970b8484d8d911fba24d51eb3773b&#39;, &#39;fc38afc7f220ceb9d50a6ee112c6c61e787fb493&#39;, &#39;c240ce99b8ad5aafc3b8132424c87c89dcc0756b&#39;, &#39;8f0df18e6831c88b0ec11a8da8a7d810a114b07c&#39;, &#39;23a45d4215045858d00b662a2a4b7496271274e9&#39;, &#39;c42928c65042d687f5b4691c30478cc7c0ea2028&#39;, &#39;0b411ae5c1928806d52041ae6306445f84923f60&#39;, &#39;8873aeb9a79f664c338f755e44f1a8460b7cecff&#39;, &#39;ff7808a84bfb27eef1bb21f7039f04c4d22ca21d&#39;, &#39;1a5de58c95774f97a869a7aba0fbdf7379b63ae3&#39;, &#39;a0097d16c03d597496b71ee59befebdc0b0bb0c9&#39;, &#39;802e552d705368520d9f9bbd76f0c86bb0ad98b5&#39;, &#39;5956d74ace49eae70992e36f2f79135488d92d21&#39;, &#39;17877c79f0709ec12dd3cf5fb180299ff6ed0366&#39;, &#39;b855afec9117b2402900b0372eba3839a280cbcc&#39;, &#39;da1cd631d46ffc2bedfba52f4b899f2a18705cd9&#39;, &#39;79d221c05559c8729783f54e535cd48e07011650&#39;, &#39;20357b4c36c3b5b8d4aae79428edf85886d219df&#39;, &#39;fae0239e84f261592857f663f1320228ece22334&#39;, &#39;6396c3fdd0e8392de6ab8349f97852f15829ad80&#39;, &#39;63570c7b21c43a79ceb9b22b865b2427fb336f37&#39;, &#39;bff8bb2f25200c389c0e909422d509336b97e75d&#39;, &#39;a1d249716deea439c5e7c8fadccdc493f20958cd&#39;, &#39;fcfb3cb541a09db9d2d50a6fc6ba9674d527b545&#39;, &#39;0eaaea012c5bfa0ada8a0d81060d823a7952084a&#39;, &#39;09e2d5530dacbf3fcc484ac7f53bd1e0119ce91d&#39;, &#39;87cee51419654deb5678e944b83e9ebd9f9afa96&#39;, &#39;a8c5acebf9e3f253d05300324c24172a8f525e57&#39;, &#39;ec426b7f5e725d6b6eddddb5f9ba2455631e965f&#39;, &#39;31261c59dc2c5dd43be7448df644f9692e57426d&#39;, &#39;c16e92989784bc39708c5821b399de84cd3b489e&#39;, &#39;c37623f61fc21d57b2785ca5e8a04db692221f13&#39;, &#39;62745c58692440773debaa31843806efa98aa32d&#39;, &#39;7e7f4441faa9031340702c614478c4f50e3e3430&#39;, &#39;1eb337929986fe664e2ed69db1def714a15c91e1&#39;, &#39;2da7c48bdf1f943ad2efd0da1f134c1929a91584&#39;, &#39;d58ce4e6db55ba62e9e1b98d1dd0aa81f3a04a6a&#39;, &#39;bd332cca0bfdfef91677c8291d300bcd2539e184&#39;, &#39;259fdffd95e325c58df00206edcaee3e94225098&#39;, &#39;a33cb0bdeff8aec5b5a3e1e522348de77a4adf18&#39;, &#39;94d34264c8d0c2a4b589842048c2eb875fecb91a&#39;, &#39;7e7569f4d702f17918322ea391a091a0096eed9b&#39;, &#39;b21a645634df096257835bc63dcfa28a0e03763d&#39;, &#39;bf36e3f6b314e74ffef0ed5367aa5b49ad2617ab&#39;, &#39;c4d8c676dfd5599332bf97919f14cb4b6c1aeb81&#39;, &#39;fde56abb1d6c82c536d804f0b8b592ded03c3533&#39;, &#39;5e2cf36545d9265d25d48db62f145ab8b4643872&#39;, &#39;62a23767551b30300a3e0108a5c54772fac473cb&#39;, &#39;6b54a62c7b053bf89bd64c739ce68463441c0af7&#39;, &#39;3049fe9fd2fa7a4ab9311af802723aee20e75cce&#39;, &#39;9dee7fa09857e1215d089daf2077f5f58f594290&#39;, &#39;6eae1e26661b95f47258f502ff7450ba321e4d24&#39;, &#39;78bf225b891ab9614f85f4b191a3717c5b0659c0&#39;, &#39;70afc3b5bb196d33952eaf36021ee9c95d61ac85&#39;, &#39;f57e7c05558792d364de984e988ee7da0fbc8f34&#39;, &#39;32602857b41555bb2cc1a4d88aa9b0c2543f3af9&#39;, &#39;88549dfae2c1ba12cd9275b06dc7037765d67635&#39;, &#39;8a13db821673aa28ceaded565168d623b4be1fb2&#39;, &#39;242fc4983ec088c08bc1974d62a7b194fe283004&#39;, &#39;2343362c8d0d75808309b29d771efe3da20fe983&#39;, &#39;05f09b0f0b922e0f521c35fe6c6ee8dd694865ea&#39;, &#39;87462bdccd95b3607467362b09f47302cd933fb9&#39;, &#39;ea300b511e018b7e97cf8727f79ee5c2051a1b08&#39;, &#39;1c2a9d32d80193503083cada960a8c1fda03dc05&#39;, &#39;fe3c005e1f494cab59df6fa134bc96f5878572b8&#39;, &#39;925bc6bce1441cae024a015d62cff03dcf3f74ab&#39;, &#39;da3494f5e13b916143fb279838b02b90b3b6c11c&#39;, &#39;a36f76711007accd4d9116f8634009d41b954bd2&#39;, &#39;d41e508b1289767764f4c5cde75ff7bab56d290d&#39;, &#39;d7b674367398cdca3f186d7989004242535a96b2&#39;, &#39;8a2bd93a8596a85e9416139ed2964a16c0effc8e&#39;, &#39;b766feb544c4c4e480c018159d62e010c7d4f147&#39;, &#39;a8a9d61066185fd29fd5a6ad2b2750ca78b39513&#39;, &#39;6607ae212a8b932a805cd32805ca4c9ce4dd5008&#39;, &#39;0bb810bd6b9619ad1cc949dce0c7ce333caffb3f&#39;, &#39;996ea5e0bf06f4d66d63cca99e7386fc30239e2a&#39;, &#39;c9f815b4bc492d40e710ac611012a0ada75e1299&#39;, &#39;515c3a3607ca600d90ae75e1361be6bb6fecf795&#39;, &#39;58ce1702a1560aa9a1e2fdf9f809a6ca7750d54e&#39;, &#39;40c014380438d84c6cb4ab9e7332bacad2574f9b&#39;, &#39;3804fc85ef6d843849021bb8310d8cbbcf5dfec6&#39;, &#39;149d39ba8823e59e7d317a5461ada2096aa2c3e1&#39;, &#39;06f0d25847131ee7906092b68c35a160f6f14123&#39;, &#39;55bffa83b12af52743e5c9a6279081ee9f261219&#39;, &#39;8cd36289fb750ac2ab3c7baa768eea1bd6c740f5&#39;, &#39;596d1939e4a8a5d996356106357af43b7424192b&#39;, &#39;7358b289a0346231bccb1df4c56eeb683686ea26&#39;, &#39;b97c9c98a836234f91d5422c259d02ad18a690e2&#39;, &#39;382ce6fff836414c29517ea6348d7bcaeec1e34f&#39;, &#39;c995166203a8fe39fd97ba77e1d04195a08e3c2b&#39;, &#39;38f362b164cfd9a5d9057b19088a2f75cb4df09f&#39;, &#39;395272a2128fff2a5be9a0007bfe20a7c41605be&#39;, &#39;b38b801fc8b3c41eeb1a3d1c52923016901f835a&#39;, &#39;852439278cf357b73c88593a4aa924aa76f827a2&#39;, &#39;030fe2412ed9828fa3ebf9e3f7617aff740fe0f9&#39;, &#39;f9a5114017ca2570f84817c6081d0d3811b0afe2&#39;, &#39;3f7ace8690324ef1208b4c303767a227b316f14a&#39;, &#39;bcc981c06278ca00ee242d511c53d3fd5ca23d8c&#39;, &#39;0a9ba062f25875a113252bc08dedb281c7fb928e&#39;, &#39;4abac91e01f1cb7cd925ed1cca8132f26f9f3b79&#39;, &#39;ca4a58524b17a8cc01e895bed9de833e12a4be43&#39;, &#39;951b59692e8db967600f21fde389eea69e451c76&#39;, &#39;1d375a13934cc0c954453aa64d7df43fb0cae930&#39;, &#39;01786858bacfed732c0d6e7e2c64d6d0557db04f&#39;, &#39;fa750ad38b28fc89972e55b29549e8fb3a25e207&#39;, &#39;dcb03eb152c74b5b4bd558c8781bf3b05acb2bf4&#39;, &#39;e276bf345ed77d149a0f30451f3289a503e83bb0&#39;, &#39;bb3afd9756b7d9c53e1323123613970f4ef6c392&#39;, &#39;c9debef5fa6dc4b1845d4dc0b0b2c0f51470b087&#39;, &#39;666400cb9c9cbd2178d39b6d5427a167e9b693d1&#39;, &#39;23288153bf5405a9f0d0c96a3689ecbfe571078d&#39;, &#39;1b6d6a701b1025a7fa98df599da7967f8cb8bbce&#39;, &#39;b0f7450450cac32ee8f06f89ba1054aa90ee772b&#39;, &#39;e0801af5a84cb5cd689b7cb0cfbbb7a9dfdfdd5b&#39;, &#39;d10232713580d32bd09097942150127627903b5d&#39;, &#39;25bd50fe97227f393e5ff996d581b497e5577d97&#39;, &#39;b227f008a57cf61d5ae0cd78346d56249e42be1a&#39;, &#39;7f4cd89305164b3ce5ee757bd9b7e326329aa4f5&#39;, &#39;3f1d63160573b06a324d183c73ba3be2e1413264&#39;, &#39;f4707315e359d8a107b79f1d37fd6a6db67b1758&#39;, &#39;b4ceb760a26d6cd5c4a16cfd92925681f29df6c2&#39;, &#39;712081aa93b547456409f5c349d674753f783480&#39;, &#39;aac1771daba01c8c63f80f424f5bf0f7836367ff&#39;, &#39;01ef488be49304e74036d55c9903d4cf7b80d3b1&#39;, &#39;f8552c43f750efabf1cefbd55a6e56a23cec216f&#39;, &#39;6055bbfc6ffb6ca8e89eb0d44ce93a99adddb2ea&#39;, &#39;b7da431d83cc5d583479d35ea481c45c769c1ae5&#39;, &#39;5994aebe08bda176c8d547641b7378dc51272e9d&#39;, &#39;443f1508c5f8ec93c5ca66d1f571bd1b4c8ba3e0&#39;, &#39;fd3bcedf1e92b48def9c5a8e981c2cfdbe8a94a2&#39;, &#39;bfcf9eef7c57b2a9ce575cc44fe30488efdfa613&#39;, &#39;161eb5789890a680c8abef7f581f5b620c3f28fc&#39;, &#39;a7041bfa51a4a8997fac2460ef4129e3908908d0&#39;, &#39;473778b8cd029e98ee5fc37447a0212d5e5bcd94&#39;, &#39;cc028cc413d4630c7b73ceae11ef43d8b0033c46&#39;, &#39;8a89d3c9d216b8c715e02be14b04c84ae6d7ad29&#39;, &#39;4bd6981317ac9bdfdec113f93d51845819ed914b&#39;, &#39;45939681b117c9a7f99ead7a3d2ca02036276463&#39;, &#39;497629eac3282a952703ae49904b43729e356a77&#39;, &#39;875f56aeb0a6b21b73fb50e0dcf905087b68e982&#39;, &#39;761e06524ba2e414b0e230730ba064af6617089c&#39;, &#39;5d588d4c32466a223f8ac4fdf71e486201d93f74&#39;, &#39;bb33a16f8c106d67d3f3eca0ca9a3d21818bb03b&#39;, &#39;39c514402c26a41d1d92b8c6036ba379219a9488&#39;, &#39;4edd28b685eb7cefde2d2b3ed28d827ce40091cf&#39;, &#39;ef9eec4e27e1031cefedb4e72e1c02968caa5a60&#39;, &#39;6beb79500a0b7bdaf7ca97d07ef2d7f7b6a3fa44&#39;, &#39;36f308b2b49d801e4b2aeb67a11ab957c20fcea9&#39;, &#39;40e56613067a817e5398eda8ed9e0868b2a88df9&#39;, &#39;251f8ea473e161db72df8dcd68f3d6f1bf6c7395&#39;, &#39;0aeb4a05084f0c3be23a2799e10aa1d8a8260525&#39;, &#39;62fa6f89dd5f9a0904cdee6c4e0a83eb1b10d3ba&#39;, &#39;bf1e89cf7c7bd9e69abd142da78edfa3f66095e6&#39;, &#39;b08677a0903afaaa3982339d08a4e4df60a04e49&#39;, &#39;ab70a9bce29198ff4281241a839d6837bed76c84&#39;, &#39;bd1e62516c3595354514932f90ddf346eb9dd0aa&#39;, &#39;e5547d2582937498652696dc7ac65a45dce2ff4d&#39;, &#39;9560c8a043c0b97ce97f02701d268f6b36278155&#39;, &#39;fa66a30aab16b7ca25811815d9f47f9f58315cc7&#39;, &#39;d61b6b9e6f532515b8874973d4c0ef07423b357c&#39;, &#39;a7f3ba4a202b1acbd2c8d7dcf56c5c38c785dba0&#39;, &#39;e753029dcae7fdfd519781b25a8f9a8889b7cdf0&#39;, &#39;e201e7dfbfe856530319fe4a97943acb2c0c3b08&#39;, &#39;282e16cf3918c43b7045f63b761b2faa3f824a78&#39;, &#39;edefdc2982be706c6b1b7733a7e17f3d82142e28&#39;, &#39;212a32a24a33450de00d00c8c09d35b4937776f5&#39;, &#39;60db8c4f520a955e5510c6fd32495da1dc7a465c&#39;, &#39;6cb051ccb43abaa35592d1aada3b45a15569ef10&#39;, &#39;ba86367eb8639a9b7be1611d0eef7c2728448cbe&#39;, &#39;22f9698ee12f2500b3b9d5fded3e10abfb21c12a&#39;, &#39;27546971cd8c81c154f7ddea5693087718d1e4a9&#39;, &#39;a917ea81473aa2c9c646ef24face1365f86c16eb&#39;, &#39;a8bd3ca1e5331cc963a83304722e9485e0fb3811&#39;, &#39;384f973bd6c0855c3054dff62a4c86d4217dee91&#39;, &#39;4023b48030e27554f0aa5bfe4156930bca87a7c5&#39;, &#39;3c186a797afddab7707ff1fe23b9bbbf01bdbb9e&#39;, &#39;9810f302fbfc5f85dbd03d053572cc3eed9b773f&#39;, &#39;c43da7a073054ebf6403a20b93022ea5737d9307&#39;, &#39;866bd1d9852443268d8e82cb5156489f1aa4a50d&#39;, &#39;6ecc172083702675c5878239f11f1e2eb3e5427e&#39;, &#39;1237fdb1e9d8fc3fc55f5cc262ca94f782484545&#39;, &#39;68a67b9f48b5f66f02abf28c2d16a26a473eaa8f&#39;, &#39;534de32720d3dc8294382c3d56cb7d3a979f182a&#39;, &#39;3a3ce2308aaeac372baf32e055d4d334c9b14aa3&#39;, &#39;e281871b59ccd1cf7f3e4dde5ff9343c7247cb81&#39;, &#39;7dacfd62d560d2e582bab6fadb471941eacc5e55&#39;, &#39;83f9dd84556786c87d3f5ccaa2042dc60f397ad0&#39;, &#39;90cf7e09494d80661e92018a2f19a3faa515e591&#39;, &#39;4dcb6942b5aa728293c598aeb9ab2ea58456bfbb&#39;, &#39;d08a31f73401f594f7c3bb0544d2a622ff8132e2&#39;, &#39;de0d1c08c869ca12dd3254fc1d4c5477877ed163&#39;, &#39;f044724c10026394d7a15aff1b51ab5370883591&#39;, &#39;79508665f92eb1eff56d0991d5a86ea049d20e03&#39;, &#39;45c401c8fcc24c5af8148a9078e446de741f5348&#39;, &#39;b19195fb9d2d71cc206bdf401876620a0c2c3f99&#39;, &#39;472afc20a33de82899066658fac8ea93b7e71bf2&#39;, &#39;876d9782bb8a28f2f58edfb9b7c759ca31bf425e&#39;, &#39;d6d87959b2d02f606148d33ec7170c3989b84242&#39;, &#39;2ea2bdd0b17cdf13a02591dd065c582b4e0b3a84&#39;, &#39;30bcbf0ef344e527606ea63d6f70492b5accc378&#39;, &#39;dbd673caaf8ad86c1ccd171dbded9285acae5af4&#39;, &#39;2d12f648fe1198fbc09125d48cd223f66def388c&#39;, &#39;8bc0d38f39d72410e6e514b951246117dc2c0ba6&#39;, &#39;0057a3015750b60110cf9b1db68e649f0a3f7aae&#39;, &#39;7c656cc7f07d491a6af572bddd67b1f2004cc90c&#39;, &#39;b0ae043b89a0d743642e99513b43214a0a7dc304&#39;, &#39;8b3a92ded5762da735716f34d472304f76fe86d7&#39;, &#39;af61f970acd7b701f3f49d0cd9600f28cf41f6a8&#39;, &#39;90ffa439c719a3cbdc33d556d5cccaff83f6ab89&#39;, &#39;16f9fce8b4d64360e6eb24d3d4bf8183a44c4c10&#39;, &#39;b48cc742a63a5448aa33caf025d06c22a8b704aa&#39;, &#39;3b04f9dabeaa78db9c70d4b99053b8ac57bbc0ab&#39;, &#39;af736f1c400c52fc987ca891f388111f45da6cae&#39;, &#39;7c4a063fa7fde9e025c82cc914b1f0c586d6a26b&#39;, &#39;e2ee98d3082db878f1b09ae96110aebcc3a96d0c&#39;, &#39;2c615b7b1822b176626caf42e92ba632c0cabe43&#39;, &#39;3412bd5e75c8c21e5285ea019b1fc5ff7567cd30&#39;, &#39;259f3b428ba774fd25ef3eae8c34969f69ae79ae&#39;, &#39;672185ba0cad38cec6c07bb333136318e30277a1&#39;, &#39;c790baf1867fb2a0321dcfc2b3d68deafc114be6&#39;, &#39;430967aa71adf24daec12efeffb8d0a1ae02a833&#39;, &#39;70a2eb20caeec6cc233a477c888dd68e94815c85&#39;, &#39;a450a7809dd746f7acf8a746a34c1ad0cce02271&#39;, &#39;2d4ac8dc98b4be3c24437ecad180ade9296d0d43&#39;, &#39;4d9bd263eb9ca63008dd8edb7fbbf73ee90e9f30&#39;, &#39;67f6ee693c2ede081c237a868a081f973374a3c7&#39;, &#39;c617057ba948e3e12e8c251fc928ae467a5df497&#39;, &#39;ac599163cb43a590a45f86b05181f778ebce8b6d&#39;, &#39;bb58109fd9019059db080ba74d5dbcf6bd7047c8&#39;, &#39;e79291ee5bd93a2d8a7edd498cb0555f158a4f7c&#39;, &#39;888125878bdf49b4e056534093a0235898531fb6&#39;, &#39;b3f5a73cd08702489c5ec24c4d23d6e7a66aa416&#39;, &#39;4e6402c43e8be99505baf093c4f583e6f1f87c97&#39;, &#39;2ac281e7c0c0105df73f405549a641065b565d1e&#39;, &#39;e1ba968ecf7a043d2446f4dc6ef2de93696473c2&#39;, &#39;ae119c7e709f604d86b203ed99f29379b2fca84a&#39;, &#39;dfb5e9af3263beb726444bcd30e923b44bfa40be&#39;, &#39;ff53eec5698c8a9222b6834ef043ff0486d7b710&#39;, &#39;6f63664b9c1d65a75d539e6e46d2b59d09c51efb&#39;, &#39;5e891592be5d31cd33047f8174b8ae088db756b8&#39;, &#39;1db750377f06124a6b398efb4167d6a0609c480a&#39;, &#39;966417470dd4e9a78a6e8d5cb09ab89f47c4b30f&#39;, &#39;018d8610e2ec450f6978c2d63dc0e30bf26829f8&#39;, &#39;9cfdb1a4cff11da6e18df309e662a2021663bfde&#39;, &#39;a04fb50021bc81357f5f0f44d0149971e46eedbb&#39;, &#39;eef6a97def739b6d6f78330109e8eb0bd396a6ba&#39;, &#39;4160d62a407d90c7d06ef644af05cf33a8edef2f&#39;, &#39;36c7cdb9080a4114b4b05886b7bf8b4fbe33c825&#39;, &#39;ee712d716d113d435e57c55f39986d1d67d3f9ef&#39;, &#39;7fc2790134444f549e3c0a7ae20d62d5f67c05b3&#39;, &#39;e535ca8a73b118fa69a083cbb03a20287c0585da&#39;, &#39;908608f29225ea511aae805bf72f5ed08011c363&#39;, &#39;7b83c823c7092467affc458d7ddc2f75ffed3e28&#39;, &#39;83edd3ebfbbca05ee555289b24df8f9fb185acc1&#39;, &#39;5bbfbf8e7a2f802b2c191b914331ae98b113cd4a&#39;, &#39;ca71bdb9cecc57ed20fef18b955a5f0a4cb49a9a&#39;, &#39;83080b68f231e783dbc9c9fa7aaa9bb370df9942&#39;, &#39;8bff0539ef825dbf85163b398d25d2a56e4e9787&#39;, &#39;7f84c7365f1e32c9be03abed42bf07bdbb36997f&#39;, &#39;c62f809aae7b98d426dee679d862d76d98c63704&#39;, &#39;e05494662e8c68ec3f762aab2f012c002ef05afa&#39;, &#39;360d82ec8f2bd396181070251ae18ddab866a728&#39;, &#39;5e4635b24e232c9f4a3eddb2b3d7d7443426052d&#39;, &#39;80bec4f06fe7c0d428ce6fb4ef4b77a8db4f964f&#39;, &#39;ef97d663038f195b48031df7ad49ed7627998674&#39;, &#39;ba9d5cdf173950f650a359c5d4050f399b9d394c&#39;, &#39;faf2fa4ade358abe8f40f6159e6a870f90c8975a&#39;, &#39;df2acee5feb61aee9f44194f2b52792035ad82bd&#39;, &#39;54dc25ce1bbf0164c208ff1a7ce73f2e5b91ee34&#39;, &#39;2ae121b9b1b5fc67a8ea49066501d54293fd50dd&#39;, &#39;f6ef7aeb3ddd5f62d0496738d0f1fcf85b6d7383&#39;, &#39;736b6c2b9e1d0302226004515793c474e9d51fc6&#39;, &#39;ae40fa97460f930c32c39845cd1e57030553ec8e&#39;, &#39;77f6d72fb34a400e77b850e8a6a366858b218051&#39;, &#39;5027f9f9730894f7a3be8538870f54f5db090603&#39;, &#39;a668c0f46f213b27b1bb90d8bb48bc562aa5ddb7&#39;, &#39;e47243e38b6568205ca631d6298e1b53917717ce&#39;, &#39;bb871548d766937fc5b27aa78c766edbf9503107&#39;, &#39;a7e2af7ad7cbbdde76222899b4be29bece571577&#39;, &#39;c00322207c3a069d69e042aefbb8e4927dc824f2&#39;, &#39;d3712af38c21b8469db24b1c3bf4d72aa8dc3326&#39;, &#39;b0cc4739a771690d455063826018e7f116b68737&#39;, &#39;7a12b7041794598291775f81b4e3a9f338e67277&#39;, &#39;7ed71936b14e8acf32315a490a46cea1d224c037&#39;, &#39;d950cb1a12ffd94e3952a6c2f08fe55b6d300dcf&#39;, &#39;2d28cc0dde92aa4e9dd53f30a625a3fb4bba44f9&#39;, &#39;2aca42b3004ca1aab915acee21960b0b3db967e9&#39;, &#39;316484bc4a2fa6296484780018bfb73a863d84cf&#39;, &#39;f444931bf9442ad0a9cff09daefa063ff80fb4d1&#39;, &#39;48204f15d511248819036160e090daa3bb1c9c3a&#39;, &#39;1ca6ab55c675f1f404d51afc8f39d4271d79bab2&#39;, &#39;9d0aacbef2dd63cb62a3c8e9e2b2e93d483ff724&#39;, &#39;69a092d5834346efc3cc53aed273dcadc7d79034&#39;, &#39;0d3e0c0878fe76f818cff7705d331f638bd18e0e&#39;, &#39;c9435bd1eb994ccc725957c3087086339e13ff2e&#39;, &#39;fc843762159cf2c2afd6d22d6c9de365ec4f34b0&#39;, &#39;fe44e7fc80a0e6aaa33099862f9295b0e2f77739&#39;, &#39;e77b79b6ffb9fd13eaac6e0a3542320f57f604de&#39;, &#39;a2f27f7ff895802bde441063de9ba5097fd3e0c0&#39;, &#39;29649d4dec40834f0218b2e58b1de93bae7270dd&#39;, &#39;f8bee61412cfe30205df1fee76132e316c805571&#39;, &#39;6b7b60cec8f7793de8a7de783c647ed96668cea8&#39;, &#39;e67a4419bfff178d413bd28fa18c20755b683360&#39;, &#39;b08617642d1006092f2af0594941a97a50fee7c5&#39;, &#39;3bdba914066c61418331c4a3e02e13e64cc1b86f&#39;, &#39;77731c59fad635e62ead6f20479c3b233601b9e0&#39;, &#39;a267b763db1e937e1f985d4262f92f2fef69a41b&#39;, &#39;ea7d4626f3b99c4832e341b6d3b8f19b80711dbb&#39;, &#39;6ccf807a59c7e776fc964fe1d0be9d139eb0af97&#39;, &#39;1e46b3cba29039f6750df561b240e115783aff22&#39;, &#39;958d24e5311f06b08d0cd131e138f2d789aec138&#39;, &#39;0925756b4300f38971f200e73f1bd265f1318557&#39;, &#39;4fb67d6341f5c970efe4eeb5ed109b1b4c5697e7&#39;, &#39;9600690c71585c2e3b8f2ca9501150d49cdb24d3&#39;, &#39;eccd5d81e4958f16a31a89ee1544f0e519263057&#39;, &#39;030388cba15a8e93ce18a6dcc6f147a678d475ac&#39;, &#39;4039b50d7284f29794c493832c962d354620a647&#39;, &#39;b283d77b60bd0d4abe73cbc74ac3bb2c71cdbfc3&#39;, &#39;7652e860fe4eacac224ad7a67e0c8d6bde910bf1&#39;, &#39;aeae4d710fe1d0d6b6de5e174e5fb983fcfbe825&#39;, &#39;ab0b0149586ebaf96493d4814a598d6e37d543da&#39;, &#39;65b6142a33038ac320b60592cd65dfa0ba08b21c&#39;, &#39;5ae7c7b7cdef2b4ce5937b85464e9ce7ddf25ed7&#39;, &#39;7832602eaac7b676de2770241cf1200eaad2694e&#39;, &#39;cde151015e78b9c3b51e84d66637f4b86613a9de&#39;, &#39;e74dd095843e05ee7de7633e65cc6a019305042a&#39;, &#39;44c05500cca2b72674f5de30eda74a32c36e1a88&#39;, &#39;5460393a0d5bb08d599f7aa67ab0a29bd4db19e7&#39;, &#39;89d2329ca1b33224fab6c199508fc63df18b7597&#39;, &#39;5cb755dd2f34d9cbed06b9b870b42428a86acf8e&#39;, &#39;efb381f826a62e1022554cda776f9d1566f3f303&#39;, &#39;7263e4fa504cea83181c9e4180ea29787b3bf6aa&#39;, &#39;8184c71d17004ba953c1498db21e79c0e34125c4&#39;, &#39;ea432272905bb6d3227c7b5543ed823c78f7ca67&#39;, &#39;b1bbf24cb02c6f85a46fbefb2163fd8e47fa950b&#39;, &#39;73caefd30ea15fc47643ada9b939ff9c62141daa&#39;, &#39;8189deda6d101ff62575ac0eb4aded6c55330362&#39;, &#39;9d571709fe3e05214df8456d1e3a1b23bbf49024&#39;, &#39;163c26da52b0a124946377a2953b28ed7edeff16&#39;, &#39;d1ed782fc2ae1e8bb2ab72f1d14280d857e0efef&#39;, &#39;c5ba75f4672785b409fb00b413f22020ff7f2f9f&#39;, &#39;ffcb9a9ab24276c88d82afec7038b59866bbbd5e&#39;, &#39;694e80f60917764218690f119e2a3d893d78692e&#39;, &#39;2a587f3bd1a97bd7d2a099d7dd518d2536869711&#39;, &#39;d359ba6e7301949adf8660aa4b9e270d1b091988&#39;, &#39;a84e1f3481a2cb310f02da2f355b2d38c53a52df&#39;, &#39;98d39389b6c2003cd179766dac3b221f9cabb85f&#39;, &#39;30de0f0273b1df4d09c2eb62cf741574a8cd9cf5&#39;, &#39;0f42c08fd50d5b92869b9c8f8b4a21dbd250f2c5&#39;, &#39;f261646a6f82b5cc42e4f5dfe78e088e51d942b6&#39;, &#39;de4c41447079411ca590943b4801468fbbaaf631&#39;, &#39;6a4c81b654613922b2bfe232901dbe36bf87b36d&#39;, &#39;62ab0a792d67a8e5168f54e1af13d363e76c8a92&#39;, &#39;d21b33b34a21157d4851f54c64e58d9bf32425b1&#39;, &#39;fbf8d1be55ed78b773616ab7ad4bc7a97fec6ad5&#39;, &#39;925c10f7d7e0ef0f9c6d5c69c722adbcba255ccb&#39;, &#39;a6edeed4b89e9098d0b8c05ce46247f7e6cc3ad3&#39;, &#39;96ba27833cbde0ba353d5b6ac4dc18618d1633ba&#39;, &#39;86f5bffb577cb1145b752da5deed1d4d10db79bc&#39;, &#39;b5a4a5968061b9348d1262e497b7f6ac8d0bbefe&#39;, &#39;d7f74998d6e71b4d7ea001a61c59f3777cf92d3d&#39;, &#39;5722b61b6ca2e23dcb0515232233b025360a3b93&#39;, &#39;8d9e7294b934813d7614d075b626e43d761155b7&#39;, &#39;6aee15697ce8760d12904df6ffdacbbe22875590&#39;, &#39;2d373f14d153b9c2ba64894d190bc903e6c026e9&#39;, &#39;a973fb010f1cd022b76650a2e6495ba931bb6604&#39;, &#39;f4dc425c0160082a79237875a27f9b08729f44b2&#39;, &#39;9a302bb1b66385b979e509f2542e7c76bfaeb6c2&#39;, &#39;5025be51c01afe5b8004bfa80444593d3b4a9730&#39;, &#39;6d6d2c18a898795c48e12f29e24c8f8ff1a989c8&#39;, &#39;3692e0f4918533eec03c837de8f1e313119803e3&#39;, &#39;d362690fb6150efd652c746d2df271d389da234f&#39;, &#39;30f285d2b0ca7c4029e32703df831c7f12bda073&#39;, &#39;ce34d0ae2ae4bae4558b63f0f7fb5df9b415f580&#39;, &#39;540b2fdd84284bd96dc672ec3f400d183d336161&#39;, &#39;1049f59f1c8c107b3ed1d5fbccc5bf5551545a12&#39;, &#39;7797f93c9d72ba91e1a85b657448786d31976b46&#39;, &#39;3c9d6ea45ab6dd4fac81beb67c9df5e7feddba5c&#39;, &#39;343ea2f253c1ef446586c7f8d3a769de68a5aeb8&#39;, &#39;aafe4890fda35d4ca32c0ba62d4951d0e5ddc8f6&#39;, &#39;e389dfb61c16a3675b96724d515dc52b5681e8d2&#39;, &#39;557df87de6be50ed666cfadec5481d1d8e629a39&#39;, &#39;2c2ddfa48c4d38bfa63931a36799707c3cc9d7e7&#39;, &#39;e415b09a54667f996d3e2ed00cd1a886265086b7&#39;, &#39;46869a0ad0ce86f24fb1cb77f300502518974888&#39;, &#39;3fa3e9edc7a06be4943977270b6bf552ec3a23d2&#39;, &#39;04c7409ede2ef795672fbf1822b5e12eb81e74e8&#39;, &#39;d97497ea57704d05cd57133928897e572bbd9666&#39;, &#39;28895f3511222e7e21b420a318b0396ab2f361a4&#39;, &#39;51888fadc609282c35b864d8610fb4b0695670f7&#39;, &#39;5a9119c83c0929d46a3d8378423aa00899ad9efc&#39;, &#39;f8b109938da3d11a8ce15e766599d9e7a8ed43ea&#39;, &#39;c78234952945ec459f080e32c652bcb29f97e19a&#39;, &#39;6f2e5707704b677b5ebf9825e066181c1e70f0cc&#39;, &#39;dd97b7f21b9787500dc3b57a511d6424306516b7&#39;, &#39;0ab580c4c85e9877d6ba8b767ab09a9d3f4e33f1&#39;, &#39;08d50b24f3e624b37ddf7b3e8b966d79f8991c1b&#39;, &#39;9f3e5cd570c2deffcce42cad0f119c3fb82c8d21&#39;, &#39;9111afc3165a274b45fb0732003418f573525ba2&#39;, &#39;c46c9733388cf69c01fecd5c8bc33ce61e840c40&#39;, &#39;d61b8f1f792140547c34bd79acd7046892114802&#39;, &#39;a4bf7ae243fc610aad58c41a631f1a2784bf7d3f&#39;, &#39;62aaed47b4cdd981706778b4fa5dcd924fbeaf89&#39;, &#39;6076802e09956b9176e97801e2e8428d5df32641&#39;, &#39;680f16c31f63e1ab05b5d07e63293396c11a15fc&#39;, &#39;9c08287db3141734299f581e20f5d36b8a4f7924&#39;, &#39;7f80d04817f4666fb2ad844d60b552bda8778f0f&#39;, &#39;59b1da2b9b519daabad8bcb741ee1578c9dfcb98&#39;, &#39;2932b971084eeabe71d835d557330fdb6b80dfe9&#39;, &#39;d756f49249bca45c3aeb0dada631ac607e9d870e&#39;, &#39;60c13c1cc91b4bbfc52aa51f113664f0f1802329&#39;, &#39;53b461ca87fa354eb2b1596000f43e1f97fcb540&#39;, &#39;937643978c9214ed3315af112ccd5a9d5bfc06a7&#39;, &#39;47656aedb80a7d264c5668339d2f91b49b5ffcf3&#39;, &#39;7757794695029c30cc9b58ebe03a7c32f763525f&#39;, &#39;9da6c73cd4f2c909cc047e57439ae1ccec8b24ac&#39;, &#39;1ff4297e8140f2fc74e25a5e2f35d7eaf82278bc&#39;, &#39;fadf11541ef5b58b9de671d6262268335deb64f4&#39;, &#39;4ae26b04b001193cb1d528d716d3ed44b497f31e&#39;, &#39;57d3fddfc9e11de6e91f849cdebfe42455b7a319&#39;, &#39;448203dd26cc058edee674105b3bd4ebe838980d&#39;, &#39;1ec583f7415f10287748b9b4ded03cf146ae27fa&#39;, &#39;6bd89e47f982b710739e89e54e49a6e781e54706&#39;, &#39;de30174250f0a7e0a5eab4e2ea002c102b70565b&#39;, &#39;025d1cf6274f363fb0adcfe3340243f1290ae1cf&#39;, &#39;00afb0c8d19cd357273ab2341b61dcf1c75c7329&#39;, &#39;244a06591cb49f25c6c00f2490949ac6a1daeae5&#39;, &#39;57386fb9bd10192c7750172394c2bf6cd73dd474&#39;, &#39;32e0233610db356255a4d272ae0192b1868de9b8&#39;, &#39;d53323ffcad453b6776137817eaaf3fed8626c73&#39;, &#39;044449a4b5a1854e3362a508f902d1f96f6b5f79&#39;, &#39;ad04ae8640ac9788b95d9afeb6dafd8cba483215&#39;, &#39;96d758822a0ff824880993dcc1fbb22e853a27b4&#39;, &#39;35696c85e187cc84b8d88db93c5e6488981628e3&#39;, &#39;d9af9edb2586cae784556621cab87c6754958d56&#39;, &#39;93ea19f038de2640a25a8c619ad70292b60a00d5&#39;, &#39;d46a7c95be9aca45e8cd87cb58a9a190dcc253f3&#39;, &#39;661b4e9bae33959969145ecf5eaf6a0b8589973d&#39;, &#39;30f2cb69bd28733c9cdbe8052c07413a543d85d8&#39;, &#39;6052abd7ba562a874e79c14da9a3cdc073f2cd77&#39;, &#39;3e0fa6c4c5d8bd717c64bd59639673f395286b9e&#39;, &#39;b8294dc1e1039a6e892cf7651944401893f84131&#39;, &#39;3387bcc9e1da300e091c2efbd632e775140b93be&#39;, &#39;f94880f2118b200900bdb5f3808e8f8c85007214&#39;, &#39;69648659a9b35268a999839402955aa5d2795984&#39;, &#39;4b4af34422f26024c1e6e4207ce6005f2f9301a0&#39;, &#39;bea85add235c57a30bc48694e01cbb875d93fd31&#39;, &#39;a1e896c56244a61c26427eba513ad8b284e30b21&#39;, &#39;fb3cb4fdb4693189c9c7e1386188d8d7ea1abb56&#39;, &#39;81c0e0927f87cf70b5ee2f643b8fa4e5a9bf7df4&#39;, &#39;5ba92bb25f3ca0cd773f1ef2ff5bfc5e1e21addb&#39;, &#39;11f0da358617a81432764560b571d96b3e97c8b6&#39;, &#39;a8086100bb2064917e76e7f9541beb97ea128ce8&#39;, &#39;3e8c725e1dbaf851dcfa2e9363fb4f071d3e849b&#39;, &#39;997a2c17d018e9f1b1cee5bf5e43090da470be5b&#39;, &#39;c82dbee0c2a4b1f4a7bc384fb967d89876d40629&#39;, &#39;76498495bbf24513b474cdf95f052f03c39850de&#39;, &#39;8d9ea5544a7f3f3c2dc7b78725d87417cc1b9613&#39;, &#39;8885a3fff854fda9db039c376451b3511b35f33e&#39;, &#39;23d67f51bd9df6b13dc9baed7cb106060f424f00&#39;, &#39;dc6ee37e2dbe0463255cb1bbf884902bffb4d727&#39;, &#39;6957a3dd6b7f679d6ae77ac53b2897efe70490fe&#39;, &#39;3c3b64fc8bccb861033fa2fc020804612a7639ea&#39;, &#39;191de491ebe6a02c24f6ad7df246fbbde770eb5b&#39;, &#39;5494ec00a1c31207379601869c98df6c2507f411&#39;, &#39;5e40736b90a452a4837d4aacb74d077a22274ed1&#39;, &#39;f31f0291226fa3e3a7be08a86e20d850847af11a&#39;, &#39;717343b3b144ef15f8f8d5c8c341b627b48a355d&#39;, &#39;0bb0a97986f483deb3721b3840634d9628dc9a37&#39;, &#39;f6d442184b2da1c69e3444d9476a5fbf7f3b3d35&#39;, &#39;f220b38935df43c30917de6e61518e15ff6b0855&#39;, &#39;ce44beba544bf66131aee7cd7ee14b30bf1cd150&#39;, &#39;673e73f486558982b17b195095998f87e6878451&#39;, &#39;0752873edf13f0da78e1f23e2cb1cfbb6a0a96ac&#39;, &#39;594d9ad9a8d6ef93cb808b087d9967499640b49f&#39;, &#39;511325418684d70f03cacc0925cd403450d3501c&#39;, &#39;1e639c17a81f811ee2336f100d18eac31b4a2f81&#39;, &#39;8d40380c0e09305b797b64e9c0e1c9454d5a55d9&#39;, &#39;a955edbd4508301f118f7000bcc55851696ca700&#39;, &#39;e512b6470cb1354b72f665ec8f8cbf2c2bd16486&#39;, &#39;ca03da8410cf182387e8b1eeaf814692d1861805&#39;, &#39;0705b2709c0994ca637f6615d7a0cb6ffafbbfb5&#39;, &#39;8825bf0972876806f00fe8ef6d2a90db9afc5289&#39;, &#39;281909557491a252fef0c1e455c16c07ada5334f&#39;, &#39;4957b74e1df3f28fffeab6f06dbab4e299939bc4&#39;, &#39;dab56e8b809f96a1d43210f49b8820e310f4606d&#39;, &#39;1d3dd0a4eb636659ad4402c0e8df0a8a7a3443dd&#39;, &#39;702602df69882031a0f7b145a8642c72a0463467&#39;, &#39;b3039b581586c5296435a289e3fcfc0f68a960ec&#39;, &#39;160b572bccb0c56c49f334936c0be8f0444e1431&#39;, &#39;49ace8f074b58ca7386ded50810348b2206ac7e2&#39;, &#39;689c24c2512b1a4c170efc385f48519d1caa4da0&#39;, &#39;7ebc52f2b5ed667e626e397c2530c25cef50c46f&#39;, &#39;2d05dccb1fa7ecda7195758056a447b26068bf8e&#39;, &#39;b9e0cacc8197c9efb14b1b1412bb5007b7a0beda&#39;, &#39;f73112dd14af5026d3e04ecdd7970ff72c0d8d32&#39;, &#39;2e9374134b1e26b8d4b7a5431002f5ba276a6870&#39;, &#39;8ad7599da8f85745f5dd67538c3ae54f42eda6ff&#39;, &#39;732dc4fa8ba4d93f98e7e88727c2f1a07121ca06&#39;, &#39;d3b86d794347d7ef1c7ed6d4bfeb82e1e526b865&#39;, &#39;ee3e013cfe00ba8aa0e12f32501491cc53356bf1&#39;, &#39;2e4499bc5ddca13cf552a6b9c108cb4c74f96d99&#39;, &#39;f295d43a68df5fd7845bfb84cb0d96d14334096c&#39;, &#39;cff6136c2498a13e841a162cb825556930615297&#39;, &#39;5e2d5c9f2912f60ed68f109eab8ebbbc50fa6f9d&#39;, &#39;2911a28e766f47768845ad49cd84e3aca57130d8&#39;, &#39;12f13b8f9efcef3ed29ab8fb9077451646d3f907&#39;, &#39;1b6cc944f33fd470d6104b0a78793f80281987a3&#39;, &#39;b0d82389eb248f3a16cc68591aa56b0ea04e3442&#39;, &#39;f9f0167c29c59afed32ec1ec7ecaa3e86ebfefe8&#39;, &#39;e582fc252812c80ac682ece79bd0481afc16ad7c&#39;, &#39;41e09fd9548915e9c1beca89f17e3e399364d4a2&#39;, &#39;b66d86b480592e2f49f9cbc8899577499dbd8ef0&#39;, &#39;0b813c74bc5f9faad4681d3f0aab01802b2875c4&#39;, &#39;87b36ecc6850ecbeb3c83394d3003472770d26ab&#39;, &#39;918a0d0779c3d9bba134da58ca5c82257a6213e4&#39;, &#39;6e22a5ea70dbdcdf4552c3a970156bd4fb678ff0&#39;, &#39;8b0861b129da3b4118f05919ffcde5364e2026e2&#39;, &#39;65d6dfeab16cea65a7fdf089ded4829f4e4d515f&#39;, &#39;eb50ae9bcabdb5ea5e4ce2b492d667884b446a91&#39;, &#39;2c06dadb4bc625c55727915e9e5d918509372920&#39;, &#39;5695835e930dd1355d56a3b0979b34f29e7abf0d&#39;, &#39;b59de08c5fe94607f5b68f453ae3b0e36a6ca707&#39;, &#39;f88eab838eb5452482591da6e2d9052dc4ec2db1&#39;, &#39;834a806a6b6d2abd18b8c5b9fc0e91e874710dda&#39;, &#39;2aaa9bba83041601f37e88505f884452c674030e&#39;, &#39;3e5bd9df55ef1802b2764047c459f4f36a9774cf&#39;, &#39;0dcd517e6ad1cf9e0a19b941684c5f3b8dc9449d&#39;, &#39;67c903c61c8ab48c33ff2d3fe916894d1c637c6a&#39;, &#39;319a698b0f1fee1f50d405e3aa0a6954b6a01982&#39;, &#39;7035be4b866f870c088ad9711003a95ba571babd&#39;, &#39;5f6af131a5cd555ec617a32945a38dd207ffbd26&#39;, &#39;c53c7ae7c6a44d54ea5121d8e17ba43b5207c20b&#39;, &#39;6c40e787053f6563395db6792604a35cdf4d034a&#39;, &#39;da664cafe8e268ad74e492a1b33806ee6d26eea7&#39;, &#39;4890392d06618fa3e34bbffe861e38f35db41bb3&#39;, &#39;cfcc7defdb337c8a6d1ee0e909e884424b3290ec&#39;, &#39;bb7a5d404f4162e060cea9d566339cc7ad3f29c7&#39;, &#39;5f9e10dca8ac046c023a7508a2a1112320086dd1&#39;, &#39;fd3c75753f277277368df45dea24d7fc04ed6824&#39;, &#39;8332e857dffd9901ab96a2222cbae8649729c933&#39;, &#39;2202dbaca89d751aec04014c33729106d9f255d5&#39;, &#39;3bd7fb8e4656119996c2b20c510cdbc61808587d&#39;, &#39;82b21ced096028fe7f5d5cb8334845fc05b8485a&#39;, &#39;03baded44b7e95551f64a401de6551c7baaed996&#39;, &#39;f573b7a774d3566cf4013f51aa42a81072465c02&#39;, &#39;58ff5e6ad64ced7827e924a2e12fae6ff169c7d1&#39;, &#39;0cdb0a133bce28d5435d0076416e41bad14454e9&#39;, &#39;6b4e74cf07f889c6d29a1f32c3564f3516b4dee6&#39;, &#39;541cb53cd49dc55431d28b4e50cd5fb7eb1b0318&#39;, &#39;6fb45b6063b02d6b91f4f1aae5b86580001a985b&#39;, &#39;4cc92d96d846f4871a7a793d6f63ebaaae1e3b4e&#39;, &#39;be8b56da6b2694b45f56abf1eb0c42da55b2a044&#39;, &#39;21c67147c69feae290dee908fe9afdb2bdd1a842&#39;, &#39;518bb40ced24119045fd42428ad525700e09728a&#39;, &#39;cf838bb504883c8a5c5b61e0c5ef774e4ecef1a6&#39;, &#39;d91706e7489446971c031b525f6b7230aec15174&#39;, &#39;c539520946bf2de12f562b9b1cc2b9eb3552218a&#39;, &#39;6d563d3dc907366cb42cd6cba75b5efede968cee&#39;, &#39;8217ff0c186ef424a861708b448ae8f817856180&#39;, &#39;ee5f720b6ccf772efd9548b4493129953835d0a1&#39;, &#39;29074b28f23f74aa1e2c50b2be67a508e99580fa&#39;, &#39;7926d41ca4fc8df9bc555c64a45c8bc013fb6fce&#39;, &#39;a9778ab453a40080ea48c6d929fb5a4e203f4f07&#39;, &#39;2a25a2774c47e03ccdc4eec0c9dbb40004465074&#39;, &#39;ba1ad21439dd8bcf7407e7faa4c43214e9f5991f&#39;, &#39;11d19253c243c3818ae105047ab9b52e33d6021b&#39;, &#39;255b4d231a5cde14e6308e3b02e53b9ca16f5a84&#39;, &#39;4afa821c3e0b376b5e01471bb21a89af0e403cbd&#39;, &#39;7fb13c340e77361797824d15575ad024d6401382&#39;, &#39;b1fa34d8067b378173b06ec431c6ec9f0f43591f&#39;, &#39;d9d6361f755f0ab622fa0eeb39b1b983e4fea9d5&#39;, &#39;3e22470ebaf3bce38f5eb39a589d48348593aaef&#39;, &#39;86601526f38f209d4a266f80e3a6929b7ba0645e&#39;, &#39;30bea18d54f86f43c63d0e6510cc6a82c059b85a&#39;, &#39;da90e9987e8262533a18a41457883a0137bb8d6c&#39;, &#39;9cb75b499c4a273294ff6596a91b77f70560a1d7&#39;, &#39;a5108264645c3c40b55489798f2f90da1dd76d80&#39;, &#39;47328b4e990840296a1c9ad50108b19f735eda03&#39;, &#39;de3015e7841c5df71fdeaf3cde7fd899e7238f94&#39;, &#39;f658a6ff971b671096da1a5321b729140fab2062&#39;, &#39;67de0df907e47ad74cfec2e8e8687ca3e2bb5e37&#39;, &#39;16c32807aa017fb198590a43bdb59c3c65ed1ce9&#39;, &#39;2ba693544027704c56d97ec43c2da65c7bba0fab&#39;, &#39;ff03024f2aea88b27f7b48ae718173ca1fdafb70&#39;, &#39;00ca178fb642cf929c967ddfcdbda058b4a8ee0e&#39;, &#39;26d71237e97eeb61f3882b6d6c292ad19a34e59b&#39;, &#39;0e11482cc536d92d9327f65f80db45ec419e965c&#39;, &#39;c8a69e70ae61dad6ca59aa1ce8826691963b3fff&#39;, &#39;32925d8c8dcc30af5d317f92301d2511b217dc23&#39;, &#39;0494d8389535b1e4ce1c712d5bd831e12349a839&#39;, &#39;efe3c915cf32b35163e01fff8817319ed864ca55&#39;, &#39;d02144e689533278f26e9716a8f002de51e46309&#39;, &#39;2bffcc90ac761596d4854d8ce74602b67350dbf5&#39;, &#39;b5afa54692abae895db602f1cef3909d4bf0fc0d&#39;, &#39;dfb90caf66c6918dc7c8551c8e9b5a5301c4bcd1&#39;, &#39;4a2aaf98e653269f2f9f2a26fb1ac1df465a2a50&#39;, &#39;abac872fe31da1b9f8d05394a17bb640fb5c4cf0&#39;, &#39;c0a6c8ec158d79345f581d52482c51fe888c558a&#39;, &#39;abb6e2ea8f940c17ab77d4116b275961f1bddb5f&#39;, &#39;cf16e340b4ecf0a64a1a25e04e520c3a7a27226e&#39;, &#39;85c4174994418e193c4c941a1b5bdd1b5d7d3377&#39;, &#39;8338d66767cc1cd5dbc2e404b8f1bda25186e452&#39;, &#39;43006acc94fe704b02d6b8fe4a61f3a87ec9223d&#39;, &#39;078cc9a82888881536a973196e154c8b8804c321&#39;, &#39;4c6c93ed9958627c5d673df89c648bf2673c811d&#39;, &#39;d427a2b981572a17c0c34c0913bb4a2706fc9fde&#39;, &#39;57103079e6ed3dfe8a7cebb2177f47849f43dfa4&#39;, &#39;27c9809eaff89db1dadc9af85aef487ec398d6e6&#39;, &#39;1fc20fa28f394911f97f93af148255ca9809ac80&#39;, &#39;e9e25d9d221c140a64423bd5db33342030b2edb6&#39;, &#39;4139f238c9bf1ccbafe9d0390856f01e07a4e0ce&#39;, &#39;01086f33e5e7c3cd0983242aa1cce407dc115191&#39;, &#39;e9323eec6ddfe04ec50326d0b5b397f9b19a3cf8&#39;, &#39;126936dbaafb674dd60ca5bb6ebc6da1a2ad6982&#39;, &#39;9fc3e4e0ee553fdb46dc2a5b0285f194b87cd25b&#39;, &#39;392074d015f67a6e62cdd548cd53728d40ddfb6e&#39;, &#39;0e0a907435ba00d81a0615a6603dc82a3ae5f4fa&#39;, &#39;347da6e71232ce370d78b923abb8948e5bd85ee5&#39;, &#39;430235705663bf8780f0d55005ddbb2897fbb9a7&#39;, &#39;1785e45122c4d525b46089ec13da69b606b861b0&#39;, &#39;c7a58f1665f11cba6d92825da478a05f43642acb&#39;, &#39;3d6390c07916d6cedfa361337735d5f750eb7786&#39;, &#39;3331becb919dce4d3fa62bf17ee067ca386f4a8c&#39;, &#39;3ce6c9043499d69c09dfdc9f76e651f3186c3f71&#39;, &#39;5d817f5d9fbfcc7184ef656866a08287112af32c&#39;, &#39;c43aab6dd995dca71950a563fa94be64d8151fa2&#39;, &#39;00e53fb678770dee0160fd93bfd2c39eebfee7bb&#39;, &#39;176b874595347114779e489860748f73f2b629da&#39;, &#39;852c71791e53ac7e4a21df2bd18e58ff98c5461a&#39;, &#39;22ca8ec6130b47b9952a6fc25fdcfcc6e2b583f4&#39;, &#39;9aecf73d7b97ee3e9687327a52f689ffb687bca3&#39;, &#39;9a32e5f5171a27d62b865abfbccf338e1b0d819b&#39;, &#39;33c56996b05673820e776094fa3590561df4ad02&#39;, &#39;f389db005143fab38a28ddacd518e4f13187d75c&#39;, &#39;84314fbf77de23d409b777f0193766f7ab60b202&#39;, &#39;7b193e1f2f76873d513da31b6b4c0e92a692a7bc&#39;, &#39;4a0c8fd9546ff66392e5b8d1ce760955612991ba&#39;, &#39;056bb0bdfe70b067886f5aae7809216d6f9163de&#39;, &#39;b6670465c775eb5a3cd944f835411f4e1054e33a&#39;, &#39;a27467f754c8377fd105f31122c761ab89ebc876&#39;, &#39;a420f904077660c15293c7c8663fd8f904348495&#39;, &#39;8323cb4724b5c96ead85280b7e6f0c39dd642d50&#39;, &#39;05582e91825b4c95f6bfbbd56f41ca4d920ba2f0&#39;, &#39;173c50040321b010702380c2bef3e403e38c4522&#39;, &#39;d85212986aeeab05cdda5378116983cda74b0291&#39;, &#39;fe0c7acaadc3902fa653c38e56ea80faa61551b4&#39;, &#39;84be12cce3a782218affd8497fcd6b5c33f406b1&#39;, &#39;0c155ab0cd0004c5f3f4439d021df870f61456fd&#39;, &#39;fd1a9defb0c5c3ea95a73a338625754ff6dcaf2a&#39;, &#39;e63684516d591ef08277581cfafb1672ad7adbc9&#39;, &#39;2d09daee2cfd1b76a81c00e198480f85f80a5dc6&#39;, &#39;07ad34fb882c41f0fe6548d277e635e994b527bb&#39;, &#39;605b96bc7ff78b4c716827b60138346a5d0eb4eb&#39;, &#39;c2998692329cab4aa787e18cdbea5bef4d180940&#39;, &#39;b003d252156f738d28473145eff67a23b6eac9bc&#39;, &#39;911e143219b33922ab025c80d1878c30ebd0fac5&#39;, &#39;d06b54514be5d6e0ff8d407decaa30130f24d572&#39;, &#39;3d8764e8bd4ad817a2221582a86637674b00a6a1&#39;, &#39;2282626fa6b9bd5a868558b0c0f612575e195d57&#39;, &#39;89207325f9c04d90dcb29f2eb2061780997e0f18&#39;, &#39;ea5174fb9f489ddc61534631e3590a9bf5e7d743&#39;, &#39;c81d70884cd549b2acfbaf4e972b3f0a0cc188fd&#39;, &#39;dcdb1cbad3bfbb4d6a37ab92575a4b29aa0c3f59&#39;, &#39;5c4fc7aa1baff9aeb8ec55d6a7101d741b794147&#39;, &#39;1df616caf7e243436d68c3142aef5d0f6a5f12be&#39;, &#39;157279bdf5adce17a25ec73dfc8b5dc78a3fef2e&#39;, &#39;a7eac46947bc9ee71e04067558fef0dbc7833b1e&#39;, &#39;5c06f57ed0ea4128b89bd70486db926adcdbae89&#39;, &#39;0203f0a7771707bd212f36900d25251fe21b267f&#39;, &#39;7bedac1d2298402884e7aa8f05bdaa8a7a563e58&#39;, &#39;800f35369abd17f68a105205cae16149525dadd2&#39;, &#39;11292b7484e890835a8524b3898f9e16052786a7&#39;, &#39;0836feac45d885e0f772a8076907b194fbb4ebbb&#39;, &#39;747df2da54db41a29a13a6b80547835bded9416b&#39;, &#39;08473899ddb795ca7c0cd868a79c56e49770d42f&#39;, &#39;d8aa0bddeef214d2e27311e94b211937941adaf9&#39;, &#39;8d5fa116debc677dd495bd2bae8363072f7eccf1&#39;, &#39;aab612cca13d67492fe7db0a34befadbbd289292&#39;, &#39;0baa2f1be7f7acf6744801747cfd6818fc593605&#39;, &#39;2b415de9fbb9b938fbc4f5700a1f9e531163b84f&#39;, &#39;f292e2e4bafb5764fca6eebec26cd7932a0b1244&#39;, &#39;8260f58fa68d56d5a9e608a9ebdf9cac83bf918f&#39;, &#39;7ed89ede2136e2ae54680be7e8a38d17585a4952&#39;, &#39;69d71ea5021e21d981fc751bbd35bb5b981694ae&#39;, &#39;cb083f718eb92108cea7d2f86e6ec0741612245d&#39;, &#39;222e6bd4c578cc698d62771c9a1d8de313a24824&#39;, &#39;da53d3d6ad6efdc4e48ecf35e859352c4235b95a&#39;, &#39;7f6a4dd54bd8a4e8192fd7c322e3c9ddb998bc61&#39;, &#39;8ac7c1ae5b61052af764eddc0dcc4e3cba77d47e&#39;, &#39;7dad641d3120f9121be6025b2b6c3934a5a8ccfd&#39;, &#39;1904d00c1b7694e9c9269ec14096a5095a6f492d&#39;, &#39;97983d95fbeebf2476cbb1ec51e8af782c412574&#39;, &#39;8a41197d4ebecb463b3114411a6e530b0140d812&#39;, &#39;5c009207eafd9b2609b9216ff2005bf0c08d2b0b&#39;, &#39;b34a5ade0502cb4e21b81d0ae4616c6b46d83659&#39;, &#39;6970c633023d0fe91c8ebaa322c60d9aaf8c991b&#39;, &#39;54f9b2e68697e2259693949bfc33ccbb7b17cc39&#39;, &#39;aea0c979c2d4b011c59bc9258b355aa25328612d&#39;, &#39;e4983466ca5ed4f95f566a51a65dd418fb243c1e&#39;, &#39;19956ce707d57bfe829ac2a20f35c2d82e1d1002&#39;, &#39;83a090b41ab058db38d33ccac65e243785a41ab7&#39;, &#39;b864d73b07f0f165c896d57d05fe6942e239b83c&#39;, &#39;1a2ba5fb957d829359c9c4e4930dc3483b302ecd&#39;, &#39;fe25a22b52fa7366f01d20fb18dc4e17249d04d8&#39;, &#39;dd2bc02155f1d2d116e3491b557bece9b8ce564c&#39;, &#39;9b9f699d92eb6205134a95166508a334a81fd3d2&#39;, &#39;fc5360174626c3a30ef36854e8bb439dedafdd1e&#39;, &#39;44d17085b7ff1b589f1ceadcc89c85b81f19c9e8&#39;, &#39;947e954b31fa94aea2d2c5c960c7807f438df0f0&#39;, &#39;d13cb8a1f10503ec00b81b500a0d15ec5889618b&#39;, &#39;a9c97fdcc2e9254d21e2a5e7c55e074fcd6e252a&#39;, &#39;4ca238a1a182e27f54d0627dd32fc8d9957e1246&#39;, &#39;81d62919cdf113bfd09489f2f97d1cca93253b13&#39;, &#39;d83b2b6b89251663a806caf6b2972a2fb358db60&#39;, &#39;b08bf601160bd5cfe366fb82f5448dbdd53e39a6&#39;, &#39;5aebbe9fd34ca0664d17d96ed0eb080647fca507&#39;, &#39;6e46299d480159476b96d8ebe815388675176eaa&#39;, &#39;1e7b0ac522ec159ff0651fa1a0043fa19e2517d4&#39;, &#39;881897e783be0d5a3234aa35e1cb3bd0c534b526&#39;, &#39;dd34e5bc394b7dd4ff39e6b7c1238aed1d9bb92f&#39;, &#39;5252f36b0e98bde0f802d47aa5ae920cad33fd7f&#39;, &#39;50d16eee6b2c5ecefe692721781971867c05b082&#39;, &#39;21d478609c45b69ef25a08b24b51478f0d9ea1ed&#39;, &#39;846d1e6ca1fbbe5d8bb8296de71d140254f86325&#39;, &#39;27454283d6c3ce57d5dd6f6193f908fa382dc6fe&#39;, &#39;239d3109484d745cb57c78d24114abe2f639cd9d&#39;, &#39;fdfa916bd6735cd0eb6331d9a6ba79fc44709867&#39;, &#39;bf71186dbc59fc9c565f24d4dbd2f9fc95091f9d&#39;, &#39;b884241d182aab2b30ee26c79987a20330e54fa5&#39;, &#39;661853bf808758c3f9c94bcb2b1ee6c427ad19e0&#39;, &#39;a31421611706a6e8d97ec238b6987caf27b8d795&#39;, &#39;f54933194c66b627915d3044de080bd972aca920&#39;, &#39;64704d6c78615eafdbd88b977c573607fc0b1388&#39;, &#39;678188b17b27b08dd07e87c6a8d839dc6b8fb9e7&#39;, &#39;f8571850deba1c6b7f4a75a707dc4ad6c3edb7da&#39;, &#39;7b42b389f9623b9aa1042cd7139b5a73b68b33ac&#39;, &#39;8545191efa6584fd0f107bcf6a4ad99f974d7ff0&#39;, &#39;85e44ee09df6e8e9d884027765d8abbd4662b7b6&#39;, &#39;4f7bb0672ae6c4b9c323095a2ca186428fda4bbd&#39;, &#39;650c54422ef9ce3827c5cf410d6aa5b4c39325b5&#39;, &#39;260ebe89e50307d856f64c891835358c55313957&#39;, &#39;ea5123484031bce2e736d06ab1f899bb51ed3a7f&#39;, &#39;133b1307ce4493604e93a56fc4d083fa6b6e3d88&#39;, &#39;99afe567e514e00b8aea2d51392a89f16ea14e22&#39;, &#39;16c3ef2985497d36489282cbed86cb9c38ae0dcc&#39;, &#39;f2539c5c03ed853705628a527a736f499806fc7a&#39;, &#39;3a518040a2ffaf521798169731100248ed46e536&#39;, &#39;36884ea128b21990a50be2381ae4564c57456627&#39;, &#39;346d3a09c072904c02663bd741418c1b6650546a&#39;, &#39;5644691dc0e207adc827320c9de4425f745b823f&#39;, &#39;e740cf56ae13b96d3f6a99db6f9c2b186efa83ee&#39;, &#39;e3fc82703644d6eaf2e3bf83e3c00fb5c8eeb80b&#39;, &#39;9477b1746773a429ce5bfdc756d91fd683e45f5f&#39;, &#39;80fb35b58244a400d329301aaeb788d4855a03c1&#39;, &#39;18d3a8e76615dbeb2ec6f034b05ffaa937b35e35&#39;, &#39;43aacdb363520be371ff8c96d08ad4b408f209e0&#39;, &#39;35fb1a8ff348e9b127639062775d1a9c748d67ce&#39;, &#39;59eb4fb105969f3e3d405add03164166b542890c&#39;, &#39;f38c6f1b59cdf798c518329ab3f13689b66bba32&#39;, &#39;4b4742aeb009dcbd745a82420667204fd0b4388e&#39;, &#39;a815c9b4ea13411c34eeb790db77ac3a0e4cf220&#39;, &#39;cfef6d2818c3620341be08fee1a2d56ccd0e112c&#39;, &#39;3e0eae9f4184d5d0514a92f35281b25cb8b251b2&#39;, &#39;382e44b99ede1703bd6f122d72aa175c2c126e78&#39;, &#39;d6d1958a8b1dc0ca436e9b176288deeea3a2638a&#39;, &#39;0e4edd983d1cf6b9eb5801bd0c348a90cd74397b&#39;, &#39;716fce09711c3f8d6c446486f9a96cc69b020601&#39;, &#39;910c619140a086a6712f355c57230b8750520297&#39;, &#39;4ab4b0ba3907a22b79d7fee60ad6f85c3b7d395e&#39;, &#39;081b35dcefea8b83e45bfe48bc4b6b4bb1bc3b10&#39;, &#39;bd5be3db038005114e8963615bababb729640c5a&#39;, &#39;4d1c7a296469909d26c96c0fdb4d3e23b3b811b5&#39;, &#39;17b3e0ca0d970dc80c51ef2c052ac0ed873d0de6&#39;, &#39;8bcf09368dae28c2950994157af518a02132c220&#39;, &#39;0eafe47a3233b8bac8c5174d4f6f7bec43020c30&#39;, &#39;a9776851b27a33415e022482df0f061ba9e084d5&#39;, &#39;e03907d73b7caca17662ffb3a4c28f261885bccd&#39;, &#39;17d412178628bc34d99fffc2c065f75602155050&#39;, &#39;fcebaa72547bd483ce69a55a095d3b0e7dc28541&#39;, &#39;ba039db330a8b5c4d7fa288b6acb8256b8ca1e34&#39;, &#39;19f972e0f67032ce9954e9410ef50e64882bba92&#39;, &#39;11f35999624f529147f5f87a776282add5e41916&#39;, &#39;b869f61023d9ccce53c592052c86a8a488461d97&#39;, &#39;c7826d8578e049c3649d802a6aa128e2d9d5d50e&#39;, &#39;a8b2c630cc53ba6336d3411ef206eb1294f31160&#39;, &#39;28386d746d8e1fec8ee4a9e4fcf5fc6c8e330ef8&#39;, &#39;3de5614d23868ca321f11f343236f30778ab0913&#39;, &#39;7514ef5c72c6fb687b073391e7b57541973ba7df&#39;, &#39;96a9a57709f4f29a5df1e356e20770a31edd8d6b&#39;, &#39;4efdee0d4782a864b8bab15dd4da11fea4bae916&#39;, &#39;8e25c7953f68093a8159a1bfc385bb2eeae0a754&#39;, &#39;bc76ce12383a59368b40ed5dfae78a2dddbbc8cf&#39;, &#39;d614b2ac4060506758ae0651d02430ada29cff33&#39;, &#39;af4cfbe80ff812e0da284641c91b074013964f9b&#39;, &#39;83f9e854b52ef84f287ff00873de8c2efe69b400&#39;, &#39;b22de7ed46069da32b9ad7714d68acc2fb8e6e77&#39;, &#39;fdc746d5d5ae454bd892e4e0a00680d1dd8dc3f5&#39;, &#39;837bf6b222892baa205f78d593842423c24e01ec&#39;, &#39;9c8403bcd1289a4c91b3651009267778833b93f7&#39;, &#39;69186f4d315482157238403a662fa5532bf1fe16&#39;, &#39;955b90b1087296622d3ff2b9951f187539597a46&#39;, &#39;de94e40a78404daab3aa3409ae6471896c078657&#39;, &#39;9396fd752219fa42cdee9dc6197c7c06826dcd42&#39;, &#39;d38d68e24897d740800d8468ee5949bcf5a9edb3&#39;, &#39;30ec27539bdffdc88e79c62623a54b6a0885a30b&#39;, &#39;2801f9b3cac0fc04604a009b1d7fd85396a4aff8&#39;, &#39;5fb95c3f05cf5e9174b54c4ac5ac8c9bb7a945fb&#39;, &#39;d0eac56f0dd7981598dbcfb3ed8fc71b3e587cc2&#39;, &#39;f6d74178db57d908dd0992b03870a0ca24af8471&#39;, &#39;88632565d42d22b545627237b16c9f0f38b79b6b&#39;, &#39;40d946415c834970191c62a834c999996124ce9d&#39;, &#39;2c766fb37dedcd697140bd3dae19e015cda1b060&#39;, &#39;3bef5a8ad57e098ad986805cc8875e1fc47a6059&#39;, &#39;362de1a8de40517ff7b5af37ee6cef1f8c56fb83&#39;, &#39;c834ce1ba932b57e9857a14960a0d64dd00e29c3&#39;, &#39;11c98aef620da06c2516c41c81a371826122c4d6&#39;, &#39;94e28da352853d0b34648b4a6612300e9763dac0&#39;, &#39;eaccfc0ef3e2cb49d745ff006e639b2fd35de4e9&#39;, &#39;7986a7175a8a328f3843ea8f43a97a5c6bfe1e6f&#39;, &#39;ae58db0ae7451b0b9ce0a4c5c591c594b97e2f85&#39;, &#39;d159fc42dd1c577b9fdc41c423a868c3e9c27c36&#39;, &#39;99133a83bd3e8a17eccba41d3d0eed0fecea8789&#39;, &#39;a5db51082706e6bb356fb7a15f69a71bf60ebcf5&#39;, &#39;1a12e3c93b38f221d5397424a7052dc02050b4c5&#39;, &#39;a982d4a5ff34e40fb966aeef7b21f4e82c1527d8&#39;, &#39;fe358a37f1bca2f5a4290eee95c1b3c60ceb0827&#39;, &#39;adb927d718513f0f12e0f587bd1bd6f249cb3483&#39;, &#39;d48009f8093b0d9307aae52bd50a63673983ff39&#39;, &#39;9adc9acbfb3192327057d10fe375ef578ac0962b&#39;, &#39;ca5a642296c54f5ddbbf10296d29b37976fa90aa&#39;, &#39;12ad62cb36d07d7c5fc13e2efa47a7a754fe6c37&#39;, &#39;820859e7f6a3284e40a7e3d28184d6c664fdb40b&#39;, &#39;fa4dbf5679a1e56a58f7569f4fccee85eec7f8f3&#39;, &#39;7fce6a121f9607116b8a44dd126b22a820664605&#39;, &#39;a7b52fc283fcf97e911e380452191607b4d49f75&#39;, &#39;ddc3d891903be4aea6ac6414e03bff07e56df5bb&#39;, &#39;e5aeecea90987eddb0946480f038d242d4a81421&#39;, &#39;4f89fb40b49be62aacede9da4dabbadc288b1228&#39;, &#39;09236855d02f5b3180cfaa536eea33368ca44973&#39;, &#39;29a5d049e72233ef6cc42f5648c6384d535fba44&#39;, &#39;bfa3011eb13257d7b0c42af72f2c80b1d25bbd37&#39;, &#39;96abed0162fab2aba9d646f5063de62201b8de33&#39;, &#39;784e72542a14787743ec683ada485866a8c1f82e&#39;, &#39;19ce2778ccba3d4fc6c9f04b1fe62bd9f59d573f&#39;, &#39;a0ce36412019ff0796d7f5b6f46258cb55cda3f8&#39;, &#39;92ee80d5cc7fd11d20fa27f5a56bd3a9ebea6d9a&#39;, &#39;180a4a9ac10a266ca21d8ec13375ad86a82f5b2b&#39;, &#39;7f3d10ced67af4da0af328915e6258caa9fb6d4a&#39;, &#39;3faf35996922d0d11d80963e6242eec1f667598f&#39;, &#39;a4628fdb950b3db3021dba62ac5a526cf64768c5&#39;, &#39;c85706259576bd9627a7d91e00ce67af0ea06107&#39;, &#39;264eb534afb3ffaf187b4ac8661a89a83606aa0f&#39;, &#39;a5ef18f6cb1ba2748a14bc75bc540153e90847bf&#39;, &#39;e23ce80625b56e9a613d63e9bf214551c1fc7190&#39;, &#39;833b69d989f78eddd742ecec67d160ab4a13907f&#39;, &#39;87f5885045d57425baef5c52937cabe35f8cef4b&#39;, &#39;3f9690d8d70b69c8b21dbc6868674685b1ad7b33&#39;, &#39;65a0163c55577c891e88e46822ca85d07eccd376&#39;, &#39;5d56db6c71697a2ef8681138a11cbbdba51470b8&#39;, &#39;5e69a36304cddb7959d1cbdf2ed8faf5cabe902a&#39;, &#39;ddc4d746acbfadfe3445362ecaa23dc36531c95e&#39;, &#39;103ecdc17a91987d8645cc55300616883d001df4&#39;, &#39;503d768f4180b6c69b2e2db6ef74c177cb0c9a05&#39;, &#39;bdd9b966e4808b72e63285610f22a97f978138a5&#39;, &#39;573de85355c8bfa50f03c81d39d911ca2d886add&#39;, &#39;b89e1c28220a101e1b2761a8ad6e6534d3cb5cf8&#39;, &#39;ce1eebe964e449e5b7dbc0dab2354cd584961c2d&#39;, &#39;4a3584eac4c1278b6d109f959cb0b5f206725706&#39;, &#39;2ec143db6cd30a49732c3a78f3a87d8ea56eac71&#39;, &#39;3575e8e2d414e41089c00200e55d48c203525ed0&#39;, &#39;6676ca4c7413433658916ab8b2873679dfb6fdd3&#39;, &#39;19020b812ac9bdffe782407be1cf486fb7e03a8a&#39;, &#39;9ffc0aa91482ce19578fd5ad212716fc01adee95&#39;, &#39;fa103ddf61cb616816b481eb305e38f4535ce4fb&#39;, &#39;9f9d4f370a115bf3e3cee243382977d08a611034&#39;, &#39;d2a1af020f1165b55621455bd035f1c8984e99ce&#39;, &#39;dada198c73fb7d59e7ba4d742cd3065b6cf4b4cb&#39;, &#39;17b6c7bbf8cd0bbd508c10165718316d3bcd0cbc&#39;, &#39;cf848a074344026e38add06bf1e25959b200eb3f&#39;, &#39;73db6ab7a97845541b62bd9e1e9bc955db9c9fdc&#39;, &#39;5da5c8fcc60e6e67c070a20c4d196193e578b0d9&#39;, &#39;1ef427bc1f4ef88d9d0a46dbd972f3c2234accb8&#39;, &#39;ef45efcae4112330f1311507e11898cc27db4ae4&#39;, &#39;55d45b08adde4bdbd0fa7782209e4fd7d27eb34b&#39;, &#39;c839281f772dd71b8a56df883a9273e7be756b02&#39;, &#39;f295b3e372ee1f6d0e4547ef748a7a98ec9cd558&#39;, &#39;4ee2d26f3b784a3758d6649fd949852d1f0b59e3&#39;, &#39;ae6b91d51348025851ea3ae2cec911e2c132611b&#39;, &#39;dcaa9e1cdfdb6a6167c709a17b11524ce542ef74&#39;, &#39;738687ea9cf3b63e6e98ffc4b6d21c933069177d&#39;, &#39;cbe72f601e1fa58e9045b164073149eebab0d869&#39;, &#39;7ba37bfb6aa08d2faa4e7c66702ea3481dcb1fee&#39;, &#39;bacd4a0cc6fedc80d70ae44420f12e2cd7b0ecad&#39;, &#39;86f8ba4bbfc2b631c5e825126e21b6e4570b3db1&#39;, &#39;4629aaeb17e28eda4a8436bb60f8fe0b54275414&#39;, &#39;0aee8c29a9cb45abc859ea6ebcec181f4549f901&#39;, &#39;bd3d5248803cfc0bbc166283184b58a8842d97dd&#39;, &#39;1178ebd2fb3a3aa1d0e6865abd44ce0ad49d872a&#39;, &#39;13b1d252b059a63667aa8e1b7e1e08188c121659&#39;, &#39;f8aa6a563f1489530ad72f2bf22315f97476ca50&#39;, &#39;0c5ad1b2789441a5065ec831cec308e85d81f820&#39;, &#39;292c8361fc3c9cacda04e6e2088f0c9121b67354&#39;, &#39;f2faccced284d18c38983deefd962757e77cbf9b&#39;, &#39;8d386a613de1f14da6c393e4f79bee083174bf9d&#39;, &#39;4a4b3b5d46711690616099c30aa0044deed46c0e&#39;, &#39;7f9811b297a2cb4e4fea5eee3a8d164a5b4621bb&#39;, &#39;050e060dca20d87b1f4895544bc4f5911b293a77&#39;, &#39;e57e5360e8b5f89e30ead15a570eea46d3f925f5&#39;, &#39;e104788f74b4d669786c72c7544ddd8efced4f8f&#39;, &#39;b6420d5c718db68bc20c494fd60e872ee9156e45&#39;, &#39;adfc8d1845fd825e6142eae0fb2b43449a968947&#39;, &#39;705d49e73fff48d1d5581c0a295b7f859c7a87b1&#39;, &#39;dc4c2a03e3481f0487504ed97023562a715d3aeb&#39;, &#39;0e59a6aff8072239451bc114ae520f3ed53eba23&#39;, &#39;f856c3908d820c54c3dfb2ffda0adfa7d45dbee6&#39;, &#39;496d69877fac8a8198ee539b4a22c40261f22138&#39;, &#39;4847d0d92d52804e42c46d979cdbc659a6b5154a&#39;, &#39;9ef33fdc188059987d1171e9786186cfec727daf&#39;, &#39;25c1d19c50179be80db2e42b8826f7c9ef13394d&#39;, &#39;c7453bc3b8eb7850cb75b74b5e35ac3cb87023ea&#39;, &#39;1585ee1131fa1310cb72c601ffe5a0a611e2bd92&#39;, &#39;8a542a189e0a0f208fd6fefda2d2d119449beb7c&#39;, &#39;c337579e87d36985595348d54fbd1c2f93e77b6b&#39;, &#39;b4265e5520932b73d308905a794818b523e444e5&#39;, &#39;9e9d7ed3ad175f3785bbbe6691439bb0196144d0&#39;, &#39;8035d0340d55cb5e4b42d3180e9aaa5c2935289a&#39;, &#39;c5558ad9e842d8b2e231e598ba9872380f78eaa5&#39;, &#39;97a6570700209a3b4d3eaf9eac42e6b93e831ec0&#39;, &#39;2dec7a1ebd8922f803f5beb612fcf620ef54f6a5&#39;, &#39;555296bbf2c1a704518ac55141d4e1dd4724f776&#39;, &#39;65ddd859d9aac0565cd0474f02ebc6f447830a72&#39;, &#39;d47abeb39608ac9b26f4a046fb498fd10f4a698e&#39;, &#39;2f640b799d1ca8148e43a392441ba7ec43ff0682&#39;, &#39;67463f284b9e1cc63595b2fee55e5b427347d782&#39;, &#39;6aca2d9e2c523289fb6dc35fa0d3dedb7e351562&#39;, &#39;11dfdf0d45d6de7b4f1ba521d40e9f5a543acea4&#39;, &#39;1849728f246a3759e5a7585fc9ebbc7fb7605343&#39;, &#39;906a5467d84ac2b1408cf7f67a4aba3406fa0a4d&#39;, &#39;a9a8cc9fd46870cd05f1885d891df1ae97851ef2&#39;, &#39;72fd05c95df18afd66f9ec6ffddc71d4b9bd1622&#39;, &#39;f6a424b69ae4ab727b683680280b61741ac2a784&#39;, &#39;4a590617eb00d456182ddd626da25c16551aa590&#39;, &#39;11ce9e526b5440a41baba560a26a6e01ab27ec03&#39;, &#39;8b2e068f9c93085dc10ba2eb06ced6afb49c41d3&#39;, &#39;3168704809ead794255955839cdfedb6a0807a43&#39;, &#39;d504ac4d7efbadbc1c52e58150a12c86b97d2017&#39;, &#39;ada51f58cecd253105599da7924cedc90e4cd928&#39;, &#39;02ef16d62d340b4f1f08bb63f090cb3037583ed7&#39;, &#39;3167aedf41b58509eb8f055eabb48483761a0c6a&#39;, &#39;9aca467bb6bf39887be3d93354d300bb87bcec05&#39;, &#39;d1e29a0073e4c4427036d0d4f9ae4a67fba2a6a6&#39;, &#39;c52ada5ade2adcb1b4b52cd77cae23f4a329ec9b&#39;, &#39;c490c17ec55b65ea017d365d632282814bff0f66&#39;, &#39;830fd20ab61688bd481e53ae31f282333bb6d405&#39;, &#39;21b14b55a65893326e1e48e0082eb1fea8ade2f0&#39;, &#39;094ce92d73a9af1c397e4c9605bfd0df1292c366&#39;, &#39;3b0982ca194df6a9ad94660bee85d75d598eadf9&#39;, &#39;f0be097eabe5a5935e1a90ef74489e1c2fd6ed19&#39;, &#39;13c847580c2704712f3f83fa1414cd3c525a9a31&#39;, &#39;a8bdc54dde17f4393e47860aa6ba315a381e68fe&#39;, &#39;d1252e8c62ef22ad2e67a2b03879e9a112bf2f93&#39;, &#39;8fb2b5ab43cd703217b980c4b6881b9cfca3a6a8&#39;, &#39;6ffa38322c5440d3a62268223ee39d2415c202e3&#39;, &#39;bf7c7e6133c80079a1ccb274c0790485d03072b0&#39;, &#39;5c23c82aed497c8421ab43643687b4d5b8f00347&#39;, &#39;abfd69d9713c9dda1ac15db42c2ca0a2de518fdc&#39;, &#39;2dfc753cfeea79ea5949af8f63383e20f1b7b61c&#39;, &#39;218af3f65d64632732e8b0a6cddbb7141e5d42a9&#39;, &#39;d352fb06d83a82e70a33b45f369e230a55db3d9b&#39;, &#39;44fde5e6ed2d8212716f3ce9e0d2b2aeecef6cff&#39;, &#39;cb132595f5d051ea789eb7cf7d172e58dd811dc2&#39;, &#39;562034856d5e89db1543714649d62811e8f65abc&#39;, &#39;243e9676b8e01c296d8e2b488e66371d451e4e01&#39;, &#39;33ae46088dcdb07fe8ea7df8b08f1db2c5a97149&#39;, &#39;87b243ae2907f048c0b8e3f303e8f791ad392884&#39;, &#39;acebff739e5cb08dfa0051b480911eb648f3a9f5&#39;, &#39;52883b840ab80e9a19e288a8ce614ae5f6be56a7&#39;, &#39;fc5115919dd17c63a34719bbe09fb4145716021e&#39;, &#39;5ab179acb669e3d7cb2ee27b4e9c29875a84ee64&#39;, &#39;bfb93575bb57581efb776b47b34cdde6b0444d9d&#39;, &#39;33859d8e2e9c85349e8d472a0c3f24ed938db30f&#39;, &#39;a9e1974a74931b62e3039ef499755bc598b64f66&#39;, &#39;1749c9a38ee4ef9334bf117e18ecf9ad19074d42&#39;, &#39;6c3ace07c1e39e9a6c9237c8ef191fb4e86ad302&#39;, &#39;82111d5319bb26d94076a0ef4d18a3b3c17093b2&#39;, &#39;ef77192d043b4b616775dbe6a82e41e5c68865d0&#39;, &#39;008f56da2bc129e446dac6622a0c07990a77249b&#39;, &#39;21ce2dabac48b01c8b1c35cb191dffbbc1769fac&#39;, &#39;614bde06e129fea19b6c300819e981805996961a&#39;, &#39;b37d3dbd8a6f4ae820eb337d159f700e2c9699ff&#39;, &#39;ac7003b2e34b004c87ee166e8ac9942eb8402b39&#39;, &#39;bb2aad2a603c6e1b8dcbf9db23217927c3a13937&#39;, &#39;84ea05ab6b6d26fb194e6485661d8f8b52c8279e&#39;, &#39;d8e7bd946f43c064b698dc78fb2f108ab94c9d2f&#39;, &#39;a45a8e0f0e9d3c8c969d8f436a8fd869ba040cc1&#39;, &#39;669a34dff8331a1eb00a89f637237afff84eec2e&#39;, &#39;faf9d2c39377a97dc82d38d43ca2765848e58af3&#39;, &#39;86d00bfd3f99539fef1e86c147498dc994ca6c15&#39;, &#39;154ba65d63272d0c40dee179eb8f83718fb209cc&#39;, &#39;bc45b8b0752e3c3cc0b100eb60ec406bbb877107&#39;, &#39;daea6c264b03f2003c12679936e19b461c6b684d&#39;, &#39;85fc6dd1a18ed93bf4fd96ea8489f195d627a455&#39;, &#39;aade722e25d3943cf2d7fb2ff89dcdef8df54e48&#39;, &#39;df2b2d82487c7de27f676eed320cd145048fcd33&#39;, &#39;efd89461b4a490393e8b94201508fe5c8a70fec5&#39;, &#39;172772cb20fcd7089099ba8ade18da6fab42d74c&#39;, &#39;868aef09f14afb690a5cfa8aad027387d49317fa&#39;, &#39;789757a8ad901c03a2f42ad3b32c97d71060c2b4&#39;, &#39;330d8dda26cae312977d6edf77ea5f88ad52209c&#39;, &#39;c4c3008f516f66eefdaa4b1fa94d95bf69457e6b&#39;, &#39;19467c7b489332fbac32b929820d1af7533c933c&#39;, &#39;92031713f651f3c88f3cc49c4f336c51dbcbd96d&#39;, &#39;d42809f88275adb05cc8ffbda0016b46bd11b5e9&#39;, &#39;8a6e9af90d36fb3fd112a31f406c638d58acbade&#39;, &#39;3c23978cfcc0dc0f8d01e02f6642cbe300b051d7&#39;, &#39;6dcb5d384841eb3af015bf6f5b7c8a7e42762181&#39;, &#39;d032121624b4efdcc91118193791dd34b6aafb84&#39;, &#39;e40b2120aca560a95c9ccc897db1d11800111ffb&#39;, &#39;8d9a66a3283b57ec2b41e47cc5a5d83af6664524&#39;, &#39;a69edfe5772ef4e9b73f563b48464a8a693cb3b4&#39;, &#39;fe9d183b5a09d9c60118e51ca26ec4dc6303c501&#39;, &#39;71806741ddb72652c116366b70094bb77948b8dd&#39;, &#39;cebbf68c715339a140b38b5614cd29fb653323ad&#39;, &#39;89a9181bdbb80a20a18e65be19d66b80a4b1bbd6&#39;, &#39;67b4789aa819326584d292135208017cc86ac8bb&#39;, &#39;48fed39c55415f734ca4d37b7ade2a5ed5cfa989&#39;, &#39;7fd07bcd9ef56e62103c797e00e1bb04219351e9&#39;, &#39;560cf28b9c4a5fe3e71759bbc792071d98465e17&#39;, &#39;e152e23247c5ed063c58f524ef8d31b303990fd0&#39;, &#39;8bc9f4c347674c7e7757a5ad7b1fd0c6cce8a687&#39;, &#39;2091a0a86a4c06e5d28bfd3d774fd78414f11c64&#39;, &#39;32e131d720931ab980ed8fde39e8233909a5b7c3&#39;, &#39;492c2d2de0174c952612bf79e1b1ed5306c37776&#39;, &#39;801546e051cdc69745f2a9c432b4ccff219e8ce9&#39;, &#39;0b552dc3ac6e74e848be39e19c839284d07b5965&#39;, &#39;45e249a69b516d0f9d54a1d6834c74a7d5386bad&#39;, &#39;0b5e8307ba5d5d60482f0f833f019be2ef23f652&#39;, &#39;5cbc39e678899264b46101713994e93d4185f36a&#39;, &#39;7057cd8976d24b86a903aaddf1f1ddbb423033da&#39;, &#39;574d4d253105d7c0a500c8aa4374b8a34e86a657&#39;, &#39;0b66f15506c35b0b3b29b4d2267f54009ef581b8&#39;, &#39;42d413567247672e8f9e3877c024c7e956ff7f13&#39;, &#39;8e56f7cc2bf6cb9bce650257dd3b08cf750555f4&#39;, &#39;ce6ecd1dfcaa129fb6b1bf42ef200945b5053a29&#39;, &#39;05b553a435d8e142c81067b56f49c486d3d406ff&#39;, &#39;4cc70757436c5b61c33ca501ef818cae623f64b7&#39;, &#39;562f46dc06038ab4b212424454b0f210a32ee1db&#39;, &#39;9ce25583ed0fd21148a7f182e4276e64ea60eef8&#39;, &#39;ba458dccbee7570be7abcbfa7431de363dc3b17b&#39;, &#39;170f0f802827a90f18b7c3b6e173bb48a4d8d103&#39;, &#39;dbeece2f8cf3da92c0a1f825447037c5e422e851&#39;, &#39;571b22a28097c1e7341c774cc528bca0ad04d3cd&#39;, &#39;4a574631175527ae46853b75ae0c64f8298b3a52&#39;, &#39;f66dffda72ba805fd90e7c92f950ed2015707bf8&#39;, &#39;f4c640f147abf9902d807e05cfa4cd5b54f36c98&#39;, &#39;2aeee068ef12482c355b67d3558782480e877426&#39;, &#39;7c68d89d08350884fa8b3135a297c859ef9312c6&#39;, &#39;c2b258d0ed082f846dad90dab49dd634d533b315&#39;, &#39;235bd31fbba5e80dc2257456a388a61b0b1233b6&#39;, &#39;cde0cddb429047b2b0c230a4e24a9337d2b0f667&#39;, &#39;e8d45cd02849376295a58ec40bc6b06fd91adcae&#39;, &#39;cbfe88ce61e59cc427563566c3d798a7c6926367&#39;, &#39;b247f13e0e8201143227d7fe7e04c3a4779c74b2&#39;, &#39;110f09c0498162e338bbe78fde683e889786b382&#39;, &#39;e9d73a3b96da147df96cfe7bb37b061688f5759c&#39;, &#39;f4e35f88fc0bdcc7612bf36573d7036db650ea74&#39;, &#39;1c353285b635cc54d39d744d1f3413e60a37be05&#39;, &#39;499e6814e6187e61e8a5306efb81f1efe02bfe8c&#39;, &#39;0a9f378792a91db112567453e7ba05bf9686730a&#39;, &#39;e7119c44e9aa612ed79e0bd90a47366bbefda7dc&#39;, &#39;5665a48520d5eabd73b9764a3fc00b08a3e0bc24&#39;, &#39;a0d96789a3c5b8914bf755dc1b5e66d615c09eb3&#39;, &#39;89f8839fedd2f49ec657dfabd996b4d741d2961a&#39;, &#39;86c71334b6b1b5e2d2cb5768442f1e63b23c6a68&#39;, &#39;2b0eccc1d7864ebdd9ee9325e3e1136c1df01cf4&#39;, &#39;af4a5fad4b9b826c0b2e993e04872a1d31d0ba9a&#39;, &#39;7b3128778499bca2ebcfe569c44db771d962a74a&#39;, &#39;f0c586344e40b165c9be03fcc6e902e15356dd45&#39;, &#39;db56bf6b734fd3e65d524c39a26284a98d7c5fc0&#39;, &#39;c2a799497ab67edc9c3b8f94787efcab8e9ed9c2&#39;, &#39;f4adc6abfdbd8d53cd600c320dc7be0842e8fa5e&#39;, &#39;79db28b1edb97d9b46ada8fcbfadc4729e5adb6b&#39;, &#39;f168c8ebb5c4e51d74db23e44408f59550a158b0&#39;, &#39;160e8437804915d6c1097602044a5d261ed04353&#39;, &#39;beb5aac7fcc7ed9192057e29993782743b185cde&#39;, &#39;ee0f3515fd7ff0aab0ab8bb7bc3c479c2aa114d6&#39;, &#39;9a9ff9e333db956f9f928400d73a91558b62bcc7&#39;, &#39;1fca0580b9e16644fd3ab05bcfcb3543b8e763ff&#39;, &#39;ebceec68d28c08abfa225cc962ee7fce81f39cac&#39;, &#39;33f7e70ded200054e5138ad5fd6ebd1a4a562182&#39;, &#39;4a01348b6acf0e7470e690841e78e1fed0b3aa73&#39;, &#39;0474eabe0cb362e8a5529520f42031a1ad70e69f&#39;, &#39;164eac96f86845d1e628e21062580c4d5a57164b&#39;, &#39;711cc139c23980fc47487e335d51dff7bde202d0&#39;, &#39;9d76be84cfe58c00d39170785a4f6bf596aa9aa2&#39;, &#39;3f755f2f5491bfce0371fe0f520c126f8d1d834e&#39;, &#39;61d6c7546aa63c1d066e354ae7278f5cb029b995&#39;, &#39;549840bf9368b56846557549af9d1c01fcd4bd35&#39;, &#39;ed39955de63c4a3e4e355860c196c3b6467f32e8&#39;, &#39;a5b4c782d0fff4b0431272536fec6a26b0ba7742&#39;, &#39;99fee4e15379deeb0baf5abdfa767d3ac9d861c8&#39;, &#39;bc3c0d9f2e881e5c8c28ecdff83500faf735f556&#39;, &#39;e104731f752a97121f50232b684c43b6805a73cb&#39;, &#39;8e79e22b8e9e5d972cfb8be2bc383619f5f90eb2&#39;, &#39;f88df381393c192d3ea16a9ba907de585027e369&#39;, &#39;0a5f3fc5eb37b2d9b39c30eb77b764df23526cda&#39;, &#39;36a3e62b530c1caf3f7a7b6d5f06e361b5a1ec36&#39;, &#39;dbb609782bb147e71901a7ad06b775fd6c00f55e&#39;, &#39;a5b6f7d10e9ab22ea499f1d633e942a1096f7480&#39;, &#39;744c863945bed44abd0eb9fe29d82bf210a117b0&#39;, &#39;f6ad5848b801e392db0a2411f21306d3c98d4db8&#39;, &#39;bb9d4876c48396b7ede8b405c09b7538f974f8c9&#39;, &#39;5b9f0e5dc9f7cebdafd78254885494d1818244d0&#39;, &#39;75abcd3f07de74ce9002ba09f4a3c8826a28cba2&#39;, &#39;895fc54ba5aaa59818e3deae7bda7b7355cb036e&#39;, &#39;d182d44cdd3c698978e53f3683bfa7bec00cb8c7&#39;, &#39;5e58b94f8fa6f930fd12edb87a3c43a07d29ddaf&#39;, &#39;76e286413a98d92ebb693fd3e7eeff2a43c503f0&#39;, &#39;4cac2ae0f5d5d161929bfabf277294d1d86e9aec&#39;, &#39;4fdff5524de5494c363d5982e25b28e28f734db3&#39;, &#39;7bb0a4fc0debc173292da1e8c72fdaa646286f6c&#39;, &#39;23540ea497c5948b7c7631478760c7f7a8d9651c&#39;, &#39;5608a107d540ee35c2ceba3b8efca7a4794cd8a6&#39;, &#39;4c438ac5359614a4c65360d91cba3fb83ae69260&#39;, &#39;d3eca294354362cfae1ef329743ef4678e559fc4&#39;, &#39;9a3b3dcc150052678077ec29e9bc7e565241be99&#39;, &#39;0c40ac93a1ed7f21490dfe1f8553fd27c7e5e5f5&#39;, &#39;effbddfc9130dd017637ade05125e6eef340c531&#39;, &#39;14b66e790f13e7ffcc859e166986d4ff0037f78e&#39;, &#39;9cc1700643950e5bc66d6a4350db63fce337e4e7&#39;, &#39;b4c08bde56d9edf3c07e129de5c4864213c7958c&#39;, &#39;ecbfca4bb7e9d10b3d5b39492d8cea52cedbc501&#39;, &#39;afdb8406ca92af56cf7c826b23c6dede303ebd36&#39;, &#39;f37335e883b3860ceb8fbcd4972d9f7df9dfdfb3&#39;, &#39;4e648e4ad30a6e5164efa7f2a9a02cfb21b49437&#39;, &#39;8a7165009305d88081b46bf1a3efd7d71e5a86fb&#39;, &#39;d19fd0e989768350459a80efd0d943b2859a82ad&#39;, &#39;f9a71df4bf299964336366344cdc2b259e203298&#39;, &#39;d8ce5e8c5ab63eda98ac89176188642449952fa1&#39;, &#39;d6e5ce3fda01df1b9b0573e466c9961fda1f5bff&#39;, &#39;11e000d824667f48bb28ea4c10c4f61465d21e46&#39;, &#39;01b588f579693fbe009bafd7d435e790198dbc15&#39;, &#39;067497c088ae3f0d7724c40c023883ae58476c2e&#39;, &#39;f862e2e056df49c3ee00556320ebbbcaf5b86c41&#39;, &#39;0867ca8432deea5fd118e3f6b09d7321a8d645ca&#39;, &#39;235fd7759bc0e15b7ed0a61feaa3f3d96ad4e963&#39;, &#39;93a1d0a68140f6db5be53970aa04a9b143c8adfe&#39;, &#39;6e9b5002a1a8c3ec0cdea5666e464daa67fe520e&#39;, &#39;aa77e2c148289822076488c9c145f9ca3a8aac32&#39;, &#39;b6b3376f9157e9b98872ef0f96c36d419319807a&#39;, &#39;adc783db4fbe1627f11fb394a175c3c2fd6fc26c&#39;, &#39;e092e334a9df23d9eb57e0ff54de0a1b4d69af98&#39;, &#39;d60247bddb4e1784a68697d022969ec90cccb1e9&#39;, &#39;8db6b3d74d1f0e3b0c437705711b36f48a77304d&#39;, &#39;e7cbb520c268af89c4c50c2756c87121cf89c1f1&#39;, &#39;63ea9fa8adb2e639b9b0e1561b732f69fc41eb01&#39;, &#39;14c355012fb661a0a5716d06b577833d4961dce0&#39;, &#39;6c746b56bf774313cbc87d330e5940b5142ab134&#39;, &#39;63c936af727a4b84d4fc20d7601f33aaad369d8f&#39;, &#39;b33dacc0d43e01add96c71ca2ff00415b736d0f2&#39;, &#39;adb905c53b63f82f2666081102ac32aa7fbc00e1&#39;, &#39;ed27eba7b464f98f9118b07f5d7fd0c08fef2fa6&#39;, &#39;2a45cdc894bf8037db34e3537a9326ddf8dc05a8&#39;, &#39;27c9e296bc5a21a9118f1722359fda2662f3b5f0&#39;, &#39;f21e3abfc752f622a759d933495f18a2bc6cc466&#39;, &#39;775dd9776ec5fce2ac7b43957523857c2cd6528a&#39;, &#39;19f4c597a87e66fd4146e2eef1c38b726bea1847&#39;, &#39;6487bbbaf7f0a49c421ee06a6b8349ed39f5414d&#39;, &#39;ca5390f86f5a47ea72d61c0dbd522d7184c96866&#39;, &#39;ed18cd844651c61f07ce310e634399b41f5e300f&#39;, &#39;819d29f57366c1de795650e05e33783ea9036763&#39;, &#39;263718711ce765cf0b6fb21c553d0664b26d4dbb&#39;, &#39;77b6646009d9c4ea8d4bf252a8ad46bad49682e8&#39;, &#39;b38aace066f61e006814dad39cc2d0841b14cae3&#39;, &#39;466c68a3b43ceac6b0e73b67a23327644d62f1ae&#39;, &#39;5926486cd2898d90ef8a26b41b025ee7527f92d2&#39;, &#39;c37e3273e7e757773ce24ba11aff84a41d2eeaee&#39;, &#39;c96c83e3e620ea231358ed6fcd69b360c61f2c9b&#39;, &#39;2d99bf74b8e29e894eec39888b0698def373e1aa&#39;, &#39;551862ae76eded3160d5fb8fb9d28f180a12ec73&#39;, &#39;58e213af50d39195c7d2ecaf1c6dfe4305e7b1fd&#39;, &#39;23038fd357514ee38af20d10eef24508172a63c1&#39;, &#39;c82c79f55d6867135fb6250e32a7a3890f97469b&#39;, &#39;89371f21c5c7474f24d8ce9f8f85c2bd51879b21&#39;, &#39;6af9c4349c96093a59895c3ead3cc00b3f0f1503&#39;, &#39;d78df817f706bea9ef797789f307a09469adb4a0&#39;, &#39;14f9a1db7cdfdb6f3d9f24de0a01a3ce27c95660&#39;, &#39;77b7553af50ad7450cc3561b61e135ab6cffdd85&#39;, &#39;114ef1eef60840291994a20c8beacb49a5c576f8&#39;, &#39;61ba6d81d3dd1ed01b340c5dd606f70963619f81&#39;, &#39;961644d2c873c70ec781b83749d506f0f9be89eb&#39;, &#39;86abc8ddc4e2d670ed0b1b6bffa8767d92ecd9a6&#39;, &#39;95aa5830fe630bdfb8cce4af3e1cb2472754eab3&#39;, &#39;602844ecf1e46cba14832db1f3a039318150dec7&#39;, &#39;263123d8e22f5e3ddfb2d67160917321badb67ae&#39;, &#39;44bcf1321d5b9b1920a4177df606c2701b5c2b80&#39;, &#39;f0f8d2b2e374b9f470edfd6b8eef774ad95c0208&#39;, &#39;11f0baa69d5fec2074d38df1ff4e3ec5dba7494d&#39;, &#39;afcbfd187dd87a71f27afc226367e3475e559dc5&#39;, &#39;a3dcc1d7df8671e1417870d4a9e59ec9ca318bfe&#39;, &#39;69728c5a0901ec4650fd1fdd8ab371bb12a1d9ce&#39;, &#39;8819f40b85e830ce88b5811b7092be3709dbb9e6&#39;, &#39;14370fccfd7c9615f1263debd323d517d7b01ba5&#39;, &#39;b1859e4a72a41fb71af74dbe776c119be6499d51&#39;, &#39;46a187320060c970f063171662fe7d940c3e8e5d&#39;, &#39;a1787c17eb8d75028fe15238440ccb49539fa17c&#39;, &#39;f13f40dd125864596dd0ff0956c077c4fd2e34a5&#39;, &#39;de38061bb2ddcbcc3fa2a0771aa5a1408396d66f&#39;, &#39;1097e026955967fdba56dcbc9bed6a3a5ae72746&#39;, &#39;06674bd46d8063f8be2bd665cc62df44eae1cfb1&#39;, &#39;6234538fde97e686d205e1e55d81353e9697804f&#39;, &#39;4b4d9dcb232af5bce6cca95190fd39adff6bc480&#39;, &#39;ac0d6d430874e3ff2239509d4dec3ea80cbce038&#39;, &#39;44c94ff0998ee074146f2b593ed76cfdbaa71a50&#39;, &#39;f872d1b8366fdb25057560bd6c227846780b8304&#39;, &#39;ba3a53a0e76ef4fc28d5afcbebc07874daf8bcb2&#39;, &#39;9eb9669d8a5ce5a6079a451fed02335d11a6c7a7&#39;, &#39;9645b5321a97f7eb798a8efae91baba01e847ef8&#39;, &#39;0704581833f78f4743ad7a143472474775d64c94&#39;, &#39;442066d751c80e4f6f5369c2f7b71c994e58ace7&#39;, &#39;b97c95d3dbf340234d5fa1312a53e3801263c44b&#39;, &#39;15328607635d352c1fc27601df2672523974e685&#39;, &#39;62a1544459ffb07d1193570d59f0f5d7314474c0&#39;, &#39;0f1c924a240e69db0de9d8d3b56dbc01ecd14b3d&#39;, &#39;6fd81a64774c98fb250b2255d74eba9d0c425a23&#39;, &#39;2faf34d7d80e95bc8ec61b7d688292c01920eb71&#39;, &#39;b52b7c28b5cce075bb9c96374dc1a269380bf664&#39;, &#39;cd02ccd077c7cebeb7881f9cde2eea380b07a22f&#39;, &#39;882c7b833b0d6aca9b15915d33cd9244b8d8f332&#39;, &#39;5c0195dfdfcadaa87a68d60f068481c1d6bd24db&#39;, &#39;e9e5e8905885e68ca2baf891fb1b1942a51a8c0c&#39;, &#39;6ecbd923704c25c2eff56c6d84d48df2bf54a11b&#39;, &#39;fb95e5dad9e823879f60b02dcdf7c6516fd8a3f4&#39;, &#39;7dbd45eedfdf9562f7fecd1d96f2f0397f321a2f&#39;, &#39;1934290bef74bf635c9c84952c1f64acbaaef330&#39;, &#39;2cd013ee861dde32acb5b5b1b903881649f3b09f&#39;, &#39;1ca3e08b38206dbfe125b5b916b4bd89e7597e30&#39;, &#39;446773586b18dcd40306109f7bf41d7fa3cb9e2d&#39;, &#39;a1075d4bd14531352328087d95ae56ee1476565e&#39;, &#39;1a519d97b3179cb1a0e64f1fc57695e1692a88d7&#39;, &#39;4027c490750489e257b0f0cf894c3bb87c37ba68&#39;, &#39;9306fc1406691dc866f773dcf18a3f346238ea9c&#39;, &#39;a1e1e95247bc53d9f09182dd7ca69420524f66a3&#39;, &#39;5b1be34db08759a8b933ff116a724989ce8dd13e&#39;, &#39;eed4a2ab9886d0890c67eac2d3505ae064fb5304&#39;, &#39;2eacc7f79a219baf63f584a5f332e2dcb42f1719&#39;, &#39;70517f18485dded36fdfa4f4363cf744e63a5aec&#39;, &#39;567c4cdb747c55bfe403d52a109fc0d50bd0d233&#39;, &#39;83f696692ff0a2ea591ce0f6a0eaca995842f584&#39;, &#39;1017e0b570a97a5ea23f43fd43615a8c75c69786&#39;, &#39;ce28c2ee45afdb2ceb52f041c161e68eef879899&#39;, &#39;cb740f381f910d20e476f4417b30ae6ab6d14306&#39;, &#39;8b521edb1508a39fb3d528ebf2c55629b69ab88d&#39;, &#39;0f5130a1a185ab4ca2aae92e29f6cb5e08e6ef1d&#39;, &#39;92e6a5f6748542cc527c3cab427d3b598cd92fe5&#39;, &#39;91cf2d6f8ed7aec57d91263ee33417af8440bf2c&#39;, &#39;e051e904ed30b29e457408dc54a3469a31287dbd&#39;, &#39;2850264286380dec3cce5c5bc5c7c196c9d67d09&#39;, &#39;8295c0cda6cdeaa34fa2aceac57d70128f89c050&#39;, &#39;12e72d20c3f8cbfb24c0ce022dc3e35ee531dd5e&#39;, &#39;4a3acab22e82c883ebae0da734b3ad5ed0a24edc&#39;, &#39;5154a003c7f48c06c9b91d7eeaa0b6424b1015dd&#39;, &#39;9e1b23e5567f9028bf5c9a324761b7fc3da72bce&#39;, &#39;4f5ed343f0928bd99ca65a472e1d55672614993f&#39;, &#39;f4195c0dc839e5b3f0722ccf3781729af8d7b40f&#39;, &#39;0d8ebb93cdd79672fe0109b1a2cd56854f82d745&#39;, &#39;adc2ea81561d80a44c8bc8deffa91aa355b5a702&#39;, &#39;50332d8a96d991eeab758305cc7423e6f741afe1&#39;, &#39;ebbe3983400553c5aac5f96522c0bda94a2ab0ee&#39;, &#39;9996d836ce7e12d39c704466e251b87d703a345a&#39;, &#39;9b748c566d584dea799af56eb7233bb2436b4f48&#39;, &#39;dc7419212480c1a6d447c3e9b19a507589ce5ef3&#39;, &#39;fd0bb18d099a2d0a1b3691758998226f17993479&#39;, &#39;f129ea25f4b5c65cef3412ef1a050a23a360a3ef&#39;, &#39;32f26e911a7cce966ebcf3f0fa005f4c47199d1c&#39;, &#39;97e15bce158ff4900ead7485ddecd191f48df820&#39;, &#39;69e74f52952342d2881fa2fc48e91e944a8aa287&#39;, &#39;cccfa49568a6b71b28e17baa8f787683e9f5a844&#39;, &#39;b9f4b89f1bb64759a2ee24c6c98b78c75d6df20d&#39;, &#39;a75f36d3e688ea40b506e8d24c6ac26418412603&#39;, &#39;5d26beaed62604db2650f0ee9e6e4bf7b2107ae5&#39;, &#39;3db53f23dc85199324c18bb0d3cec1ba03f5e879&#39;, &#39;15113c31e6c2f853d36a97d0575a27fb43db2c95&#39;, &#39;a5ece517a14bb395999216c81afed38b1d560027&#39;, &#39;a9daca195bd26fa530de857e5fc2529f1dd57f5a&#39;, &#39;b4d0e1980d063a911177f6ef5649572fd316817c&#39;, &#39;d7762d182f7fb994f5c372a17adbc6f26627b845&#39;, &#39;73f09928e1bdd9334c7cd1d5ad7b931002a3fab2&#39;, &#39;c32fb5bf16aeddfdd69764d3e93ac51c7babe119&#39;, &#39;cb46b54e1e64316b7bf9bc918c04bedf48a7f52c&#39;, &#39;b1c5dfe4c4fe6ffdf401a82828c1e5d1db227ba7&#39;, &#39;9931d5f37bf3d90350150a965cbff11c8f7e9b6a&#39;, &#39;2f73cbfcf451805f20fa45843add9956c85dc677&#39;, &#39;4529c40838f5f6dbcc1a0d7061984eb35cd33692&#39;, &#39;3b7b027bdaf44cf7c414ce0400734de7a5ca7b9c&#39;, &#39;33d397ea1131c788f4b3993887af4d67fa6fcfd4&#39;, &#39;7d6ebd6b5e80fd6fbb2d6ed3faa362086ecf68a4&#39;, &#39;f2da5c1481df3d59ff05b80b403204ad92dba032&#39;, &#39;72d766eac243681a4a2ec62938dcc0cb57f69042&#39;, &#39;f281d193d031aaf6dd812f761d11552e46e85105&#39;, &#39;40d6bf8bd045178864432c1af700d5edb8b8cf03&#39;, &#39;8a4ff1e5d370f3e19b39974f03612b67a353a180&#39;, &#39;085ae3345d934272945b45d06b02a8bae8125a66&#39;, &#39;ccda6f411e6cd14bfb589db09f0892261a899cda&#39;, &#39;0c7538eec974f491fe055e96b04547d6b97b08ff&#39;, &#39;a7c1255751a1810f6cd0c880f4556bfccc5a66c5&#39;, &#39;b350b299c620bbc721c18bebddd759db5d6f083f&#39;, &#39;32c2992e5ab645559bad653e0a65286a2fce9e0b&#39;, &#39;4d1d59644a4e27574275aa02e7a9d43c64a82564&#39;, &#39;2b53ff98afef75e8842e4683be5bfd02be65238f&#39;, &#39;dcb5f167fb5441f011c12297abe6a3bdb3a83dc1&#39;, &#39;27455772d32439cac288a8abb5010dbfc3e4703e&#39;, &#39;616d371f93b28fd6d04c6f23388222de3c60612b&#39;, &#39;84b109d9f212f7fc5124d72474c53e05db898b8c&#39;, &#39;fb254a5314e34dd7696d8935212b9e84bc84d18c&#39;, &#39;9e58e9bb63f16612cd6bc5f91e06a91d70c2c643&#39;, &#39;81d79b06d91b01413afe684fa807ce69814d6abe&#39;, &#39;7accce8621d6850e69929ce12ebfa9e8bfce0887&#39;, &#39;0f64a7df70d7ec2accc14a02de1629e8768652ce&#39;, &#39;4a1fd1d033bfac438cf3a6d7f78dd41bcbf81e23&#39;, &#39;e4968b44e99951279f25c4662212f3c16ba1ec1d&#39;, &#39;8a14b77c3f223d302b316986839342e45ad99d92&#39;, &#39;685fdeffcb9a896b0f499f721933dbf01334f877&#39;, &#39;143ad3e31051294aa9727888f0e66cf728b8fe6e&#39;, &#39;3a0d15cd789c85c011cdb2a1aa694b138d0ddb53&#39;, &#39;8133022729b8cbcaa03a01572da3129b71a9c491&#39;, &#39;a1c6d9c6b577a3c07c7d8146ccd1a317338f3e7d&#39;, &#39;b7f5f50c0ea832f0ed810a51d7c99a3fc03a1512&#39;, &#39;eda778f686c9a39d33e96c8b9d4a2a618c742320&#39;, &#39;ed423f411075b700d9b948ae42f36de17b285e8f&#39;, &#39;c855904420f0ca66b01654f10c15c556f5efbf72&#39;, &#39;b15b9fdfa86276c7d6f64bd6e4aea909623b8f58&#39;, &#39;13a28a09f919756963c69fae9cd60399c0bc9b27&#39;, &#39;70ba31122cc8984ff5a509e394065a91923f7901&#39;, &#39;6ab794c5ab0e41e8ce14053666665ce4609f212d&#39;, &#39;3efaba0b75ff37f1e0fbbb9408f0ac8487da65ac&#39;, &#39;65216cea1ee5635c009b8799f6924017ea716743&#39;, &#39;62293365aeacf8ddc475339ca3bc14886914f208&#39;, &#39;2677aec83bad4130c5c59b95cd201ce0bc1fa14f&#39;, &#39;c40e777377f754781f6017fcb78e0be7c52b07e1&#39;, &#39;a9c272719c6e54031d6318cdd8887c41094a74f2&#39;, &#39;eb778fdeb98724e93cabb65c3111ff7ac0a32eae&#39;, &#39;817f1ae7b1d9d4203d8752efe5a945bcef45057c&#39;, &#39;b305d379211346b75a17027bb53cf9a86b798aa2&#39;, &#39;a17bf70d76e963c3fe601f8880fdad8374760d9b&#39;, &#39;cbe71d5a87bddd6637d1f84778ef5e0e9b39058d&#39;, &#39;19d3f58884283e68b1d1f2e5ea0a680c3d3e5f68&#39;, &#39;e33db62220361df0b2b72f6ef708b0d66837e31f&#39;, &#39;c5c681c33001edefbfbf1ce26a2b97003b3c1d05&#39;, &#39;cabde1c9f1b1f85600a0f047fa694c32440b86d9&#39;, &#39;c1bdba4107b6a732bf1b48d8814d6f4fe61b4a98&#39;, &#39;a6fdb357ace68ed98587e4dd0f583129efb3ab63&#39;, &#39;c3b94944534c13848c35be1e95ef481a5c9c77dc&#39;, &#39;5827ed2afbdf37e815aafc9621c1d821e5cb3c64&#39;, &#39;6a7c546033b7e6411dc7c8a2a084215d3734ba13&#39;, &#39;9d6208c7395b561d2ba9c65ba7170c05c1a404ba&#39;, &#39;d50bdc241d7e0b780467f5264d95c7b52010b77c&#39;, &#39;a8fdd36810aff2df4c8a656c077503a84f04ba14&#39;, &#39;9905c108bc885e771b64b63cd171e21a5d6ccdf1&#39;, &#39;063f072fe69ddc47ec8542e0b0a3aa0a9e073c15&#39;, &#39;d2710e2e60baf3933486d117f1e0419fc756bfe8&#39;, &#39;67549614082d60f572b9ffd0d2fe7166f3e46824&#39;, &#39;501085e3aac356400516573ed660d957871266c4&#39;, &#39;48b9ec7f9d8e0e454c432aa392423d603b826cd3&#39;, &#39;3f78b69e360eb282d14be20b7f053110d8357e98&#39;, &#39;101a1fe7a5d3d0cde8db84e55100d964f06d49bb&#39;, &#39;588bc40798ca976195a88fb34fdbc3f2f1aad112&#39;, &#39;f36139d7eee750491d6c492945380e08ca550a50&#39;, &#39;894a12fb97072776c047ba637908c36b83fcb8a4&#39;, &#39;a391d21b8f302b1e2c44d03201647ed1bf30549a&#39;, &#39;b80cae3f884006a0e36705cf71412da2e6a635f4&#39;, &#39;7996d4f844a4d5b7de1ac18028a41716c480945f&#39;, &#39;0a55bd6c9e682f2f8f526795ccc9c88aa3237f76&#39;, &#39;790420bb58dc462393d6fc9d6385949e677a52f0&#39;, &#39;1508c706a4e5653ad9512fff78b83b2192c06ccd&#39;, &#39;f7d2cd09d4279e4e91fa23c54503f36e3f9928fb&#39;, &#39;93d2a34d60efda3d24b07beb5c4e1c168bf49816&#39;, &#39;586abe705810f8c7c001d1242a56ccbbf3289871&#39;, &#39;56998b9f45502e656aa02db77654f1b60c4ce056&#39;, &#39;14017494b94cf5af302926eb7b25848a0c042097&#39;, &#39;10587ce7d4de312908324d77c9a6e1de34b895be&#39;, &#39;3d7c3e8d39ac1cfb66d259f139dd7a889095db0e&#39;, &#39;39f9fa19392cb47949477ab907f1165ee836b875&#39;, &#39;2be0eafa0596eb2b3c4eb041da590a5b1d44bb9c&#39;, &#39;acaa2819d06bf0db6183e5b92ce68ecd97f9f65f&#39;, &#39;2c6135df747abd231bb0eec1bc380db82c2da655&#39;, &#39;5e1c275a6dcce6270951edb3f1d8275b78d0721d&#39;, &#39;a6b5fe266c15a2ef5a14f25b205a33c075d7b0cf&#39;, &#39;ab1a9aa5b4340cbae4eb8b74e2c92caf150039be&#39;, &#39;ca862f86c41b8956e940ff704c31d6634d7598cf&#39;, &#39;dd78fe9e66eddb19a8cf67c66c542a1f901a30d1&#39;, &#39;bdbdefdd1278fdd28a45a2052da2afec876bfee3&#39;, &#39;541e1071522b6de745f2c32d7ac73b1bfc025061&#39;, &#39;a735eac0aef1a7a509658e448eeb78071b24bb09&#39;, &#39;64f0bb996f0ccb3ec10ce430f29e049b81558c7f&#39;, &#39;0e5b1a0d2ed452329d144e447b0a5fa237f2fa97&#39;, &#39;73fb51ed09a1e5344e72326d697e42d5fa744566&#39;, &#39;c10a31e912ed4724884f900cdc36fd1cd73ea295&#39;, &#39;069f1b795d32f33822f1b544f0c4de823d69c90e&#39;, &#39;3926682bc33320a872988b628f4a09baaba30b85&#39;, &#39;6347c041fb3148edd1ac8e61741bbc86b11687be&#39;, &#39;3efe30b4c1e64c4c46a2996cef7dd5c2178e5791&#39;, &#39;198136d67cfb2a298dc6c72e99cb37a2d6aa41b4&#39;, &#39;113441de39085140a255f328bab1d624c6413241&#39;, &#39;4a2cf13f2c6b9f856e894af019057faecc4c4279&#39;, &#39;6aef195d4b162ded72195dad4bbffd537ef57162&#39;, &#39;e6c10b365898cd5b667c3530990d089a111b7994&#39;, &#39;fc6290be45eb3a728a6f564ebb7233209d75d969&#39;, &#39;54ae41d3a1a1b3ab94f495d07bf8daca8227c935&#39;, &#39;5e354713222841009d24540022ae159097757157&#39;, &#39;95e848a705d4a5919d16e5a9ec982a6c253fc272&#39;, &#39;db9c6874c8a71884e84ee38cf2d226d1b8a44137&#39;, &#39;ee46de8666d75dbedbef929bbd8caa21df5bd702&#39;, &#39;06ab20ceb26965c70bfcacb05bd1b1275ec9b3b7&#39;, &#39;37af31a614b2f72e43a19499b70a7a848faa2b95&#39;, &#39;38a8fd67ed9efd22c82a5873c2d3be86a9d7d7c3&#39;, &#39;5032e46fad95b61a05e14d5ca9ab6626febb8714&#39;, &#39;f3004893c3cc0ce2573cd1791e4d53a61a580ef0&#39;, &#39;572fd8caaeb9c5ac64db65cfdbb5375d2a34d12a&#39;, &#39;aded691fe7abc9628d30d8612b5df8874dd202ee&#39;, &#39;a35b4c798cae029b12748160161e251a842b595b&#39;, &#39;af96776515f66d5237266a78c56cdaf503922cfe&#39;, &#39;f6b2764e303d072b1b76bafa9cdcbe06ee88884b&#39;, &#39;37ec363c45f911b238f0f46499331a143f59fe48&#39;, &#39;379e9c561d5181b262580e267317510339a3bd2c&#39;, &#39;e909452e10b7df7b6a57cef05541c04a87fa4479&#39;, &#39;8070d21447cd20d1e51b93e2e34323340fb19bdd&#39;, &#39;f20141829e9c3785edc171e285e3f2607a119915&#39;, &#39;0c6d99e966b134ff84410a013eb604ca109532c3&#39;, &#39;ca1b3da394eadf1e2e811569525b9d3ceecf94f7&#39;, &#39;9c0b1fb7e2bcacf6c407665214685389d93a9539&#39;, &#39;2feee0f695b2e871e2c5c7b3ffc424a6b67bda16&#39;, &#39;5c167b7c407c2e7c2adf47695723c08e03d0fb2e&#39;, &#39;631099a25cb3440f2b9f4665882c8102a903d3e7&#39;, &#39;4cca546f0e5add0affd2f3bfaf263b1d11907b8c&#39;, &#39;d7c537a35a661b65ca71f7f7cb297a532146a3c1&#39;, &#39;1c6be0e3d3f96ee4b86da9a55709b218df54ba3a&#39;, &#39;bf126601a467b6bec0363a25cc26b3d909a2e6aa&#39;, &#39;95271f135c85ff963e0b660c932ab38a3da6aca2&#39;, &#39;c4e9131ac73da57817f1c37164bb641444f5e693&#39;, &#39;5b9f32b13141cc50cb3487e48984b881655eccd9&#39;, &#39;88433c43477f0ca78cb653032181a75788d7c1ed&#39;, &#39;d2e2805ad2d1f66e7c2fec1494581287c62bcc57&#39;, &#39;e85d91b58212211f76f094b41e15784d1ba8e4ef&#39;, &#39;eabd627ea607aec27ee1f38be581660aaa08eb67&#39;, &#39;4dd1c97ec6195b3f1369aa104b3466ec92e1c1d0&#39;, &#39;bea2181744eca7f3520d2f4a333b14f63a725bea&#39;, &#39;facac539c5f43096edb0178fdae84203f832c9e3&#39;, &#39;8b78f7ff94acaa1522e8fcaa2eea23aaf454cd18&#39;, &#39;b03eb516fb89881e4671ee77ee14999cbd1aab01&#39;, &#39;88aec9d9b0b929799252b49dc366f0fff76f91d1&#39;, &#39;86036950a25709d76e8e3d108469ea8932449ab0&#39;, &#39;cff8bf148a81f0bd838b2817944a1af671fd38f4&#39;, &#39;977c81740ae4ea02d150c346a47b225a0589ba01&#39;, &#39;7a30a8ee80c6bd187d2dd2f8c86bdd1df7690b4b&#39;, &#39;4bac3080bc7d16d3f8ba1749af8e2967dfb3f114&#39;, &#39;25b0a752a667a38f450ebbae290fbf0f88f43f36&#39;, &#39;6929ac98142439296dc78eee51db3e8a0e56e609&#39;, &#39;eb2fc285f03dd087c349a6a40fa1f208a6af5042&#39;, &#39;74f6a0018bd4d80f27c788725138b7731e3af6b4&#39;, &#39;89aca89efb599e43317f71b602834589dc05935c&#39;, &#39;d3ac2cb59f3d8f31eb88d083484374f8af77619d&#39;, &#39;24dea081be450ef2e44c71094c0caaf67c148d5a&#39;, &#39;5ad77443447f1545ad44d28139e9a97fbbff20bd&#39;, &#39;abe1e551cf12dd3a509d33a85db4b15957106310&#39;, &#39;a96e5267b9741d458b987c866741a93a2a5f58dd&#39;, &#39;4ea924ef117b3dfec85685eed869839d722264d1&#39;, &#39;30069c1a55869e3d92df2b4e1efa430d1b0a10be&#39;, &#39;e34a004b30ecbd769fa8eb5e17fd23138db8bec4&#39;, &#39;35654b5c0377d71b9199e37a023e0cf3ce217aeb&#39;, &#39;8dadfa2e7fecabb0b1fab74f3a80293f8d122c2d&#39;, &#39;b8108a5dee0d78c9909fa73da19452adc16ae2f5&#39;, &#39;dd423a610d90e6f9440f4f26404d75e25c81db52&#39;, &#39;565b4c272706dbd2fd4b2b5fed0a5ccfd0e506a5&#39;, &#39;8aedcb40e836817299ae4297e6988cd3b4b02e82&#39;, &#39;28b382dc49f89a6c8741a53af6f3cf1eb3cb1321&#39;, &#39;026450fb6145e59b5e2c70b46329947999a81cf7&#39;, &#39;e5a9ae73ace6284116ae33c908f129e75e09c100&#39;, &#39;a59353080d5817c174b6bc0f3518dd1aa0876f81&#39;, &#39;02a302078c86c4da5660c891b2a61a0f665e4b15&#39;, &#39;cac435266cbe71e46e7647b4f22c43cafe11db27&#39;, &#39;8c722e58c5e681348ba291a8ea8222f8ea303511&#39;, &#39;70f227c7f2f7a7b6601958ea9eb4eb6a16711af0&#39;, &#39;5e6a57e0db60bc397151637fbc3e9912b8b21d4f&#39;, &#39;00a79efba94d8fe04457c4b3bc1c6ba5ca844a6a&#39;, &#39;359fea0d2aa28b0b339478a7dfa002e8c9bea42c&#39;, &#39;094347c80832fb39cdee3eeb4d5151b7d517c5e9&#39;, &#39;e08b6f7af1d64a8e468c8a58bec0129d1a4eb533&#39;, &#39;b2fefab46813c655fe7605164747bfa2449cf18e&#39;, &#39;4b653c000317ade5a98d11d0956121936139b446&#39;, &#39;33bcb16ae61d7c816dc2cbea7980b86008518884&#39;, &#39;01ab5d7e1ea0f7b5c672a93091ee2670c52f0267&#39;, &#39;f873423c2d0fa15e26d922e1a2fa8cf283c8b51a&#39;, &#39;d9e20cbbbf18a01b406c7121636bf2766018ed7f&#39;, &#39;4ea04ea2ba22bb0b756fc65fb2778124fbcebd38&#39;, &#39;c2b2c8a345ca699be5b6f8aa1a347796b5869f0a&#39;, &#39;61b80a4811d846ae74932a077ae1d3e326871d58&#39;, &#39;42048b00f674a55fccea962ab3dcc21866f54d48&#39;, &#39;8fd48aaff98dea899b05caf34be7635c64d77a36&#39;, &#39;5d33266ed64667e18984333564546853792dead0&#39;, &#39;4d8adb98b1c2df17d340b12541ef506f6378e165&#39;, &#39;2ad9195237add5f02bccdd436cb85c365e8a03d8&#39;, &#39;1e65715bfaf38a167ecdef81fde7aff2ef304638&#39;, &#39;1c8ab6cb69b1479d7c6cef9bf647ba2638a2a26a&#39;, &#39;0122aa9b27c95dcc8acd2e24033cb6289deecba9&#39;, &#39;3607b9c41f930c0fedc3763da2f7c09f4e636db9&#39;, &#39;2bf31b5c19741df565671bda0121626dc9d7d2c0&#39;, &#39;c82aca5a0b158d994198faa5db81f531380d8d9c&#39;, &#39;d498517d27d6af09e43dd1547bcae45470c58ca7&#39;, &#39;7a9c51d1060405fa5eb66f8645ab80d32e2d29ae&#39;, &#39;1b6881cb2ff62183103589fbacf351266ec81a50&#39;, &#39;1611fd16f5e0b81ec4f6bab802a7fdfe66ae0924&#39;, &#39;0f49e375a8f6a62baccecbf840917502ec490ce0&#39;, &#39;53e3bb347bfebcead1d92738e2d4f01ac0057d16&#39;, &#39;cb637b261b633ae3021adc27a2614058d6f94185&#39;, &#39;208979c3381da2dc95af2eceea5623db1207d387&#39;, &#39;64c1c87990015c28aa56798f8d61852434dc37fd&#39;, &#39;6c01be1fefd109c7e2e6fb907f74934a3fc80469&#39;, &#39;4fd8c5f57fe81a81193c3960c583e64ca6ef54fc&#39;, &#39;c3e800db6cb201cf33655fb249f857f6c2a3c7c4&#39;, &#39;8f4cc0422649898b64ae0523dc4847ff4e8ceb3b&#39;, &#39;4900a4a89624aa8da703092e19162448e1e00ac0&#39;, &#39;f72c47ce23c02c3d0e26ed42d6f609c95012f756&#39;, &#39;ba56710c0f40e99a1040ae0b9a4daad5be64a976&#39;, &#39;b9ffe22631233b294108d008464ee1b30673643f&#39;, &#39;e868d8be3ab08cfa2d1cbb42bd28e694a2b21574&#39;, &#39;c4726848e7a5a31be793c3592617cde58ccb6993&#39;, &#39;6e940ba95b50a7a07fa1e8282766b4cd195b2657&#39;, &#39;7f0c62d93e47707f1a27b89111b7bb2972868215&#39;, &#39;23e8e0cd6377504d1fc042d0b466746e675792c4&#39;, &#39;738e5365cd765b3ebc8e9764d1841934823ed10a&#39;, &#39;2a88733fc4b0790599a7fbadf040f8edbb681468&#39;, &#39;2479c8be5222a62eb3d4c2da1acb362824069375&#39;, &#39;eb7d61d11178bf839c89bf29ad437cfb196b7949&#39;, &#39;ecb9bd5ef4bd3f5de2024a2826c93ffcb148b29a&#39;, &#39;4ce1ffeb7366d96d53ed8791c7275bf433b81658&#39;, &#39;82fdbda2d01e4cebd532abbd657f36bfd67477c6&#39;, &#39;bf86354db7f583969f39bdd94989f97164571b39&#39;, &#39;1d2a41bfbc8efcfddd1a12e7305fe797a76973b9&#39;, &#39;1a15c268b568493e06b348adfdc3a9daae4af50b&#39;, &#39;61521f077f18c7251c24ba1c1e1a6fc597304712&#39;, &#39;286100b069cd50a87ddebd615d739a6bbebef25f&#39;, &#39;d2c120deb729697299fdd770a78c45c0d6e9ce35&#39;, &#39;9bfcdcb613a091bada2c1dddb9adfd901a11fdcf&#39;, &#39;af266c8da5225d701b95a60c9b44041396ef09bf&#39;, &#39;ad70b54f1d3c2ffabbfac2523a234b1c1a09bf8f&#39;, &#39;1b5364bba8a9b0832f28c48472dd1abfc709757a&#39;, &#39;41f889d5a0dc4c679628e64d6feeba8b367a38c7&#39;, &#39;9af3ffa202b4b3f9e3befbeddb2802882df71d4d&#39;, &#39;bd7a9172bbec5ef13b2aa0cd406e1c6826ea2fda&#39;, &#39;3e565b620b78e6cdb287434f8b3efaeb851bf651&#39;, &#39;94c571293e0bb145c6d4164687d7b6edf4595e32&#39;, &#39;79234f9b76b6bef21dd2d56c697ccd402dc7f32c&#39;, &#39;967bd010aff4302baed7b9b492841694818e1b8e&#39;, &#39;ce0ac647ba5511b9d0c4f74a76763a6128cb2d66&#39;, &#39;bbb7f821aef4a0f9fbc0e1510cab1f33adf6159e&#39;, &#39;5133200d15cc774ceea899e3e3ce1876463486d6&#39;, &#39;5b6d75708c36934f81104cb940c9dbda2bb23e83&#39;, &#39;bd60757a17164fea2933d559502daa4f73ceba67&#39;, &#39;5f2a7f5fff4dafc9efb4da6940101dc573c4aeb3&#39;, &#39;8857e88ed049a2ff6ca3276472926d61d15783e7&#39;, &#39;bc140036234f254548e85fd7b5fda88c8107db98&#39;, &#39;c7b73e7422f547c0a38e1951595a7c64bf223eea&#39;, &#39;89ccb5eaaac632d665ace9fa1c98b7fbfd157cb1&#39;, &#39;60ec1c4fa4c00c94d32eec17015024d795d29bc0&#39;, &#39;046f1dceafd8e45f6f53ce8c2df006c676d2a30e&#39;, &#39;4c11ed43c75d825a06e792ff1950d1024bc761bd&#39;, &#39;148a394f3b2ea42cf32e4e1010e1d6fc7894be41&#39;, &#39;70b828dd5ff635609fa4231961e86743f050ba00&#39;, &#39;b0c37adc40ad5db60c8d79c847c9f7715daff15b&#39;, &#39;88ba0ef9b2a2b5c787cec9e3871bada6a52d2c2c&#39;, &#39;7e94eaf963991d8a441fba48872e6fedf8c6fac7&#39;, &#39;7ea1d0c224c545559320b51761aced2d7c76c47b&#39;, &#39;5d2b3988daedeaa020d77a06d5d96039ce6a8dab&#39;, &#39;005c88a8df0e09a2a9fe9979037016b349e25be1&#39;, &#39;be9814a11555ac30ca3219c1a45ca17bfb1a2679&#39;, &#39;27dd91680df011f0c1e1687ad680ab48adf9667f&#39;, &#39;d5fbe38d5a56e11d0f90415405d301360257b54c&#39;, &#39;daff04b268c5e484e879b458b907e7f8c5235344&#39;, &#39;47022b9783c2dfdb1c349481997b1fea99ef116f&#39;, &#39;10c0b97f7e6fc042ce8bb5eb1c4f39d51d6a0dea&#39;, &#39;f67cf10e76d6adc2e6393377a2d724bb975e46ee&#39;, &#39;12666db920031320b79ad3c8ba10a73ac68dff7a&#39;, &#39;516cb7b485492956e34727b8b46e9a10de648d02&#39;, &#39;1129053ac17c49a4e33526c8dc9838eacef929a4&#39;, &#39;b895eb17c694c5cc190eda069e90c84f5a32306c&#39;, &#39;302a45d08f1b85336cde1b8d3d2de9b9fb89bae7&#39;, &#39;7ada920b0a542dce9e4c765e322b8a79d9c689b7&#39;, &#39;8602084739e1e09dc56c9053c6c8e4cf2d8cb899&#39;, &#39;215ea9e78fa7235be7877c354866b9fe61d6d439&#39;, &#39;f1537f2533ef0af186446587951d4270675c3c80&#39;, &#39;48e70d24b29681f9702db96ce4a89a401dfe67a7&#39;, &#39;6a521e1d2a632c26e53b83d2cc4b0edecfc1e68c&#39;, &#39;6a521e1d2a632c26e53b83d2cc4b0edecfc1e68c&#39;, &#39;dd41b6e690b45d7c079226d8be3285c736467346&#39;]&#125;

Process finished with exit code 0
</code></pre>
]]></content>
      <tags>
        <tag>bitTorrent</tag>
        <tag>protocol</tag>
        <tag>p2p</tag>
      </tags>
  </entry>
</search>
